// Generated by Haxe 4.3.0
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
Math.__name__ = "Math";
var ceramic_Lazy = function() { };
$hxClasses["ceramic.Lazy"] = ceramic_Lazy;
ceramic_Lazy.__name__ = "ceramic.Lazy";
ceramic_Lazy.__isInterface__ = true;
var tracker_Events = function() { };
$hxClasses["tracker.Events"] = tracker_Events;
tracker_Events.__name__ = "tracker.Events";
tracker_Events.__isInterface__ = true;
var ceramic_Entity = function() {
	this._components = null;
	this.autoruns = null;
	this._lifecycleState = 0;
	this.id = null;
	this._data = null;
};
$hxClasses["ceramic.Entity"] = ceramic_Entity;
ceramic_Entity.__name__ = "ceramic.Entity";
ceramic_Entity.__interfaces__ = [ceramic_Lazy,tracker_Events];
ceramic_Entity.prototype = {
	_data: null
	,get_hasData: function() {
		return this._data != null;
	}
	,get_data: function() {
		if(this._data == null) {
			this._data = { };
		}
		return this._data;
	}
	,set_data: function(data) {
		return this._data = data;
	}
	,id: null
	,_lifecycleState: null
	,get_destroyed: function() {
		return this._lifecycleState < 0;
	}
	,get_disposed: function() {
		return this._lifecycleState == 1;
	}
	,__cbOnDispose: null
	,__cbOnceDispose: null
	,__cbOnOwnerUnbindDispose: null
	,__cbOnceOwnerUnbindDispose: null
	,emitDispose: function(entity) {
		var len = 0;
		if(this.__cbOnDispose != null) {
			len += this.__cbOnDispose.length;
		}
		if(this.__cbOnceDispose != null) {
			len += this.__cbOnceDispose.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnDispose.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDispose[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDispose != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDispose.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDispose[ii];
						this.__cbOnceDispose[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDispose[ii];
						this.__cbOnceOwnerUnbindDispose[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDispose[ii]);
						newCbOnceArray.push(this.__cbOnceDispose[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDispose = newCbOnceOwnerUnbindArray;
				this.__cbOnceDispose = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(entity);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDispose: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "dispose" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDispose(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDispose == null) {
				this.__cbOnOwnerUnbindDispose = [];
			}
			this.__cbOnOwnerUnbindDispose.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDispose == null) {
				this.__cbOnOwnerUnbindDispose = [];
			}
			this.__cbOnOwnerUnbindDispose.push(null);
		}
		if(this.__cbOnDispose == null) {
			this.__cbOnDispose = [];
		}
		this.__cbOnDispose.push(handleEntity);
	}
	,onceDispose: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "dispose" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDispose(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDispose == null) {
				this.__cbOnceOwnerUnbindDispose = [];
			}
			this.__cbOnceOwnerUnbindDispose.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDispose == null) {
				this.__cbOnceOwnerUnbindDispose = [];
			}
			this.__cbOnceOwnerUnbindDispose.push(null);
		}
		if(this.__cbOnceDispose == null) {
			this.__cbOnceDispose = [];
		}
		this.__cbOnceDispose.push(handleEntity);
	}
	,offDispose: function(handleEntity) {
		if(handleEntity != null) {
			var index;
			var unbind;
			if(this.__cbOnDispose != null) {
				index = this.__cbOnDispose.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnDispose.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDispose[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDispose.splice(index,1);
				}
			}
			if(this.__cbOnceDispose != null) {
				index = this.__cbOnceDispose.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnceDispose.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDispose[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDispose.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDispose.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDispose[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDispose = null;
			}
			if(this.__cbOnceOwnerUnbindDispose != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDispose.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDispose[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDispose = null;
			}
			this.__cbOnDispose = null;
			this.__cbOnceDispose = null;
		}
	}
	,listensDispose: function() {
		if(!(this.__cbOnDispose != null && this.__cbOnDispose.length > 0)) {
			if(this.__cbOnceDispose != null) {
				return this.__cbOnceDispose.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnDestroy: null
	,__cbOnceDestroy: null
	,__cbOnOwnerUnbindDestroy: null
	,__cbOnceOwnerUnbindDestroy: null
	,emitDestroy: function(entity) {
		var len = 0;
		if(this.__cbOnDestroy != null) {
			len += this.__cbOnDestroy.length;
		}
		if(this.__cbOnceDestroy != null) {
			len += this.__cbOnceDestroy.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnDestroy.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDestroy[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDestroy != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDestroy.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDestroy[ii];
						this.__cbOnceDestroy[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDestroy[ii];
						this.__cbOnceOwnerUnbindDestroy[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDestroy[ii]);
						newCbOnceArray.push(this.__cbOnceDestroy[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDestroy = newCbOnceOwnerUnbindArray;
				this.__cbOnceDestroy = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(entity);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDestroy: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "destroy" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDestroy(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDestroy == null) {
				this.__cbOnOwnerUnbindDestroy = [];
			}
			this.__cbOnOwnerUnbindDestroy.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDestroy == null) {
				this.__cbOnOwnerUnbindDestroy = [];
			}
			this.__cbOnOwnerUnbindDestroy.push(null);
		}
		if(this.__cbOnDestroy == null) {
			this.__cbOnDestroy = [];
		}
		this.__cbOnDestroy.push(handleEntity);
	}
	,onceDestroy: function(owner,handleEntity) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "destroy" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleEntity != null) {
					_gthis.offDestroy(handleEntity);
					handleEntity = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDestroy == null) {
				this.__cbOnceOwnerUnbindDestroy = [];
			}
			this.__cbOnceOwnerUnbindDestroy.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleEntity = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDestroy == null) {
				this.__cbOnceOwnerUnbindDestroy = [];
			}
			this.__cbOnceOwnerUnbindDestroy.push(null);
		}
		if(this.__cbOnceDestroy == null) {
			this.__cbOnceDestroy = [];
		}
		this.__cbOnceDestroy.push(handleEntity);
	}
	,offDestroy: function(handleEntity) {
		if(handleEntity != null) {
			var index;
			var unbind;
			if(this.__cbOnDestroy != null) {
				index = this.__cbOnDestroy.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnDestroy.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDestroy[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDestroy.splice(index,1);
				}
			}
			if(this.__cbOnceDestroy != null) {
				index = this.__cbOnceDestroy.indexOf(handleEntity);
				if(index != -1) {
					this.__cbOnceDestroy.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDestroy[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDestroy.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDestroy.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDestroy[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDestroy = null;
			}
			if(this.__cbOnceOwnerUnbindDestroy != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDestroy.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDestroy[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDestroy = null;
			}
			this.__cbOnDestroy = null;
			this.__cbOnceDestroy = null;
		}
	}
	,listensDestroy: function() {
		if(!(this.__cbOnDestroy != null && this.__cbOnDestroy.length > 0)) {
			if(this.__cbOnceDestroy != null) {
				return this.__cbOnceDestroy.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -3;
		if(this.autoruns != null) {
			var _g = 0;
			var _g1 = this.autoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var _autorun = this.autoruns[i];
				if(_autorun != null) {
					this.autoruns[i] = null;
					_autorun.destroy();
				}
			}
		}
		this.emitDestroy(this);
		if(this._components != null) {
			var toRemove = null;
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(toRemove == null) {
					toRemove = [name];
				} else {
					toRemove.push(name);
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var name = toRemove[_g];
					++_g;
					this.removeComponent(name);
				}
			}
		}
		this.unbindEvents();
	}
	,dispose: function() {
		if(this._lifecycleState == 0) {
			this._lifecycleState = 1;
			ceramic_App.app.disposedEntities.push(this);
		}
		this.emitDispose(this);
	}
	,unbindEvents: function() {
		this.offDispose();
		this.offDestroy();
	}
	,autoruns: null
	,autorun: function(run,afterRun) {
		if(this._lifecycleState < 0) {
			return null;
		}
		var _autorun = new tracker_Autorun(run,afterRun);
		run = null;
		afterRun = null;
		if(this.autoruns == null) {
			this.autoruns = [_autorun];
		} else {
			var didAdd = false;
			var _g = 0;
			var _g1 = this.autoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var existing = this.autoruns[i];
				if(existing == null) {
					this.autoruns[i] = _autorun;
					didAdd = true;
					break;
				}
			}
			if(!didAdd) {
				this.autoruns.push(_autorun);
			}
		}
		_autorun.onDestroy(this,$bind(this,this.checkAutoruns));
		return _autorun;
	}
	,checkAutoruns: function(_) {
		var _g = 0;
		var _g1 = this.autoruns.length;
		while(_g < _g1) {
			var i = _g++;
			var _autorun = this.autoruns[i];
			if(_autorun != null && _autorun._lifecycleState < 0) {
				this.autoruns[i] = null;
			}
		}
	}
	,tween: function(easing,duration,fromValue,toValue,update) {
		return ceramic_Tween.start(this,easing,duration,fromValue,toValue,update);
	}
	,className: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__;
		var dotIndex = className.lastIndexOf(".");
		if(dotIndex != -1) {
			className = HxOverrides.substr(className,dotIndex + 1,null);
		}
		return className;
	}
	,toString: function() {
		var className = this.className();
		if(this.id != null) {
			return "" + className + "(" + this.id + ")";
		} else {
			return "" + className;
		}
	}
	,clearComponents: function() {
		if(this._components != null) {
			var toRemove = null;
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(toRemove == null) {
					toRemove = [name];
				} else {
					toRemove.push(name);
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var name = toRemove[_g];
					++_g;
					this.removeComponent(name);
				}
			}
		}
	}
	,get_components: function() {
		return this._components;
	}
	,set_components: function(components) {
		if(this._components == components) {
			return components;
		}
		if(this._components != null) {
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(components == null || !Object.prototype.hasOwnProperty.call(components.h,name)) {
					this.removeComponent(name);
				}
			}
		}
		if(components != null) {
			var h = components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				var newComponent = components.h[name];
				if(this._components != null) {
					var existing = this._components.h[name];
					if(existing != null) {
						if(existing != newComponent) {
							this.removeComponent(name);
							this.component(name,newComponent);
						}
					} else {
						this.component(name,newComponent);
					}
				} else {
					this.component(name,newComponent);
				}
			}
		}
		this._components = components;
		return components;
	}
	,_components: null
	,component: function(name,component) {
		var _gthis = this;
		if(name == null && component == null) {
			throw haxe_Exception.thrown("Invalid component() call: either `name` or `component` should be provided at least.");
		}
		if(name == null) {
			var c = js_Boot.getClass(component);
			name = c.__name__;
			if(this._components != null && Object.prototype.hasOwnProperty.call(this._components.h,name)) {
				var baseName = name;
				var n = 1;
				name = baseName + "#" + n;
				while(Object.prototype.hasOwnProperty.call(this._components.h,name)) {
					++n;
					name = baseName + "#" + n;
				}
			}
		}
		if(component != null) {
			if(this._components == null) {
				this._components = new haxe_ds_StringMap();
			} else {
				var existing = this._components.h[name];
				if(existing != null) {
					var existingAsEntity = existing;
					existingAsEntity.destroy();
				}
			}
			this._components.h[name] = component;
			component.setEntity(this);
			var componentAsAny = component;
			var componentAsEntity = componentAsAny;
			componentAsEntity.onceDestroy(this,function(_) {
				if(component.getEntity() == _gthis) {
					component.setEntity(null);
				}
				if(_gthis._lifecycleState >= 0) {
					var existing = _gthis._components.h[name];
					if(existing == component) {
						var _this = _gthis._components;
						if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
							delete(_this.h[name]);
						}
					}
				}
			});
			component.bindAsComponent();
			return component;
		} else {
			if(this._components == null) {
				return null;
			}
			return this._components.h[name];
		}
	}
	,hasComponent: function(name) {
		return this.component(name) != null;
	}
	,removeComponent: function(name) {
		var existing = this._components.h[name];
		if(existing != null) {
			var _this = this._components;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
			}
			var existingAsEntity = existing;
			existingAsEntity.destroy();
		}
	}
	,__class__: ceramic_Entity
	,__properties__: {set_components:"set_components",get_components:"get_components",get_disposed:"get_disposed",get_destroyed:"get_destroyed",set_data:"set_data",get_data:"get_data",get_hasData:"get_hasData"}
};
var Project = function(settings) {
	ceramic_Entity.call(this);
	settings.settings.antialiasing = 2;
	var color = 0;
	color &= 65535;
	color |= 3211264;
	color &= 16711935;
	color |= 13312;
	color &= 16776960;
	color |= 53;
	settings.settings.set_background(color);
	settings.settings.set_targetWidth(640);
	settings.settings.set_targetHeight(480);
	settings.settings.set_scaling(ceramic_ScreenScaling.RESIZE);
	settings.settings.resizable = true;
	ceramic_App.app.onceReady(this,$bind(this,this.ready));
};
$hxClasses["Project"] = Project;
Project.__name__ = "Project";
Project.__super__ = ceramic_Entity;
Project.prototype = $extend(ceramic_Entity.prototype,{
	ready: function() {
		ceramic_App.app.get_scenes().set_main(new TestScene());
	}
	,__class__: Project
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ceramic_DecomposedTransform = function() {
	this.skewY = 0;
	this.skewX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.pivotY = 0;
	this.pivotX = 0;
};
$hxClasses["ceramic.DecomposedTransform"] = ceramic_DecomposedTransform;
ceramic_DecomposedTransform.__name__ = "ceramic.DecomposedTransform";
ceramic_DecomposedTransform.prototype = {
	pivotX: null
	,pivotY: null
	,x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,skewX: null
	,skewY: null
	,toString: function() {
		return "(pos=" + this.x + "," + this.y + " pivot=" + this.pivotX + "," + this.pivotY + " rotation=" + this.rotation + " scale=" + (this.scaleX == this.scaleY ? "" + this.scaleX : this.scaleX + "," + this.scaleY) + " skew=" + this.skewX + "," + this.skewY + ")";
	}
	,__class__: ceramic_DecomposedTransform
};
var ceramic_Transform = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this._aPrev = a;
	this._bPrev = b;
	this._cPrev = c;
	this._dPrev = d;
	this._txPrev = tx;
	this._tyPrev = ty;
	this.changed = false;
	this.changedDirty = false;
};
$hxClasses["ceramic.Transform"] = ceramic_Transform;
ceramic_Transform.__name__ = "ceramic.Transform";
ceramic_Transform.__interfaces__ = [tracker_Events];
ceramic_Transform.prototype = {
	__cbOnChange: null
	,__cbOnceChange: null
	,__cbOnOwnerUnbindChange: null
	,__cbOnceOwnerUnbindChange: null
	,emitChange: function() {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChange[ii];
						this.__cbOnceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChange[ii];
						this.__cbOnceOwnerUnbindChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChange[ii]);
						newCbOnceArray.push(this.__cbOnceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
		this._aPrev = this.a;
		this._bPrev = this.b;
		this._cPrev = this.c;
		this._dPrev = this.d;
		this._txPrev = this.tx;
		this._tyPrev = this.ty;
		this.changed = false;
	}
	,onChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handle);
	}
	,onceChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handle);
	}
	,offChange: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,_aPrev: null
	,_bPrev: null
	,_cPrev: null
	,_dPrev: null
	,_txPrev: null
	,_tyPrev: null
	,changedDirty: null
	,a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,changed: null
	,computeChanged: function() {
		if(this.changedDirty) {
			this.changed = this.tx != this._txPrev || this.ty != this._tyPrev || this.a != this._aPrev || this.b != this._bPrev || this.c != this._cPrev || this.d != this._dPrev;
			this.changedDirty = false;
		}
	}
	,didEmitChange: function() {
		this._aPrev = this.a;
		this._bPrev = this.b;
		this._cPrev = this.c;
		this._dPrev = this.d;
		this._txPrev = this.tx;
		this._tyPrev = this.ty;
		this.changed = false;
	}
	,cleanChangedState: function() {
		this._aPrev = this.a;
		this._bPrev = this.b;
		this._cPrev = this.c;
		this._dPrev = this.d;
		this._txPrev = this.tx;
		this._tyPrev = this.ty;
		this.changed = false;
	}
	,clone: function() {
		return new ceramic_Transform(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
		this.changedDirty = true;
	}
	,decompose: function(output) {
		if(output == null) {
			output = new ceramic_DecomposedTransform();
		}
		output.pivotX = 0;
		output.pivotY = 0;
		output.skewX = -Math.atan2(-this.c,this.d);
		output.skewY = Math.atan2(this.b,this.a);
		var delta = Math.abs(output.skewX + output.skewY);
		if(delta < 0.00001) {
			output.rotation = output.skewY;
			if(this.a < 0 && this.d >= 0) {
				output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
			}
			output.skewX = 0;
			output.skewY = 0;
		}
		output.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
		output.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);
		output.x = this.tx;
		output.y = this.ty;
		return output;
	}
	,setFromDecomposed: function(decomposed) {
		var x = decomposed.x;
		var y = decomposed.y;
		var scaleX = decomposed.scaleX;
		var scaleY = decomposed.scaleY;
		var rotation = decomposed.rotation;
		var skewX = decomposed.skewX;
		var skewY = decomposed.skewY;
		var pivotX = decomposed.pivotX;
		var pivotY = decomposed.pivotY;
		if(pivotY == null) {
			pivotY = 0;
		}
		if(pivotX == null) {
			pivotX = 0;
		}
		if(skewY == null) {
			skewY = 0;
		}
		if(skewX == null) {
			skewX = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this.changedDirty = true;
		this.tx += -pivotX;
		this.ty += -pivotY;
		this.changedDirty = true;
		if(skewX != 0) {
			this.c = skewX * Math.PI / 180.0;
		}
		if(skewY != 0) {
			this.b = skewY * Math.PI / 180.0;
		}
		if(rotation != 0) {
			var angle = rotation * Math.PI / 180.0;
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a1 = this.a * cos - this.b * sin;
			this.b = this.a * sin + this.b * cos;
			this.a = a1;
			var c1 = this.c * cos - this.d * sin;
			this.d = this.c * sin + this.d * cos;
			this.c = c1;
			var tx1 = this.tx * cos - this.ty * sin;
			this.ty = this.tx * sin + this.ty * cos;
			this.tx = tx1;
			this.changedDirty = true;
		}
		this.tx += pivotX;
		this.ty += pivotY;
		this.changedDirty = true;
		if(scaleX != 1.0 || scaleY != 1.0) {
			this.a *= scaleX;
			this.b *= scaleY;
			this.c *= scaleX;
			this.d *= scaleY;
			this.tx *= scaleX;
			this.ty *= scaleY;
			this.changedDirty = true;
		}
		this.tx += x - pivotX * scaleX;
		this.ty += y - pivotY * scaleY;
		this.changedDirty = true;
	}
	,setFromValues: function(x,y,scaleX,scaleY,rotation,skewX,skewY,pivotX,pivotY) {
		if(pivotY == null) {
			pivotY = 0;
		}
		if(pivotX == null) {
			pivotX = 0;
		}
		if(skewY == null) {
			skewY = 0;
		}
		if(skewX == null) {
			skewX = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this.changedDirty = true;
		this.tx += -pivotX;
		this.ty += -pivotY;
		this.changedDirty = true;
		if(skewX != 0) {
			this.c = skewX * Math.PI / 180.0;
		}
		if(skewY != 0) {
			this.b = skewY * Math.PI / 180.0;
		}
		if(rotation != 0) {
			var angle = rotation * Math.PI / 180.0;
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a1 = this.a * cos - this.b * sin;
			this.b = this.a * sin + this.b * cos;
			this.a = a1;
			var c1 = this.c * cos - this.d * sin;
			this.d = this.c * sin + this.d * cos;
			this.c = c1;
			var tx1 = this.tx * cos - this.ty * sin;
			this.ty = this.tx * sin + this.ty * cos;
			this.tx = tx1;
			this.changedDirty = true;
		}
		this.tx += pivotX;
		this.ty += pivotY;
		this.changedDirty = true;
		if(scaleX != 1.0 || scaleY != 1.0) {
			this.a *= scaleX;
			this.b *= scaleY;
			this.c *= scaleX;
			this.d *= scaleY;
			this.tx *= scaleX;
			this.ty *= scaleY;
			this.changedDirty = true;
		}
		this.tx += x - pivotX * scaleX;
		this.ty += y - pivotY * scaleY;
		this.changedDirty = true;
	}
	,setFromInterpolated: function(transform1,transform2,ratio) {
		if(ratio == 0) {
			this.a = transform1.a;
			this.b = transform1.b;
			this.c = transform1.c;
			this.d = transform1.d;
			this.tx = transform1.tx;
			this.ty = transform1.ty;
			this.changedDirty = true;
		} else if(ratio == 1) {
			this.a = transform2.a;
			this.b = transform2.b;
			this.c = transform2.c;
			this.d = transform2.d;
			this.tx = transform2.tx;
			this.ty = transform2.ty;
			this.changedDirty = true;
		} else {
			var output = ceramic_Transform._decomposed1;
			if(output == null) {
				output = new ceramic_DecomposedTransform();
			}
			output.pivotX = 0;
			output.pivotY = 0;
			output.skewX = -Math.atan2(-transform1.c,transform1.d);
			output.skewY = Math.atan2(transform1.b,transform1.a);
			var delta = Math.abs(output.skewX + output.skewY);
			if(delta < 0.00001) {
				output.rotation = output.skewY;
				if(transform1.a < 0 && transform1.d >= 0) {
					output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
				}
				output.skewX = 0;
				output.skewY = 0;
			}
			output.scaleX = Math.sqrt(transform1.a * transform1.a + transform1.b * transform1.b);
			output.scaleY = Math.sqrt(transform1.c * transform1.c + transform1.d * transform1.d);
			output.x = transform1.tx;
			output.y = transform1.ty;
			var output = ceramic_Transform._decomposed2;
			if(output == null) {
				output = new ceramic_DecomposedTransform();
			}
			output.pivotX = 0;
			output.pivotY = 0;
			output.skewX = -Math.atan2(-transform2.c,transform2.d);
			output.skewY = Math.atan2(transform2.b,transform2.a);
			var delta = Math.abs(output.skewX + output.skewY);
			if(delta < 0.00001) {
				output.rotation = output.skewY;
				if(transform2.a < 0 && transform2.d >= 0) {
					output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
				}
				output.skewX = 0;
				output.skewY = 0;
			}
			output.scaleX = Math.sqrt(transform2.a * transform2.a + transform2.b * transform2.b);
			output.scaleY = Math.sqrt(transform2.c * transform2.c + transform2.d * transform2.d);
			output.x = transform2.tx;
			output.y = transform2.ty;
			ceramic_Transform._decomposed1.pivotX += (ceramic_Transform._decomposed2.pivotX - ceramic_Transform._decomposed1.pivotX) * ratio;
			ceramic_Transform._decomposed1.pivotY += (ceramic_Transform._decomposed2.pivotY - ceramic_Transform._decomposed1.pivotY) * ratio;
			ceramic_Transform._decomposed1.rotation += (ceramic_Transform._decomposed2.rotation - ceramic_Transform._decomposed1.rotation) * ratio;
			ceramic_Transform._decomposed1.scaleX += (ceramic_Transform._decomposed2.scaleX - ceramic_Transform._decomposed1.scaleX) * ratio;
			ceramic_Transform._decomposed1.scaleY += (ceramic_Transform._decomposed2.scaleY - ceramic_Transform._decomposed1.scaleY) * ratio;
			ceramic_Transform._decomposed1.skewX += (ceramic_Transform._decomposed2.skewX - ceramic_Transform._decomposed1.skewX) * ratio;
			ceramic_Transform._decomposed1.skewY += (ceramic_Transform._decomposed2.skewY - ceramic_Transform._decomposed1.skewY) * ratio;
			ceramic_Transform._decomposed1.x += (ceramic_Transform._decomposed2.x - ceramic_Transform._decomposed1.x) * ratio;
			ceramic_Transform._decomposed1.y += (ceramic_Transform._decomposed2.y - ceramic_Transform._decomposed1.y) * ratio;
			var decomposed = ceramic_Transform._decomposed1;
			var x = decomposed.x;
			var y = decomposed.y;
			var scaleX = decomposed.scaleX;
			var scaleY = decomposed.scaleY;
			var rotation = decomposed.rotation;
			var skewX = decomposed.skewX;
			var skewY = decomposed.skewY;
			var pivotX = decomposed.pivotX;
			var pivotY = decomposed.pivotY;
			if(pivotY == null) {
				pivotY = 0;
			}
			if(pivotX == null) {
				pivotX = 0;
			}
			if(skewY == null) {
				skewY = 0;
			}
			if(skewX == null) {
				skewX = 0;
			}
			if(rotation == null) {
				rotation = 0;
			}
			if(scaleY == null) {
				scaleY = 1;
			}
			if(scaleX == null) {
				scaleX = 1;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			this.a = 1;
			this.b = 0;
			this.c = 0;
			this.d = 1;
			this.tx = 0;
			this.ty = 0;
			this.changedDirty = true;
			this.tx += -pivotX;
			this.ty += -pivotY;
			this.changedDirty = true;
			if(skewX != 0) {
				this.c = skewX * Math.PI / 180.0;
			}
			if(skewY != 0) {
				this.b = skewY * Math.PI / 180.0;
			}
			if(rotation != 0) {
				var angle = rotation * Math.PI / 180.0;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = this.a * cos - this.b * sin;
				this.b = this.a * sin + this.b * cos;
				this.a = a1;
				var c1 = this.c * cos - this.d * sin;
				this.d = this.c * sin + this.d * cos;
				this.c = c1;
				var tx1 = this.tx * cos - this.ty * sin;
				this.ty = this.tx * sin + this.ty * cos;
				this.tx = tx1;
				this.changedDirty = true;
			}
			this.tx += pivotX;
			this.ty += pivotY;
			this.changedDirty = true;
			if(scaleX != 1.0 || scaleY != 1.0) {
				this.a *= scaleX;
				this.b *= scaleY;
				this.c *= scaleX;
				this.d *= scaleY;
				this.tx *= scaleX;
				this.ty *= scaleY;
				this.changedDirty = true;
			}
			this.tx += x - pivotX * scaleX;
			this.ty += y - pivotY * scaleY;
			this.changedDirty = true;
		}
	}
	,deltaTransformX: function(x,y) {
		return x * this.a + y * this.c;
	}
	,deltaTransformY: function(x,y) {
		return x * this.b + y * this.d;
	}
	,equals: function(transform) {
		if(transform != null && this.tx == transform.tx && this.ty == transform.ty && this.a == transform.a && this.b == transform.b && this.c == transform.c) {
			return this.d == transform.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
		this.changedDirty = true;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		this.changedDirty = true;
	}
	,rotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
		this.changedDirty = true;
	}
	,scale: function(x,y) {
		this.a *= x;
		this.b *= y;
		this.c *= x;
		this.d *= y;
		this.tx *= x;
		this.ty *= y;
		this.changedDirty = true;
	}
	,translate: function(x,y) {
		this.tx += x;
		this.ty += y;
		this.changedDirty = true;
	}
	,skew: function(skewX,skewY) {
		var _this = ceramic_Transform._tmp;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		var sr = 0;
		var cr = 1;
		var cy = Math.cos(skewY);
		var sy = Math.sin(skewY);
		var nsx = -Math.sin(skewX);
		var cx = Math.cos(skewX);
		var a = cr;
		var b = sr;
		var c = -sr;
		var d = cr;
		ceramic_Transform._tmp.a = cy * a + sy * c;
		ceramic_Transform._tmp.b = cy * b + sy * d;
		ceramic_Transform._tmp.c = nsx * a + cx * c;
		ceramic_Transform._tmp.d = nsx * b + cx * d;
		var m = ceramic_Transform._tmp;
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
		this.changedDirty = true;
	}
	,setRotation: function(angle,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(angle) * scale;
		this.c = Math.sin(angle) * scale;
		this.b = -this.c;
		this.d = this.a;
		this.changedDirty = true;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
		this.changedDirty = true;
	}
	,setToTransform: function(transform) {
		this.a = transform.a;
		this.b = transform.b;
		this.c = transform.c;
		this.d = transform.d;
		this.tx = transform.tx;
		this.ty = transform.ty;
		this.changedDirty = true;
	}
	,toString: function() {
		var output = ceramic_Transform._decomposed1;
		if(output == null) {
			output = new ceramic_DecomposedTransform();
		}
		output.pivotX = 0;
		output.pivotY = 0;
		output.skewX = -Math.atan2(-this.c,this.d);
		output.skewY = Math.atan2(this.b,this.a);
		var delta = Math.abs(output.skewX + output.skewY);
		if(delta < 0.00001) {
			output.rotation = output.skewY;
			if(this.a < 0 && this.d >= 0) {
				output.rotation += output.rotation <= 0 ? Math.PI : -Math.PI;
			}
			output.skewX = 0;
			output.skewY = 0;
		}
		output.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
		output.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);
		output.x = this.tx;
		output.y = this.ty;
		return "(a=" + this.a + ", b=" + this.b + ", c=" + this.c + ", d=" + this.d + ", tx=" + this.tx + ", ty=" + this.ty + " " + Std.string(ceramic_Transform._decomposed1) + ")";
	}
	,transformX: function(x,y) {
		return x * this.a + y * this.c + this.tx;
	}
	,transformY: function(x,y) {
		return x * this.b + y * this.d + this.ty;
	}
	,unbindEvents: function() {
		this.offChange();
	}
	,__class__: ceramic_Transform
};
var ceramic_Pool = function() {
	this.availableItems = [];
};
$hxClasses["ceramic.Pool"] = ceramic_Pool;
ceramic_Pool.__name__ = "ceramic.Pool";
ceramic_Pool.prototype = {
	availableItems: null
	,get: function() {
		if(this.availableItems.length > 0) {
			return this.availableItems.pop();
		} else {
			return null;
		}
	}
	,recycle: function(item) {
		this.availableItems.push(item);
	}
	,clear: function() {
		if(this.availableItems.length > 0) {
			this.availableItems = [];
		}
	}
	,__class__: ceramic_Pool
};
var ceramic_Point = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.z = 0;
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["ceramic.Point"] = ceramic_Point;
ceramic_Point.__name__ = "ceramic.Point";
ceramic_Point.get = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this = ceramic_Point.pool;
	var point = _this.availableItems.length > 0 ? _this.availableItems.pop() : null;
	if(point == null) {
		point = new ceramic_Point(x,y,z);
	} else {
		point.x = x;
		point.y = y;
		point.z = z;
	}
	return point;
};
ceramic_Point.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "Point(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,recycle: function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
		ceramic_Point.pool.recycle(this);
	}
	,__class__: ceramic_Point
};
var ceramic_Visual = function() {
	this.parent = null;
	this.children = null;
	this.computedClip = null;
	this.computedTouchable = true;
	this.computedRenderTarget = null;
	this.computedDepth = 0;
	this.computedAlpha = 1;
	this.computedVisible = true;
	this.matTY = 0;
	this.matTX = 0;
	this.matD = 1;
	this.matC = 0;
	this.matB = 0;
	this.matA = 1;
	this.flags = 0;
	this.shader = null;
	this.transform = null;
	this.alpha = 1;
	this.rotation = 0;
	this.roundTranslation = -1;
	this._height = 0;
	this._width = 0;
	this.anchorY = 0;
	this.anchorX = 0;
	this.skewY = 0;
	this.skewX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.depthRange = 1;
	this.depth = 0;
	this.touchable = true;
	this.visible = true;
	this.blending = 0;
	this.renderTarget = null;
	this.clipDirty = true;
	this.touchableDirty = true;
	this.visibilityDirty = true;
	this.renderTargetDirty = true;
	this.matrixDirty = true;
	this.contentDirty = true;
	this.translatesOnlyDirty = false;
	this.translatesOnly = true;
	this.inheritAlpha = false;
	this.clip = null;
	this._numPointerOver = 0;
	this._numPointerDown = 0;
	this.multiTouch = false;
	this.asMesh = null;
	this.asQuad = null;
	ceramic_Entity.call(this);
	ceramic_App.app.pendingVisuals.push(this);
};
$hxClasses["ceramic.Visual"] = ceramic_Visual;
ceramic_Visual.__name__ = "ceramic.Visual";
ceramic_Visual.computeChildrenDepth = function(visual) {
	ceramic_Visual._computeChildrenDepth0(visual);
};
ceramic_Visual._computeChildrenDepth0 = function(visual) {
	var children = visual.children;
	if(children != null) {
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			child.computedDepth = child.depth * 1000;
			ceramic_Visual._computeChildrenDepth0(child);
		}
		var depthRange = visual.depthRange;
		if(depthRange != -1) {
			ceramic_Visual._minDepth = 9999999999;
			ceramic_Visual._maxDepth = -9999999999;
			var _g = 0;
			var _g1 = children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = children[i];
				ceramic_Visual._computeMinMaxDepths0(child);
			}
			var _g = 0;
			var _g1 = children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = children[i];
				ceramic_Visual._multiplyDepths0(child,visual.computedDepth + Math.min(0.01,depthRange * 1000),Math.max(0,depthRange * 1000 - 0.01));
			}
		}
	}
};
ceramic_Visual._computeChildrenDepth1 = function(visual) {
	var children = visual.children;
	if(children != null) {
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			child.computedDepth = child.depth * 1000;
			ceramic_Visual._computeChildrenDepth0(child);
		}
		var depthRange = visual.depthRange;
		if(depthRange != -1) {
			ceramic_Visual._minDepth = 9999999999;
			ceramic_Visual._maxDepth = -9999999999;
			var _g = 0;
			var _g1 = children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = children[i];
				ceramic_Visual._computeMinMaxDepths0(child);
			}
			var _g = 0;
			var _g1 = children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = children[i];
				ceramic_Visual._multiplyDepths0(child,visual.computedDepth + Math.min(0.01,depthRange * 1000),Math.max(0,depthRange * 1000 - 0.01));
			}
		}
	}
};
ceramic_Visual._computeChildrenDepthApplyDepthRange = function(visual,children) {
	var depthRange = visual.depthRange;
	if(depthRange != -1) {
		ceramic_Visual._minDepth = 9999999999;
		ceramic_Visual._maxDepth = -9999999999;
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			ceramic_Visual._computeMinMaxDepths0(child);
		}
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			ceramic_Visual._multiplyDepths0(child,visual.computedDepth + Math.min(0.01,depthRange * 1000),Math.max(0,depthRange * 1000 - 0.01));
		}
	}
};
ceramic_Visual.computeMinMaxDepths = function(visual) {
	ceramic_Visual._computeMinMaxDepths0(visual);
};
ceramic_Visual._computeMinMaxDepths0 = function(visual) {
	var computedDepth = visual.computedDepth;
	if(ceramic_Visual._minDepth > computedDepth) {
		ceramic_Visual._minDepth = computedDepth;
	}
	if(ceramic_Visual._maxDepth < computedDepth + 1) {
		ceramic_Visual._maxDepth = computedDepth + 1;
	}
	var children = visual.children;
	if(children != null) {
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			ceramic_Visual._computeMinMaxDepths0(child);
		}
	}
};
ceramic_Visual._computeMinMaxDepths1 = function(visual) {
	var computedDepth = visual.computedDepth;
	if(ceramic_Visual._minDepth > computedDepth) {
		ceramic_Visual._minDepth = computedDepth;
	}
	if(ceramic_Visual._maxDepth < computedDepth + 1) {
		ceramic_Visual._maxDepth = computedDepth + 1;
	}
	var children = visual.children;
	if(children != null) {
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			ceramic_Visual._computeMinMaxDepths0(child);
		}
	}
};
ceramic_Visual.multiplyDepths = function(visual,startDepth,targetRange) {
	ceramic_Visual._multiplyDepths0(visual,startDepth,targetRange);
};
ceramic_Visual._multiplyDepths0 = function(visual,startDepth,targetRange) {
	if(ceramic_Visual._maxDepth == ceramic_Visual._minDepth) {
		visual.computedDepth = startDepth + 0.5 * targetRange;
	} else {
		visual.computedDepth = startDepth + (visual.computedDepth - ceramic_Visual._minDepth) / (ceramic_Visual._maxDepth - ceramic_Visual._minDepth) * targetRange;
	}
	var children = visual.children;
	if(children != null) {
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			ceramic_Visual._multiplyDepths0(child,startDepth,targetRange);
		}
	}
};
ceramic_Visual._multiplyDepths1 = function(visual,startDepth,targetRange) {
	if(ceramic_Visual._maxDepth == ceramic_Visual._minDepth) {
		visual.computedDepth = startDepth + 0.5 * targetRange;
	} else {
		visual.computedDepth = startDepth + (visual.computedDepth - ceramic_Visual._minDepth) / (ceramic_Visual._maxDepth - ceramic_Visual._minDepth) * targetRange;
	}
	var children = visual.children;
	if(children != null) {
		var _g = 0;
		var _g1 = children.length;
		while(_g < _g1) {
			var i = _g++;
			var child = children[i];
			ceramic_Visual._multiplyDepths0(child,startDepth,targetRange);
		}
	}
};
ceramic_Visual.__super__ = ceramic_Entity;
ceramic_Visual.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnPointerDown: null
	,__cbOncePointerDown: null
	,__cbOnOwnerUnbindPointerDown: null
	,__cbOnceOwnerUnbindPointerDown: null
	,emitPointerDown: function(info) {
		var len = 0;
		if(this.__cbOnPointerDown != null) {
			len += this.__cbOnPointerDown.length;
		}
		if(this.__cbOncePointerDown != null) {
			len += this.__cbOncePointerDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerDown[ii];
						this.__cbOncePointerDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerDown[ii];
						this.__cbOnceOwnerUnbindPointerDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerDown[ii]);
						newCbOnceArray.push(this.__cbOncePointerDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerDown = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOnPointerDown == null) {
			this.__cbOnPointerDown = [];
		}
		this.__cbOnPointerDown.push(handleInfo);
	}
	,oncePointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOncePointerDown == null) {
			this.__cbOncePointerDown = [];
		}
		this.__cbOncePointerDown.push(handleInfo);
	}
	,offPointerDown: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerDown != null) {
				index = this.__cbOnPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerDown.splice(index,1);
				}
			}
			if(this.__cbOncePointerDown != null) {
				index = this.__cbOncePointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerDown = null;
			}
			if(this.__cbOnceOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerDown = null;
			}
			this.__cbOnPointerDown = null;
			this.__cbOncePointerDown = null;
		}
	}
	,listensPointerDown: function() {
		if(!(this.__cbOnPointerDown != null && this.__cbOnPointerDown.length > 0)) {
			if(this.__cbOncePointerDown != null) {
				return this.__cbOncePointerDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPointerUp: null
	,__cbOncePointerUp: null
	,__cbOnOwnerUnbindPointerUp: null
	,__cbOnceOwnerUnbindPointerUp: null
	,emitPointerUp: function(info) {
		var len = 0;
		if(this.__cbOnPointerUp != null) {
			len += this.__cbOnPointerUp.length;
		}
		if(this.__cbOncePointerUp != null) {
			len += this.__cbOncePointerUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerUp[ii];
						this.__cbOncePointerUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerUp[ii];
						this.__cbOnceOwnerUnbindPointerUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerUp[ii]);
						newCbOnceArray.push(this.__cbOncePointerUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerUp = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOnPointerUp == null) {
			this.__cbOnPointerUp = [];
		}
		this.__cbOnPointerUp.push(handleInfo);
	}
	,oncePointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOncePointerUp == null) {
			this.__cbOncePointerUp = [];
		}
		this.__cbOncePointerUp.push(handleInfo);
	}
	,offPointerUp: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerUp != null) {
				index = this.__cbOnPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerUp.splice(index,1);
				}
			}
			if(this.__cbOncePointerUp != null) {
				index = this.__cbOncePointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerUp = null;
			}
			if(this.__cbOnceOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerUp = null;
			}
			this.__cbOnPointerUp = null;
			this.__cbOncePointerUp = null;
		}
	}
	,listensPointerUp: function() {
		if(!(this.__cbOnPointerUp != null && this.__cbOnPointerUp.length > 0)) {
			if(this.__cbOncePointerUp != null) {
				return this.__cbOncePointerUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPointerOver: null
	,__cbOncePointerOver: null
	,__cbOnOwnerUnbindPointerOver: null
	,__cbOnceOwnerUnbindPointerOver: null
	,emitPointerOver: function(info) {
		var len = 0;
		if(this.__cbOnPointerOver != null) {
			len += this.__cbOnPointerOver.length;
		}
		if(this.__cbOncePointerOver != null) {
			len += this.__cbOncePointerOver.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerOver.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerOver[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerOver != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerOver.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerOver[ii];
						this.__cbOncePointerOver[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerOver[ii];
						this.__cbOnceOwnerUnbindPointerOver[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerOver[ii]);
						newCbOnceArray.push(this.__cbOncePointerOver[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerOver = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerOver = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerOver: function(owner,handleInfo) {
		var _gthis = this;
		if(this.__cbOnPointerOver == null && this.__cbOncePointerOver == null) {
			ceramic_App.app.screen.visualsListenPointerOver = true;
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOver" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOver(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerOver == null) {
				this.__cbOnOwnerUnbindPointerOver = [];
			}
			this.__cbOnOwnerUnbindPointerOver.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerOver == null) {
				this.__cbOnOwnerUnbindPointerOver = [];
			}
			this.__cbOnOwnerUnbindPointerOver.push(null);
		}
		if(this.__cbOnPointerOver == null) {
			this.__cbOnPointerOver = [];
		}
		this.__cbOnPointerOver.push(handleInfo);
	}
	,oncePointerOver: function(owner,handleInfo) {
		var _gthis = this;
		if(this.__cbOnPointerOver == null && this.__cbOncePointerOver == null) {
			ceramic_App.app.screen.visualsListenPointerOver = true;
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOver" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOver(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerOver == null) {
				this.__cbOnceOwnerUnbindPointerOver = [];
			}
			this.__cbOnceOwnerUnbindPointerOver.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerOver == null) {
				this.__cbOnceOwnerUnbindPointerOver = [];
			}
			this.__cbOnceOwnerUnbindPointerOver.push(null);
		}
		if(this.__cbOncePointerOver == null) {
			this.__cbOncePointerOver = [];
		}
		this.__cbOncePointerOver.push(handleInfo);
	}
	,offPointerOver: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerOver != null) {
				index = this.__cbOnPointerOver.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerOver.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerOver[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerOver.splice(index,1);
				}
			}
			if(this.__cbOncePointerOver != null) {
				index = this.__cbOncePointerOver.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerOver.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerOver[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerOver.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerOver.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerOver[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerOver = null;
			}
			if(this.__cbOnceOwnerUnbindPointerOver != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerOver.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerOver[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerOver = null;
			}
			this.__cbOnPointerOver = null;
			this.__cbOncePointerOver = null;
		}
	}
	,listensPointerOver: function() {
		if(!(this.__cbOnPointerOver != null && this.__cbOnPointerOver.length > 0)) {
			if(this.__cbOncePointerOver != null) {
				return this.__cbOncePointerOver.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPointerOut: null
	,__cbOncePointerOut: null
	,__cbOnOwnerUnbindPointerOut: null
	,__cbOnceOwnerUnbindPointerOut: null
	,emitPointerOut: function(info) {
		var len = 0;
		if(this.__cbOnPointerOut != null) {
			len += this.__cbOnPointerOut.length;
		}
		if(this.__cbOncePointerOut != null) {
			len += this.__cbOncePointerOut.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerOut.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerOut[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerOut != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerOut.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerOut[ii];
						this.__cbOncePointerOut[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerOut[ii];
						this.__cbOnceOwnerUnbindPointerOut[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerOut[ii]);
						newCbOnceArray.push(this.__cbOncePointerOut[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerOut = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerOut = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerOut: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOut" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOut(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerOut == null) {
				this.__cbOnOwnerUnbindPointerOut = [];
			}
			this.__cbOnOwnerUnbindPointerOut.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerOut == null) {
				this.__cbOnOwnerUnbindPointerOut = [];
			}
			this.__cbOnOwnerUnbindPointerOut.push(null);
		}
		if(this.__cbOnPointerOut == null) {
			this.__cbOnPointerOut = [];
		}
		this.__cbOnPointerOut.push(handleInfo);
	}
	,oncePointerOut: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerOut" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerOut(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerOut == null) {
				this.__cbOnceOwnerUnbindPointerOut = [];
			}
			this.__cbOnceOwnerUnbindPointerOut.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerOut == null) {
				this.__cbOnceOwnerUnbindPointerOut = [];
			}
			this.__cbOnceOwnerUnbindPointerOut.push(null);
		}
		if(this.__cbOncePointerOut == null) {
			this.__cbOncePointerOut = [];
		}
		this.__cbOncePointerOut.push(handleInfo);
	}
	,offPointerOut: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerOut != null) {
				index = this.__cbOnPointerOut.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerOut.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerOut[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerOut.splice(index,1);
				}
			}
			if(this.__cbOncePointerOut != null) {
				index = this.__cbOncePointerOut.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerOut.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerOut[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerOut.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerOut.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerOut[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerOut = null;
			}
			if(this.__cbOnceOwnerUnbindPointerOut != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerOut.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerOut[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerOut = null;
			}
			this.__cbOnPointerOut = null;
			this.__cbOncePointerOut = null;
		}
	}
	,listensPointerOut: function() {
		if(!(this.__cbOnPointerOut != null && this.__cbOnPointerOut.length > 0)) {
			if(this.__cbOncePointerOut != null) {
				return this.__cbOncePointerOut.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFocus: null
	,__cbOnceFocus: null
	,__cbOnOwnerUnbindFocus: null
	,__cbOnceOwnerUnbindFocus: null
	,emitFocus: function() {
		var len = 0;
		if(this.__cbOnFocus != null) {
			len += this.__cbOnFocus.length;
		}
		if(this.__cbOnceFocus != null) {
			len += this.__cbOnceFocus.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFocus[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFocus != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFocus[ii];
						this.__cbOnceFocus[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFocus[ii];
						this.__cbOnceOwnerUnbindFocus[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFocus[ii]);
						newCbOnceArray.push(this.__cbOnceFocus[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFocus = newCbOnceOwnerUnbindArray;
				this.__cbOnceFocus = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFocus: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFocus(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnFocus == null) {
			this.__cbOnFocus = [];
		}
		this.__cbOnFocus.push(handle);
	}
	,onceFocus: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFocus(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnceFocus == null) {
			this.__cbOnceFocus = [];
		}
		this.__cbOnceFocus.push(handle);
	}
	,offFocus: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFocus != null) {
				index = this.__cbOnFocus.indexOf(handle);
				if(index != -1) {
					this.__cbOnFocus.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFocus.splice(index,1);
				}
			}
			if(this.__cbOnceFocus != null) {
				index = this.__cbOnceFocus.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFocus.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFocus.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFocus = null;
			}
			if(this.__cbOnceOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFocus = null;
			}
			this.__cbOnFocus = null;
			this.__cbOnceFocus = null;
		}
	}
	,listensFocus: function() {
		if(!(this.__cbOnFocus != null && this.__cbOnFocus.length > 0)) {
			if(this.__cbOnceFocus != null) {
				return this.__cbOnceFocus.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBlur: null
	,__cbOnceBlur: null
	,__cbOnOwnerUnbindBlur: null
	,__cbOnceOwnerUnbindBlur: null
	,emitBlur: function() {
		var len = 0;
		if(this.__cbOnBlur != null) {
			len += this.__cbOnBlur.length;
		}
		if(this.__cbOnceBlur != null) {
			len += this.__cbOnceBlur.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBlur[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBlur != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBlur[ii];
						this.__cbOnceBlur[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBlur[ii];
						this.__cbOnceOwnerUnbindBlur[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBlur[ii]);
						newCbOnceArray.push(this.__cbOnceBlur[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBlur = newCbOnceOwnerUnbindArray;
				this.__cbOnceBlur = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBlur: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBlur(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnBlur == null) {
			this.__cbOnBlur = [];
		}
		this.__cbOnBlur.push(handle);
	}
	,onceBlur: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBlur(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnceBlur == null) {
			this.__cbOnceBlur = [];
		}
		this.__cbOnceBlur.push(handle);
	}
	,offBlur: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBlur != null) {
				index = this.__cbOnBlur.indexOf(handle);
				if(index != -1) {
					this.__cbOnBlur.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBlur.splice(index,1);
				}
			}
			if(this.__cbOnceBlur != null) {
				index = this.__cbOnceBlur.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBlur.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBlur.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBlur = null;
			}
			if(this.__cbOnceOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBlur = null;
			}
			this.__cbOnBlur = null;
			this.__cbOnceBlur = null;
		}
	}
	,listensBlur: function() {
		if(!(this.__cbOnBlur != null && this.__cbOnBlur.length > 0)) {
			if(this.__cbOnceBlur != null) {
				return this.__cbOnceBlur.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,willListenPointerOver: function() {
		ceramic_App.app.screen.visualsListenPointerOver = true;
	}
	,asQuad: null
	,asMesh: null
	,multiTouch: null
	,isPointerDown: null
	,_numPointerDown: null
	,get_isPointerDown: function() {
		return this._numPointerDown > 0;
	}
	,isPointerOver: null
	,_numPointerOver: null
	,get_isPointerOver: function() {
		return this._numPointerOver > 0;
	}
	,clip: null
	,set_clip: function(clip) {
		if(this.clip == clip) {
			return clip;
		}
		this.clip = clip;
		this.clipDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		return clip;
	}
	,inheritAlpha: null
	,set_inheritAlpha: function(inheritAlpha) {
		if(this.inheritAlpha == inheritAlpha) {
			return inheritAlpha;
		}
		this.inheritAlpha = inheritAlpha;
		this.visibilityDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		return inheritAlpha;
	}
	,stop: function() {
	}
	,translatesOnly: null
	,translatesOnlyDirty: null
	,contentDirty: null
	,set_contentDirty: function(contentDirty) {
		this.contentDirty = contentDirty;
		if(contentDirty) {
			ceramic_App.app.visualsContentDirty = true;
		}
		return contentDirty;
	}
	,matrixDirty: null
	,set_matrixDirty: function(matrixDirty) {
		this.matrixDirty = matrixDirty;
		if(matrixDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_matrixDirty(true);
				}
			}
		}
		return matrixDirty;
	}
	,renderTargetDirty: null
	,set_renderTargetDirty: function(renderTargetDirty) {
		this.renderTargetDirty = renderTargetDirty;
		if(renderTargetDirty) {
			this.clipDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.clipDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_clipDirty(true);
						}
					}
				}
			}
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_renderTargetDirty(true);
				}
			}
		}
		return renderTargetDirty;
	}
	,visibilityDirty: null
	,set_visibilityDirty: function(visibilityDirty) {
		this.visibilityDirty = visibilityDirty;
		if(visibilityDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_visibilityDirty(true);
				}
			}
		}
		return visibilityDirty;
	}
	,touchableDirty: null
	,set_touchableDirty: function(touchableDirty) {
		this.touchableDirty = touchableDirty;
		if(touchableDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_touchableDirty(true);
				}
			}
		}
		return touchableDirty;
	}
	,clipDirty: null
	,set_clipDirty: function(clipDirty) {
		this.clipDirty = clipDirty;
		if(clipDirty) {
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.set_clipDirty(true);
				}
			}
		}
		return clipDirty;
	}
	,renderTarget: null
	,set_renderTarget: function(renderTarget) {
		if(this.renderTarget == renderTarget) {
			return renderTarget;
		}
		this.renderTarget = renderTarget;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.renderTargetDirty = true;
		this.clipDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.renderTargetDirty = true;
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.clipDirty = true;
						if(child1.children != null) {
							var _g4 = 0;
							var _g5 = child1.children.length;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var child2 = child1.children[i2];
								child2.clipDirty = true;
								if(child2.children != null) {
									var _g6 = 0;
									var _g7 = child2.children.length;
									while(_g6 < _g7) {
										var i3 = _g6++;
										var child3 = child2.children[i3];
										child3.set_clipDirty(true);
									}
								}
							}
						}
					}
				}
				if(child.children != null) {
					var _g8 = 0;
					var _g9 = child.children.length;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var child4 = child.children[i4];
						child4.set_renderTargetDirty(true);
					}
				}
			}
		}
		return renderTarget;
	}
	,blending: null
	,set_blending: function(blending) {
		return this.blending = blending;
	}
	,visible: null
	,set_visible: function(visible) {
		if(this.visible == visible) {
			return visible;
		}
		this.visible = visible;
		this.visibilityDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		return visible;
	}
	,touchable: null
	,set_touchable: function(touchable) {
		if(this.touchable == touchable) {
			return touchable;
		}
		this.touchable = touchable;
		this.touchableDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.touchableDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_touchableDirty(true);
					}
				}
			}
		}
		return touchable;
	}
	,depth: null
	,set_depth: function(depth) {
		if(this.depth == depth) {
			return depth;
		}
		this.depth = depth;
		ceramic_App.app.hierarchyDirty = true;
		return depth;
	}
	,depthRange: null
	,set_depthRange: function(depthRange) {
		if(this.depthRange == depthRange) {
			return depthRange;
		}
		this.depthRange = depthRange;
		ceramic_App.app.hierarchyDirty = true;
		return depthRange;
	}
	,x: null
	,set_x: function(x) {
		if(this.x == x) {
			return x;
		}
		this.x = x;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return x;
	}
	,y: null
	,set_y: function(y) {
		if(this.y == y) {
			return y;
		}
		this.y = y;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return y;
	}
	,scaleX: null
	,set_scaleX: function(scaleX) {
		if(this.scaleX == scaleX) {
			return scaleX;
		}
		this.scaleX = scaleX;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return scaleX;
	}
	,scaleY: null
	,set_scaleY: function(scaleY) {
		if(this.scaleY == scaleY) {
			return scaleY;
		}
		this.scaleY = scaleY;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return scaleY;
	}
	,skewX: null
	,set_skewX: function(skewX) {
		if(this.skewX == skewX) {
			return skewX;
		}
		this.skewX = skewX;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return skewX;
	}
	,skewY: null
	,set_skewY: function(skewY) {
		if(this.skewY == skewY) {
			return skewY;
		}
		this.skewY = skewY;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return skewY;
	}
	,anchorX: null
	,set_anchorX: function(anchorX) {
		if(this.anchorX == anchorX) {
			return anchorX;
		}
		this.anchorX = anchorX;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return anchorX;
	}
	,anchorY: null
	,set_anchorY: function(anchorY) {
		if(this.anchorY == anchorY) {
			return anchorY;
		}
		this.anchorY = anchorY;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return anchorY;
	}
	,_width: null
	,get_width: function() {
		return this._width;
	}
	,set_width: function(width) {
		if(this._width == width) {
			return width;
		}
		this._width = width;
		if(this.anchorX != 0) {
			this.matrixDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
		}
		return width;
	}
	,_height: null
	,get_height: function() {
		return this._height;
	}
	,set_height: function(height) {
		if(this._height == height) {
			return height;
		}
		this._height = height;
		if(this.anchorY != 0) {
			this.matrixDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
		}
		return height;
	}
	,roundTranslation: null
	,set_roundTranslation: function(roundTranslation) {
		if(this.roundTranslation == roundTranslation) {
			return roundTranslation;
		}
		this.roundTranslation = roundTranslation;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return roundTranslation;
	}
	,rotation: null
	,set_rotation: function(rotation) {
		if(this.rotation == rotation) {
			return rotation;
		}
		this.rotation = rotation;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		this.translatesOnlyDirty = true;
		return rotation;
	}
	,alpha: null
	,set_alpha: function(alpha) {
		if(this.alpha == alpha) {
			return alpha;
		}
		this.alpha = alpha;
		this.visibilityDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		return alpha;
	}
	,get_translateX: function() {
		if(this.transform != null) {
			return this.transform.tx;
		} else {
			return 0;
		}
	}
	,set_translateX: function(translateX) {
		if(translateX == 0) {
			if(this.transform != null && this.transform.tx != 0) {
				this.transform.tx = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.tx != translateX) {
				this.transform.tx = translateX;
				this.transform.changedDirty = true;
			}
		}
		return translateX;
	}
	,get_translateY: function() {
		if(this.transform != null) {
			return this.transform.ty;
		} else {
			return 0;
		}
	}
	,set_translateY: function(translateY) {
		if(translateY == 0) {
			if(this.transform != null && this.transform.ty != 0) {
				this.transform.ty = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.ty != translateY) {
				this.transform.ty = translateY;
				this.transform.changedDirty = true;
			}
		}
		return translateY;
	}
	,transform: null
	,set_transform: function(transform) {
		if(this.transform == transform) {
			return transform;
		}
		if(this.transform != null) {
			this.transform.offChange($bind(this,this.transformDidChange));
		}
		this.transform = transform;
		if(this.transform != null) {
			this.transform.onChange(this,$bind(this,this.transformDidChange));
		}
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		return transform;
	}
	,shader: null
	,set_shader: function(shader) {
		return this.shader = shader;
	}
	,flag: function(index,value) {
		var i = index + 16;
		if(value != null) {
			this.flags = value ? this.flags | 1 << i : this.flags & ~(1 << i);
			return value;
		} else {
			var mask = 1 << i;
			return (this.flags & mask) == mask;
		}
	}
	,internalFlag: function(index,value) {
		if(value != null) {
			this.flags = value ? this.flags | 1 << index : this.flags & ~(1 << index);
			return value;
		} else {
			var mask = 1 << index;
			return (this.flags & mask) == mask;
		}
	}
	,flags: null
	,get_active: function() {
		return (this.flags & 1) != 1;
	}
	,set_active: function(active) {
		if(active == ((this.flags & 1) != 1)) {
			return active;
		}
		this.flags = active ? this.flags & -2 : this.flags | 1;
		if(active) {
			this.set_visible((this.flags & 2) == 2);
			this.set_touchable((this.flags & 4) == 4);
		} else {
			this.flags = this.visible ? this.flags | 2 : this.flags & -3;
			this.flags = this.touchable ? this.flags | 4 : this.flags & -5;
			this.set_visible(false);
			this.set_touchable(false);
		}
		return active;
	}
	,matA: null
	,matB: null
	,matC: null
	,matD: null
	,matTX: null
	,matTY: null
	,computedVisible: null
	,computedAlpha: null
	,computedDepth: null
	,computedRenderTarget: null
	,computedTouchable: null
	,computedClip: null
	,children: null
	,parent: null
	,size: function(width,height) {
		this.set_width(width);
		this.set_height(height);
	}
	,anchor: function(anchorX,anchorY) {
		this.set_anchorX(anchorX);
		this.set_anchorY(anchorY);
	}
	,pos: function(x,y) {
		this.set_x(x);
		this.set_y(y);
	}
	,_scale: function(scaleX,scaleY) {
		this.set_scaleX(scaleX);
		this.set_scaleY(scaleY);
	}
	,skew: function(skewX,skewY) {
		this.set_skewX(skewX);
		this.set_skewY(skewY);
	}
	,translate: function(translateX,translateY) {
		if(translateX == 0) {
			if(this.transform != null && this.transform.tx != 0) {
				this.transform.tx = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.tx != translateX) {
				this.transform.tx = translateX;
				this.transform.changedDirty = true;
			}
		}
		if(translateY == 0) {
			if(this.transform != null && this.transform.ty != 0) {
				this.transform.ty = 0;
				this.transform.changedDirty = true;
			}
		} else {
			if(this.transform == null) {
				this.set_transform(new ceramic_Transform());
			}
			if(this.transform.ty != translateY) {
				this.transform.ty = translateY;
				this.transform.changedDirty = true;
			}
		}
	}
	,anchorKeepPosition: function(anchorX,anchorY) {
		if(this.anchorX == anchorX && this.anchorY == anchorY) {
			return;
		}
		this.visualToScreen(0,0,ceramic_Visual._point,false);
		if(this.parent != null) {
			this.parent.screenToVisual(ceramic_Visual._point.x,ceramic_Visual._point.y,ceramic_Visual._point,false);
		}
		var prevX = ceramic_Visual._point.x;
		var prevY = ceramic_Visual._point.y;
		this.set_anchorX(anchorX);
		this.set_anchorY(anchorY);
		this.visualToScreen(0,0,ceramic_Visual._point,false);
		if(this.parent != null) {
			this.parent.screenToVisual(ceramic_Visual._point.x,ceramic_Visual._point.y,ceramic_Visual._point,false);
		}
		this.set_x(this.x + (prevX - ceramic_Visual._point.x));
		this.set_y(this.y + (prevY - ceramic_Visual._point.y));
	}
	,childWithId: function(id,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				if(child.id == id) {
					return child;
				}
			}
			if(recursive) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					var childResult = child.childWithId(id,true);
					if(childResult != null) {
						return childResult;
					}
				}
			}
		}
		return null;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(ceramic_App.app.screen.get_focusedVisual() == this) {
			ceramic_App.app.screen.set_focusedVisual(null);
		}
		ceramic_App.app.destroyedVisuals.push(this);
		if(this.parent != null) {
			this.parent.remove(this);
		}
		if(this.transform != null) {
			this.set_transform(null);
		}
		this.clear();
		this.visibilityDirty = false;
		this.computedVisible = false;
	}
	,clear: function() {
		if(this.children != null && this.children.length > 0) {
			var len = this.children.length;
			var pool = ceramic_ArrayPool.pool(len);
			var tmp = pool.get();
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				tmp.vector[i] = this.children[i];
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var child = tmp.vector[i];
				child.destroy();
			}
			this.children = null;
			pool.release(tmp);
		}
	}
	,transformDidChange: function() {
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
	}
	,computeMatrix: function() {
		if(this.parent != null && this.parent.matrixDirty) {
			this.parent.computeMatrix();
		}
		var _this = ceramic_Visual._matrix;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		if(this.translatesOnlyDirty) {
			this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
			this.translatesOnlyDirty = false;
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.translatesOnly) {
			ceramic_Visual._matrix.tx += this.x - this.anchorX * w;
			ceramic_Visual._matrix.ty += this.y - this.anchorY * h;
		} else {
			var _this = ceramic_Visual._matrix;
			_this.tx += -this.anchorX * w;
			_this.ty += -this.anchorY * h;
			_this.changedDirty = true;
			if(this.scaleX != 1.0 || this.scaleY != 1.0) {
				var _this = ceramic_Visual._matrix;
				var x = this.scaleX;
				var y = this.scaleY;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
			}
			if(this.skewX != 0 || this.skewY != 0) {
				var _this = ceramic_Visual._matrix;
				var skewX = this.skewX * 0.017453292519943295;
				var skewY = this.skewY * 0.017453292519943295;
				var _this1 = ceramic_Transform._tmp;
				_this1.a = 1;
				_this1.b = 0;
				_this1.c = 0;
				_this1.d = 1;
				_this1.tx = 0;
				_this1.ty = 0;
				_this1.changedDirty = true;
				var sr = 0;
				var cr = 1;
				var cy = Math.cos(skewY);
				var sy = Math.sin(skewY);
				var nsx = -Math.sin(skewX);
				var cx = Math.cos(skewX);
				var a = cr;
				var b = sr;
				var c = -sr;
				var d = cr;
				ceramic_Transform._tmp.a = cy * a + sy * c;
				ceramic_Transform._tmp.b = cy * b + sy * d;
				ceramic_Transform._tmp.c = nsx * a + cx * c;
				ceramic_Transform._tmp.d = nsx * b + cx * d;
				var m = ceramic_Transform._tmp;
				var a1 = _this.a * m.a + _this.b * m.c;
				_this.b = _this.a * m.b + _this.b * m.d;
				_this.a = a1;
				var c1 = _this.c * m.a + _this.d * m.c;
				_this.d = _this.c * m.b + _this.d * m.d;
				_this.c = c1;
				var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
				_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			if(this.rotation != 0) {
				var _this = ceramic_Visual._matrix;
				var angle = this.rotation * 0.017453292519943295;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			var _this = ceramic_Visual._matrix;
			_this.tx += this.x;
			_this.ty += this.y;
			_this.changedDirty = true;
		}
		if(this.transform != null) {
			var a1 = ceramic_Visual._matrix.a * this.transform.a + ceramic_Visual._matrix.b * this.transform.c;
			ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.transform.b + ceramic_Visual._matrix.b * this.transform.d;
			ceramic_Visual._matrix.a = a1;
			var c1 = ceramic_Visual._matrix.c * this.transform.a + ceramic_Visual._matrix.d * this.transform.c;
			ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.transform.b + ceramic_Visual._matrix.d * this.transform.d;
			ceramic_Visual._matrix.c = c1;
			var tx1 = ceramic_Visual._matrix.tx * this.transform.a + ceramic_Visual._matrix.ty * this.transform.c + this.transform.tx;
			ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.transform.b + ceramic_Visual._matrix.ty * this.transform.d + this.transform.ty;
			ceramic_Visual._matrix.tx = tx1;
		}
		if(this.parent != null && this.renderTarget == null) {
			if(this.parent.matA == 1 && this.parent.matB == 0 && this.parent.matC == 0 && this.parent.matD == 1) {
				ceramic_Visual._matrix.tx += this.parent.matTX;
				ceramic_Visual._matrix.ty += this.parent.matTY;
			} else if(this.translatesOnly && this.transform == null) {
				ceramic_Visual._matrix.a = this.parent.matA;
				ceramic_Visual._matrix.b = this.parent.matB;
				ceramic_Visual._matrix.c = this.parent.matC;
				ceramic_Visual._matrix.d = this.parent.matD;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			} else {
				var a1 = ceramic_Visual._matrix.a * this.parent.matA + ceramic_Visual._matrix.b * this.parent.matC;
				ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.parent.matB + ceramic_Visual._matrix.b * this.parent.matD;
				ceramic_Visual._matrix.a = a1;
				var c1 = ceramic_Visual._matrix.c * this.parent.matA + ceramic_Visual._matrix.d * this.parent.matC;
				ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.parent.matB + ceramic_Visual._matrix.d * this.parent.matD;
				ceramic_Visual._matrix.c = c1;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			}
		}
		this.matA = ceramic_Visual._matrix.a;
		this.matB = ceramic_Visual._matrix.b;
		this.matC = ceramic_Visual._matrix.c;
		this.matD = ceramic_Visual._matrix.d;
		this.matTX = ceramic_Visual._matrix.tx;
		this.matTY = ceramic_Visual._matrix.ty;
		if(this.roundTranslation > 0) {
			if(this.roundTranslation == 1) {
				this.matTX = Math.round(this.matTX);
				this.matTY = Math.round(this.matTY);
			} else {
				this.matTX = Math.round(this.matTX * this.roundTranslation) / this.roundTranslation;
				this.matTY = Math.round(this.matTY * this.roundTranslation) / this.roundTranslation;
			}
		}
		this.matrixDirty = false;
	}
	,computeTranslatesOnly: function() {
		this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
		this.translatesOnlyDirty = false;
	}
	,doComputeMatrix: function() {
		if(this.translatesOnlyDirty) {
			this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
			this.translatesOnlyDirty = false;
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.translatesOnly) {
			ceramic_Visual._matrix.tx += this.x - this.anchorX * w;
			ceramic_Visual._matrix.ty += this.y - this.anchorY * h;
		} else {
			var _this = ceramic_Visual._matrix;
			_this.tx += -this.anchorX * w;
			_this.ty += -this.anchorY * h;
			_this.changedDirty = true;
			if(this.scaleX != 1.0 || this.scaleY != 1.0) {
				var _this = ceramic_Visual._matrix;
				var x = this.scaleX;
				var y = this.scaleY;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
			}
			if(this.skewX != 0 || this.skewY != 0) {
				var _this = ceramic_Visual._matrix;
				var skewX = this.skewX * 0.017453292519943295;
				var skewY = this.skewY * 0.017453292519943295;
				var _this1 = ceramic_Transform._tmp;
				_this1.a = 1;
				_this1.b = 0;
				_this1.c = 0;
				_this1.d = 1;
				_this1.tx = 0;
				_this1.ty = 0;
				_this1.changedDirty = true;
				var sr = 0;
				var cr = 1;
				var cy = Math.cos(skewY);
				var sy = Math.sin(skewY);
				var nsx = -Math.sin(skewX);
				var cx = Math.cos(skewX);
				var a = cr;
				var b = sr;
				var c = -sr;
				var d = cr;
				ceramic_Transform._tmp.a = cy * a + sy * c;
				ceramic_Transform._tmp.b = cy * b + sy * d;
				ceramic_Transform._tmp.c = nsx * a + cx * c;
				ceramic_Transform._tmp.d = nsx * b + cx * d;
				var m = ceramic_Transform._tmp;
				var a1 = _this.a * m.a + _this.b * m.c;
				_this.b = _this.a * m.b + _this.b * m.d;
				_this.a = a1;
				var c1 = _this.c * m.a + _this.d * m.c;
				_this.d = _this.c * m.b + _this.d * m.d;
				_this.c = c1;
				var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
				_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			if(this.rotation != 0) {
				var _this = ceramic_Visual._matrix;
				var angle = this.rotation * 0.017453292519943295;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			var _this = ceramic_Visual._matrix;
			_this.tx += this.x;
			_this.ty += this.y;
			_this.changedDirty = true;
		}
		if(this.transform != null) {
			var a1 = ceramic_Visual._matrix.a * this.transform.a + ceramic_Visual._matrix.b * this.transform.c;
			ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.transform.b + ceramic_Visual._matrix.b * this.transform.d;
			ceramic_Visual._matrix.a = a1;
			var c1 = ceramic_Visual._matrix.c * this.transform.a + ceramic_Visual._matrix.d * this.transform.c;
			ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.transform.b + ceramic_Visual._matrix.d * this.transform.d;
			ceramic_Visual._matrix.c = c1;
			var tx1 = ceramic_Visual._matrix.tx * this.transform.a + ceramic_Visual._matrix.ty * this.transform.c + this.transform.tx;
			ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.transform.b + ceramic_Visual._matrix.ty * this.transform.d + this.transform.ty;
			ceramic_Visual._matrix.tx = tx1;
		}
		if(this.parent != null && this.renderTarget == null) {
			if(this.parent.matA == 1 && this.parent.matB == 0 && this.parent.matC == 0 && this.parent.matD == 1) {
				ceramic_Visual._matrix.tx += this.parent.matTX;
				ceramic_Visual._matrix.ty += this.parent.matTY;
			} else if(this.translatesOnly && this.transform == null) {
				ceramic_Visual._matrix.a = this.parent.matA;
				ceramic_Visual._matrix.b = this.parent.matB;
				ceramic_Visual._matrix.c = this.parent.matC;
				ceramic_Visual._matrix.d = this.parent.matD;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			} else {
				var a1 = ceramic_Visual._matrix.a * this.parent.matA + ceramic_Visual._matrix.b * this.parent.matC;
				ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.parent.matB + ceramic_Visual._matrix.b * this.parent.matD;
				ceramic_Visual._matrix.a = a1;
				var c1 = ceramic_Visual._matrix.c * this.parent.matA + ceramic_Visual._matrix.d * this.parent.matC;
				ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.parent.matB + ceramic_Visual._matrix.d * this.parent.matD;
				ceramic_Visual._matrix.c = c1;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			}
		}
		this.matA = ceramic_Visual._matrix.a;
		this.matB = ceramic_Visual._matrix.b;
		this.matC = ceramic_Visual._matrix.c;
		this.matD = ceramic_Visual._matrix.d;
		this.matTX = ceramic_Visual._matrix.tx;
		this.matTY = ceramic_Visual._matrix.ty;
		if(this.roundTranslation > 0) {
			if(this.roundTranslation == 1) {
				this.matTX = Math.round(this.matTX);
				this.matTY = Math.round(this.matTY);
			} else {
				this.matTX = Math.round(this.matTX * this.roundTranslation) / this.roundTranslation;
				this.matTY = Math.round(this.matTY * this.roundTranslation) / this.roundTranslation;
			}
		}
		this.matrixDirty = false;
	}
	,_hits: function(x,y,ignoreRenderTarget) {
		if(!ignoreRenderTarget) {
			if(this.renderTargetDirty) {
				this.computeRenderTarget();
			}
			if(this.computedRenderTarget != null) {
				var parent = this.parent;
				if(parent != null) {
					do {
						if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
							var filter = parent;
							if(filter.get_renderTexture() == this.computedRenderTarget) {
								if(ceramic_Screen.matchedHitVisual == null || filter.hitVisual == ceramic_Screen.matchedHitVisual) {
									return filter.visualInContentHits(this,x,y);
								}
							}
						}
						parent = parent.parent;
					} while(parent != null);
				}
				return false;
			} else if(ceramic_Screen.matchedHitVisual != null && ceramic_Screen.matchedHitVisual != this) {
				return false;
			}
		}
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		var _this = ceramic_Visual._matrix;
		_this.a = this.matA;
		_this.b = this.matB;
		_this.c = this.matC;
		_this.d = this.matD;
		_this.tx = this.matTX;
		_this.ty = this.matTY;
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			_this.a = _this.b = _this.c = _this.d = 0;
			_this.tx = -_this.tx;
			_this.ty = -_this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = _this.d * norm;
			_this.d = _this.a * norm;
			_this.a = a1;
			_this.b *= -norm;
			_this.c *= -norm;
			var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
			_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
			_this.tx = tx1;
		}
		_this.changedDirty = true;
		return this.hitTest(x,y,ceramic_Visual._matrix);
	}
	,hitTest: function(x,y,matrix) {
		var testX = x * matrix.a + y * matrix.c + matrix.tx;
		var testY = x * matrix.b + y * matrix.d + matrix.ty;
		if(testX >= 0 && testX < this.get_width() && testY >= 0) {
			return testY < this.get_height();
		} else {
			return false;
		}
	}
	,get_isHitVisual: function() {
		return (this.flags & 8) == 8;
	}
	,set_isHitVisual: function(isHitVisual) {
		this.flags = isHitVisual ? this.flags | 8 : this.flags & -9;
		return isHitVisual;
	}
	,interceptPointerDown: function(hittingVisual,x,y,touchIndex,buttonId) {
		return false;
	}
	,interceptPointerOver: function(hittingVisual,x,y) {
		return false;
	}
	,screenToVisual: function(x,y,point,handleFilters) {
		if(handleFilters == null) {
			handleFilters = true;
		}
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		if(handleFilters) {
			if(this.renderTargetDirty) {
				this.computeRenderTarget();
			}
			if(this.computedRenderTarget != null) {
				var parent = this.parent;
				if(parent != null) {
					do {
						if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
							var filter = parent;
							if(filter.get_renderTexture() == this.computedRenderTarget) {
								filter.screenToVisual(x,y,point);
								var _this = ceramic_Visual._matrix;
								_this.a = this.matA;
								_this.b = this.matB;
								_this.c = this.matC;
								_this.d = this.matD;
								_this.tx = this.matTX;
								_this.ty = this.matTY;
								_this.changedDirty = true;
								var _this1 = ceramic_Visual._matrix;
								var norm = _this1.a * _this1.d - _this1.b * _this1.c;
								if(norm == 0) {
									_this1.a = _this1.b = _this1.c = _this1.d = 0;
									_this1.tx = -_this1.tx;
									_this1.ty = -_this1.ty;
								} else {
									norm = 1.0 / norm;
									var a1 = _this1.d * norm;
									_this1.d = _this1.a * norm;
									_this1.a = a1;
									_this1.b *= -norm;
									_this1.c *= -norm;
									var tx1 = -_this1.a * _this1.tx - _this1.c * _this1.ty;
									_this1.ty = -_this1.b * _this1.tx - _this1.d * _this1.ty;
									_this1.tx = tx1;
								}
								_this1.changedDirty = true;
								var _x = point.x;
								var _y = point.y;
								var _this2 = ceramic_Visual._matrix;
								point.x = _x * _this2.a + _y * _this2.c + _this2.tx;
								var _this3 = ceramic_Visual._matrix;
								point.y = _x * _this3.b + _y * _this3.d + _this3.ty;
								return;
							}
						}
						parent = parent.parent;
					} while(parent != null);
				}
			}
		}
		var _this = ceramic_Visual._matrix;
		_this.a = this.matA;
		_this.b = this.matB;
		_this.c = this.matC;
		_this.d = this.matD;
		_this.tx = this.matTX;
		_this.ty = this.matTY;
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			_this.a = _this.b = _this.c = _this.d = 0;
			_this.tx = -_this.tx;
			_this.ty = -_this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = _this.d * norm;
			_this.d = _this.a * norm;
			_this.a = a1;
			_this.b *= -norm;
			_this.c *= -norm;
			var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
			_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
			_this.tx = tx1;
		}
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		point.x = x * _this.a + y * _this.c + _this.tx;
		var _this = ceramic_Visual._matrix;
		point.y = x * _this.b + y * _this.d + _this.ty;
	}
	,visualToScreen: function(x,y,point,handleFilters) {
		if(handleFilters == null) {
			handleFilters = true;
		}
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		if(handleFilters) {
			if(this.renderTargetDirty) {
				this.computeRenderTarget();
			}
			if(this.computedRenderTarget != null) {
				var parent = this.parent;
				if(parent != null) {
					do {
						if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
							var filter = parent;
							if(filter.get_renderTexture() == this.computedRenderTarget) {
								var _this = ceramic_Visual._matrix;
								_this.a = this.matA;
								_this.b = this.matB;
								_this.c = this.matC;
								_this.d = this.matD;
								_this.tx = this.matTX;
								_this.ty = this.matTY;
								_this.changedDirty = true;
								var _this1 = ceramic_Visual._matrix;
								point.x = x * _this1.a + y * _this1.c + _this1.tx;
								var _this2 = ceramic_Visual._matrix;
								point.y = x * _this2.b + y * _this2.d + _this2.ty;
								filter.visualToScreen(point.x,point.y,point);
								return;
							}
						}
						parent = parent.parent;
					} while(parent != null);
				}
			}
		}
		var _this = ceramic_Visual._matrix;
		_this.a = this.matA;
		_this.b = this.matB;
		_this.c = this.matC;
		_this.d = this.matD;
		_this.tx = this.matTX;
		_this.ty = this.matTY;
		_this.changedDirty = true;
		var _this = ceramic_Visual._matrix;
		point.x = x * _this.a + y * _this.c + _this.tx;
		var _this = ceramic_Visual._matrix;
		point.y = x * _this.b + y * _this.d + _this.ty;
	}
	,visualToTransform: function(transform) {
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		transform.a = this.matA;
		transform.b = this.matB;
		transform.c = this.matC;
		transform.d = this.matD;
		transform.tx = this.matTX;
		transform.ty = this.matTY;
		transform.changedDirty = true;
	}
	,computeVisibility: function() {
		if(this._lifecycleState < 0) {
			this.computedVisible = false;
		} else {
			if(this.parent != null && this.parent.visibilityDirty) {
				this.parent.computeVisibility();
			}
			this.computedVisible = this.visible;
			this.computedAlpha = this.alpha;
			if(this.computedVisible) {
				if(this.parent != null) {
					if(!this.parent.computedVisible && (this.parent.inheritAlpha || !this.parent.visible || this.parent.parent != null && !this.parent.parent.computedVisible)) {
						this.computedVisible = false;
					}
					if(this.inheritAlpha) {
						this.computedAlpha *= this.parent.computedAlpha;
					}
				}
				if(this.computedAlpha == 0 && this.blending != 4) {
					this.computedVisible = false;
				}
			}
		}
		this.visibilityDirty = false;
	}
	,computeClip: function() {
		if(this.renderTargetDirty) {
			this.computeRenderTarget();
		}
		if(this.parent != null && this.parent.clipDirty) {
			this.parent.computeClip();
		}
		this.computedClip = this.clip;
		if(this.computedClip == null && this.parent != null) {
			if(this.parent.computedClip != null) {
				if(this.computedRenderTarget == this.parent.computedRenderTarget) {
					this.computedClip = this.parent.computedClip;
				}
			}
		}
		this.clipDirty = false;
	}
	,computeTouchable: function() {
		if(this.parent != null && this.parent.touchableDirty) {
			this.parent.computeTouchable();
		}
		this.computedTouchable = this.touchable;
		if(this.computedTouchable) {
			if(this.parent != null) {
				if(!this.parent.computedTouchable) {
					this.computedTouchable = false;
				}
			}
		}
		this.touchableDirty = false;
	}
	,computeRenderTarget: function() {
		if(this.parent != null && this.parent.renderTargetDirty) {
			this.parent.computeRenderTarget();
		}
		var prevComputedRenderTarget = this.computedRenderTarget;
		this.computedRenderTarget = this.renderTarget;
		if(this.computedRenderTarget == null && this.parent != null && this.parent.computedRenderTarget != null) {
			this.computedRenderTarget = this.parent.computedRenderTarget;
		}
		this.renderTargetDirty = false;
	}
	,computeContent: function() {
		this.contentDirty = false;
	}
	,autoChildrenDepth: function(start,step) {
		if(step == null) {
			step = 1;
		}
		if(start == null) {
			start = 1;
		}
		var depth = start;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.set_depth(depth);
				depth += step;
			}
		}
	}
	,sortChildrenByDepth: function() {
		if(this.children != null && this.children.length > 0) {
			var a = this.children;
			ceramic_SortVisualsByDepth.rec(a,0,a.length);
		}
	}
	,normalizeChildrenDepth: function(start,step) {
		if(step == null) {
			step = 1;
		}
		if(start == null) {
			start = 1;
		}
		if(this.children != null && this.children.length > 0) {
			this.sortChildrenByDepth();
			this.autoChildrenDepth();
		}
	}
	,hasIndirectParent: function(targetParent) {
		var parent = this.parent;
		while(parent != null) {
			if(parent == targetParent) {
				return true;
			}
			parent = parent.parent;
		}
		return false;
	}
	,firstParentWithClass: function(clazz) {
		var parent = this.parent;
		while(parent != null) {
			if(js_Boot.__instanceof(parent,clazz)) {
				return parent;
			}
			parent = parent.parent;
		}
		return null;
	}
	,add: function(visual) {
		if(visual == this) {
			throw haxe_Exception.thrown("A visual cannot add itself as child!");
		}
		if(visual.parent != this) {
			ceramic_App.app.hierarchyDirty = true;
			if(visual.parent != null) {
				visual.parent.remove(visual);
			}
			visual.parent = this;
			visual.visibilityDirty = true;
			if(visual.children != null) {
				var _g = 0;
				var _g1 = visual.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = visual.children[i];
					child.visibilityDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_visibilityDirty(true);
						}
					}
				}
			}
			visual.matrixDirty = true;
			if(visual.children != null) {
				var _g = 0;
				var _g1 = visual.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = visual.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
			visual.renderTargetDirty = true;
			visual.clipDirty = true;
			if(visual.children != null) {
				var _g = 0;
				var _g1 = visual.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = visual.children[i];
					child.clipDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_clipDirty(true);
						}
					}
				}
			}
			if(visual.children != null) {
				var _g = 0;
				var _g1 = visual.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = visual.children[i];
					child.renderTargetDirty = true;
					child.clipDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.clipDirty = true;
							if(child1.children != null) {
								var _g4 = 0;
								var _g5 = child1.children.length;
								while(_g4 < _g5) {
									var i2 = _g4++;
									var child2 = child1.children[i2];
									child2.clipDirty = true;
									if(child2.children != null) {
										var _g6 = 0;
										var _g7 = child2.children.length;
										while(_g6 < _g7) {
											var i3 = _g6++;
											var child3 = child2.children[i3];
											child3.set_clipDirty(true);
										}
									}
								}
							}
						}
					}
					if(child.children != null) {
						var _g8 = 0;
						var _g9 = child.children.length;
						while(_g8 < _g9) {
							var i4 = _g8++;
							var child4 = child.children[i4];
							child4.set_renderTargetDirty(true);
						}
					}
				}
			}
			if(this.children == null) {
				this.children = [];
			}
			this.children.push(visual);
			this.clipDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.clipDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_clipDirty(true);
						}
					}
				}
			}
		}
	}
	,remove: function(visual) {
		ceramic_App.app.hierarchyDirty = true;
		if(this.children == null) {
			return;
		}
		var index = this.children.indexOf(visual);
		if(index != -1) {
			this.children.splice(this.children.indexOf(visual),1);
		} else {
			ceramic_App.app.logger.warning("Cannot remove visual " + Std.string(visual) + ", index is -1",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Visual.hx", lineNumber : 2862, className : "ceramic.Visual", methodName : "remove"});
		}
		visual.parent = null;
		visual.visibilityDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.visibilityDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_visibilityDirty(true);
					}
				}
			}
		}
		visual.matrixDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		visual.renderTargetDirty = true;
		visual.clipDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.renderTargetDirty = true;
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.clipDirty = true;
						if(child1.children != null) {
							var _g4 = 0;
							var _g5 = child1.children.length;
							while(_g4 < _g5) {
								var i2 = _g4++;
								var child2 = child1.children[i2];
								child2.clipDirty = true;
								if(child2.children != null) {
									var _g6 = 0;
									var _g7 = child2.children.length;
									while(_g6 < _g7) {
										var i3 = _g6++;
										var child3 = child2.children[i3];
										child3.set_clipDirty(true);
									}
								}
							}
						}
					}
				}
				if(child.children != null) {
					var _g8 = 0;
					var _g9 = child.children.length;
					while(_g8 < _g9) {
						var i4 = _g8++;
						var child4 = child.children[i4];
						child4.set_renderTargetDirty(true);
					}
				}
			}
		}
		visual.clipDirty = true;
		if(visual.children != null) {
			var _g = 0;
			var _g1 = visual.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = visual.children[i];
				child.clipDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_clipDirty(true);
					}
				}
			}
		}
	}
	,contains: function(child,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var parent = child.parent;
		while(parent != null) {
			if(parent == this) {
				return true;
			}
			parent = parent.parent;
			if(!recursive) {
				break;
			}
		}
		return false;
	}
	,computeBounds: function() {
		if(this.children == null) {
			this._width = 0;
			this._height = 0;
		} else {
			var minX = 999999999.0;
			var minY = 999999999.0;
			var maxX = -999999999.9;
			var maxY = -999999999.9;
			var point = new ceramic_Point();
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				if(child.visible) {
					if(child.asMesh != null) {
						var mesh = child.asMesh;
						var vertices = mesh.vertices;
						var i1 = 0;
						var len = vertices.length;
						var x = 0.0;
						var y = 0.0;
						while(i1 < len) {
							x = vertices[i1];
							y = vertices[i1 + 1];
							child.visualToScreen(x,y,point,false);
							if(point.x > maxX) {
								maxX = point.x;
							}
							if(point.y > maxY) {
								maxY = point.y;
							}
							if(point.x < minX) {
								minX = point.x;
							}
							if(point.y < minY) {
								minY = point.y;
							}
							i1 += 2;
						}
					} else {
						child.visualToScreen(0,0,point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
						child.visualToScreen(child.get_width(),0,point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
						child.visualToScreen(0,child.get_height(),point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
						child.visualToScreen(child.get_width(),child.get_height(),point,false);
						if(point.x > maxX) {
							maxX = point.x;
						}
						if(point.y > maxY) {
							maxY = point.y;
						}
						if(point.x < minX) {
							minX = point.x;
						}
						if(point.y < minY) {
							minY = point.y;
						}
					}
				}
			}
			this.visualToScreen(0,0,point,false);
			var origX = point.x;
			var origY = point.y;
			this.screenToVisual(minX,minY,point,false);
			minX = point.x;
			minY = point.y;
			this.screenToVisual(maxX,maxY,point,false);
			maxX = point.x;
			maxY = point.y;
			if(maxX < minX) {
				var prevMinX = minX;
				minX = maxX;
				maxX = prevMinX;
			}
			if(maxY < minY) {
				var prevMinY = minY;
				minY = maxY;
				maxY = prevMinY;
			}
			this._width = maxX - minX;
			this._height = maxY - minY;
			this.set_anchorX(this._width != 0 ? -minX / this._width : 0);
			this.set_anchorY(this._height != 0 ? -minY / this._height : 0);
			this.screenToVisual(origX,origY,point,false);
			this.set_x(point.x - this._width * this.anchorX);
			this.set_y(point.y - this._height * this.anchorY);
			this.matrixDirty = true;
			if(this.children != null) {
				var _g = 0;
				var _g1 = this.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = this.children[i];
					child.matrixDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_matrixDirty(true);
						}
					}
				}
			}
		}
	}
	,bindToNativeScreenSize: function() {
		ceramic_App.app.screen.reverseMatrix.onChange(this,$bind(this,this._bindToNativeScreenSizeCallback));
		this._bindToNativeScreenSizeCallback();
	}
	,_bindToNativeScreenSizeCallback: function() {
		if(this.transform == null) {
			this.set_transform(new ceramic_Transform());
		}
		var _this = this.transform;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		var _this = this.transform;
		var x = clay_Clay.app.screenDensity;
		var y = clay_Clay.app.screenDensity;
		_this.a *= x;
		_this.b *= y;
		_this.c *= x;
		_this.d *= y;
		_this.tx *= x;
		_this.ty *= y;
		_this.changedDirty = true;
		var _this = this.transform;
		var m = ceramic_App.app.screen.reverseMatrix;
		var a1 = _this.a * m.a + _this.b * m.c;
		_this.b = _this.a * m.b + _this.b * m.d;
		_this.a = a1;
		var c1 = _this.c * m.a + _this.d * m.c;
		_this.d = _this.c * m.b + _this.d * m.d;
		_this.c = c1;
		var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
		_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
		_this.tx = tx1;
		_this.changedDirty = true;
		this.transform.tx = this.transform.tx;
		this.transform.ty = this.transform.ty;
		this.transform.changedDirty = true;
		var height = clay_Clay.app.screenHeight;
		this.set_width(clay_Clay.app.screenWidth);
		this.set_height(height);
	}
	,bindToScreenSize: function(factor) {
		if(factor == null) {
			factor = 1.0;
		}
		var _gthis = this;
		ceramic_App.app.screen.onResize(this,function() {
			_gthis._bindToScreenSizeCallback(factor);
		});
		this._bindToScreenSizeCallback(factor);
	}
	,_bindToScreenSizeCallback: function(factor) {
		var height = ceramic_App.app.screen.height * factor;
		this.set_width(ceramic_App.app.screen.width * factor);
		this.set_height(height);
	}
	,bindToTargetSize: function() {
		ceramic_App.app.screen.onResize(this,$bind(this,this._bindToTargetSizeCallback));
		this._bindToTargetSizeCallback();
	}
	,_bindToTargetSizeCallback: function() {
		var height = ceramic_App.app.screen.height;
		this.set_width(ceramic_App.app.screen.width);
		this.set_height(height);
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offPointerDown();
		this.offPointerUp();
		this.offPointerOver();
		this.offPointerOut();
		this.offFocus();
		this.offBlur();
	}
	,__class__: ceramic_Visual
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_isHitVisual:"set_isHitVisual",get_isHitVisual:"get_isHitVisual",set_active:"set_active",get_active:"get_active",set_shader:"set_shader",set_transform:"set_transform",set_translateY:"set_translateY",get_translateY:"get_translateY",set_translateX:"set_translateX",get_translateX:"get_translateX",set_alpha:"set_alpha",set_rotation:"set_rotation",set_roundTranslation:"set_roundTranslation",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_anchorY:"set_anchorY",set_anchorX:"set_anchorX",set_skewY:"set_skewY",set_skewX:"set_skewX",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_y:"set_y",set_x:"set_x",set_depthRange:"set_depthRange",set_depth:"set_depth",set_touchable:"set_touchable",set_visible:"set_visible",set_blending:"set_blending",set_renderTarget:"set_renderTarget",set_clipDirty:"set_clipDirty",set_touchableDirty:"set_touchableDirty",set_visibilityDirty:"set_visibilityDirty",set_renderTargetDirty:"set_renderTargetDirty",set_matrixDirty:"set_matrixDirty",set_contentDirty:"set_contentDirty",set_inheritAlpha:"set_inheritAlpha",set_clip:"set_clip",get_isPointerOver:"get_isPointerOver",get_isPointerDown:"get_isPointerDown"})
});
var ceramic_Quad = function() {
	this.frameHeight = -1;
	this.frameWidth = -1;
	this.frameY = -1;
	this.frameX = -1;
	this._texture = null;
	this.tile = null;
	this.color = 16777215;
	ceramic_Visual.call(this);
	this.asQuad = this;
};
$hxClasses["ceramic.Quad"] = ceramic_Quad;
ceramic_Quad.__name__ = "ceramic.Quad";
ceramic_Quad.__super__ = ceramic_Visual;
ceramic_Quad.prototype = $extend(ceramic_Visual.prototype,{
	color: null
	,get_transparent: function() {
		return (this.flags & 16) == 16;
	}
	,set_transparent: function(transparent) {
		this.flags = transparent ? this.flags | 16 : this.flags & -17;
		return transparent;
	}
	,tile: null
	,set_tile: function(tile) {
		if(this.tile == tile) {
			return tile;
		}
		this.tile = tile;
		if(tile == null) {
			var texture = null;
			if(this._texture != texture) {
				this._set_texture(texture);
			}
		} else {
			if(this._texture != tile.texture) {
				var texture = tile.texture;
				if(this._texture != texture) {
					this._set_texture(texture);
				}
			}
			this.frameX = tile.frameX + tile.edgeInset;
			this.frameY = tile.frameY + tile.edgeInset;
			var frameWidth = tile.frameWidth - tile.edgeInset * 2;
			if(this.frameWidth != frameWidth) {
				this.frameWidth = frameWidth;
				if(frameWidth != -1) {
					this.set_width(frameWidth);
				}
			}
			var frameHeight = tile.frameHeight - tile.edgeInset * 2;
			if(this.frameHeight != frameHeight) {
				this.frameHeight = frameHeight;
				if(frameHeight != -1) {
					this.set_height(frameHeight);
				}
			}
			this.set_width(tile.frameWidth);
			this.set_height(tile.frameHeight);
			var rotateFrame = tile.rotateFrame;
			this.flags = rotateFrame ? this.flags | 32 : this.flags & -33;
		}
		return tile;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(texture) {
		if(this._texture != texture) {
			this._set_texture(texture);
		}
		return texture;
	}
	,_texture: null
	,_set_texture: function(texture) {
		if(!(texture == null || texture._lifecycleState >= 0)) {
			ceramic_App.app.logger.error("texture == null || !texture.destroyed" + (" (" + ("Cannot assign destroyed texture: " + Std.string(texture)) + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Quad.hx", lineNumber : 83, className : "ceramic.Quad", methodName : "_set_texture"});
			throw haxe_Exception.thrown("texture == null || !texture.destroyed" + (" (" + ("Cannot assign destroyed texture: " + Std.string(texture)) + ")"));
		}
		if(this._texture != null) {
			this._texture.offDestroy($bind(this,this.textureDestroyed));
			if(this._texture.asset != null) {
				this._texture.asset.release();
			}
		}
		this._texture = texture;
		if(texture == null) {
			this.frameX = -1;
			this.frameY = -1;
			if(this.frameWidth != -1) {
				this.frameWidth = -1;
			}
			if(this.frameHeight != -1) {
				this.frameHeight = -1;
			}
		} else if(this.tile != null) {
			this.frameX = this.tile.frameX;
			this.frameY = this.tile.frameY;
			var frameWidth = this.tile.frameWidth;
			if(this.frameWidth != frameWidth) {
				this.frameWidth = frameWidth;
				if(frameWidth != -1) {
					this.set_width(frameWidth);
				}
			}
			var frameHeight = this.tile.frameHeight;
			if(this.frameHeight != frameHeight) {
				this.frameHeight = frameHeight;
				if(frameHeight != -1) {
					this.set_height(frameHeight);
				}
			}
			texture.onDestroy(this,$bind(this,this.textureDestroyed));
			if(texture.asset != null) {
				texture.asset.retain();
			}
		} else {
			this.frameX = 0;
			this.frameY = 0;
			var frameWidth = texture.width;
			if(this.frameWidth != frameWidth) {
				this.frameWidth = frameWidth;
				if(frameWidth != -1) {
					this.set_width(frameWidth);
				}
			}
			var frameHeight = texture.height;
			if(this.frameHeight != frameHeight) {
				this.frameHeight = frameHeight;
				if(frameHeight != -1) {
					this.set_height(frameHeight);
				}
			}
			texture.onDestroy(this,$bind(this,this.textureDestroyed));
			if(texture.asset != null) {
				texture.asset.retain();
			}
		}
	}
	,frameX: null
	,frameY: null
	,frameWidth: null
	,set_frameWidth: function(frameWidth) {
		if(this.frameWidth == frameWidth) {
			return frameWidth;
		}
		this.frameWidth = frameWidth;
		if(frameWidth != -1) {
			this.set_width(frameWidth);
		}
		return frameWidth;
	}
	,frameHeight: null
	,set_frameHeight: function(frameHeight) {
		if(this.frameHeight == frameHeight) {
			return frameHeight;
		}
		this.frameHeight = frameHeight;
		if(frameHeight != -1) {
			this.set_height(frameHeight);
		}
		return frameHeight;
	}
	,get_rotateFrame: function() {
		return (this.flags & 32) == 32;
	}
	,set_rotateFrame: function(rotateFrame) {
		this.flags = rotateFrame ? this.flags | 32 : this.flags & -33;
		return rotateFrame;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		var texture = null;
		if(this._texture != texture) {
			this._set_texture(texture);
		}
		this._lifecycleState = -1;
		ceramic_Visual.prototype.destroy.call(this);
	}
	,frame: function(frameX,frameY,frameWidth,frameHeight) {
		this.frameX = frameX;
		this.frameY = frameY;
		if(this.frameWidth != frameWidth) {
			this.frameWidth = frameWidth;
			if(frameWidth != -1) {
				this.set_width(frameWidth);
			}
		}
		if(this.frameHeight != frameHeight) {
			this.frameHeight = frameHeight;
			if(frameHeight != -1) {
				this.set_height(frameHeight);
			}
		}
	}
	,isRegular: function() {
		if(this.matrixDirty) {
			this.computeMatrix();
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.matC * h == 0 && this.matB * w == 0 && this.matC * h == 0) {
			return this.matB * w == 0;
		} else {
			return false;
		}
	}
	,computeMatrix: function() {
		if(this.parent != null && this.parent.matrixDirty) {
			this.parent.computeMatrix();
		}
		var _this = ceramic_Quad._matrix;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		if(this.translatesOnlyDirty) {
			this.translatesOnly = this.rotation == 0 && this.scaleX == 1 && this.scaleY == 1 && this.skewX == 0 && this.skewY == 0;
			this.translatesOnlyDirty = false;
		}
		var w = this.get_width();
		var h = this.get_height();
		if(this.translatesOnly) {
			ceramic_Visual._matrix.tx += this.x - this.anchorX * w;
			ceramic_Visual._matrix.ty += this.y - this.anchorY * h;
		} else {
			var _this = ceramic_Visual._matrix;
			_this.tx += -this.anchorX * w;
			_this.ty += -this.anchorY * h;
			_this.changedDirty = true;
			if(this.scaleX != 1.0 || this.scaleY != 1.0) {
				var _this = ceramic_Visual._matrix;
				var x = this.scaleX;
				var y = this.scaleY;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
			}
			if(this.skewX != 0 || this.skewY != 0) {
				var _this = ceramic_Visual._matrix;
				var skewX = this.skewX * 0.017453292519943295;
				var skewY = this.skewY * 0.017453292519943295;
				var _this1 = ceramic_Transform._tmp;
				_this1.a = 1;
				_this1.b = 0;
				_this1.c = 0;
				_this1.d = 1;
				_this1.tx = 0;
				_this1.ty = 0;
				_this1.changedDirty = true;
				var sr = 0;
				var cr = 1;
				var cy = Math.cos(skewY);
				var sy = Math.sin(skewY);
				var nsx = -Math.sin(skewX);
				var cx = Math.cos(skewX);
				var a = cr;
				var b = sr;
				var c = -sr;
				var d = cr;
				ceramic_Transform._tmp.a = cy * a + sy * c;
				ceramic_Transform._tmp.b = cy * b + sy * d;
				ceramic_Transform._tmp.c = nsx * a + cx * c;
				ceramic_Transform._tmp.d = nsx * b + cx * d;
				var m = ceramic_Transform._tmp;
				var a1 = _this.a * m.a + _this.b * m.c;
				_this.b = _this.a * m.b + _this.b * m.d;
				_this.a = a1;
				var c1 = _this.c * m.a + _this.d * m.c;
				_this.d = _this.c * m.b + _this.d * m.d;
				_this.c = c1;
				var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
				_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			if(this.rotation != 0) {
				var _this = ceramic_Visual._matrix;
				var angle = this.rotation * 0.017453292519943295;
				var cos = Math.cos(angle);
				var sin = Math.sin(angle);
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
				_this.changedDirty = true;
			}
			var _this = ceramic_Visual._matrix;
			_this.tx += this.x;
			_this.ty += this.y;
			_this.changedDirty = true;
		}
		if(this.transform != null) {
			var a1 = ceramic_Visual._matrix.a * this.transform.a + ceramic_Visual._matrix.b * this.transform.c;
			ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.transform.b + ceramic_Visual._matrix.b * this.transform.d;
			ceramic_Visual._matrix.a = a1;
			var c1 = ceramic_Visual._matrix.c * this.transform.a + ceramic_Visual._matrix.d * this.transform.c;
			ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.transform.b + ceramic_Visual._matrix.d * this.transform.d;
			ceramic_Visual._matrix.c = c1;
			var tx1 = ceramic_Visual._matrix.tx * this.transform.a + ceramic_Visual._matrix.ty * this.transform.c + this.transform.tx;
			ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.transform.b + ceramic_Visual._matrix.ty * this.transform.d + this.transform.ty;
			ceramic_Visual._matrix.tx = tx1;
		}
		if(this.parent != null && this.renderTarget == null) {
			if(this.parent.matA == 1 && this.parent.matB == 0 && this.parent.matC == 0 && this.parent.matD == 1) {
				ceramic_Visual._matrix.tx += this.parent.matTX;
				ceramic_Visual._matrix.ty += this.parent.matTY;
			} else if(this.translatesOnly && this.transform == null) {
				ceramic_Visual._matrix.a = this.parent.matA;
				ceramic_Visual._matrix.b = this.parent.matB;
				ceramic_Visual._matrix.c = this.parent.matC;
				ceramic_Visual._matrix.d = this.parent.matD;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			} else {
				var a1 = ceramic_Visual._matrix.a * this.parent.matA + ceramic_Visual._matrix.b * this.parent.matC;
				ceramic_Visual._matrix.b = ceramic_Visual._matrix.a * this.parent.matB + ceramic_Visual._matrix.b * this.parent.matD;
				ceramic_Visual._matrix.a = a1;
				var c1 = ceramic_Visual._matrix.c * this.parent.matA + ceramic_Visual._matrix.d * this.parent.matC;
				ceramic_Visual._matrix.d = ceramic_Visual._matrix.c * this.parent.matB + ceramic_Visual._matrix.d * this.parent.matD;
				ceramic_Visual._matrix.c = c1;
				var tx1 = ceramic_Visual._matrix.tx * this.parent.matA + ceramic_Visual._matrix.ty * this.parent.matC + this.parent.matTX;
				ceramic_Visual._matrix.ty = ceramic_Visual._matrix.tx * this.parent.matB + ceramic_Visual._matrix.ty * this.parent.matD + this.parent.matTY;
				ceramic_Visual._matrix.tx = tx1;
			}
		}
		this.matA = ceramic_Visual._matrix.a;
		this.matB = ceramic_Visual._matrix.b;
		this.matC = ceramic_Visual._matrix.c;
		this.matD = ceramic_Visual._matrix.d;
		this.matTX = ceramic_Visual._matrix.tx;
		this.matTY = ceramic_Visual._matrix.ty;
		if(this.roundTranslation > 0) {
			if(this.roundTranslation == 1) {
				this.matTX = Math.round(this.matTX);
				this.matTY = Math.round(this.matTY);
			} else {
				this.matTX = Math.round(this.matTX * this.roundTranslation) / this.roundTranslation;
				this.matTY = Math.round(this.matTY * this.roundTranslation) / this.roundTranslation;
			}
		}
		this.matrixDirty = false;
	}
	,textureDestroyed: function(_) {
		var texture = null;
		if(this._texture != texture) {
			this._set_texture(texture);
		}
		this.set_tile(null);
	}
	,__class__: ceramic_Quad
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_rotateFrame:"set_rotateFrame",get_rotateFrame:"get_rotateFrame",set_frameHeight:"set_frameHeight",set_frameWidth:"set_frameWidth",set_texture:"set_texture",get_texture:"get_texture",set_tile:"set_tile",set_transparent:"set_transparent",get_transparent:"get_transparent"})
});
var ceramic_Layer = function() {
	this.sizeDirty = false;
	ceramic_Quad.call(this);
	this.flags |= 16;
};
$hxClasses["ceramic.Layer"] = ceramic_Layer;
ceramic_Layer.__name__ = "ceramic.Layer";
ceramic_Layer.__super__ = ceramic_Quad;
ceramic_Layer.prototype = $extend(ceramic_Quad.prototype,{
	__cbOnResize: null
	,__cbOnceResize: null
	,__cbOnOwnerUnbindResize: null
	,__cbOnceOwnerUnbindResize: null
	,emitResize: function(width,height) {
		this.willEmitResize(width,height);
		var len = 0;
		if(this.__cbOnResize != null) {
			len += this.__cbOnResize.length;
		}
		if(this.__cbOnceResize != null) {
			len += this.__cbOnceResize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnResize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnResize[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceResize != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceResize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceResize[ii];
						this.__cbOnceResize[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindResize[ii];
						this.__cbOnceOwnerUnbindResize[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindResize[ii]);
						newCbOnceArray.push(this.__cbOnceResize[ii]);
					}
				}
				this.__cbOnceOwnerUnbindResize = newCbOnceOwnerUnbindArray;
				this.__cbOnceResize = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(width,height);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		this.didEmitResize(width,height);
	}
	,onResize: function(owner,handleWidthHeight) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleWidthHeight != null) {
					_gthis.offResize(handleWidthHeight);
					handleWidthHeight = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleWidthHeight = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(null);
		}
		if(this.__cbOnResize == null) {
			this.__cbOnResize = [];
		}
		this.__cbOnResize.push(handleWidthHeight);
	}
	,onceResize: function(owner,handleWidthHeight) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleWidthHeight != null) {
					_gthis.offResize(handleWidthHeight);
					handleWidthHeight = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleWidthHeight = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(null);
		}
		if(this.__cbOnceResize == null) {
			this.__cbOnceResize = [];
		}
		this.__cbOnceResize.push(handleWidthHeight);
	}
	,offResize: function(handleWidthHeight) {
		if(handleWidthHeight != null) {
			var index;
			var unbind;
			if(this.__cbOnResize != null) {
				index = this.__cbOnResize.indexOf(handleWidthHeight);
				if(index != -1) {
					this.__cbOnResize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindResize.splice(index,1);
				}
			}
			if(this.__cbOnceResize != null) {
				index = this.__cbOnceResize.indexOf(handleWidthHeight);
				if(index != -1) {
					this.__cbOnceResize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindResize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindResize = null;
			}
			if(this.__cbOnceOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindResize = null;
			}
			this.__cbOnResize = null;
			this.__cbOnceResize = null;
		}
	}
	,listensResize: function() {
		if(!(this.__cbOnResize != null && this.__cbOnResize.length > 0)) {
			if(this.__cbOnceResize != null) {
				return this.__cbOnceResize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,sizeDirty: null
	,emitResizeIfNeeded: function() {
		if(this._lifecycleState < 0 || !this.sizeDirty) {
			return;
		}
		this.sizeDirty = false;
		this.emitResize(this.get_width(),this.get_height());
	}
	,willEmitResize: function(width,height) {
	}
	,didEmitResize: function(width,height) {
	}
	,set_width: function(width) {
		if(this._width == width) {
			return width;
		}
		ceramic_Quad.prototype.set_width.call(this,width);
		if(!this.sizeDirty) {
			this.sizeDirty = true;
			ceramic_App.app._onceImmediate($bind(this,this.emitResizeIfNeeded));
		}
		return width;
	}
	,set_height: function(height) {
		if(this._height == height) {
			return height;
		}
		ceramic_Quad.prototype.set_height.call(this,height);
		if(!this.sizeDirty) {
			this.sizeDirty = true;
			ceramic_App.app._onceImmediate($bind(this,this.emitResizeIfNeeded));
		}
		return height;
	}
	,unbindEvents: function() {
		ceramic_Quad.prototype.unbindEvents.call(this);
		this.offResize();
	}
	,__class__: ceramic_Layer
});
var tracker_Observable = function() { };
$hxClasses["tracker.Observable"] = tracker_Observable;
tracker_Observable.__name__ = "tracker.Observable";
tracker_Observable.__isInterface__ = true;
var ceramic_Scene = function() {
	this.paused = false;
	this.autoUpdateWhenInactive = false;
	this.autoUpdate = true;
	this.isRootScene = false;
	this.unobservedStatus = 0;
	this.statusAutoruns = null;
	this._assets = null;
	this.observedDirty = false;
	ceramic_Layer.call(this);
	this.flags |= 16;
	ceramic_SceneSystem.get_shared().all.push(this);
};
$hxClasses["ceramic.Scene"] = ceramic_Scene;
ceramic_Scene.__name__ = "ceramic.Scene";
ceramic_Scene.__interfaces__ = [tracker_Observable];
ceramic_Scene.__super__ = ceramic_Layer;
ceramic_Scene.prototype = $extend(ceramic_Layer.prototype,{
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,_assets: null
	,statusAutoruns: null
	,get_status: function() {
		var value = this.unobservedStatus;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.statusAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.statusAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_status: function(status) {
		var prevValue = this.unobservedStatus;
		this.unobservedStatus = status;
		if(prevValue == status) {
			return status;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitStatusChange(status,prevValue);
		var fieldAutoruns = this.statusAutoruns;
		if(fieldAutoruns != null) {
			this.statusAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return status;
	}
	,invalidateStatus: function() {
		var value = this.unobservedStatus;
		this.emitStatusChange(value,value);
		var fieldAutoruns = this.statusAutoruns;
		if(fieldAutoruns != null) {
			this.statusAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedStatus: null
	,__cbOnStatusChange: null
	,__cbOnceStatusChange: null
	,__cbOnOwnerUnbindStatusChange: null
	,__cbOnceOwnerUnbindStatusChange: null
	,emitStatusChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnStatusChange != null) {
			len += this.__cbOnStatusChange.length;
		}
		if(this.__cbOnceStatusChange != null) {
			len += this.__cbOnceStatusChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnStatusChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnStatusChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceStatusChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceStatusChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceStatusChange[ii];
						this.__cbOnceStatusChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindStatusChange[ii];
						this.__cbOnceOwnerUnbindStatusChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindStatusChange[ii]);
						newCbOnceArray.push(this.__cbOnceStatusChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindStatusChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceStatusChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStatusChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "statusChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStatusChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStatusChange == null) {
				this.__cbOnOwnerUnbindStatusChange = [];
			}
			this.__cbOnOwnerUnbindStatusChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStatusChange == null) {
				this.__cbOnOwnerUnbindStatusChange = [];
			}
			this.__cbOnOwnerUnbindStatusChange.push(null);
		}
		if(this.__cbOnStatusChange == null) {
			this.__cbOnStatusChange = [];
		}
		this.__cbOnStatusChange.push(handleCurrentPrevious);
	}
	,onceStatusChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "statusChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStatusChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStatusChange == null) {
				this.__cbOnceOwnerUnbindStatusChange = [];
			}
			this.__cbOnceOwnerUnbindStatusChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStatusChange == null) {
				this.__cbOnceOwnerUnbindStatusChange = [];
			}
			this.__cbOnceOwnerUnbindStatusChange.push(null);
		}
		if(this.__cbOnceStatusChange == null) {
			this.__cbOnceStatusChange = [];
		}
		this.__cbOnceStatusChange.push(handleCurrentPrevious);
	}
	,offStatusChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnStatusChange != null) {
				index = this.__cbOnStatusChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnStatusChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStatusChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStatusChange.splice(index,1);
				}
			}
			if(this.__cbOnceStatusChange != null) {
				index = this.__cbOnceStatusChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceStatusChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStatusChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStatusChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStatusChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStatusChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStatusChange = null;
			}
			if(this.__cbOnceOwnerUnbindStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStatusChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStatusChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStatusChange = null;
			}
			this.__cbOnStatusChange = null;
			this.__cbOnceStatusChange = null;
		}
	}
	,listensStatusChange: function() {
		if(!(this.__cbOnStatusChange != null && this.__cbOnStatusChange.length > 0)) {
			if(this.__cbOnceStatusChange != null) {
				return this.__cbOnceStatusChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_assets: function() {
		if(this._assets == null && this._lifecycleState >= 0) {
			this._assets = new ceramic_Assets();
		}
		return this._assets;
	}
	,set_assets: function(assets) {
		return this._assets = assets;
	}
	,isRootScene: null
	,autoUpdate: null
	,autoUpdateWhenInactive: null
	,paused: null
	,_boot: function() {
		if(this.get_status() != 0) {
			var tmp = ceramic_App.app.logger;
			var tmp1 = this.get_status();
			tmp.warning("Scene already booted! (status: " + (tmp1 == null ? "null" : ceramic_SceneStatus.toString(tmp1)) + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Scene.hx", lineNumber : 65, className : "ceramic.Scene", methodName : "_boot"});
			return;
		}
		this.set_status(1);
		this.preload();
		this.set_status(2);
		if(this._assets != null && this._assets.hasAnythingToLoad()) {
			this._assets.onceComplete(this,$bind(this,this._handleAssetsComplete));
			this._assets.load(false,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Scene.hx", lineNumber : 76, className : "ceramic.Scene", methodName : "_boot"});
		} else {
			this.load($bind(this,this.internalCreate));
		}
	}
	,internalCreate: function() {
		this.set_status(3);
		this.create();
		this.fadeIn($bind(this,this._fadeInDone));
	}
	,_fadeInDone: function() {
	}
	,_handleAssetsComplete: function(successful) {
		if(successful) {
			this.load($bind(this,this.internalCreate));
		} else {
			ceramic_App.app.logger.error("Failed to load all scene assets!",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Scene.hx", lineNumber : 106, className : "ceramic.Scene", methodName : "_handleAssetsComplete"});
		}
	}
	,willEmitResize: function(width,height) {
		this.resize(width,height);
	}
	,preload: function() {
	}
	,load: function(next) {
		if(this._lifecycleState >= 0) {
			next();
		}
	}
	,create: function() {
	}
	,ready: function() {
	}
	,update: function(delta) {
	}
	,resize: function(width,height) {
	}
	,_fadeIn: function(done) {
		done();
	}
	,_fadeOut: function(done) {
		done();
	}
	,fadeIn: function(done) {
		var _gthis = this;
		this.set_status(4);
		this._fadeIn(function() {
			_gthis.set_status(5);
			if(_gthis._lifecycleState >= 0) {
				_gthis.ready();
				done();
			}
		});
	}
	,fadeOut: function(done) {
		var _gthis = this;
		this.set_status(6);
		this._fadeOut(function() {
			_gthis.set_status(7);
			if(_gthis._lifecycleState >= 0) {
				done();
			}
		});
	}
	,isReady: function() {
		switch(this.get_status()) {
		case 0:
			return false;
		case 1:
			return false;
		case 2:
			return false;
		case 3:
			return false;
		case 4:
			return false;
		case 5:
			return true;
		case 6:
			return false;
		case 7:
			return false;
		}
	}
	,scheduleOnceReady: function(owner,callback) {
		var _gthis = this;
		if(this._lifecycleState < 0) {
			ceramic_App.app.logger.warning("Cannot schedule callback on destroyed scene",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Scene.hx", lineNumber : 256, className : "ceramic.Scene", methodName : "scheduleOnceReady"});
			return false;
		}
		switch(this.get_status()) {
		case 0:case 1:case 2:case 3:case 4:
			this.onceStatusChange(owner,function(_,_1) {
				_gthis.scheduleOnceReady(owner,callback);
			});
			return true;
		case 5:
			callback();
			return true;
		case 6:case 7:
			var tmp = ceramic_App.app.logger;
			var tmp1 = this.get_status();
			tmp.warning("Cannot schedule callback on scene with status: " + (tmp1 == null ? "null" : ceramic_SceneStatus.toString(tmp1)),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Scene.hx", lineNumber : 273, className : "ceramic.Scene", methodName : "scheduleOnceReady"});
			return false;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		HxOverrides.remove(ceramic_SceneSystem.get_shared().all,this);
		if(this._assets != null) {
			this._assets.destroy();
			this._assets = null;
		}
		this._lifecycleState = -1;
		ceramic_Layer.prototype.destroy.call(this);
	}
	,unbindEvents: function() {
		ceramic_Layer.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offStatusChange();
	}
	,__class__: ceramic_Scene
	,__properties__: $extend(ceramic_Layer.prototype.__properties__,{set_assets:"set_assets",get_assets:"get_assets",set_status:"set_status",get_status:"get_status"})
});
var TestScene = function() {
	ceramic_Scene.call(this);
};
$hxClasses["TestScene"] = TestScene;
TestScene.__name__ = "TestScene";
TestScene.__super__ = ceramic_Scene;
TestScene.prototype = $extend(ceramic_Scene.prototype,{
	text: null
	,rect: null
	,tileemap: null
	,preload: function() {
		haxe_Log.trace("Test Scene Initialized!",{ fileName : "E:\\Projects\\FableMaker\\editor\\sample\\src\\TestScene.hx", lineNumber : 18, className : "TestScene", methodName : "preload"});
		ceramic_TilemapPlugin.addTilemap(this.get_assets(),"data/MapTest.tmx");
	}
	,create: function() {
		this.createText();
		this.createRect();
		this.createTilemap();
	}
	,createText: function() {
		this.text = new ceramic_Text();
		this.text.set_content("Hello World!");
		this.text.set_color(16777215);
		this.text.set_pointSize(52);
		var _this = this.text;
		_this.set_anchorX(0.5);
		_this.set_anchorY(0.5);
		var _this = this.text;
		var y = ceramic_App.app.screen.height * 0.5;
		_this.set_x(ceramic_App.app.screen.width * 0.5);
		_this.set_y(y);
		this.text.set_depth(10);
		this.add(this.text);
	}
	,createRect: function() {
		this.rect = new porcelain_Rect(50,50,4);
		this.rect.set_depth(10);
		this.add(this.rect);
	}
	,createTilemap: function() {
		var tilemap = new ceramic_Tilemap();
		tilemap.set_roundTilesTranslation(1);
		tilemap.set_tilemapData(ceramic_TilemapPlugin.tilemap(this.get_assets(),"data/MapTest.tmx"));
		tilemap.set_depth(0);
		this.add(tilemap);
	}
	,resize: function(width,height) {
		var _this = this.text;
		_this.set_x(width * 0.5);
		_this.set_y(height * 0.5);
	}
	,update: function(dt) {
		var fh = this.text;
		fh.set_rotation(fh.rotation + 25 * dt);
	}
	,__class__: TestScene
});
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var ceramic_Assets = function() {
	this.hotReload = false;
	this.pendingAtlasPackers = null;
	this.atlasPacker = null;
	this.parent = null;
	this.reloadOnTextureDensityChange = true;
	this.delayBetweenXAssets = -1;
	this.scheduleMethod = 1;
	this.loadMethod = 2;
	this.defaultImageOptions = null;
	this.runtimeAssets = null;
	this.immediate = new ceramic_Immediate();
	this.assetsByKindAndName = new haxe_ds_StringMap();
	this.addedAssets = [];
	ceramic_Entity.call(this);
	ceramic_Assets.instances.push(this);
};
$hxClasses["ceramic.Assets"] = ceramic_Assets;
ceramic_Assets.__name__ = "ceramic.Assets";
ceramic_Assets.flushAllInstancesImmediate = function() {
	var len = ceramic_Assets.instances.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		ceramic_Assets._instances[i] = ceramic_Assets.instances[i];
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var assets = ceramic_Assets._instances[i];
		ceramic_Assets._instances[i] = null;
		if(assets._lifecycleState >= 0) {
			assets.immediate.flush();
		}
	}
};
ceramic_Assets.decodePath = function(path) {
	return new ceramic_AssetPathInfo(path);
};
ceramic_Assets.addAssetKind = function(kind,add,extensions,dir,types) {
	var this1 = ceramic_Assets.customAssetKinds;
	var value = new ceramic_CustomAssetKind(kind,add,extensions,dir,types);
	this1.h[kind] = value;
};
ceramic_Assets.getAssetsPath = function() {
	return ceramic_PlatformSpecific.getAssetsPath();
};
ceramic_Assets.assetNameFromPath = function(path) {
	var h = ceramic_Assets.allByName.h;
	var name_h = h;
	var name_keys = Object.keys(h);
	var name_length = name_keys.length;
	var name_current = 0;
	while(name_current < name_length) {
		var name = name_keys[name_current++];
		var list = ceramic_Assets.allByName.h[name];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i] == path) {
				return name;
			}
		}
	}
	return null;
};
ceramic_Assets.realAssetPath = function(path,runtimeAssets) {
	if(runtimeAssets != null) {
		if(runtimeAssets.path != null) {
			return ceramic_Path.join([runtimeAssets.path,path]);
		} else {
			return path;
		}
	} else {
		var assetsPrefix = null;
		if(assetsPrefix != null) {
			return assetsPrefix + path;
		} else {
			return path;
		}
	}
};
ceramic_Assets.incrementReloadCount = function(realAssetPath) {
	if(ceramic_Assets.reloadCountByRealAssetPath == null) {
		ceramic_Assets.reloadCountByRealAssetPath = new haxe_ds_StringMap();
	}
	if(Object.prototype.hasOwnProperty.call(ceramic_Assets.reloadCountByRealAssetPath.h,realAssetPath)) {
		ceramic_Assets.reloadCountByRealAssetPath.h[realAssetPath] += 1;
	} else {
		ceramic_Assets.reloadCountByRealAssetPath.h[realAssetPath] = 1;
	}
};
ceramic_Assets.getReloadCount = function(realAssetPath) {
	if(ceramic_Assets.reloadCountByRealAssetPath == null || !Object.prototype.hasOwnProperty.call(ceramic_Assets.reloadCountByRealAssetPath.h,realAssetPath)) {
		return 0;
	}
	return ceramic_Assets.reloadCountByRealAssetPath.h[realAssetPath];
};
ceramic_Assets.__super__ = ceramic_Entity;
ceramic_Assets.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnComplete: null
	,__cbOnceComplete: null
	,__cbOnOwnerUnbindComplete: null
	,__cbOnceOwnerUnbindComplete: null
	,emitComplete: function(success) {
		var len = 0;
		if(this.__cbOnComplete != null) {
			len += this.__cbOnComplete.length;
		}
		if(this.__cbOnceComplete != null) {
			len += this.__cbOnceComplete.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnComplete[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceComplete != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceComplete[ii];
						this.__cbOnceComplete[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindComplete[ii];
						this.__cbOnceOwnerUnbindComplete[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindComplete[ii]);
						newCbOnceArray.push(this.__cbOnceComplete[ii]);
					}
				}
				this.__cbOnceOwnerUnbindComplete = newCbOnceOwnerUnbindArray;
				this.__cbOnceComplete = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(success);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnComplete == null) {
			this.__cbOnComplete = [];
		}
		this.__cbOnComplete.push(handleSuccess);
	}
	,onceComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnceComplete == null) {
			this.__cbOnceComplete = [];
		}
		this.__cbOnceComplete.push(handleSuccess);
	}
	,offComplete: function(handleSuccess) {
		if(handleSuccess != null) {
			var index;
			var unbind;
			if(this.__cbOnComplete != null) {
				index = this.__cbOnComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnComplete.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComplete.splice(index,1);
				}
			}
			if(this.__cbOnceComplete != null) {
				index = this.__cbOnceComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnceComplete.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComplete.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComplete = null;
			}
			if(this.__cbOnceOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComplete = null;
			}
			this.__cbOnComplete = null;
			this.__cbOnceComplete = null;
		}
	}
	,listensComplete: function() {
		if(!(this.__cbOnComplete != null && this.__cbOnComplete.length > 0)) {
			if(this.__cbOnceComplete != null) {
				return this.__cbOnceComplete.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnUpdate: null
	,__cbOnceUpdate: null
	,__cbOnOwnerUnbindUpdate: null
	,__cbOnceOwnerUnbindUpdate: null
	,emitUpdate: function(asset) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceUpdate[ii];
						this.__cbOnceUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
						this.__cbOnceOwnerUnbindUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(asset);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleAsset) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAsset != null) {
					_gthis.offUpdate(handleAsset);
					handleAsset = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAsset = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleAsset);
	}
	,onceUpdate: function(owner,handleAsset) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAsset != null) {
					_gthis.offUpdate(handleAsset);
					handleAsset = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAsset = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleAsset);
	}
	,offUpdate: function(handleAsset) {
		if(handleAsset != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleAsset);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleAsset);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnProgress: null
	,__cbOnceProgress: null
	,__cbOnOwnerUnbindProgress: null
	,__cbOnceOwnerUnbindProgress: null
	,emitProgress: function(loaded,total,success) {
		var len = 0;
		if(this.__cbOnProgress != null) {
			len += this.__cbOnProgress.length;
		}
		if(this.__cbOnceProgress != null) {
			len += this.__cbOnceProgress.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnProgress.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnProgress[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceProgress != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceProgress.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceProgress[ii];
						this.__cbOnceProgress[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindProgress[ii];
						this.__cbOnceOwnerUnbindProgress[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindProgress[ii]);
						newCbOnceArray.push(this.__cbOnceProgress[ii]);
					}
				}
				this.__cbOnceOwnerUnbindProgress = newCbOnceOwnerUnbindArray;
				this.__cbOnceProgress = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(loaded,total,success);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onProgress: function(owner,handleLoadedTotalSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "progress" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLoadedTotalSuccess != null) {
					_gthis.offProgress(handleLoadedTotalSuccess);
					handleLoadedTotalSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindProgress == null) {
				this.__cbOnOwnerUnbindProgress = [];
			}
			this.__cbOnOwnerUnbindProgress.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLoadedTotalSuccess = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindProgress == null) {
				this.__cbOnOwnerUnbindProgress = [];
			}
			this.__cbOnOwnerUnbindProgress.push(null);
		}
		if(this.__cbOnProgress == null) {
			this.__cbOnProgress = [];
		}
		this.__cbOnProgress.push(handleLoadedTotalSuccess);
	}
	,onceProgress: function(owner,handleLoadedTotalSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "progress" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLoadedTotalSuccess != null) {
					_gthis.offProgress(handleLoadedTotalSuccess);
					handleLoadedTotalSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindProgress == null) {
				this.__cbOnceOwnerUnbindProgress = [];
			}
			this.__cbOnceOwnerUnbindProgress.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLoadedTotalSuccess = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindProgress == null) {
				this.__cbOnceOwnerUnbindProgress = [];
			}
			this.__cbOnceOwnerUnbindProgress.push(null);
		}
		if(this.__cbOnceProgress == null) {
			this.__cbOnceProgress = [];
		}
		this.__cbOnceProgress.push(handleLoadedTotalSuccess);
	}
	,offProgress: function(handleLoadedTotalSuccess) {
		if(handleLoadedTotalSuccess != null) {
			var index;
			var unbind;
			if(this.__cbOnProgress != null) {
				index = this.__cbOnProgress.indexOf(handleLoadedTotalSuccess);
				if(index != -1) {
					this.__cbOnProgress.splice(index,1);
					unbind = this.__cbOnOwnerUnbindProgress[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindProgress.splice(index,1);
				}
			}
			if(this.__cbOnceProgress != null) {
				index = this.__cbOnceProgress.indexOf(handleLoadedTotalSuccess);
				if(index != -1) {
					this.__cbOnceProgress.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindProgress[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindProgress.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindProgress.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindProgress[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindProgress = null;
			}
			if(this.__cbOnceOwnerUnbindProgress != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindProgress.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindProgress[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindProgress = null;
			}
			this.__cbOnProgress = null;
			this.__cbOnceProgress = null;
		}
	}
	,listensProgress: function() {
		if(!(this.__cbOnProgress != null && this.__cbOnProgress.length > 0)) {
			if(this.__cbOnceProgress != null) {
				return this.__cbOnceProgress.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnAssetFilesChange: null
	,__cbOnceAssetFilesChange: null
	,__cbOnOwnerUnbindAssetFilesChange: null
	,__cbOnceOwnerUnbindAssetFilesChange: null
	,emitAssetFilesChange: function(newFiles,previousFiles) {
		var len = 0;
		if(this.__cbOnAssetFilesChange != null) {
			len += this.__cbOnAssetFilesChange.length;
		}
		if(this.__cbOnceAssetFilesChange != null) {
			len += this.__cbOnceAssetFilesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnAssetFilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnAssetFilesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceAssetFilesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceAssetFilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceAssetFilesChange[ii];
						this.__cbOnceAssetFilesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindAssetFilesChange[ii];
						this.__cbOnceOwnerUnbindAssetFilesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindAssetFilesChange[ii]);
						newCbOnceArray.push(this.__cbOnceAssetFilesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindAssetFilesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceAssetFilesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newFiles,previousFiles);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onAssetFilesChange: function(owner,handleNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "assetFilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFilesPreviousFiles != null) {
					_gthis.offAssetFilesChange(handleNewFilesPreviousFiles);
					handleNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindAssetFilesChange == null) {
				this.__cbOnOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnOwnerUnbindAssetFilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindAssetFilesChange == null) {
				this.__cbOnOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnOwnerUnbindAssetFilesChange.push(null);
		}
		if(this.__cbOnAssetFilesChange == null) {
			this.__cbOnAssetFilesChange = [];
		}
		this.__cbOnAssetFilesChange.push(handleNewFilesPreviousFiles);
	}
	,onceAssetFilesChange: function(owner,handleNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "assetFilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFilesPreviousFiles != null) {
					_gthis.offAssetFilesChange(handleNewFilesPreviousFiles);
					handleNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindAssetFilesChange == null) {
				this.__cbOnceOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnceOwnerUnbindAssetFilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindAssetFilesChange == null) {
				this.__cbOnceOwnerUnbindAssetFilesChange = [];
			}
			this.__cbOnceOwnerUnbindAssetFilesChange.push(null);
		}
		if(this.__cbOnceAssetFilesChange == null) {
			this.__cbOnceAssetFilesChange = [];
		}
		this.__cbOnceAssetFilesChange.push(handleNewFilesPreviousFiles);
	}
	,offAssetFilesChange: function(handleNewFilesPreviousFiles) {
		if(handleNewFilesPreviousFiles != null) {
			var index;
			var unbind;
			if(this.__cbOnAssetFilesChange != null) {
				index = this.__cbOnAssetFilesChange.indexOf(handleNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnAssetFilesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindAssetFilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindAssetFilesChange.splice(index,1);
				}
			}
			if(this.__cbOnceAssetFilesChange != null) {
				index = this.__cbOnceAssetFilesChange.indexOf(handleNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnceAssetFilesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindAssetFilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindAssetFilesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindAssetFilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindAssetFilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindAssetFilesChange = null;
			}
			if(this.__cbOnceOwnerUnbindAssetFilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindAssetFilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindAssetFilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindAssetFilesChange = null;
			}
			this.__cbOnAssetFilesChange = null;
			this.__cbOnceAssetFilesChange = null;
		}
	}
	,listensAssetFilesChange: function() {
		if(!(this.__cbOnAssetFilesChange != null && this.__cbOnAssetFilesChange.length > 0)) {
			if(this.__cbOnceAssetFilesChange != null) {
				return this.__cbOnceAssetFilesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,addedAssets: null
	,assetsByKindAndName: null
	,immediate: null
	,runtimeAssets: null
	,defaultImageOptions: null
	,loadMethod: null
	,scheduleMethod: null
	,delayBetweenXAssets: null
	,reloadOnTextureDensityChange: null
	,parent: null
	,atlasPacker: null
	,pendingAtlasPackers: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		HxOverrides.remove(ceramic_Assets.instances,this);
		var _g = 0;
		var _g1 = [].concat(this.addedAssets);
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			asset.offDestroy($bind(this,this.assetDestroyed));
			asset.destroy();
		}
		this.addedAssets = null;
		this.assetsByKindAndName = null;
		if(this.atlasPacker != null) {
			var _atlasPacker = this.atlasPacker;
			this.atlasPacker = null;
			_atlasPacker.destroy();
		}
		if(this.pendingAtlasPackers != null) {
			var _pendingAtlasPackers = this.pendingAtlasPackers;
			this.pendingAtlasPackers = null;
			var _g = 0;
			var _g1 = _pendingAtlasPackers.length;
			while(_g < _g1) {
				var i = _g++;
				_pendingAtlasPackers[i].destroy();
			}
		}
	}
	,flush: function() {
		var _g = 0;
		var _g1 = [].concat(this.addedAssets);
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(asset.refCount == 0) {
				asset.destroy();
			}
		}
	}
	,add: function(id,options) {
		var value = typeof(id) == "string" ? id : Reflect.field(id,"_id");
		var colonIndex = value.indexOf(":");
		if(colonIndex == -1) {
			throw haxe_Exception.thrown("Assets: invalid asset id: " + id);
		}
		var kind = HxOverrides.substr(value,0,colonIndex);
		var name = HxOverrides.substr(value,colonIndex + 1,null);
		switch(kind) {
		case "atlas":
			this.addAtlas(name,options);
			break;
		case "binary":
			this.addBinary(name,options);
			break;
		case "database":
			this.addDatabase(name,options);
			break;
		case "font":
			this.addFont(name,options);
			break;
		case "fragments":
			this.addFragments(name,options);
			break;
		case "image":
			this.addImage(name,options);
			break;
		case "shader":
			this.addShader(name,options);
			break;
		case "sound":
			this.addSound(name,options);
			break;
		case "text":
			this.addText(name,options);
			break;
		default:
			if(Object.prototype.hasOwnProperty.call(ceramic_Assets.customAssetKinds.h,kind)) {
				ceramic_Assets.customAssetKinds.h[kind].add(this,name,options);
			} else {
				throw haxe_Exception.thrown("Assets: invalid asset kind (" + kind + ") for id: " + id);
			}
		}
	}
	,addAll: function(pathPattern) {
		var info = ceramic_App.app.backend.info;
		var imageExtensions = ["png","jpg","jpeg"];
		var textExtensions = ["txt","json","fnt","atlas"];
		var soundExtensions;
		if(backend_Info._soundExtensions != null) {
			soundExtensions = [].concat(backend_Info._soundExtensions);
		} else {
			backend_Info._soundExtensions = [];
			var audioTest = new Audio();
			var ua = $global.navigator != null ? $global.navigator.userAgent : "";
			var checkOpera = backend_Info.RE_OPERA.match(ua);
			var isOldOpera = checkOpera && parseInt(backend_Info.RE_OPERA.matched(0).split("/")[1],10) < 33;
			var checkSafari = ua.indexOf("Safari") != -1 && ua.indexOf("Chrome") == -1;
			var safariVersion = backend_Info.RE_SAFARI_VERSION.match(ua);
			var isOldSafari = checkSafari && safariVersion && parseInt(backend_Info.RE_SAFARI_VERSION.matched(1),10) < 15;
			var oggTest = audioTest.canPlayType("audio/ogg; codecs=\"vorbis\"");
			var canPlayOgg = oggTest != null && oggTest != "no" && oggTest != "";
			if(canPlayOgg) {
				backend_Info._soundExtensions.push("ogg");
			}
			var mpegTest = audioTest.canPlayType("audio/mpeg;");
			var mp3Test = audioTest.canPlayType("audio/mp3;");
			var canPlayMp3 = mpegTest != null && mpegTest != "no" && mpegTest != "" || mp3Test != null && mp3Test != "no" && mp3Test != "";
			if(!isOldOpera && canPlayMp3) {
				backend_Info._soundExtensions.push("mp3");
			}
			var xFlacTest = audioTest.canPlayType("audio/x-flac;");
			var flacTest = audioTest.canPlayType("audio/flac;");
			var canPlayFlac = xFlacTest != null && xFlacTest != "no" && xFlacTest != "" || flacTest != null && flacTest != "no" && flacTest != "";
			if(canPlayFlac) {
				backend_Info._soundExtensions.push("flac");
			}
			var wavCodecTest = audioTest.canPlayType("audio/wav; codecs=\"1\"");
			var wavTest = audioTest.canPlayType("audio/wav;");
			var canPlayWav = wavCodecTest != null && wavCodecTest != "no" && wavCodecTest != "" || wavTest != null && wavTest != "no" && wavTest != "";
			if(canPlayWav) {
				backend_Info._soundExtensions.push("wav");
			}
			soundExtensions = [].concat(backend_Info._soundExtensions);
		}
		var shaderExtensions = ["frag","vert"];
		var fontExtensions = ["fnt"];
		var atlasExtensions = ["atlas"];
		var databaseExtensions = ["csv"];
		var fragmentsExtensions = ["fragments"];
		var customKindsExtensions = [];
		var customKindsAdd = [];
		var h = ceramic_Assets.customAssetKinds.h;
		var value_h = h;
		var value_keys = Object.keys(h);
		var value_length = value_keys.length;
		var value_current = 0;
		while(value_current < value_length) {
			var value = value_h[value_keys[value_current++]];
			customKindsExtensions.push(value.extensions);
			customKindsAdd.push(value.add);
		}
		var allByName = ceramic_Assets.allByName;
		if(this.runtimeAssets != null) {
			allByName = this.runtimeAssets.getLists().allByName;
		}
		var h = allByName.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var name = _g_key;
			var paths = _g_value;
			if(pathPattern != null) {
				var matches = false;
				var _g = 0;
				var _g1 = paths.length;
				while(_g < _g1) {
					var i = _g++;
					if(pathPattern.match(paths[i])) {
						matches = true;
						break;
					}
				}
				if(!matches) {
					continue;
				}
			}
			var assetExtension = ceramic_Path.extension(paths[0]);
			var didAdd = false;
			var _g2 = 0;
			var _g3 = imageExtensions.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				if(imageExtensions[i1] == assetExtension) {
					this.addImage(name);
					didAdd = true;
					break;
				}
			}
			if(!didAdd) {
				var _g4 = 0;
				var _g5 = soundExtensions.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					if(soundExtensions[i2] == assetExtension) {
						this.addSound(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g6 = 0;
				var _g7 = shaderExtensions.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					if(shaderExtensions[i3] == assetExtension) {
						this.addShader(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g8 = 0;
				var _g9 = fontExtensions.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(fontExtensions[i4] == assetExtension) {
						this.addFont(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g10 = 0;
				var _g11 = atlasExtensions.length;
				while(_g10 < _g11) {
					var i5 = _g10++;
					if(atlasExtensions[i5] == assetExtension) {
						this.addAtlas(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g12 = 0;
				var _g13 = databaseExtensions.length;
				while(_g12 < _g13) {
					var i6 = _g12++;
					if(databaseExtensions[i6] == assetExtension) {
						this.addDatabase(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g14 = 0;
				var _g15 = fragmentsExtensions.length;
				while(_g14 < _g15) {
					var i7 = _g14++;
					if(fragmentsExtensions[i7] == assetExtension) {
						this.addFragments(name);
						didAdd = true;
						break;
					}
				}
			}
			if(!didAdd) {
				var _g16 = 0;
				var _g17 = customKindsExtensions.length;
				while(_g16 < _g17) {
					var j = _g16++;
					var extensions = customKindsExtensions[j];
					var _g18 = 0;
					var _g19 = extensions.length;
					while(_g18 < _g19) {
						var i8 = _g18++;
						if(extensions[i8] == assetExtension) {
							var add = customKindsAdd[j];
							add(this,name);
							didAdd = true;
							break;
						}
					}
					if(didAdd) {
						break;
					}
				}
			}
			if(!didAdd) {
				var _g20 = 0;
				var _g21 = textExtensions.length;
				while(_g20 < _g21) {
					var i9 = _g20++;
					if(textExtensions[i9] == assetExtension) {
						this.addText(name);
						didAdd = true;
						break;
					}
				}
			}
		}
	}
	,addImage: function(name,options) {
		if(StringTools.startsWith(name,"image:")) {
			name = HxOverrides.substr(name,6,null);
		}
		this.addAsset(new ceramic_ImageAsset(name,options));
	}
	,addFont: function(name,options) {
		if(StringTools.startsWith(name,"font:")) {
			name = HxOverrides.substr(name,5,null);
		}
		this.addAsset(new ceramic_FontAsset(name,options));
	}
	,addAtlas: function(name,options) {
		if(StringTools.startsWith(name,"atlas:")) {
			name = HxOverrides.substr(name,6,null);
		}
		this.addAsset(new ceramic_AtlasAsset(name,options));
	}
	,addText: function(name,options) {
		if(StringTools.startsWith(name,"text:")) {
			name = HxOverrides.substr(name,5,null);
		}
		this.addAsset(new ceramic_TextAsset(name,options));
	}
	,addBinary: function(name,options) {
		if(StringTools.startsWith(name,"binary:")) {
			name = HxOverrides.substr(name,7,null);
		}
		this.addAsset(new ceramic_BinaryAsset(name,options));
	}
	,addSound: function(name,options) {
		if(StringTools.startsWith(name,"sound:")) {
			name = HxOverrides.substr(name,6,null);
		}
		this.addAsset(new ceramic_SoundAsset(name,options));
	}
	,addDatabase: function(name,options) {
		if(StringTools.startsWith(name,"database:")) {
			name = HxOverrides.substr(name,9,null);
		}
		this.addAsset(new ceramic_DatabaseAsset(name,options));
	}
	,addFragments: function(name,options) {
		if(StringTools.startsWith(name,"fragments:")) {
			name = HxOverrides.substr(name,10,null);
		}
		this.addAsset(new ceramic_FragmentsAsset(name,options));
	}
	,addShader: function(name,options) {
		if(StringTools.startsWith(name,"shader:")) {
			name = HxOverrides.substr(name,7,null);
		}
		this.addAsset(new ceramic_ShaderAsset(name,options));
	}
	,addAsset: function(asset) {
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,asset.kind)) {
			var this1 = this.assetsByKindAndName;
			var key = asset.kind;
			var value = new haxe_ds_StringMap();
			this1.h[key] = value;
		}
		var byName = this.assetsByKindAndName.h[asset.kind];
		if(((asset) instanceof ceramic_ImageAsset)) {
			var imageAsset = asset;
			imageAsset.defaultImageOptions = this.defaultImageOptions;
		}
		var previousAsset = byName.h[asset.name];
		if(previousAsset != null) {
			if(previousAsset != asset) {
				ceramic_App.app.logger.info("Replace " + Std.string(previousAsset) + " with " + Std.string(asset),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Assets.hx", lineNumber : 406, className : "ceramic.Assets", methodName : "addAsset"});
				this.removeAsset(previousAsset);
			} else {
				ceramic_App.app.logger.warning("Cannot add asset " + Std.string(asset) + " because it is already added for name: " + asset.name + ".",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Assets.hx", lineNumber : 409, className : "ceramic.Assets", methodName : "addAsset"});
				return previousAsset;
			}
		}
		asset.onDestroy(this,$bind(this,this.assetDestroyed));
		byName.h[asset.name] = asset;
		if(asset.owner != null && asset.owner != this) {
			asset.owner.removeAsset(asset);
		}
		this.addedAssets.push(asset);
		asset.owner = this;
		asset.set_runtimeAssets(this.runtimeAssets);
		asset.set_hotReload(this.hotReload);
		return previousAsset;
	}
	,assetDestroyed: function(_) {
		var toDestroy = null;
		var _g = 0;
		var _g1 = this.addedAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(asset._lifecycleState < 0) {
				if(toDestroy == null) {
					toDestroy = [];
				}
				toDestroy.push(asset);
			}
		}
		if(toDestroy != null) {
			var _g = 0;
			while(_g < toDestroy.length) {
				var asset = toDestroy[_g];
				++_g;
				this.removeAsset(asset);
			}
		}
	}
	,imageAsset: function(name) {
		return this.asset(name,"image");
	}
	,fontAsset: function(name) {
		return this.asset(name,"font");
	}
	,atlasAsset: function(name) {
		return this.asset(name,"atlas");
	}
	,textAsset: function(name) {
		return this.asset(name,"text");
	}
	,soundAsset: function(name) {
		return this.asset(name,"sound");
	}
	,databaseAsset: function(name) {
		return this.asset(name,"database");
	}
	,fragmentsAsset: function(name) {
		return this.asset(name,"fragments");
	}
	,shaderAsset: function(name) {
		return this.asset(name,"shader");
	}
	,asset: function(idOrName,kind) {
		var value = typeof(idOrName) == "string" ? idOrName : Reflect.field(idOrName,"_id");
		var colonIndex = value.indexOf(":");
		var name = value;
		if(colonIndex != -1) {
			name = value.substring(colonIndex + 1);
			kind = value.substring(0,colonIndex);
		}
		if(kind == null) {
			if(this.parent != null) {
				return this.parent.asset(idOrName,kind);
			} else {
				return null;
			}
		}
		var byName = this.assetsByKindAndName.h[kind];
		if(byName == null) {
			if(this.parent != null) {
				return this.parent.asset(idOrName,kind);
			} else {
				return null;
			}
		}
		return byName.h[name];
	}
	,removeAsset: function(asset) {
		asset.offDestroy($bind(this,this.assetDestroyed));
		var byName = this.assetsByKindAndName.h[asset.kind];
		var toRemove = byName.h[asset.name];
		if(asset != toRemove) {
			throw haxe_Exception.thrown("Cannot remove asset " + Std.string(asset) + " if it was not added at the first place.");
		}
		HxOverrides.remove(this.addedAssets,asset);
		var key = asset.name;
		if(Object.prototype.hasOwnProperty.call(byName.h,key)) {
			delete(byName.h[key]);
		}
		asset.owner = null;
	}
	,hasAnythingToLoad: function() {
		var _g = 0;
		var _g1 = this.addedAssets.length;
		while(_g < _g1) {
			var i = _g++;
			var asset = this.addedAssets[i];
			if(asset.get_status() == ceramic_AssetStatus.NONE) {
				return true;
			}
		}
		return false;
	}
	,countAssetsWithStatus: function(status) {
		var result = 0;
		var assets = this.addedAssets;
		var _g = 0;
		var _g1 = this.addedAssets.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.addedAssets[i].get_status() == status) {
				++result;
			}
		}
		return result;
	}
	,load: function(warnIfNothingToLoad,pos) {
		if(warnIfNothingToLoad == null) {
			warnIfNothingToLoad = true;
		}
		var _gthis = this;
		var total = 0;
		var pending = 0;
		var allSuccess = true;
		var addedAssets = [].concat(this.addedAssets);
		var _g = 0;
		while(_g < addedAssets.length) {
			var asset = [addedAssets[_g]];
			++_g;
			if(asset[0].get_status() == ceramic_AssetStatus.NONE) {
				asset[0].onceComplete(this,(function(asset) {
					return function(success) {
						if(!success) {
							allSuccess = false;
							ceramic_App.app.logger.error("Failed to load asset " + asset[0].name + " (" + Std.string(asset[0]) + ")",pos);
						}
						pending -= 1;
						_gthis.emitProgress(total - pending,total,allSuccess);
						if(pending == 0) {
							_gthis._prepareComplete(allSuccess);
						}
					};
				})(asset));
				pending += 1;
				total += 1;
			}
		}
		if(pending > 0) {
			if(this.scheduleMethod == 2) {
				var numComplete = 0;
				var toLoad = [];
				var _g = 0;
				while(_g < addedAssets.length) {
					var asset1 = addedAssets[_g];
					++_g;
					if(asset1.get_status() == ceramic_AssetStatus.NONE) {
						toLoad.push(asset1);
					}
				}
				this._loadNextSerial(toLoad,numComplete);
				this.immediate.flush();
			} else {
				if(this.delayBetweenXAssets > 0) {
					var numStarted = 0;
					var toLoad = [];
					var _g = 0;
					while(_g < addedAssets.length) {
						var asset1 = addedAssets[_g];
						++_g;
						if(asset1.get_status() == ceramic_AssetStatus.NONE) {
							toLoad.push(asset1);
						}
					}
					this._loadNextParallel(toLoad,numStarted);
				} else {
					var _g = 0;
					while(_g < addedAssets.length) {
						var asset1 = addedAssets[_g];
						++_g;
						if(asset1.get_status() == ceramic_AssetStatus.NONE) {
							asset1.load();
						}
					}
				}
				this.immediate.flush();
			}
		} else {
			if(warnIfNothingToLoad) {
				ceramic_App.app.logger.warning("There was no asset to load.",pos);
			}
			this._prepareComplete(true);
		}
	}
	,_prepareComplete: function(allSuccess) {
		var _gthis = this;
		if(this.pendingAtlasPackers != null && this.pendingAtlasPackers.length > 0) {
			this._packNextAtlasPacker(function() {
				_gthis._prepareComplete(allSuccess);
			});
		} else {
			this.emitComplete(true);
		}
	}
	,_packNextAtlasPacker: function(done) {
		var atlasPacker = this.pendingAtlasPackers.shift();
		atlasPacker.pack(function(atlas) {
			done();
		});
	}
	,addPendingAtlasPacker: function(atlasPacker) {
		if(this.pendingAtlasPackers == null) {
			this.pendingAtlasPackers = [];
		}
		if(this.pendingAtlasPackers.indexOf(atlasPacker) == -1) {
			this.pendingAtlasPackers.push(atlasPacker);
		}
	}
	,_loadNextSerial: function(toLoad,numComplete) {
		var _gthis = this;
		var asset = toLoad.shift();
		if(asset.get_status() == ceramic_AssetStatus.NONE) {
			asset.load();
			asset.onceComplete(this,function(success) {
				_gthis._assetCompleteSerial(success,toLoad,numComplete);
			});
		} else if(toLoad.length > 0) {
			this._loadNextSerial(toLoad,numComplete);
		}
	}
	,_assetCompleteSerial: function(success,toLoad,numComplete) {
		var _gthis = this;
		numComplete += 1;
		if(toLoad.length > 0) {
			if(this.delayBetweenXAssets > 0 && numComplete > 0 && numComplete % this.delayBetweenXAssets == 0) {
				ceramic_App.app.onceXUpdates(this,2,function() {
					_gthis._loadNextSerial(toLoad,numComplete);
				});
			} else {
				this._loadNextSerial(toLoad,numComplete);
			}
		}
	}
	,_loadNextParallel: function(toLoad,numStarted) {
		var _gthis = this;
		if(toLoad.length > 0) {
			numStarted += 1;
			if(numStarted > 1 && numStarted % this.delayBetweenXAssets == 0) {
				ceramic_App.app.onceXUpdates(this,2,function() {
					var asset = toLoad.shift();
					asset.load();
					_gthis._loadNextParallel(toLoad,numStarted);
				});
			} else {
				var asset = toLoad.shift();
				asset.load();
				this._loadNextParallel(toLoad,numStarted);
			}
		}
	}
	,ensure: function(id,options,done) {
		var existing = this.asset(id);
		var asset = null;
		if(existing == null) {
			this.add(id,options);
			asset = this.asset(id);
		} else {
			asset = existing;
		}
		if(asset == null) {
			done(null);
			return;
		}
		if(asset.get_status() == ceramic_AssetStatus.READY) {
			done(asset);
		} else if(asset.get_status() == ceramic_AssetStatus.LOADING || asset.get_status() == ceramic_AssetStatus.NONE) {
			asset.onceComplete(null,function(success) {
				if(success) {
					done(asset);
				} else {
					done(null);
				}
			});
			if(asset.get_status() == ceramic_AssetStatus.NONE) {
				this.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Assets.hx", lineNumber : 767, className : "ceramic.Assets", methodName : "ensure"});
			}
		} else {
			done(null);
		}
	}
	,ensureImage: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"image:")) {
			_name = "image:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_ImageAsset) ? asset : null);
		});
	}
	,ensureFont: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"font:")) {
			_name = "font:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_FontAsset) ? asset : null);
		});
	}
	,ensureAtlas: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"atlas:")) {
			_name = "atlas:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_AtlasAsset) ? asset : null);
		});
	}
	,ensureText: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"text:")) {
			_name = "text:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_TextAsset) ? asset : null);
		});
	}
	,ensureSound: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"sound:")) {
			_name = "sound:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_SoundAsset) ? asset : null);
		});
	}
	,ensureDatabase: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"database:")) {
			_name = "database:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_DatabaseAsset) ? asset : null);
		});
	}
	,ensureShader: function(name,options,done) {
		var _name = name;
		if(!StringTools.startsWith(_name,"shader:")) {
			_name = "shader:" + _name;
		}
		this.ensure(_name,options,function(asset) {
			done(((asset) instanceof ceramic_ShaderAsset) ? asset : null);
		});
	}
	,texture: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"image:")) {
			realName = HxOverrides.substr(realName,6,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"image")) {
			if(this.parent != null) {
				return this.parent.texture(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["image"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.texture(name);
			} else {
				return null;
			}
		}
		return asset.get_texture();
	}
	,font: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"font:")) {
			realName = HxOverrides.substr(realName,5,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"font")) {
			if(this.parent != null) {
				return this.parent.font(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["font"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.font(name);
			} else {
				return null;
			}
		}
		return asset.get_font();
	}
	,atlas: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"atlas:")) {
			realName = HxOverrides.substr(realName,6,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"atlas")) {
			if(this.parent != null) {
				return this.parent.atlas(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["atlas"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.atlas(name);
			} else {
				return null;
			}
		}
		return asset.get_atlas();
	}
	,sound: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"sound:")) {
			realName = HxOverrides.substr(realName,6,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"sound")) {
			if(this.parent != null) {
				return this.parent.sound(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["sound"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.sound(name);
			} else {
				return null;
			}
		}
		return asset.get_sound();
	}
	,text: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"text:")) {
			realName = HxOverrides.substr(realName,5,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"text")) {
			if(this.parent != null) {
				return this.parent.text(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["text"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.text(name);
			} else {
				return null;
			}
		}
		return asset.get_text();
	}
	,bytes: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"binary:")) {
			realName = HxOverrides.substr(realName,7,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"binary")) {
			if(this.parent != null) {
				return this.parent.bytes(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["binary"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.bytes(name);
			} else {
				return null;
			}
		}
		return asset.get_bytes();
	}
	,shader: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"shader:")) {
			realName = HxOverrides.substr(realName,7,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"shader")) {
			if(this.parent != null) {
				return this.parent.shader(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["shader"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.shader(name);
			} else {
				return null;
			}
		}
		return asset.get_shader();
	}
	,database: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"database:")) {
			realName = HxOverrides.substr(realName,9,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"database")) {
			if(this.parent != null) {
				return this.parent.database(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["database"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.database(name);
			} else {
				return null;
			}
		}
		return asset.get_database();
	}
	,fragments: function(name) {
		var realName = name;
		if(StringTools.startsWith(realName,"fragments:")) {
			realName = HxOverrides.substr(realName,10,null);
		}
		if(!Object.prototype.hasOwnProperty.call(this.assetsByKindAndName.h,"fragments")) {
			if(this.parent != null) {
				return this.parent.fragments(name);
			} else {
				return null;
			}
		}
		var asset = this.assetsByKindAndName.h["fragments"].h[realName];
		if(asset == null) {
			if(this.parent != null) {
				return this.parent.fragments(name);
			} else {
				return null;
			}
		}
		return asset.get_fragments();
	}
	,iterator: function() {
		var list = [];
		var h = this.assetsByKindAndName.h;
		var byName_h = h;
		var byName_keys = Object.keys(h);
		var byName_length = byName_keys.length;
		var byName_current = 0;
		while(byName_current < byName_length) {
			var byName = byName_h[byName_keys[byName_current++]];
			var h = byName.h;
			var asset_h = h;
			var asset_keys = Object.keys(h);
			var asset_length = asset_keys.length;
			var asset_current = 0;
			while(asset_current < asset_length) {
				var asset = asset_h[asset_keys[asset_current++]];
				list.push(asset);
			}
		}
		return new haxe_iterators_ArrayIterator(list);
	}
	,hotReload: null
	,set_hotReload: function(hotReload) {
		if(this.hotReload == hotReload) {
			return hotReload;
		}
		this.hotReload = hotReload;
		var _g = 0;
		var _g1 = this.addedAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			asset.set_hotReload(hotReload);
		}
		return hotReload;
	}
	,watchDirectory: function(path,hotReload) {
		if(hotReload == null) {
			hotReload = true;
		}
		var _gthis = this;
		if(this.runtimeAssets != null) {
			throw haxe_Exception.thrown("There is already an instance of RuntimeAssets assigned. Cannot watch a directory, which also need its own instance");
		}
		if(path == null) {
			path = "E:/Projects/FableMaker/editor/sample/assets";
			if(this.defaultImageOptions == null) {
				this.defaultImageOptions = { };
			}
			this.defaultImageOptions.premultiplyAlpha = true;
		}
		if(hotReload) {
			this.set_hotReload(hotReload);
		}
		this.runtimeAssets = ceramic_RuntimeAssets.fromPath(path);
		var watch = new ceramic_WatchDirectory();
		watch.watchDirectory(path);
		watch.onDirectoryChange(this,function(_,newFiles,previousFiles) {
			if(_gthis.runtimeAssets == null) {
				ceramic_App.app.logger.warning("Missing instance of RuntimeAssets when watched directory changed (path: " + path + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Assets.hx", lineNumber : 1044, className : "ceramic.Assets", methodName : "watchDirectory"});
			} else {
				_gthis.runtimeAssets.reset(ceramic_Files.getFlatDirectory(path),path);
			}
			if(ceramic_Assets.lastModifiedByRealAssetPath == null) {
				ceramic_Assets.lastModifiedByRealAssetPath = new haxe_ds_StringMap();
				var h = previousFiles.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var key = _g_keys[_g_current++];
					var _g_key = key;
					var _g_value = _g_h[key];
					var key1 = _g_key;
					var value = _g_value;
					var realPathKey = ceramic_Assets.realAssetPath(key1,_gthis.runtimeAssets);
					ceramic_Assets.lastModifiedByRealAssetPath.h[realPathKey] = value;
				}
			}
			var newLastModifiedByRealAssetPath = new haxe_ds_StringMap();
			var h = newFiles.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				var realPathKey = ceramic_Assets.realAssetPath(key1,_gthis.runtimeAssets);
				newLastModifiedByRealAssetPath.h[realPathKey] = value;
				if(Object.prototype.hasOwnProperty.call(ceramic_Assets.lastModifiedByRealAssetPath.h,realPathKey)) {
					if(value > ceramic_Assets.lastModifiedByRealAssetPath.h[realPathKey]) {
						ceramic_Assets.incrementReloadCount(realPathKey);
					}
				}
			}
			ceramic_Assets.lastModifiedByRealAssetPath = newLastModifiedByRealAssetPath;
			_gthis.emitAssetFilesChange(newFiles,previousFiles);
		});
		this.onDestroy(watch,function(_) {
			watch.destroy();
		});
		return watch;
	}
	,inheritRuntimeAssetsFromAssets: function(assets) {
		this.runtimeAssets = assets.runtimeAssets;
		this.defaultImageOptions = assets.defaultImageOptions;
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offComplete();
		this.offUpdate();
		this.offProgress();
		this.offAssetFilesChange();
	}
	,__class__: ceramic_Assets
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_hotReload:"set_hotReload"})
});
var assets_AllAssets = function() { };
$hxClasses["assets.AllAssets"] = assets_AllAssets;
assets_AllAssets.__name__ = "assets.AllAssets";
assets_AllAssets.bind = function() {
	ceramic_Assets.all = assets_AllAssets.all;
	ceramic_Assets.allDirs = assets_AllAssets.allDirs;
	ceramic_Assets.allDirsByName = assets_AllAssets.allDirsByName;
	ceramic_Assets.allByName = assets_AllAssets.allByName;
};
var spec_Audio = function() { };
$hxClasses["spec.Audio"] = spec_Audio;
spec_Audio.__name__ = "spec.Audio";
spec_Audio.__isInterface__ = true;
spec_Audio.prototype = {
	load: null
	,supportsHotReloadPath: null
	,getDuration: null
	,resumeAudioContext: null
	,destroy: null
	,mute: null
	,play: null
	,pause: null
	,resume: null
	,stop: null
	,getVolume: null
	,setVolume: null
	,getPan: null
	,setPan: null
	,getPitch: null
	,setPitch: null
	,getPosition: null
	,setPosition: null
	,__class__: spec_Audio
};
var backend_Audio = function() {
	this.loadedAudioRetainCount = new haxe_ds_StringMap();
	this.loadedAudioResources = new haxe_ds_StringMap();
	this.loadingAudioCallbacks = new haxe_ds_StringMap();
};
$hxClasses["backend.Audio"] = backend_Audio;
backend_Audio.__name__ = "backend.Audio";
backend_Audio.__interfaces__ = [spec_Audio];
backend_Audio.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var synchronous = options != null && options.loadMethod == 2;
		var immediate = options != null ? options.immediate : null;
		var done = function(resource) {
			var fn = function() {
				_done(resource);
				_done = null;
			};
			if(immediate != null) {
				immediate.push(fn);
			} else {
				ceramic_App.app._onceImmediate(fn);
			}
		};
		var isStream = options != null && options.stream == true;
		var isUrl = StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://");
		if(!(ceramic_Path.isAbsolute(path) || isUrl)) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadedAudioResources.h,path)) {
			this.loadedAudioRetainCount.h[path] += 1;
			var existing = this.loadedAudioResources.h[path];
			done(existing);
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingAudioCallbacks.h,path)) {
			this.loadingAudioCallbacks.h[path].push(function(resource) {
				if(resource != null) {
					var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedAudioRetainCount.h,path) ? _gthis.loadedAudioRetainCount.h[path] : 0;
					_gthis.loadedAudioRetainCount.h[path] = retain + 1;
				}
				done(resource);
			});
			return;
		}
		var cleanedPath = path;
		if(!isUrl) {
			var questionMarkIndex = cleanedPath.indexOf("?");
			if(questionMarkIndex != -1) {
				cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
			}
		}
		this.loadingAudioCallbacks.h[path] = [function(resource) {
			if(resource != null) {
				var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedAudioRetainCount.h,path) ? _gthis.loadedAudioRetainCount.h[path] : 0;
				_gthis.loadedAudioRetainCount.h[path] = retain + 1;
			}
			done(resource);
		}];
		var fullPath = isUrl ? cleanedPath : clay_Clay.app.assets.fullPath(cleanedPath);
		var doFail = function() {
			var callbacks = _gthis.loadingAudioCallbacks.h[path];
			var _this = _gthis.loadingAudioCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				try {
					callback(null);
				} catch( _g1 ) {
					var e = [haxe_Exception.caught(_g1).unwrap()];
					ceramic_App.app._onceImmediate((function(e) {
						return function() {
							throw haxe_Exception.thrown(e[0]);
						};
					})(e));
				}
			}
		};
		clay_Clay.app.audio.loadData(fullPath,isStream,null,!synchronous,function(audioData) {
			if(audioData == null) {
				doFail();
				return;
			}
			var resource = new clay_audio_AudioSource(clay_Clay.app,audioData);
			_gthis.loadedAudioResources.h[path] = resource;
			var callbacks = _gthis.loadingAudioCallbacks.h[path];
			var _this = _gthis.loadingAudioCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				callback(resource);
			}
		});
		if(immediate != null) {
			immediate.push(clay_Immediate.flush);
		} else {
			ceramic_App.app._onceImmediate(clay_Immediate.flush);
		}
	}
	,getDuration: function(resource) {
		return resource.getDuration();
	}
	,resumeAudioContext: function(done) {
		var webAudio = clay_Clay.app.audio;
		if(webAudio != null) {
			try {
				var context = webAudio.context;
				context.resume().then(function() {
					done(true);
				},function() {
					done(false);
				});
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				ceramic_App.app.logger.error("Failed to resume audio context: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Audio.hx", lineNumber : 149, className : "backend.Audio", methodName : "resumeAudioContext"});
			}
		}
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,destroy: function(audio) {
		var id = null;
		var h = this.loadedAudioResources.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var val = _g_value;
			if(val == audio) {
				id = key1;
			}
		}
		if(id == null) {
			ceramic_App.app.logger.error("Failed to destroy audio resource: " + Std.string(audio) + " because id could not be resolved",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Audio.hx", lineNumber : 175, className : "backend.Audio", methodName : "destroy"});
		} else if(this.loadedAudioRetainCount.h[id] > 1) {
			this.loadedAudioRetainCount.h[id] -= 1;
		} else {
			var _this = this.loadedAudioResources;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			var _this = this.loadedAudioRetainCount;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			audio.destroy();
		}
	}
	,mute: function(audio) {
		return -1;
	}
	,play: function(audio,volume,pan,pitch,position,loop) {
		if(loop == null) {
			loop = false;
		}
		if(position == null) {
			position = 0;
		}
		if(pitch == null) {
			pitch = 1;
		}
		if(pan == null) {
			pan = 0;
		}
		if(volume == null) {
			volume = 0.5;
		}
		if(!clay_Clay.app.audio.active) {
			return -1;
		}
		var audioResource = audio;
		var isStream = audioResource.data.isStream;
		if(isStream) {
			position = 0;
			pitch = 1;
			pan = 0;
		}
		var handle = null;
		if(loop) {
			handle = clay_Clay.app.audio.loop(audioResource,volume,false);
		} else {
			handle = clay_Clay.app.audio.play(audioResource,volume,false);
		}
		if(pan != 0) {
			clay_Clay.app.audio.pan(handle,pan);
		}
		if(pitch != 1) {
			clay_Clay.app.audio.pitch(handle,pitch);
		}
		if(position != 0) {
			clay_Clay.app.audio.position(handle,position);
		}
		return handle;
	}
	,pause: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		clay_Clay.app.audio.pause(handle);
	}
	,resume: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		clay_Clay.app.audio.unPause(handle);
	}
	,stop: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		clay_Clay.app.audio.stop(handle);
	}
	,getVolume: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 0;
		}
		if(handle == null || handle == -1) {
			return 0;
		}
		return clay_Clay.app.audio.volumeOf(handle);
	}
	,setVolume: function(handle,volume) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		clay_Clay.app.audio.volume(handle,volume);
	}
	,getPan: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 0;
		}
		if(handle == null || handle == -1) {
			return 0;
		}
		return clay_Clay.app.audio.panOf(handle);
	}
	,setPan: function(handle,pan) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		var instance = clay_Clay.app.audio.instanceOf(handle);
		if(instance != null && instance.source.data.isStream) {
			return;
		}
		clay_Clay.app.audio.pan(handle,pan);
	}
	,getPitch: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 1;
		}
		if(handle == null || handle == -1) {
			return 1;
		}
		return clay_Clay.app.audio.pitchOf(handle);
	}
	,setPitch: function(handle,pitch) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		var instance = clay_Clay.app.audio.instanceOf(handle);
		if(instance != null && instance.source.data.isStream) {
			return;
		}
		clay_Clay.app.audio.pitch(handle,pitch);
	}
	,getPosition: function(handle) {
		if(!clay_Clay.app.audio.active) {
			return 0;
		}
		if(handle == null || handle == -1) {
			return 0;
		}
		return clay_Clay.app.audio.positionOf(handle);
	}
	,setPosition: function(handle,position) {
		if(!clay_Clay.app.audio.active) {
			return;
		}
		if(handle == null || handle == -1) {
			return;
		}
		var instance = clay_Clay.app.audio.instanceOf(handle);
		if(instance != null && instance.source.data.isStream) {
			return;
		}
		clay_Clay.app.audio.position(handle,position);
	}
	,loadingAudioCallbacks: null
	,loadedAudioResources: null
	,loadedAudioRetainCount: null
	,__class__: backend_Audio
};
var backend_AudioHandle = {};
backend_AudioHandle.toString = function(this1) {
	return "AudioHandle(" + this1 + ")";
};
var spec_Backend = function() { };
$hxClasses["spec.Backend"] = spec_Backend;
spec_Backend.__name__ = "spec.Backend";
spec_Backend.__isInterface__ = true;
spec_Backend.prototype = {
	init: null
	,setTargetFps: null
	,io: null
	,info: null
	,audio: null
	,draw: null
	,texts: null
	,binaries: null
	,textures: null
	,screen: null
	,textInput: null
	,clipboard: null
	,__class__: spec_Backend
};
var backend_Backend = function() {
	this.mobileInBackground = false;
	this.clipboard = new backend_Clipboard();
	this.textInput = new backend_TextInput();
	this.input = new backend_Input();
	this.screen = new backend_Screen();
	this.shaders = new backend_Shaders();
	this.textures = new backend_Textures();
	this.binaries = new backend_Binaries();
	this.texts = new backend_Texts();
	this.draw = new backend_Draw();
	this.audio = new backend_Audio();
	this.info = new backend_Info();
	this.io = new backend_IO();
};
$hxClasses["backend.Backend"] = backend_Backend;
backend_Backend.__name__ = "backend.Backend";
backend_Backend.__interfaces__ = [spec_Backend,tracker_Events];
backend_Backend.prototype = {
	io: null
	,info: null
	,audio: null
	,draw: null
	,texts: null
	,binaries: null
	,textures: null
	,shaders: null
	,screen: null
	,input: null
	,textInput: null
	,clipboard: null
	,init: function(app) {
	}
	,setTargetFps: function(fps) {
		clay_Clay.app.config.updateRate = fps > 0 ? 1.0 / fps : 0;
	}
	,__cbOnReady: null
	,__cbOnceReady: null
	,__cbOnOwnerUnbindReady: null
	,__cbOnceOwnerUnbindReady: null
	,emitReady: function() {
		var len = 0;
		if(this.__cbOnReady != null) {
			len += this.__cbOnReady.length;
		}
		if(this.__cbOnceReady != null) {
			len += this.__cbOnceReady.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnReady.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReady[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReady != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReady.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReady[ii];
						this.__cbOnceReady[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReady[ii];
						this.__cbOnceOwnerUnbindReady[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReady[ii]);
						newCbOnceArray.push(this.__cbOnceReady[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReady = newCbOnceOwnerUnbindArray;
				this.__cbOnceReady = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(null);
		}
		if(this.__cbOnReady == null) {
			this.__cbOnReady = [];
		}
		this.__cbOnReady.push(handle);
	}
	,onceReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(null);
		}
		if(this.__cbOnceReady == null) {
			this.__cbOnceReady = [];
		}
		this.__cbOnceReady.push(handle);
	}
	,offReady: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReady != null) {
				index = this.__cbOnReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnReady.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReady.splice(index,1);
				}
			}
			if(this.__cbOnceReady != null) {
				index = this.__cbOnceReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReady.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReady.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReady = null;
			}
			if(this.__cbOnceOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReady = null;
			}
			this.__cbOnReady = null;
			this.__cbOnceReady = null;
		}
	}
	,listensReady: function() {
		if(!(this.__cbOnReady != null && this.__cbOnReady.length > 0)) {
			if(this.__cbOnceReady != null) {
				return this.__cbOnceReady.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnUpdate: null
	,__cbOnceUpdate: null
	,__cbOnOwnerUnbindUpdate: null
	,__cbOnceOwnerUnbindUpdate: null
	,emitUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceUpdate[ii];
						this.__cbOnceUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
						this.__cbOnceOwnerUnbindUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleDelta);
	}
	,onceUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleDelta);
	}
	,offUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnRender: null
	,__cbOnceRender: null
	,__cbOnOwnerUnbindRender: null
	,__cbOnceOwnerUnbindRender: null
	,emitRender: function() {
		var len = 0;
		if(this.__cbOnRender != null) {
			len += this.__cbOnRender.length;
		}
		if(this.__cbOnceRender != null) {
			len += this.__cbOnceRender.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnRender != null) {
				var _g = 0;
				var _g1 = this.__cbOnRender.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnRender[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceRender != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceRender.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceRender[ii];
						this.__cbOnceRender[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindRender[ii];
						this.__cbOnceOwnerUnbindRender[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindRender[ii]);
						newCbOnceArray.push(this.__cbOnceRender[ii]);
					}
				}
				this.__cbOnceOwnerUnbindRender = newCbOnceOwnerUnbindArray;
				this.__cbOnceRender = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onRender: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "render" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offRender(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindRender == null) {
				this.__cbOnOwnerUnbindRender = [];
			}
			this.__cbOnOwnerUnbindRender.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindRender == null) {
				this.__cbOnOwnerUnbindRender = [];
			}
			this.__cbOnOwnerUnbindRender.push(null);
		}
		if(this.__cbOnRender == null) {
			this.__cbOnRender = [];
		}
		this.__cbOnRender.push(handle);
	}
	,onceRender: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "render" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offRender(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindRender == null) {
				this.__cbOnceOwnerUnbindRender = [];
			}
			this.__cbOnceOwnerUnbindRender.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindRender == null) {
				this.__cbOnceOwnerUnbindRender = [];
			}
			this.__cbOnceOwnerUnbindRender.push(null);
		}
		if(this.__cbOnceRender == null) {
			this.__cbOnceRender = [];
		}
		this.__cbOnceRender.push(handle);
	}
	,offRender: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnRender != null) {
				index = this.__cbOnRender.indexOf(handle);
				if(index != -1) {
					this.__cbOnRender.splice(index,1);
					unbind = this.__cbOnOwnerUnbindRender[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindRender.splice(index,1);
				}
			}
			if(this.__cbOnceRender != null) {
				index = this.__cbOnceRender.indexOf(handle);
				if(index != -1) {
					this.__cbOnceRender.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindRender[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindRender.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindRender != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindRender.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindRender[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindRender = null;
			}
			if(this.__cbOnceOwnerUnbindRender != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindRender.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindRender[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindRender = null;
			}
			this.__cbOnRender = null;
			this.__cbOnceRender = null;
		}
	}
	,listensRender: function() {
		if(!(this.__cbOnRender != null && this.__cbOnRender.length > 0)) {
			if(this.__cbOnceRender != null) {
				return this.__cbOnceRender.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,mobileInBackground: null
	,unbindEvents: function() {
		this.offReady();
		this.offUpdate();
		this.offRender();
	}
	,__class__: backend_Backend
};
var spec_Binaries = function() { };
$hxClasses["spec.Binaries"] = spec_Binaries;
spec_Binaries.__name__ = "spec.Binaries";
spec_Binaries.__isInterface__ = true;
spec_Binaries.prototype = {
	load: null
	,supportsHotReloadPath: null
	,__class__: spec_Binaries
};
var backend_Binaries = function() {
	this.loadingBinaryCallbacks = new haxe_ds_StringMap();
};
$hxClasses["backend.Binaries"] = backend_Binaries;
backend_Binaries.__name__ = "backend.Binaries";
backend_Binaries.__interfaces__ = [spec_Binaries];
backend_Binaries.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var immediate = options != null ? options.immediate : null;
		var done = function(binary) {
			var fn = function() {
				_done(binary);
				_done = null;
			};
			if(immediate != null) {
				immediate.push(fn);
			} else {
				ceramic_App.app._onceImmediate(fn);
			}
		};
		var isUrl = StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://");
		if(!(ceramic_Path.isAbsolute(path) || isUrl)) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingBinaryCallbacks.h,path)) {
			this.loadingBinaryCallbacks.h[path].push(function(binary) {
				done(binary);
			});
			return;
		} else {
			this.loadingBinaryCallbacks.h[path] = [];
		}
		var cleanedPath = path;
		if(!isUrl) {
			var questionMarkIndex = cleanedPath.indexOf("?");
			if(questionMarkIndex != -1) {
				cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
			}
		}
		var fullPath = isUrl ? cleanedPath : clay_Clay.app.assets.fullPath(cleanedPath);
		clay_Clay.app.io.loadData(fullPath,true,null,function(res) {
			if(res == null) {
				var callbacks = _gthis.loadingBinaryCallbacks.h[path];
				if(callbacks != null) {
					var _this = _gthis.loadingBinaryCallbacks;
					if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
						delete(_this.h[path]);
					}
					done(null);
					var _g = 0;
					while(_g < callbacks.length) {
						var callback = callbacks[_g];
						++_g;
						callback(null);
					}
				} else {
					done(null);
				}
				return;
			}
			var binary = new haxe_io_Bytes(new Uint8Array(res.buffer));
			var callbacks = _gthis.loadingBinaryCallbacks.h[path];
			if(callbacks != null) {
				var _this = _gthis.loadingBinaryCallbacks;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
				done(binary);
				var _g = 0;
				while(_g < callbacks.length) {
					var callback = callbacks[_g];
					++_g;
					callback(binary);
				}
			} else {
				done(binary);
			}
		});
		if(immediate != null) {
			immediate.push(clay_Immediate.flush);
		} else {
			ceramic_App.app._onceImmediate(clay_Immediate.flush);
		}
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,loadingBinaryCallbacks: null
	,__class__: backend_Binaries
};
var clay_Events = function() { };
$hxClasses["clay.Events"] = clay_Events;
clay_Events.__name__ = "clay.Events";
clay_Events.prototype = {
	ready: function() {
	}
	,tick: function(delta) {
	}
	,render: function() {
	}
	,freeze: function() {
	}
	,unfreeze: function() {
	}
	,keyDown: function(keycode,scancode,repeat,mod,timestamp,windowId) {
	}
	,keyUp: function(keycode,scancode,repeat,mod,timestamp,windowId) {
	}
	,text: function(text,start,length,type,timestamp,windowId) {
	}
	,mouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
	}
	,mouseDown: function(x,y,button,timestamp,windowId) {
	}
	,mouseUp: function(x,y,button,timestamp,windowId) {
	}
	,mouseWheel: function(x,y,timestamp,windowId) {
	}
	,touchDown: function(x,y,dx,dy,touchId,timestamp) {
	}
	,touchUp: function(x,y,dx,dy,touchId,timestamp) {
	}
	,touchMove: function(x,y,dx,dy,touchId,timestamp) {
	}
	,gamepadAxis: function(gamepad,axis,value,timestamp) {
	}
	,gamepadDown: function(gamepad,button,value,timestamp) {
	}
	,gamepadUp: function(gamepad,button,value,timestamp) {
	}
	,gamepadGyro: function(gamepad,dx,dy,dz,timestamp) {
	}
	,gamepadDevice: function(gamepad,name,type,timestamp) {
	}
	,windowEvent: function(type,timestamp,windowId,x,y) {
	}
	,appEvent: function(type) {
	}
	,audioEvent: function(event,handle) {
	}
	,__class__: clay_Events
};
var backend_ClayEvents = function(handleReady) {
	this.gamepadGyroValues = new ceramic_IntMap();
	this.gamepadAxisValues = new ceramic_IntFloatMap();
	this.gamepadPressedValues = new ceramic_IntIntMap();
	this.gamepadButtonMapping = new ceramic_IntIntMap();
	this.gamepadAxisToButton = new ceramic_IntIntMap();
	this.swapXyGamepads = new ceramic_IntIntMap(16,0.5,false);
	this.swapAbGamepads = new ceramic_IntIntMap(16,0.5,false);
	this.removedGamepads = new ceramic_IntIntMap(16,0.5,false);
	this.activeGamepads = new ceramic_IntIntMap(16,0.5,false);
	this.mouseY = 0;
	this.mouseX = 0;
	this.mouseDownButtons = new ceramic_IntIntMap(16,0.5,false);
	this.touchIndexes = new ceramic_IntIntMap();
	this.touches = new ceramic_IntIntMap();
	this.lastHeight = -1;
	this.lastWidth = -1;
	this.lastDensity = -1;
	this.handleReady = handleReady;
	this.configureGamepadMapping();
};
$hxClasses["backend.ClayEvents"] = backend_ClayEvents;
backend_ClayEvents.__name__ = "backend.ClayEvents";
backend_ClayEvents.__super__ = clay_Events;
backend_ClayEvents.prototype = $extend(clay_Events.prototype,{
	backend: null
	,lastDensity: null
	,lastWidth: null
	,lastHeight: null
	,touches: null
	,touchIndexes: null
	,mouseDownButtons: null
	,mouseX: null
	,mouseY: null
	,activeGamepads: null
	,removedGamepads: null
	,swapAbGamepads: null
	,swapXyGamepads: null
	,gamepadAxisToButton: null
	,gamepadButtonMapping: null
	,gamepadPressedValues: null
	,gamepadAxisValues: null
	,gamepadGyroValues: null
	,handleReady: null
	,configureGamepadMapping: function() {
	}
	,ready: function() {
		this.backend = ceramic_App.app.backend;
		this.lastDensity = clay_Clay.app.screenDensity;
		this.lastWidth = clay_Clay.app.screenWidth;
		this.lastHeight = clay_Clay.app.screenHeight;
		this.handleReady();
		this.backend.emitReady();
	}
	,tick: function(delta) {
		this.triggerResizeIfNeeded();
		this.backend.emitUpdate(delta);
	}
	,render: function() {
		this.backend.emitRender();
	}
	,triggerResizeIfNeeded: function() {
		var density = clay_Clay.app.screenDensity;
		var width = clay_Clay.app.screenWidth;
		var height = clay_Clay.app.screenHeight;
		if(this.lastDensity != density || this.lastWidth != width || this.lastHeight != height) {
			this.lastDensity = density;
			this.lastWidth = width;
			this.lastHeight = height;
			this.backend.screen.emitResize();
		}
	}
	,appEvent: function(type) {
		switch(type) {
		case 0:
			break;
		case 11:
			ceramic_App.app.emitTerminate();
			break;
		case 12:
			ceramic_App.app.emitLowMemory();
			break;
		case 13:
			ceramic_App.app.emitBeginEnterBackground();
			break;
		case 14:
			ceramic_App.app.emitFinishEnterBackground();
			break;
		case 15:
			ceramic_App.app.emitBeginEnterForeground();
			break;
		case 16:
			ceramic_App.app.emitFinishEnterForeground();
			break;
		}
	}
	,mouseDown: function(x,y,button,timestamp,windowId) {
		if(this.mouseDownButtons.intMap.h.hasOwnProperty(button | 0)) {
			this.mouseUp(x,y,button,timestamp,windowId);
		}
		this.mouseX = x / clay_Clay.app.screenDensity;
		this.mouseY = y / clay_Clay.app.screenDensity;
		this.mouseDownButtons.set(button,1);
		this.backend.screen.emitMouseDown(button,this.mouseX,this.mouseY);
	}
	,mouseUp: function(x,y,button,timestamp,windowId) {
		if(!this.mouseDownButtons.intMap.h.hasOwnProperty(button | 0)) {
			return;
		}
		this.mouseX = x / clay_Clay.app.screenDensity;
		this.mouseY = y / clay_Clay.app.screenDensity;
		this.mouseDownButtons.remove(button);
		this.backend.screen.emitMouseUp(button,this.mouseX,this.mouseY);
	}
	,mouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
		this.mouseX = x / clay_Clay.app.screenDensity;
		this.mouseY = y / clay_Clay.app.screenDensity;
		this.backend.screen.emitMouseMove(this.mouseX,this.mouseY);
	}
	,mouseWheel: function(x,y,timestamp,windowId) {
		this.backend.screen.emitMouseWheel(x,y);
	}
	,touchDown: function(x,y,dx,dy,touchId,timestamp) {
		var index = 0;
		while(this.touchIndexes.intMap.h.hasOwnProperty(index | 0)) ++index;
		this.touches.set(touchId,index);
		this.touchIndexes.set(index,touchId);
		this.backend.screen.emitTouchDown(index,x * this.lastWidth,y * this.lastHeight);
	}
	,touchUp: function(x,y,dx,dy,touchId,timestamp) {
		if(!this.touches.intMap.h.hasOwnProperty(touchId | 0)) {
			this.touchDown(x,y,dx,dy,touchId,timestamp);
		}
		var value = this.touches.intMap.h[touchId | 0];
		var index = value != null ? value : 0;
		this.backend.screen.emitTouchUp(index,x * this.lastWidth,y * this.lastHeight);
		this.touches.remove(touchId);
		this.touchIndexes.remove(index);
	}
	,touchMove: function(x,y,dx,dy,touchId,timestamp) {
		if(!this.touches.intMap.h.hasOwnProperty(touchId | 0)) {
			this.touchDown(x,y,dx,dy,touchId,timestamp);
		}
		var value = this.touches.intMap.h[touchId | 0];
		var index = value != null ? value : 0;
		this.backend.screen.emitTouchMove(index,x * this.lastWidth,y * this.lastHeight);
	}
	,keyDown: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.backend.input.emitKeyDown(new ceramic_Key(keyCode,scanCode));
		this.backend.textInput.handleKeyDown(keyCode,scanCode);
	}
	,keyUp: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.backend.input.emitKeyUp(new ceramic_Key(keyCode,scanCode));
		this.backend.textInput.handleKeyUp(keyCode,scanCode);
	}
	,_configureGamepad: function(id,name) {
		if(name != null) {
			var lowerName = name.toLowerCase();
			if(lowerName.indexOf(" vendor: 057e ") != -1 || StringTools.startsWith(lowerName,"057e-")) {
				this.swapAbGamepads.set(id,1);
				this.swapXyGamepads.set(id,1);
			} else {
				this.swapAbGamepads.set(id,0);
				this.swapXyGamepads.set(id,0);
			}
		} else {
			this.swapAbGamepads.set(id,0);
			this.swapXyGamepads.set(id,0);
		}
	}
	,gamepadAxis: function(id,axisId,value,timestamp) {
		if(!this.activeGamepads.intMap.h.hasOwnProperty(id | 0) && !this.removedGamepads.intMap.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.set(id,1);
			var name = clay_Clay.app.runtime.getGamepadName(id);
			this._configureGamepad(id,name);
			this.backend.input.emitGamepadEnable(id,name);
		}
		if(this.gamepadAxisToButton.intMap.h.hasOwnProperty(axisId | 0)) {
			var value1 = this.gamepadAxisToButton.intMap.h[axisId | 0];
			var buttonId = value1 != null ? value1 : 0;
			var pressed = value >= 0.5;
			if(pressed) {
				var value1 = this.gamepadPressedValues.intMap.h[id * 32 + buttonId | 0];
				if((value1 != null ? value1 : 0) != 1) {
					this.gamepadPressedValues.set(id * 32 + buttonId,1);
					this.backend.input.emitGamepadDown(id,buttonId);
				}
			} else {
				var value1 = this.gamepadPressedValues.intMap.h[id * 32 + buttonId | 0];
				if((value1 != null ? value1 : 0) == 1) {
					this.gamepadPressedValues.set(id * 32 + buttonId,0);
					this.backend.input.emitGamepadUp(id,buttonId);
				}
			}
		}
		var value1 = this.gamepadAxisValues.intMap.h[id * 32 + axisId | 0];
		var prevValue = value1 != null ? value1 : 0;
		var newValue = Math.round(value * 100.0) / 100.0;
		if(Math.abs(prevValue - newValue) > 0.01) {
			this.gamepadAxisValues.set(id * 32 + axisId,newValue);
			this.backend.input.emitGamepadAxis(id,axisId,newValue);
		}
	}
	,gamepadDown: function(id,buttonId,value,timestamp) {
		if(!this.activeGamepads.intMap.h.hasOwnProperty(id | 0) && !this.removedGamepads.intMap.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.set(id,1);
			var _g = 0;
			while(_g < 32) {
				var i = _g++;
				this.gamepadPressedValues.set(id * 32 + i,0);
			}
			var name = clay_Clay.app.runtime.getGamepadName(id);
			this._configureGamepad(id,name);
			this.backend.input.emitGamepadEnable(id,name);
		}
		if(this.gamepadButtonMapping.intMap.h.hasOwnProperty(buttonId | 0)) {
			var value = this.gamepadButtonMapping.intMap.h[buttonId | 0];
			buttonId = value != null ? value : 0;
		}
		if(buttonId == 0 || buttonId == 1) {
			var value = this.swapAbGamepads.intMap.h[id | 0];
			if((value != null ? value : 0) != 0) {
				buttonId = buttonId == 1 ? 0 : 1;
			}
		}
		if(buttonId == 2 || buttonId == 3) {
			var value = this.swapXyGamepads.intMap.h[id | 0];
			if((value != null ? value : 0) != 0) {
				buttonId = buttonId == 2 ? 3 : 2;
			}
		}
		var value = this.gamepadPressedValues.intMap.h[id * 32 + buttonId | 0];
		if((value != null ? value : 0) != 1) {
			this.gamepadPressedValues.set(id * 32 + buttonId,1);
			this.backend.input.emitGamepadDown(id,buttonId);
		}
	}
	,gamepadUp: function(id,buttonId,value,timestamp) {
		if(!this.activeGamepads.intMap.h.hasOwnProperty(id | 0) && !this.removedGamepads.intMap.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.set(id,1);
			var _g = 0;
			while(_g < 32) {
				var i = _g++;
				this.gamepadPressedValues.set(id * 32 + i,0);
			}
			var name = clay_Clay.app.runtime.getGamepadName(id);
			this._configureGamepad(id,name);
			this.backend.input.emitGamepadEnable(id,name);
		}
		if(this.gamepadButtonMapping.intMap.h.hasOwnProperty(buttonId | 0)) {
			var value = this.gamepadButtonMapping.intMap.h[buttonId | 0];
			buttonId = value != null ? value : 0;
		}
		if(buttonId == 0 || buttonId == 1) {
			var value = this.swapAbGamepads.intMap.h[id | 0];
			if((value != null ? value : 0) != 0) {
				buttonId = buttonId == 1 ? 0 : 1;
			}
		}
		if(buttonId == 2 || buttonId == 3) {
			var value = this.swapXyGamepads.intMap.h[id | 0];
			if((value != null ? value : 0) != 0) {
				buttonId = buttonId == 2 ? 3 : 2;
			}
		}
		var value = this.gamepadPressedValues.intMap.h[id * 32 + buttonId | 0];
		if((value != null ? value : 0) == 1) {
			this.gamepadPressedValues.set(id * 32 + buttonId,0);
			this.backend.input.emitGamepadUp(id,buttonId);
		}
	}
	,gamepadGyro: function(id,dx,dy,dz,timestamp) {
		if(!this.activeGamepads.intMap.h.hasOwnProperty(id | 0) && !this.removedGamepads.intMap.h.hasOwnProperty(id | 0)) {
			this.activeGamepads.set(id,1);
			var _g = 0;
			while(_g < 32) {
				var i = _g++;
				this.gamepadPressedValues.set(id * 32 + i,0);
			}
			var name = clay_Clay.app.runtime.getGamepadName(id);
			this._configureGamepad(id,name);
			this.backend.input.emitGamepadEnable(id,name);
		}
		var scale = 0.23225806451612904;
		this.backend.input.emitGamepadGyro(id,dx * scale,dy * scale,dz * scale);
	}
	,gamepadDevice: function(id,name,type,timestamp) {
		var _gthis = this;
		if(type == 2) {
			if(this.activeGamepads.intMap.h.hasOwnProperty(id | 0)) {
				var _g = 0;
				while(_g < 32) {
					var i = _g++;
					var value = this.gamepadPressedValues.intMap.h[id * 32 + i | 0];
					if((value != null ? value : 0) == 1) {
						this.backend.input.emitGamepadUp(id,i);
						this.gamepadPressedValues.set(id * 32 + i,0);
					}
				}
				this.backend.input.emitGamepadDisable(id);
				this.activeGamepads.remove(id);
				this.removedGamepads.set(id,1);
				ceramic_App.app.onceUpdate(null,function(_) {
					_gthis.removedGamepads.remove(id);
				});
			}
		} else if(type == 1) {
			if(!this.activeGamepads.intMap.h.hasOwnProperty(id | 0)) {
				this.activeGamepads.set(id,1);
				var _g = 0;
				while(_g < 32) {
					var i = _g++;
					this.gamepadPressedValues.set(id * 32 + i,0);
				}
				this.removedGamepads.remove(id);
				var name = clay_Clay.app.runtime.getGamepadName(id);
				this._configureGamepad(id,name);
				this.backend.input.emitGamepadEnable(id,name);
			}
		}
	}
	,text: function(text,start,length,type,timestamp,windowId) {
		if(this.backend.textInput.inputActive) {
			this.backend.textInput.handleTextInput(text);
		}
	}
	,windowEvent: function(type,timestamp,windowId,x,y) {
		switch(type) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			break;
		case 12:
			break;
		case 13:
			break;
		case 14:
			break;
		case 15:
			ceramic_App.app.settings.set_fullscreen(true);
			break;
		case 16:
			ceramic_App.app.settings.set_fullscreen(false);
			break;
		}
	}
	,__class__: backend_ClayEvents
});
var spec_Clipboard = function() { };
$hxClasses["spec.Clipboard"] = spec_Clipboard;
spec_Clipboard.__name__ = "spec.Clipboard";
spec_Clipboard.__isInterface__ = true;
spec_Clipboard.prototype = {
	getText: null
	,setText: null
	,__class__: spec_Clipboard
};
var backend_Clipboard = function() {
	this.didBindBrowserClipboard = false;
	this.didLogBrowserClipboardWriteWarning = false;
	this.didLogBrowserClipboardReadWarning = false;
	this.clipboardText = null;
	if(!ceramic_PlatformSpecific.testedElectronAvailability) {
		ceramic_PlatformSpecific.testedElectronAvailability = true;
		try {
			ceramic_PlatformSpecific.electron = require('electron');
		} catch( _g ) {
		}
	}
	var electron = ceramic_PlatformSpecific.electron;
	var tmp = electron == null;
};
$hxClasses["backend.Clipboard"] = backend_Clipboard;
backend_Clipboard.__name__ = "backend.Clipboard";
backend_Clipboard.__interfaces__ = [spec_Clipboard];
backend_Clipboard.prototype = {
	clipboardText: null
	,didLogBrowserClipboardReadWarning: null
	,didLogBrowserClipboardWriteWarning: null
	,didBindBrowserClipboard: null
	,bindBrowserClipboard: function() {
		var _gthis = this;
		this.didBindBrowserClipboard = true;
		this.readBrowserClipboard();
		var $window = window;
		$window.addEventListener("focus",function() {
			_gthis.readBrowserClipboard();
		});
	}
	,readBrowserClipboard: function() {
		var _gthis = this;
		var navigator = $global.navigator;
		try {
			navigator.clipboard.readText().then(function(text) {
				if(_gthis.clipboardText != text) {
					_gthis.clipboardText = text;
				}
			});
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(!this.didLogBrowserClipboardReadWarning) {
				this.didLogBrowserClipboardReadWarning = true;
				ceramic_App.app.logger.warning("Failed to read browser clipboard: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Clipboard.hx", lineNumber : 68, className : "backend.Clipboard", methodName : "readBrowserClipboard"});
			}
		}
	}
	,writeBrowserClipboard: function(text) {
		var navigator = $global.navigator;
		try {
			navigator.clipboard.writeText(text).then(function() {
			});
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(!this.didLogBrowserClipboardWriteWarning) {
				this.didLogBrowserClipboardWriteWarning = true;
				ceramic_App.app.logger.warning("Failed to write browser clipboard: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Clipboard.hx", lineNumber : 87, className : "backend.Clipboard", methodName : "writeBrowserClipboard"});
			}
		}
	}
	,getText: function() {
		if(!ceramic_PlatformSpecific.testedElectronAvailability) {
			ceramic_PlatformSpecific.testedElectronAvailability = true;
			try {
				ceramic_PlatformSpecific.electron = require('electron');
			} catch( _g ) {
			}
		}
		var electron = ceramic_PlatformSpecific.electron;
		if(electron != null) {
			var text = electron.clipboard.readText();
			return text;
		}
		return this.clipboardText;
	}
	,setText: function(text) {
		this.clipboardText = text;
		if(!ceramic_PlatformSpecific.testedElectronAvailability) {
			ceramic_PlatformSpecific.testedElectronAvailability = true;
			try {
				ceramic_PlatformSpecific.electron = require('electron');
			} catch( _g ) {
			}
		}
		var electron = ceramic_PlatformSpecific.electron;
		if(electron != null) {
			electron.clipboard.writeText(text);
			ceramic_Timer.schedule(null,0.1,function() {
				electron.clipboard.writeText(text);
			},-1);
		} else if(this.didBindBrowserClipboard) {
			this.writeBrowserClipboard(text);
		}
	}
	,__class__: backend_Clipboard
};
var spec_Draw = function() { };
$hxClasses["spec.Draw"] = spec_Draw;
spec_Draw.__name__ = "spec.Draw";
spec_Draw.__isInterface__ = true;
spec_Draw.prototype = {
	draw: null
	,swap: null
	,initBuffers: null
	,beginRender: null
	,setRenderTarget: null
	,useShader: null
	,clear: null
	,enableBlending: null
	,disableBlending: null
	,setBlendFuncSeparate: null
	,getActiveTexture: null
	,setActiveTexture: null
	,textureBackendItemMatchesId: null
	,getTextureId: null
	,bindTexture: null
	,bindNoTexture: null
	,setRenderWireframe: null
	,beginDrawQuad: null
	,endDrawQuad: null
	,beginDrawMesh: null
	,endDrawMesh: null
	,beginDrawingInStencilBuffer: null
	,endDrawingInStencilBuffer: null
	,drawWithStencilTest: null
	,drawWithoutStencilTest: null
	,enableScissor: null
	,disableScissor: null
	,getNumPos: null
	,putPos: null
	,putPosAndTextureSlot: null
	,putIndice: null
	,putUVs: null
	,putColor: null
	,beginFloatAttributes: null
	,putFloatAttribute: null
	,endFloatAttributes: null
	,clearAndApplyBackground: null
	,getTextureWidth: null
	,getTextureHeight: null
	,getTextureWidthActual: null
	,getTextureHeightActual: null
	,shouldFlush: null
	,remainingVertices: null
	,remainingIndices: null
	,hasAnythingToFlush: null
	,flush: null
	,__class__: spec_Draw
};
var backend_Draw = function() {
	this.renderer = new ceramic_Renderer();
	this.renderer = new ceramic_Renderer();
};
$hxClasses["backend.Draw"] = backend_Draw;
backend_Draw.__name__ = "backend.Draw";
backend_Draw.__interfaces__ = [spec_Draw];
backend_Draw.prototype = {
	renderer: null
	,begin: function() {
	}
	,end: function() {
	}
	,draw: function(visuals) {
		this.renderer.render(true,visuals);
	}
	,swap: function() {
	}
	,initBuffers: function() {
		backend_Draw._activeTextureSlot = 0;
		backend_Draw._buffersIndex = -1;
		this.prepareNextBuffers();
	}
	,prepareNextBuffers: function() {
		backend_Draw._buffersIndex++;
		if(backend_Draw._buffersIndex > 64) {
			backend_Draw._buffersIndex = 0;
		}
		if(backend_Draw._posListArray.length <= backend_Draw._buffersIndex) {
			backend_Draw._posListArray[backend_Draw._buffersIndex] = new Float32Array(65536);
			backend_Draw._uvListArray[backend_Draw._buffersIndex] = new Float32Array(43691);
			backend_Draw._colorListArray[backend_Draw._buffersIndex] = new Float32Array(65536);
			backend_Draw._indiceListArray[backend_Draw._buffersIndex] = new Uint16Array(32768);
		}
		backend_Draw._posList = backend_Draw._posListArray[backend_Draw._buffersIndex];
		backend_Draw._uvList = backend_Draw._uvListArray[backend_Draw._buffersIndex];
		backend_Draw._colorList = backend_Draw._colorListArray[backend_Draw._buffersIndex];
		backend_Draw._indiceList = backend_Draw._indiceListArray[backend_Draw._buffersIndex];
	}
	,beginRender: function() {
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
	}
	,clear: function() {
		clay_opengl_web_GL.gl.clearColor((backend_Draw._whiteTransparentColor >> 16 & 255) / 255,(backend_Draw._whiteTransparentColor >> 8 & 255) / 255,(backend_Draw._whiteTransparentColor & 255) / 255,backend_Draw._whiteTransparentColor >> 24 & 255);
		if(clay_Clay.app.config.render.depth > 0) {
			clay_opengl_web_GL.gl.clear(16640);
			clay_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			clay_opengl_web_GL.gl.clear(16384);
		}
		if(backend_Draw._currentRenderTarget != null) {
			backend_Draw._didUpdateCurrentRenderTarget = true;
		}
	}
	,clearAndApplyBackground: function() {
		var background = ceramic_App.app.settings.get_background();
		clay_opengl_web_GL.gl.clearColor((background >> 16 & 255) / 255,(background >> 8 & 255) / 255,(background & 255) / 255,1);
		if(clay_Clay.app.config.render.depth > 0) {
			clay_opengl_web_GL.gl.clear(16640);
			clay_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			clay_opengl_web_GL.gl.clear(16384);
		}
		if(backend_Draw._currentRenderTarget != null) {
			backend_Draw._didUpdateCurrentRenderTarget = true;
		}
	}
	,enableBlending: function() {
		clay_opengl_web_GL.gl.enable(3042);
	}
	,disableBlending: function() {
		clay_opengl_web_GL.gl.disable(3042);
	}
	,setActiveTexture: function(slot) {
		backend_Draw._activeTextureSlot = slot;
		if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
			clay_opengl_GLGraphics._activeTextureSlot = slot;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
			clay_opengl_web_GL.gl.activeTexture(33984 + slot);
		}
	}
	,setRenderWireframe: function(value) {
	}
	,getActiveTexture: function() {
		return backend_Draw._activeTextureSlot;
	}
	,setRenderTarget: function(renderTarget,force) {
		if(force == null) {
			force = false;
		}
		if(backend_Draw._currentRenderTarget != renderTarget || force) {
			if(backend_Draw._currentRenderTarget != null && backend_Draw._currentRenderTarget != renderTarget && backend_Draw._didUpdateCurrentRenderTarget) {
				var clayRenderTexture = backend_Draw._currentRenderTarget.backendItem;
				if(clayRenderTexture.antialiasing > 1) {
					clay_opengl_GLGraphics.blitRenderTargetBuffers(clayRenderTexture.renderTarget,clayRenderTexture.width,clayRenderTexture.height);
				}
			}
			backend_Draw._currentRenderTarget = renderTarget;
			backend_Draw._didUpdateCurrentRenderTarget = true;
			if(renderTarget != null) {
				var renderTexture = renderTarget.backendItem;
				var renderTarget1 = renderTexture.renderTarget;
				if(renderTarget1 != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget1.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget1.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(clay_opengl_GLGraphics.NO_FRAMEBUFFER);
					clay_opengl_GLGraphics.bindRenderbuffer(clay_opengl_GLGraphics.NO_RENDERBUFFER);
				}
				var left = 0.0;
				var top = 0.0;
				var right = renderTarget.width;
				var bottom = renderTarget.height;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var _this = backend_Draw._renderTargetTransform;
				_this.a = 1;
				_this.b = 0;
				_this.c = 0;
				_this.d = 1;
				_this.tx = 0;
				_this.ty = 0;
				_this.changedDirty = true;
				var _this = backend_Draw._renderTargetTransform;
				var x = renderTarget.density;
				var y = renderTarget.density;
				_this.a *= x;
				_this.b *= y;
				_this.c *= x;
				_this.d *= y;
				_this.tx *= x;
				_this.ty *= y;
				_this.changedDirty = true;
				var density = renderTarget.density;
				var width = renderTarget.width;
				var height = renderTarget.height;
				var transform = backend_Draw._renderTargetTransform;
				var flipY = -1;
				if(flipY == null) {
					flipY = 1;
				}
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				if(flipY == -1) {
					var _this = backend_Draw._modelViewTransform;
					_this.tx += -width * 0.5;
					_this.ty += -height * 0.5;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.a *= 1;
					_this.b *= -1;
					_this.c *= 1;
					_this.d *= -1;
					_this.tx *= 1;
					_this.ty *= -1;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					_this.tx += width * 0.5;
					_this.ty += height * 0.5;
					_this.changedDirty = true;
				}
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				backend_Draw._viewportDensity = renderTarget.density;
				backend_Draw._viewportWidth = renderTarget.width * backend_Draw._viewportDensity;
				backend_Draw._viewportHeight = renderTarget.height * backend_Draw._viewportDensity;
				clay_opengl_web_GL.gl.viewport(0,0,renderTarget.width * renderTarget.density | 0,renderTarget.height * renderTarget.density | 0);
				if(renderTarget.clearOnRender) {
					clay_opengl_GLGraphics.clear((backend_Draw._blackTransparentColor >> 16 & 255) / 255,(backend_Draw._blackTransparentColor >> 8 & 255) / 255,(backend_Draw._blackTransparentColor & 255) / 255,(backend_Draw._blackTransparentColor >> 24 & 255) / 255);
					backend_Draw._didUpdateCurrentRenderTarget = true;
				}
			} else {
				var renderTarget = null;
				if(renderTarget != null) {
					clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
					clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
				} else {
					clay_opengl_GLGraphics.bindFramebuffer(clay_opengl_GLGraphics.NO_FRAMEBUFFER);
					clay_opengl_GLGraphics.bindRenderbuffer(clay_opengl_GLGraphics.NO_RENDERBUFFER);
				}
				var left = 0.0;
				var top = 0.0;
				var right = clay_Clay.app.screenWidth;
				var bottom = clay_Clay.app.screenHeight;
				var near = 1000.0;
				var far = -1000.0;
				var w = right - left;
				var h = top - bottom;
				var p = far - near;
				var tx = (right + left) / w;
				var ty = (top + bottom) / h;
				var tz = (far + near) / p;
				var m = backend_Draw._projectionMatrix;
				m[0] = 2 / w;
				m[4] = 0;
				m[8] = 0;
				m[12] = -tx;
				m[1] = 0;
				m[5] = 2 / h;
				m[9] = 0;
				m[13] = -ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = -2 / p;
				m[14] = -tz;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				var density = clay_Clay.app.screenDensity;
				var width = clay_Clay.app.screenWidth;
				var height = clay_Clay.app.screenHeight;
				var transform = ceramic_App.app.screen.matrix;
				if(transform != null) {
					var _this = backend_Draw._modelViewTransform;
					_this.a = transform.a;
					_this.b = transform.b;
					_this.c = transform.c;
					_this.d = transform.d;
					_this.tx = transform.tx;
					_this.ty = transform.ty;
					_this.changedDirty = true;
					var _this = backend_Draw._modelViewTransform;
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						_this.a = _this.b = _this.c = _this.d = 0;
						_this.tx = -_this.tx;
						_this.ty = -_this.ty;
					} else {
						norm = 1.0 / norm;
						var a1 = _this.d * norm;
						_this.d = _this.a * norm;
						_this.a = a1;
						_this.b *= -norm;
						_this.c *= -norm;
						var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
						_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
						_this.tx = tx1;
					}
					_this.changedDirty = true;
				} else {
					var _this = backend_Draw._modelViewTransform;
					_this.a = 1;
					_this.b = 0;
					_this.c = 0;
					_this.d = 1;
					_this.tx = 0;
					_this.ty = 0;
					_this.changedDirty = true;
				}
				var tx = backend_Draw._modelViewTransform.tx;
				var ty = backend_Draw._modelViewTransform.ty;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += -tx;
				_this.ty += -ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.a *= density;
				_this.b *= density;
				_this.c *= density;
				_this.d *= density;
				_this.tx *= density;
				_this.ty *= density;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				_this.tx += tx;
				_this.ty += ty;
				_this.changedDirty = true;
				var _this = backend_Draw._modelViewTransform;
				var norm = _this.a * _this.d - _this.b * _this.c;
				if(norm == 0) {
					_this.a = _this.b = _this.c = _this.d = 0;
					_this.tx = -_this.tx;
					_this.ty = -_this.ty;
				} else {
					norm = 1.0 / norm;
					var a1 = _this.d * norm;
					_this.d = _this.a * norm;
					_this.a = a1;
					_this.b *= -norm;
					_this.c *= -norm;
					var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
					_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
					_this.tx = tx1;
				}
				_this.changedDirty = true;
				var m = backend_Draw._modelViewMatrix;
				var transform = backend_Draw._modelViewTransform;
				m[0] = transform.a;
				m[4] = transform.c;
				m[8] = 0;
				m[12] = transform.tx;
				m[1] = transform.b;
				m[5] = transform.d;
				m[9] = 0;
				m[13] = transform.ty;
				m[2] = 0;
				m[6] = 0;
				m[10] = 1;
				m[14] = 0;
				m[3] = 0;
				m[7] = 0;
				m[11] = 0;
				m[15] = 1;
				backend_Draw._viewportDensity = clay_Clay.app.screenDensity;
				backend_Draw._viewportWidth = clay_Clay.app.screenWidth * backend_Draw._viewportDensity;
				backend_Draw._viewportHeight = clay_Clay.app.screenHeight * backend_Draw._viewportDensity;
				clay_opengl_web_GL.gl.viewport(0,0,backend_Draw._viewportWidth | 0,backend_Draw._viewportHeight | 0);
			}
		}
	}
	,useShader: function(shader) {
		backend_Draw._activeShader = shader;
		shader.uniforms.setMatrix4("projectionMatrix",backend_Draw._projectionMatrix);
		shader.uniforms.setMatrix4("modelViewMatrix",backend_Draw._modelViewMatrix);
		var shadersBackend = ceramic_App.app.backend.shaders;
		var customFloatAttributesSize = 0;
		var allAttrs = backend_Draw._activeShader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		backend_Draw._floatAttributesSize = customFloatAttributesSize;
		backend_Draw._batchMultiTexture = shadersBackend.canBatchWithMultipleTextures(backend_Draw._activeShader);
		backend_Draw._vertexSize = 3 + backend_Draw._floatAttributesSize + (backend_Draw._batchMultiTexture ? 1 : 0);
		backend_Draw._posSize = backend_Draw._vertexSize;
		if(backend_Draw._vertexSize < 4) {
			backend_Draw._vertexSize = 4;
		}
		backend_Draw._maxVerts = Math.floor(65536 / backend_Draw._vertexSize) | 0;
		shader.activate();
		if(backend_Draw._numPos == 0) {
			backend_Draw._numIndices = 0;
			backend_Draw._numPos = 0;
			backend_Draw._numUVs = 0;
			backend_Draw._numColors = 0;
			backend_Draw._posIndex = 0;
			backend_Draw._uvIndex = 0;
			backend_Draw._colorIndex = 0;
		}
	}
	,resetIndexes: function() {
		backend_Draw._numIndices = 0;
		backend_Draw._numPos = 0;
		backend_Draw._numUVs = 0;
		backend_Draw._numColors = 0;
		backend_Draw._posIndex = 0;
		backend_Draw._uvIndex = 0;
		backend_Draw._colorIndex = 0;
	}
	,setBlendFuncSeparate: function(srcRgb,dstRgb,srcAlpha,dstAlpha) {
		clay_opengl_web_GL.gl.blendFuncSeparate(srcRgb,dstRgb,srcAlpha,dstAlpha);
	}
	,beginDrawQuad: function(quad) {
	}
	,endDrawQuad: function() {
	}
	,beginDrawMesh: function(mesh) {
	}
	,endDrawMesh: function() {
	}
	,enableScissor: function(x,y,width,height) {
		clay_opengl_web_GL.gl.enable(3089);
		var density = backend_Draw._viewportDensity;
		var _this = backend_Draw._modelViewTransform;
		var left = (x * _this.a + y * _this.c + _this.tx) * density;
		var _this = backend_Draw._modelViewTransform;
		var top = (x * _this.b + y * _this.d + _this.ty) * density;
		var _this = backend_Draw._modelViewTransform;
		var right = ((x + width) * _this.a + (y + height) * _this.c + _this.tx) * density;
		var _this = backend_Draw._modelViewTransform;
		var bottom = ((x + width) * _this.b + (y + height) * _this.d + _this.ty) * density;
		if(backend_Draw._currentRenderTarget != null) {
			clay_opengl_web_GL.gl.scissor(Math.round(left),Math.round(backend_Draw._viewportHeight - top),Math.round(right - left),Math.round(top - bottom));
		} else {
			clay_opengl_web_GL.gl.scissor(Math.round(left),Math.round(backend_Draw._viewportHeight - bottom),Math.round(right - left),Math.round(bottom - top));
		}
	}
	,disableScissor: function() {
		clay_opengl_web_GL.gl.disable(3089);
	}
	,drawWithStencilTest: function() {
		clay_opengl_web_GL.gl.stencilFunc(514,1,255);
		clay_opengl_web_GL.gl.stencilMask(0);
		clay_opengl_web_GL.gl.colorMask(true,true,true,true);
		clay_opengl_web_GL.gl.enable(2960);
	}
	,drawWithoutStencilTest: function() {
		clay_opengl_web_GL.gl.stencilFunc(519,1,255);
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.colorMask(true,true,true,true);
		clay_opengl_web_GL.gl.disable(2960);
	}
	,beginDrawingInStencilBuffer: function() {
		backend_Draw._drawingInStencilBuffer = true;
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.clearStencil(255);
		clay_opengl_web_GL.gl.clear(1024);
		clay_opengl_web_GL.gl.enable(2960);
		clay_opengl_web_GL.gl.stencilOp(7680,7680,7681);
		clay_opengl_web_GL.gl.stencilFunc(519,1,255);
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.colorMask(false,false,false,false);
	}
	,endDrawingInStencilBuffer: function() {
		backend_Draw._drawingInStencilBuffer = false;
	}
	,bindTexture: function(backendItem) {
		var textureId = backendItem.textureId;
		if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
			clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
			clay_opengl_web_GL.gl.bindTexture(3553,textureId);
		}
	}
	,bindNoTexture: function() {
		var backendItem = ceramic_App.app.defaultWhiteTexture.backendItem;
		var textureId = backendItem.textureId;
		if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
			clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
			clay_opengl_web_GL.gl.bindTexture(3553,textureId);
		}
	}
	,textureBackendItemMatchesId: function(backendItem,textureId) {
		return backendItem.textureId == textureId;
	}
	,getTextureId: function(backendItem) {
		return backendItem.textureId;
	}
	,getTextureWidth: function(backendItem) {
		return backendItem.width;
	}
	,getTextureHeight: function(backendItem) {
		return backendItem.height;
	}
	,getTextureWidthActual: function(backendItem) {
		return backendItem.widthActual;
	}
	,getTextureHeightActual: function(backendItem) {
		return backendItem.heightActual;
	}
	,updateProjectionMatrix: function(width,height) {
		var left = 0.0;
		var top = 0.0;
		var right = width;
		var bottom = height;
		var near = 1000.0;
		var far = -1000.0;
		var w = right - left;
		var h = top - bottom;
		var p = far - near;
		var tx = (right + left) / w;
		var ty = (top + bottom) / h;
		var tz = (far + near) / p;
		var m = backend_Draw._projectionMatrix;
		m[0] = 2 / w;
		m[4] = 0;
		m[8] = 0;
		m[12] = -tx;
		m[1] = 0;
		m[5] = 2 / h;
		m[9] = 0;
		m[13] = -ty;
		m[2] = 0;
		m[6] = 0;
		m[10] = -2 / p;
		m[14] = -tz;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,updateViewMatrix: function(density,width,height,transform,flipY) {
		if(flipY == null) {
			flipY = 1;
		}
		if(transform != null) {
			var _this = backend_Draw._modelViewTransform;
			_this.a = transform.a;
			_this.b = transform.b;
			_this.c = transform.c;
			_this.d = transform.d;
			_this.tx = transform.tx;
			_this.ty = transform.ty;
			_this.changedDirty = true;
			var _this = backend_Draw._modelViewTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				_this.a = _this.b = _this.c = _this.d = 0;
				_this.tx = -_this.tx;
				_this.ty = -_this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = _this.d * norm;
				_this.d = _this.a * norm;
				_this.a = a1;
				_this.b *= -norm;
				_this.c *= -norm;
				var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
				_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
				_this.tx = tx1;
			}
			_this.changedDirty = true;
		} else {
			var _this = backend_Draw._modelViewTransform;
			_this.a = 1;
			_this.b = 0;
			_this.c = 0;
			_this.d = 1;
			_this.tx = 0;
			_this.ty = 0;
			_this.changedDirty = true;
		}
		var tx = backend_Draw._modelViewTransform.tx;
		var ty = backend_Draw._modelViewTransform.ty;
		var _this = backend_Draw._modelViewTransform;
		_this.tx += -tx;
		_this.ty += -ty;
		_this.changedDirty = true;
		var _this = backend_Draw._modelViewTransform;
		_this.a *= density;
		_this.b *= density;
		_this.c *= density;
		_this.d *= density;
		_this.tx *= density;
		_this.ty *= density;
		_this.changedDirty = true;
		var _this = backend_Draw._modelViewTransform;
		_this.tx += tx;
		_this.ty += ty;
		_this.changedDirty = true;
		if(flipY == -1) {
			var _this = backend_Draw._modelViewTransform;
			_this.tx += -width * 0.5;
			_this.ty += -height * 0.5;
			_this.changedDirty = true;
			var _this = backend_Draw._modelViewTransform;
			_this.a *= 1;
			_this.b *= -1;
			_this.c *= 1;
			_this.d *= -1;
			_this.tx *= 1;
			_this.ty *= -1;
			_this.changedDirty = true;
			var _this = backend_Draw._modelViewTransform;
			_this.tx += width * 0.5;
			_this.ty += height * 0.5;
			_this.changedDirty = true;
		}
		var _this = backend_Draw._modelViewTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			_this.a = _this.b = _this.c = _this.d = 0;
			_this.tx = -_this.tx;
			_this.ty = -_this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = _this.d * norm;
			_this.d = _this.a * norm;
			_this.a = a1;
			_this.b *= -norm;
			_this.c *= -norm;
			var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
			_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
			_this.tx = tx1;
		}
		_this.changedDirty = true;
		var m = backend_Draw._modelViewMatrix;
		var transform = backend_Draw._modelViewTransform;
		m[0] = transform.a;
		m[4] = transform.c;
		m[8] = 0;
		m[12] = transform.tx;
		m[1] = transform.b;
		m[5] = transform.d;
		m[9] = 0;
		m[13] = transform.ty;
		m[2] = 0;
		m[6] = 0;
		m[10] = 1;
		m[14] = 0;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,matrixIdentity: function(m) {
		m[0] = 1;
		m[4] = 0;
		m[8] = 0;
		m[12] = 0;
		m[1] = 0;
		m[5] = 1;
		m[9] = 0;
		m[13] = 0;
		m[2] = 0;
		m[6] = 0;
		m[10] = 1;
		m[14] = 0;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,setMatrixToTransform: function(m,transform) {
		m[0] = transform.a;
		m[4] = transform.c;
		m[8] = 0;
		m[12] = transform.tx;
		m[1] = transform.b;
		m[5] = transform.d;
		m[9] = 0;
		m[13] = transform.ty;
		m[2] = 0;
		m[6] = 0;
		m[10] = 1;
		m[14] = 0;
		m[3] = 0;
		m[7] = 0;
		m[11] = 0;
		m[15] = 1;
	}
	,getNumPos: function() {
		return backend_Draw._numPos;
	}
	,putPos: function(x,y,z) {
		backend_Draw._posList[backend_Draw._posIndex] = x;
		backend_Draw._posList[backend_Draw._posIndex + 1] = y;
		backend_Draw._posList[backend_Draw._posIndex + 2] = z;
		backend_Draw._posIndex += 3;
		backend_Draw._numPos++;
	}
	,putPosAndTextureSlot: function(x,y,z,textureSlot) {
		backend_Draw._posList[backend_Draw._posIndex] = x;
		backend_Draw._posList[backend_Draw._posIndex + 1] = y;
		backend_Draw._posList[backend_Draw._posIndex + 2] = z;
		backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
		backend_Draw._posIndex += 4;
		backend_Draw._numPos++;
	}
	,beginFloatAttributes: function() {
	}
	,putFloatAttribute: function(index,value) {
		backend_Draw._posList[backend_Draw._posIndex + index] = value;
	}
	,endFloatAttributes: function() {
		backend_Draw._posIndex += backend_Draw._floatAttributesSize;
	}
	,putIndice: function(i) {
		backend_Draw._indiceList[backend_Draw._numIndices] = i;
		backend_Draw._numIndices++;
	}
	,putUVs: function(uvX,uvY) {
		backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
		backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
		backend_Draw._uvIndex += 2;
		backend_Draw._numUVs++;
	}
	,putColor: function(r,g,b,a) {
		backend_Draw._colorList[backend_Draw._colorIndex] = r;
		backend_Draw._colorList[backend_Draw._colorIndex + 1] = g;
		backend_Draw._colorList[backend_Draw._colorIndex + 2] = b;
		backend_Draw._colorList[backend_Draw._colorIndex + 3] = a;
		backend_Draw._colorIndex += 4;
		backend_Draw._numColors++;
	}
	,hasAnythingToFlush: function() {
		return backend_Draw._numPos > 0;
	}
	,shouldFlush: function(numVerticesAfter,numIndicesAfter,customFloatAttributesSize) {
		if(backend_Draw._numPos + numVerticesAfter <= backend_Draw._maxVerts) {
			return backend_Draw._numIndices + numIndicesAfter > 16384;
		} else {
			return true;
		}
	}
	,remainingVertices: function() {
		return backend_Draw._maxVerts - backend_Draw._numPos;
	}
	,remainingIndices: function() {
		return 16384 - backend_Draw._numIndices;
	}
	,flush: function() {
		var batchMultiTexture = backend_Draw._batchMultiTexture;
		var pos = new Float32Array(backend_Draw._posList.buffer,0,backend_Draw._posIndex * 4 / 4 | 0);
		var uvs = new Float32Array(backend_Draw._uvList.buffer,0,backend_Draw._uvIndex * 4 / 4 | 0);
		var colors = new Float32Array(backend_Draw._colorList.buffer,0,backend_Draw._colorIndex * 4 / 4 | 0);
		var indices = new Uint16Array(backend_Draw._indiceList.buffer,0,backend_Draw._numIndices * 2 / 2 | 0);
		var pb = clay_opengl_web_GL.gl.createBuffer();
		var cb = clay_opengl_web_GL.gl.createBuffer();
		var tb = clay_opengl_web_GL.gl.createBuffer();
		var ib = clay_opengl_web_GL.gl.createBuffer();
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
		clay_opengl_web_GL.gl.bindBuffer(34962,pb);
		clay_opengl_web_GL.gl.vertexAttribPointer(0,3,5126,false,backend_Draw._posSize * 4,0);
		clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,tb);
		clay_opengl_web_GL.gl.vertexAttribPointer(1,2,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,uvs,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,cb);
		clay_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,colors,35040);
		var offset = 3;
		var n = 3;
		var customGLBuffersLen = 0;
		if(batchMultiTexture) {
			var b = clay_opengl_web_GL.gl.createBuffer();
			backend_Draw._customGLBuffers[customGLBuffersLen++] = b;
			clay_opengl_web_GL.gl.enableVertexAttribArray(n);
			clay_opengl_web_GL.gl.bindBuffer(34962,b);
			clay_opengl_web_GL.gl.vertexAttribPointer(n,1,5126,false,backend_Draw._posSize * 4,offset * 4);
			clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
			++n;
			++offset;
		}
		if(backend_Draw._activeShader != null && backend_Draw._activeShader.customAttributes != null) {
			var allAttrs = backend_Draw._activeShader.customAttributes;
			var start = customGLBuffersLen;
			var end = start + allAttrs.length;
			customGLBuffersLen += allAttrs.length;
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var ii = _g++;
				var attrIndex = ii - start;
				var attr = allAttrs[attrIndex];
				var b = clay_opengl_web_GL.gl.createBuffer();
				backend_Draw._customGLBuffers[ii] = b;
				clay_opengl_web_GL.gl.enableVertexAttribArray(n);
				clay_opengl_web_GL.gl.bindBuffer(34962,b);
				clay_opengl_web_GL.gl.vertexAttribPointer(n,attr.size,5126,false,backend_Draw._posSize * 4,offset * 4);
				clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
				++n;
				offset += attr.size;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,ib);
		clay_opengl_web_GL.gl.bufferData(34963,indices,35040);
		clay_opengl_web_GL.gl.drawElements(4,backend_Draw._numIndices,5123,0);
		clay_opengl_web_GL.gl.deleteBuffer(pb);
		clay_opengl_web_GL.gl.deleteBuffer(cb);
		clay_opengl_web_GL.gl.deleteBuffer(tb);
		if(customGLBuffersLen > 0) {
			var n = 3;
			var _g = 0;
			var _g1 = customGLBuffersLen;
			while(_g < _g1) {
				var ii = _g++;
				var b = backend_Draw._customGLBuffers[ii];
				clay_opengl_web_GL.gl.deleteBuffer(b);
				clay_opengl_web_GL.gl.disableVertexAttribArray(n);
				++n;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,clay_opengl_GLGraphics.NO_BUFFER);
		clay_opengl_web_GL.gl.deleteBuffer(ib);
		if(backend_Draw._currentRenderTarget != null) {
			backend_Draw._didUpdateCurrentRenderTarget = true;
		}
		pos = null;
		uvs = null;
		colors = null;
		indices = null;
		backend_Draw._numIndices = 0;
		backend_Draw._numPos = 0;
		backend_Draw._numUVs = 0;
		backend_Draw._numColors = 0;
		backend_Draw._posIndex = 0;
		backend_Draw._uvIndex = 0;
		backend_Draw._colorIndex = 0;
		this.prepareNextBuffers();
	}
	,__class__: backend_Draw
};
var backend_ElectronRunner = function() { };
$hxClasses["backend.ElectronRunner"] = backend_ElectronRunner;
backend_ElectronRunner.__name__ = "backend.ElectronRunner";
var spec_IO = function() { };
$hxClasses["spec.IO"] = spec_IO;
spec_IO.__name__ = "spec.IO";
spec_IO.__isInterface__ = true;
spec_IO.prototype = {
	saveString: null
	,appendString: null
	,readString: null
	,__class__: spec_IO
};
var backend_IO = function() {
};
$hxClasses["backend.IO"] = backend_IO;
backend_IO.__name__ = "backend.IO";
backend_IO.__interfaces__ = [spec_IO];
backend_IO.prototype = {
	initKeyValueIfNeeded: function() {
	}
	,saveString: function(key,str) {
		try {
			var storage = window.localStorage;
			if(storage == null) {
				ceramic_App.app.logger.error("Cannot save string: localStorage not supported on this browser",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\IO.hx", lineNumber : 200, className : "backend.IO", methodName : "saveString"});
				return false;
			}
			storage.setItem(key,ceramic_HashedString.encode(str));
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error("Failed to save string (key=" + key + "): " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\IO.hx", lineNumber : 207, className : "backend.IO", methodName : "saveString"});
			return false;
		}
		return true;
	}
	,appendString: function(key,str) {
		try {
			var storage = window.localStorage;
			if(storage == null) {
				ceramic_App.app.logger.error("Cannot append string: localStorage not supported on this browser",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\IO.hx", lineNumber : 220, className : "backend.IO", methodName : "appendString"});
				return false;
			}
			var existing = storage.getItem(key);
			if(existing == null) {
				storage.setItem(key,ceramic_HashedString.encode(str));
			} else {
				storage.setItem(key,existing + ceramic_HashedString.encode(str));
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error("Failed to append string (key=" + key + "): " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\IO.hx", lineNumber : 233, className : "backend.IO", methodName : "appendString"});
			return false;
		}
		return true;
	}
	,readString: function(key) {
		try {
			var storage = window.localStorage;
			if(storage == null) {
				ceramic_App.app.logger.error("Cannot read string: localStorage not supported on this browser",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\IO.hx", lineNumber : 246, className : "backend.IO", methodName : "readString"});
				return null;
			}
			var str = storage.getItem(key);
			if(str != null) {
				return ceramic_HashedString.decode(str);
			} else {
				return null;
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error("Failed to read string (key=" + key + "): " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\IO.hx", lineNumber : 254, className : "backend.IO", methodName : "readString"});
			return null;
		}
	}
	,__class__: backend_IO
};
var spec_Info = function() { };
$hxClasses["spec.Info"] = spec_Info;
spec_Info.__name__ = "spec.Info";
spec_Info.__isInterface__ = true;
spec_Info.prototype = {
	storageDirectory: null
	,imageExtensions: null
	,textExtensions: null
	,soundExtensions: null
	,shaderExtensions: null
	,__class__: spec_Info
};
var backend_Info = function() {
};
$hxClasses["backend.Info"] = backend_Info;
backend_Info.__name__ = "backend.Info";
backend_Info.__interfaces__ = [spec_Info];
backend_Info.prototype = {
	storageDirectory: function() {
		return null;
	}
	,imageExtensions: function() {
		return ["png","jpg","jpeg"];
	}
	,textExtensions: function() {
		return ["txt","json","fnt","atlas"];
	}
	,soundExtensions: function() {
		if(backend_Info._soundExtensions != null) {
			return [].concat(backend_Info._soundExtensions);
		}
		backend_Info._soundExtensions = [];
		var audioTest = new Audio();
		var ua = $global.navigator != null ? $global.navigator.userAgent : "";
		var checkOpera = backend_Info.RE_OPERA.match(ua);
		var isOldOpera = checkOpera && parseInt(backend_Info.RE_OPERA.matched(0).split("/")[1],10) < 33;
		var checkSafari = ua.indexOf("Safari") != -1 && ua.indexOf("Chrome") == -1;
		var safariVersion = backend_Info.RE_SAFARI_VERSION.match(ua);
		var isOldSafari = checkSafari && safariVersion && parseInt(backend_Info.RE_SAFARI_VERSION.matched(1),10) < 15;
		var oggTest = audioTest.canPlayType("audio/ogg; codecs=\"vorbis\"");
		var canPlayOgg = oggTest != null && oggTest != "no" && oggTest != "";
		if(canPlayOgg) {
			backend_Info._soundExtensions.push("ogg");
		}
		var mpegTest = audioTest.canPlayType("audio/mpeg;");
		var mp3Test = audioTest.canPlayType("audio/mp3;");
		var canPlayMp3 = mpegTest != null && mpegTest != "no" && mpegTest != "" || mp3Test != null && mp3Test != "no" && mp3Test != "";
		if(!isOldOpera && canPlayMp3) {
			backend_Info._soundExtensions.push("mp3");
		}
		var xFlacTest = audioTest.canPlayType("audio/x-flac;");
		var flacTest = audioTest.canPlayType("audio/flac;");
		var canPlayFlac = xFlacTest != null && xFlacTest != "no" && xFlacTest != "" || flacTest != null && flacTest != "no" && flacTest != "";
		if(canPlayFlac) {
			backend_Info._soundExtensions.push("flac");
		}
		var wavCodecTest = audioTest.canPlayType("audio/wav; codecs=\"1\"");
		var wavTest = audioTest.canPlayType("audio/wav;");
		var canPlayWav = wavCodecTest != null && wavCodecTest != "no" && wavCodecTest != "" || wavTest != null && wavTest != "no" && wavTest != "";
		if(canPlayWav) {
			backend_Info._soundExtensions.push("wav");
		}
		return [].concat(backend_Info._soundExtensions);
	}
	,shaderExtensions: function() {
		return ["frag","vert"];
	}
	,__class__: backend_Info
};
var spec_Input = function() { };
$hxClasses["spec.Input"] = spec_Input;
spec_Input.__name__ = "spec.Input";
spec_Input.__isInterface__ = true;
var backend_Input = function() {
};
$hxClasses["backend.Input"] = backend_Input;
backend_Input.__name__ = "backend.Input";
backend_Input.__interfaces__ = [spec_Input,tracker_Events];
backend_Input.prototype = {
	__cbOnKeyDown: null
	,__cbOnceKeyDown: null
	,__cbOnOwnerUnbindKeyDown: null
	,__cbOnceOwnerUnbindKeyDown: null
	,emitKeyDown: function(key) {
		var len = 0;
		if(this.__cbOnKeyDown != null) {
			len += this.__cbOnKeyDown.length;
		}
		if(this.__cbOnceKeyDown != null) {
			len += this.__cbOnceKeyDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnKeyDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceKeyDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceKeyDown[ii];
						this.__cbOnceKeyDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindKeyDown[ii];
						this.__cbOnceOwnerUnbindKeyDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindKeyDown[ii]);
						newCbOnceArray.push(this.__cbOnceKeyDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindKeyDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceKeyDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnKeyDown == null) {
			this.__cbOnKeyDown = [];
		}
		this.__cbOnKeyDown.push(handleKey);
	}
	,onceKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnceKeyDown == null) {
			this.__cbOnceKeyDown = [];
		}
		this.__cbOnceKeyDown.push(handleKey);
	}
	,offKeyDown: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyDown != null) {
				index = this.__cbOnKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyDown.splice(index,1);
				}
			}
			if(this.__cbOnceKeyDown != null) {
				index = this.__cbOnceKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyDown = null;
			}
			if(this.__cbOnceOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyDown = null;
			}
			this.__cbOnKeyDown = null;
			this.__cbOnceKeyDown = null;
		}
	}
	,listensKeyDown: function() {
		if(!(this.__cbOnKeyDown != null && this.__cbOnKeyDown.length > 0)) {
			if(this.__cbOnceKeyDown != null) {
				return this.__cbOnceKeyDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnKeyUp: null
	,__cbOnceKeyUp: null
	,__cbOnOwnerUnbindKeyUp: null
	,__cbOnceOwnerUnbindKeyUp: null
	,emitKeyUp: function(key) {
		var len = 0;
		if(this.__cbOnKeyUp != null) {
			len += this.__cbOnKeyUp.length;
		}
		if(this.__cbOnceKeyUp != null) {
			len += this.__cbOnceKeyUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnKeyUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceKeyUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceKeyUp[ii];
						this.__cbOnceKeyUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindKeyUp[ii];
						this.__cbOnceOwnerUnbindKeyUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindKeyUp[ii]);
						newCbOnceArray.push(this.__cbOnceKeyUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindKeyUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceKeyUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnKeyUp == null) {
			this.__cbOnKeyUp = [];
		}
		this.__cbOnKeyUp.push(handleKey);
	}
	,onceKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnceKeyUp == null) {
			this.__cbOnceKeyUp = [];
		}
		this.__cbOnceKeyUp.push(handleKey);
	}
	,offKeyUp: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyUp != null) {
				index = this.__cbOnKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyUp.splice(index,1);
				}
			}
			if(this.__cbOnceKeyUp != null) {
				index = this.__cbOnceKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyUp = null;
			}
			if(this.__cbOnceOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyUp = null;
			}
			this.__cbOnKeyUp = null;
			this.__cbOnceKeyUp = null;
		}
	}
	,listensKeyUp: function() {
		if(!(this.__cbOnKeyUp != null && this.__cbOnKeyUp.length > 0)) {
			if(this.__cbOnceKeyUp != null) {
				return this.__cbOnceKeyUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadAxis: null
	,__cbOnceGamepadAxis: null
	,__cbOnOwnerUnbindGamepadAxis: null
	,__cbOnceOwnerUnbindGamepadAxis: null
	,emitGamepadAxis: function(gamepadId,axisId,value) {
		var len = 0;
		if(this.__cbOnGamepadAxis != null) {
			len += this.__cbOnGamepadAxis.length;
		}
		if(this.__cbOnceGamepadAxis != null) {
			len += this.__cbOnceGamepadAxis.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadAxis[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadAxis[ii];
						this.__cbOnceGamepadAxis[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadAxis[ii];
						this.__cbOnceOwnerUnbindGamepadAxis[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadAxis[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadAxis[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadAxis = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadAxis = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,axisId,value);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadAxis: function(owner,handleGamepadIdAxisIdValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisIdValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisIdValue);
					handleGamepadIdAxisIdValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisIdValue = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnGamepadAxis == null) {
			this.__cbOnGamepadAxis = [];
		}
		this.__cbOnGamepadAxis.push(handleGamepadIdAxisIdValue);
	}
	,onceGamepadAxis: function(owner,handleGamepadIdAxisIdValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisIdValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisIdValue);
					handleGamepadIdAxisIdValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisIdValue = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnceGamepadAxis == null) {
			this.__cbOnceGamepadAxis = [];
		}
		this.__cbOnceGamepadAxis.push(handleGamepadIdAxisIdValue);
	}
	,offGamepadAxis: function(handleGamepadIdAxisIdValue) {
		if(handleGamepadIdAxisIdValue != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadAxis != null) {
				index = this.__cbOnGamepadAxis.indexOf(handleGamepadIdAxisIdValue);
				if(index != -1) {
					this.__cbOnGamepadAxis.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				index = this.__cbOnceGamepadAxis.indexOf(handleGamepadIdAxisIdValue);
				if(index != -1) {
					this.__cbOnceGamepadAxis.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadAxis = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadAxis = null;
			}
			this.__cbOnGamepadAxis = null;
			this.__cbOnceGamepadAxis = null;
		}
	}
	,listensGamepadAxis: function() {
		if(!(this.__cbOnGamepadAxis != null && this.__cbOnGamepadAxis.length > 0)) {
			if(this.__cbOnceGamepadAxis != null) {
				return this.__cbOnceGamepadAxis.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadDown: null
	,__cbOnceGamepadDown: null
	,__cbOnOwnerUnbindGamepadDown: null
	,__cbOnceOwnerUnbindGamepadDown: null
	,emitGamepadDown: function(gamepadId,buttonId) {
		var len = 0;
		if(this.__cbOnGamepadDown != null) {
			len += this.__cbOnGamepadDown.length;
		}
		if(this.__cbOnceGamepadDown != null) {
			len += this.__cbOnceGamepadDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadDown[ii];
						this.__cbOnceGamepadDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadDown[ii];
						this.__cbOnceOwnerUnbindGamepadDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadDown[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,buttonId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDown: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadDown(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnGamepadDown == null) {
			this.__cbOnGamepadDown = [];
		}
		this.__cbOnGamepadDown.push(handleGamepadIdButtonId);
	}
	,onceGamepadDown: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadDown(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnceGamepadDown == null) {
			this.__cbOnceGamepadDown = [];
		}
		this.__cbOnceGamepadDown.push(handleGamepadIdButtonId);
	}
	,offGamepadDown: function(handleGamepadIdButtonId) {
		if(handleGamepadIdButtonId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDown != null) {
				index = this.__cbOnGamepadDown.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnGamepadDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDown.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				index = this.__cbOnceGamepadDown.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnceGamepadDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDown = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDown = null;
			}
			this.__cbOnGamepadDown = null;
			this.__cbOnceGamepadDown = null;
		}
	}
	,listensGamepadDown: function() {
		if(!(this.__cbOnGamepadDown != null && this.__cbOnGamepadDown.length > 0)) {
			if(this.__cbOnceGamepadDown != null) {
				return this.__cbOnceGamepadDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadUp: null
	,__cbOnceGamepadUp: null
	,__cbOnOwnerUnbindGamepadUp: null
	,__cbOnceOwnerUnbindGamepadUp: null
	,emitGamepadUp: function(gamepadId,buttonId) {
		var len = 0;
		if(this.__cbOnGamepadUp != null) {
			len += this.__cbOnGamepadUp.length;
		}
		if(this.__cbOnceGamepadUp != null) {
			len += this.__cbOnceGamepadUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadUp[ii];
						this.__cbOnceGamepadUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadUp[ii];
						this.__cbOnceOwnerUnbindGamepadUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadUp[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,buttonId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadUp: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadUp(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnGamepadUp == null) {
			this.__cbOnGamepadUp = [];
		}
		this.__cbOnGamepadUp.push(handleGamepadIdButtonId);
	}
	,onceGamepadUp: function(owner,handleGamepadIdButtonId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButtonId != null) {
					_gthis.offGamepadUp(handleGamepadIdButtonId);
					handleGamepadIdButtonId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButtonId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnceGamepadUp == null) {
			this.__cbOnceGamepadUp = [];
		}
		this.__cbOnceGamepadUp.push(handleGamepadIdButtonId);
	}
	,offGamepadUp: function(handleGamepadIdButtonId) {
		if(handleGamepadIdButtonId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadUp != null) {
				index = this.__cbOnGamepadUp.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnGamepadUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadUp.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				index = this.__cbOnceGamepadUp.indexOf(handleGamepadIdButtonId);
				if(index != -1) {
					this.__cbOnceGamepadUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadUp = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadUp = null;
			}
			this.__cbOnGamepadUp = null;
			this.__cbOnceGamepadUp = null;
		}
	}
	,listensGamepadUp: function() {
		if(!(this.__cbOnGamepadUp != null && this.__cbOnGamepadUp.length > 0)) {
			if(this.__cbOnceGamepadUp != null) {
				return this.__cbOnceGamepadUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadGyro: null
	,__cbOnceGamepadGyro: null
	,__cbOnOwnerUnbindGamepadGyro: null
	,__cbOnceOwnerUnbindGamepadGyro: null
	,emitGamepadGyro: function(gamepadId,dx,dy,dz) {
		var len = 0;
		if(this.__cbOnGamepadGyro != null) {
			len += this.__cbOnGamepadGyro.length;
		}
		if(this.__cbOnceGamepadGyro != null) {
			len += this.__cbOnceGamepadGyro.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadGyro != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadGyro.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadGyro[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadGyro != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadGyro.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadGyro[ii];
						this.__cbOnceGamepadGyro[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadGyro[ii];
						this.__cbOnceOwnerUnbindGamepadGyro[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadGyro[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadGyro[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadGyro = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadGyro = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,dx,dy,dz);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadGyro: function(owner,handleGamepadIdDxDyDz) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadGyro" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdDxDyDz != null) {
					_gthis.offGamepadGyro(handleGamepadIdDxDyDz);
					handleGamepadIdDxDyDz = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadGyro == null) {
				this.__cbOnOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnOwnerUnbindGamepadGyro.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdDxDyDz = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadGyro == null) {
				this.__cbOnOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnOwnerUnbindGamepadGyro.push(null);
		}
		if(this.__cbOnGamepadGyro == null) {
			this.__cbOnGamepadGyro = [];
		}
		this.__cbOnGamepadGyro.push(handleGamepadIdDxDyDz);
	}
	,onceGamepadGyro: function(owner,handleGamepadIdDxDyDz) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadGyro" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdDxDyDz != null) {
					_gthis.offGamepadGyro(handleGamepadIdDxDyDz);
					handleGamepadIdDxDyDz = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadGyro == null) {
				this.__cbOnceOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnceOwnerUnbindGamepadGyro.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdDxDyDz = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadGyro == null) {
				this.__cbOnceOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnceOwnerUnbindGamepadGyro.push(null);
		}
		if(this.__cbOnceGamepadGyro == null) {
			this.__cbOnceGamepadGyro = [];
		}
		this.__cbOnceGamepadGyro.push(handleGamepadIdDxDyDz);
	}
	,offGamepadGyro: function(handleGamepadIdDxDyDz) {
		if(handleGamepadIdDxDyDz != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadGyro != null) {
				index = this.__cbOnGamepadGyro.indexOf(handleGamepadIdDxDyDz);
				if(index != -1) {
					this.__cbOnGamepadGyro.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadGyro[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadGyro.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadGyro != null) {
				index = this.__cbOnceGamepadGyro.indexOf(handleGamepadIdDxDyDz);
				if(index != -1) {
					this.__cbOnceGamepadGyro.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadGyro[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadGyro.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadGyro != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadGyro.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadGyro[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadGyro = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadGyro != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadGyro.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadGyro[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadGyro = null;
			}
			this.__cbOnGamepadGyro = null;
			this.__cbOnceGamepadGyro = null;
		}
	}
	,listensGamepadGyro: function() {
		if(!(this.__cbOnGamepadGyro != null && this.__cbOnGamepadGyro.length > 0)) {
			if(this.__cbOnceGamepadGyro != null) {
				return this.__cbOnceGamepadGyro.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadEnable: null
	,__cbOnceGamepadEnable: null
	,__cbOnOwnerUnbindGamepadEnable: null
	,__cbOnceOwnerUnbindGamepadEnable: null
	,emitGamepadEnable: function(gamepadId,name) {
		var len = 0;
		if(this.__cbOnGamepadEnable != null) {
			len += this.__cbOnGamepadEnable.length;
		}
		if(this.__cbOnceGamepadEnable != null) {
			len += this.__cbOnceGamepadEnable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadEnable[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadEnable[ii];
						this.__cbOnceGamepadEnable[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadEnable[ii];
						this.__cbOnceOwnerUnbindGamepadEnable[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadEnable[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadEnable[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadEnable = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadEnable = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnGamepadEnable == null) {
			this.__cbOnGamepadEnable = [];
		}
		this.__cbOnGamepadEnable.push(handleGamepadIdName);
	}
	,onceGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnceGamepadEnable == null) {
			this.__cbOnceGamepadEnable = [];
		}
		this.__cbOnceGamepadEnable.push(handleGamepadIdName);
	}
	,offGamepadEnable: function(handleGamepadIdName) {
		if(handleGamepadIdName != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadEnable != null) {
				index = this.__cbOnGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnGamepadEnable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				index = this.__cbOnceGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnceGamepadEnable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadEnable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadEnable = null;
			}
			this.__cbOnGamepadEnable = null;
			this.__cbOnceGamepadEnable = null;
		}
	}
	,listensGamepadEnable: function() {
		if(!(this.__cbOnGamepadEnable != null && this.__cbOnGamepadEnable.length > 0)) {
			if(this.__cbOnceGamepadEnable != null) {
				return this.__cbOnceGamepadEnable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadDisable: null
	,__cbOnceGamepadDisable: null
	,__cbOnOwnerUnbindGamepadDisable: null
	,__cbOnceOwnerUnbindGamepadDisable: null
	,emitGamepadDisable: function(gamepadId) {
		var len = 0;
		if(this.__cbOnGamepadDisable != null) {
			len += this.__cbOnGamepadDisable.length;
		}
		if(this.__cbOnceGamepadDisable != null) {
			len += this.__cbOnceGamepadDisable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadDisable[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadDisable[ii];
						this.__cbOnceGamepadDisable[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadDisable[ii];
						this.__cbOnceOwnerUnbindGamepadDisable[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadDisable[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadDisable[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadDisable = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadDisable = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnGamepadDisable == null) {
			this.__cbOnGamepadDisable = [];
		}
		this.__cbOnGamepadDisable.push(handleGamepadId);
	}
	,onceGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnceGamepadDisable == null) {
			this.__cbOnceGamepadDisable = [];
		}
		this.__cbOnceGamepadDisable.push(handleGamepadId);
	}
	,offGamepadDisable: function(handleGamepadId) {
		if(handleGamepadId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDisable != null) {
				index = this.__cbOnGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnGamepadDisable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				index = this.__cbOnceGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnceGamepadDisable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDisable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDisable = null;
			}
			this.__cbOnGamepadDisable = null;
			this.__cbOnceGamepadDisable = null;
		}
	}
	,listensGamepadDisable: function() {
		if(!(this.__cbOnGamepadDisable != null && this.__cbOnGamepadDisable.length > 0)) {
			if(this.__cbOnceGamepadDisable != null) {
				return this.__cbOnceGamepadDisable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,startGamepadRumble: function(gamepadId,lowFrequency,highFrequency,duration) {
		clay_Clay.app.runtime.startGamepadRumble(gamepadId,lowFrequency,highFrequency,duration);
	}
	,stopGamepadRumble: function(gamepadId) {
		clay_Clay.app.runtime.stopGamepadRumble(gamepadId);
	}
	,unbindEvents: function() {
		this.offKeyDown();
		this.offKeyUp();
		this.offGamepadAxis();
		this.offGamepadDown();
		this.offGamepadUp();
		this.offGamepadGyro();
		this.offGamepadEnable();
		this.offGamepadDisable();
	}
	,__class__: backend_Input
};
var backend_Main = function() { };
$hxClasses["backend.Main"] = backend_Main;
backend_Main.__name__ = "backend.Main";
backend_Main.main = function() {
	backend_Main.events = new backend_ClayEvents(backend_Main.ready);
	new clay_Clay(backend_Main.configure,backend_Main.events);
};
backend_Main.configure = function(config) {
	config.window.backgroundSleep = 0.016666666666666666;
	config.render.webgl.version = 2;
	var userAgent = $global.navigator.userAgent.toLowerCase();
	if(userAgent.indexOf(" electron/") > -1) {
		try {
			var electronApp = require('electron').remote.require('./app.js');
			if(electronApp.isCeramicRunner) {
				backend_ElectronRunner.electronRunner = electronApp;
			}
		} catch( _g ) {
		}
	}
	if(backend_ElectronRunner.electronRunner != null) {
		document.getElementsByTagName('html')[0].className += ' in-electron-runner';
		ceramic_Logger._hasElectronRunner = true;
		var origConsoleLog = console.log;
		console.log = function(str) {
			backend_ElectronRunner.electronRunner.consoleLog(str);
			origConsoleLog(str);
		};
		window.addEventListener("error",function(event) {
			var error = event.error;
			if(((error) instanceof haxe_ValueException)) {
				var valueException = error;
				var _stack = valueException.get_stack();
			}
			var stack = ("" + error.stack).split("\n");
			var len = stack.length;
			var i = len - 1;
			var file = "";
			var line = 0;
			var isWin = navigator.platform.indexOf("Win") != -1;
			while(i >= 0) {
				var str = stack[i];
				str = StringTools.ltrim(str);
				str = StringTools.replace(str,"http://localhost:" + Std.string(backend_ElectronRunner.electronRunner.serverPort) + "/file:" + (isWin ? "/" : ""),"");
				str = StringTools.replace(str,"http://localhost:" + Std.string(backend_ElectronRunner.electronRunner.serverPort) + "/",Std.string(backend_ElectronRunner.electronRunner.appFiles) + "/");
				backend_ElectronRunner.electronRunner.consoleLog("[error] " + str);
				--i;
			}
		});
	}
	var settings = ceramic_App.init();
	backend_Main.project = new Project(settings);
	backend_Main.app = ceramic_App.app;
	config.runtime.preventDefaultMouseWheel = settings.settings.get_preventDefaultMouseWheel();
	backend_Main.app.settings.onPreventDefaultMouseWheelChange(backend_Main.app,function(preventDefaultMouseWheel,_) {
		config.runtime.preventDefaultMouseWheel = preventDefaultMouseWheel || backend_Main.app.numBlockingDefaultScroll > 0;
	});
	config.runtime.preventDefaultTouches = settings.settings.get_preventDefaultTouches();
	backend_Main.app.settings.onPreventDefaultTouchesChange(backend_Main.app,function(preventDefaultTouches,_) {
		config.runtime.preventDefaultTouches = preventDefaultTouches || backend_Main.app.numBlockingDefaultScroll > 0;
	});
	var prevNumBlockingDefaultScroll = backend_Main.app.numBlockingDefaultScroll;
	backend_Main.app.onPostUpdate(backend_Main.app,function(delta) {
		var numBlockingDefaultScroll = backend_Main.app.numBlockingDefaultScroll;
		if(prevNumBlockingDefaultScroll != numBlockingDefaultScroll) {
			prevNumBlockingDefaultScroll = numBlockingDefaultScroll;
			var tmp = backend_Main.app.settings.get_preventDefaultTouches() || numBlockingDefaultScroll > 0;
			config.runtime.preventDefaultTouches = tmp;
			var tmp = backend_Main.app.settings.get_preventDefaultMouseWheel() || numBlockingDefaultScroll > 0;
			config.runtime.preventDefaultMouseWheel = tmp;
		}
	});
	if(backend_ElectronRunner.electronRunner == null) {
		if(backend_Main.app.settings.get_fullscreen()) {
			backend_Main.app.settings.set_fullscreen(false);
		}
	}
	config.render.antialiasing = backend_Main.app.settings.antialiasing;
	if(backend_Main.app.settings.get_windowWidth() > 0) {
		config.window.width = backend_Main.app.settings.get_windowWidth();
	} else if(backend_Main.app.settings.get_targetWidth() > 0) {
		config.window.width = backend_Main.app.settings.get_targetWidth();
	}
	if(backend_Main.app.settings.get_windowHeight() > 0) {
		config.window.height = backend_Main.app.settings.get_windowHeight();
	} else if(backend_Main.app.settings.get_targetHeight() > 0) {
		config.window.height = backend_Main.app.settings.get_targetHeight();
	}
	config.window.fullscreen = backend_Main.app.settings.get_fullscreen();
	config.window.resizable = backend_Main.app.settings.resizable;
	config.window.title = backend_Main.app.settings.get_title();
	config.render.stencil = 2;
	config.render.depth = 16;
	backend_Main.configureOrientation();
	if(backend_Main.app.settings.backend.webParent != null) {
		config.runtime.windowParent = backend_Main.app.settings.backend.webParent;
	} else {
		config.runtime.windowParent = window.document.getElementById("ceramic-app");
	}
	config.runtime.mouseUseBrowserWindowEvents = true;
	if(backend_Main.app.settings.backend.allowDefaultKeys) {
		config.runtime.preventDefaultKeys = [];
	}
	backend_Main.containerElId = backend_Main.app.settings.backend.webParent != null ? backend_Main.app.settings.backend.webParent.id : "ceramic-app";
	backend_Main.containerWidth = 0;
	backend_Main.containerHeight = 0;
	backend_Main.containerPixelRatio = 0;
	window.document.body.classList.add("ceramic-invisible");
	window.requestAnimationFrame(backend_Main._updateContainerSizeIfNeeded);
	if(backend_ElectronRunner.electronRunner != null) {
		if(backend_ElectronRunner.electronRunner.ceramicSettings != null) {
			backend_ElectronRunner.electronRunner.ceramicSettings({ "trace" : function(str) {
				haxe_Log.trace("app.js: " + str,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Main.hx", lineNumber : 254, className : "backend.Main", methodName : "configure"});
			}, title : backend_Main.app.settings.get_title(), fullscreen : backend_Main.app.settings.get_fullscreen(), resizable : backend_Main.app.settings.resizable, targetWidth : backend_Main.app.settings.get_windowWidth() > 0 ? backend_Main.app.settings.get_windowWidth() : backend_Main.app.settings.get_targetWidth(), targetHeight : backend_Main.app.settings.get_windowHeight() > 0 ? backend_Main.app.settings.get_windowHeight() : backend_Main.app.settings.get_targetHeight()});
		}
		if(backend_ElectronRunner.electronRunner.listenFullscreen != null) {
			backend_ElectronRunner.electronRunner.listenFullscreen(function(e) {
				ceramic_App.app.settings.set_fullscreen(true);
			},function(e) {
				ceramic_App.app.settings.set_fullscreen(false);
			});
		}
	}
};
backend_Main._updateContainerSizeIfNeeded = function(t) {
	if(t == null) {
		t = 0.016;
	}
	var containerEl = window.document.getElementById(backend_Main.containerElId);
	var appEl = window.document.getElementById("app");
	if(containerEl != null && appEl != null) {
		var width = containerEl.offsetWidth;
		var height = containerEl.offsetHeight;
		var now = window.performance.now() / 1000.0;
		if(backend_Main.lastResizeTime != -1) {
			if(width != backend_Main.lastNewWidth || height != backend_Main.lastNewHeight) {
				if(backend_Main.lastNewWidth != -1 || backend_Main.lastNewHeight != -1) {
					window.document.body.classList.add("ceramic-invisible");
				}
				backend_Main.lastResizeTime = now;
				backend_Main.lastNewWidth = width;
				backend_Main.lastNewHeight = height;
				window.requestAnimationFrame(backend_Main._updateContainerSizeIfNeeded);
				return;
			}
		}
		if(backend_Main.lastResizeTime != -1 && now - backend_Main.lastResizeTime < 0.1) {
			window.requestAnimationFrame(backend_Main._updateContainerSizeIfNeeded);
			return;
		}
		if(width != backend_Main.containerWidth || height != backend_Main.containerHeight || window.devicePixelRatio != backend_Main.containerPixelRatio) {
			backend_Main.containerWidth = width;
			backend_Main.containerHeight = height;
			backend_Main.containerPixelRatio = window.devicePixelRatio;
			appEl.style.width = backend_Main.containerWidth + "px";
			appEl.style.height = backend_Main.containerHeight + "px";
			appEl.width = Math.round(backend_Main.containerWidth * window.devicePixelRatio);
			appEl.height = Math.round(backend_Main.containerHeight * window.devicePixelRatio);
			backend_Main.resizing++;
			if(backend_Main.lastResizeTime != -1) {
				window.document.body.classList.add("ceramic-invisible");
			}
			var fn = null;
			fn = function() {
				if(backend_Main.resizing == 0 && backend_Main.readyToDisplay) {
					window.document.body.classList.remove("ceramic-invisible");
				}
			};
			window.setTimeout(function() {
				backend_Main.resizing--;
				fn();
			},100);
			backend_Main.lastResizeTime = now;
		}
	}
	window.requestAnimationFrame(backend_Main._updateContainerSizeIfNeeded);
};
backend_Main._appLoaderCheckDisplayReady = function(done) {
	if(backend_Main._displayReady) {
		done();
	} else {
		backend_Main._pendingDisplayReadyDone = done;
	}
};
backend_Main.ready = function() {
	backend_Main.app.backend.io.initKeyValueIfNeeded();
	backend_Main._displayReady = false;
	backend_Main.app.loaders.push(backend_Main._appLoaderCheckDisplayReady);
	var ext = clay_opengl_web_GL.gl.getExtension("OES_standard_derivatives");
	if(backend_ElectronRunner.electronRunner != null) {
		backend_ElectronRunner.electronRunner.ceramicReady();
	}
	var intervalId = null;
	var checkSizeReady = function() {
		var containerElId = backend_Main.app.settings.backend.webParent != null ? backend_Main.app.settings.backend.webParent.id : "ceramic-app";
		var containerEl = window.document.getElementById(containerElId);
		var appEl = window.document.getElementById("app");
		if(appEl.offsetWidth == containerEl.offsetWidth) {
			backend_Main.readyToDisplay = true;
			window.clearInterval(intervalId);
		}
		if(backend_Main.readyToDisplay) {
			if(backend_Main.resizing == 0) {
				window.document.body.classList.remove("ceramic-invisible");
			}
			backend_Main._displayReady = true;
			if(backend_Main._pendingDisplayReadyDone != null) {
				var done = backend_Main._pendingDisplayReadyDone;
				backend_Main._pendingDisplayReadyDone = null;
				done();
				done = null;
			}
		}
	};
	intervalId = window.setInterval(checkSizeReady,500);
};
backend_Main.configureOrientation = function() {
};
var spec_Screen = function() { };
$hxClasses["spec.Screen"] = spec_Screen;
spec_Screen.__name__ = "spec.Screen";
spec_Screen.__isInterface__ = true;
spec_Screen.prototype = {
	getWidth: null
	,getHeight: null
	,getDensity: null
	,setBackground: null
	,setWindowTitle: null
	,setWindowFullscreen: null
	,screenshotToTexture: null
	,screenshotToPng: null
	,screenshotToPixels: null
	,__class__: spec_Screen
};
var backend_Screen = function() {
	this.nextScreenshotIndex = 0;
	this.didTryResumeAudioContext = false;
};
$hxClasses["backend.Screen"] = backend_Screen;
backend_Screen.__name__ = "backend.Screen";
backend_Screen.__interfaces__ = [spec_Screen,tracker_Events];
backend_Screen.prototype = {
	__cbOnResize: null
	,__cbOnceResize: null
	,__cbOnOwnerUnbindResize: null
	,__cbOnceOwnerUnbindResize: null
	,emitResize: function() {
		var len = 0;
		if(this.__cbOnResize != null) {
			len += this.__cbOnResize.length;
		}
		if(this.__cbOnceResize != null) {
			len += this.__cbOnceResize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnResize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnResize[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceResize != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceResize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceResize[ii];
						this.__cbOnceResize[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindResize[ii];
						this.__cbOnceOwnerUnbindResize[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindResize[ii]);
						newCbOnceArray.push(this.__cbOnceResize[ii]);
					}
				}
				this.__cbOnceOwnerUnbindResize = newCbOnceOwnerUnbindArray;
				this.__cbOnceResize = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(null);
		}
		if(this.__cbOnResize == null) {
			this.__cbOnResize = [];
		}
		this.__cbOnResize.push(handle);
	}
	,onceResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(null);
		}
		if(this.__cbOnceResize == null) {
			this.__cbOnceResize = [];
		}
		this.__cbOnceResize.push(handle);
	}
	,offResize: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnResize != null) {
				index = this.__cbOnResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnResize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindResize.splice(index,1);
				}
			}
			if(this.__cbOnceResize != null) {
				index = this.__cbOnceResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnceResize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindResize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindResize = null;
			}
			if(this.__cbOnceOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindResize = null;
			}
			this.__cbOnResize = null;
			this.__cbOnceResize = null;
		}
	}
	,listensResize: function() {
		if(!(this.__cbOnResize != null && this.__cbOnResize.length > 0)) {
			if(this.__cbOnceResize != null) {
				return this.__cbOnceResize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseDown: null
	,__cbOnceMouseDown: null
	,__cbOnOwnerUnbindMouseDown: null
	,__cbOnceOwnerUnbindMouseDown: null
	,emitMouseDown: function(buttonId,x,y) {
		this.tryResumeAudioContextIfNeeded();
		var len = 0;
		if(this.__cbOnMouseDown != null) {
			len += this.__cbOnMouseDown.length;
		}
		if(this.__cbOnceMouseDown != null) {
			len += this.__cbOnceMouseDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseDown[ii];
						this.__cbOnceMouseDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseDown[ii];
						this.__cbOnceOwnerUnbindMouseDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseDown[ii]);
						newCbOnceArray.push(this.__cbOnceMouseDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnMouseDown == null) {
			this.__cbOnMouseDown = [];
		}
		this.__cbOnMouseDown.push(handleButtonIdXY);
	}
	,onceMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnceMouseDown == null) {
			this.__cbOnceMouseDown = [];
		}
		this.__cbOnceMouseDown.push(handleButtonIdXY);
	}
	,offMouseDown: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseDown != null) {
				index = this.__cbOnMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseDown.splice(index,1);
				}
			}
			if(this.__cbOnceMouseDown != null) {
				index = this.__cbOnceMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseDown = null;
			}
			if(this.__cbOnceOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseDown = null;
			}
			this.__cbOnMouseDown = null;
			this.__cbOnceMouseDown = null;
		}
	}
	,listensMouseDown: function() {
		if(!(this.__cbOnMouseDown != null && this.__cbOnMouseDown.length > 0)) {
			if(this.__cbOnceMouseDown != null) {
				return this.__cbOnceMouseDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseUp: null
	,__cbOnceMouseUp: null
	,__cbOnOwnerUnbindMouseUp: null
	,__cbOnceOwnerUnbindMouseUp: null
	,emitMouseUp: function(buttonId,x,y) {
		var len = 0;
		if(this.__cbOnMouseUp != null) {
			len += this.__cbOnMouseUp.length;
		}
		if(this.__cbOnceMouseUp != null) {
			len += this.__cbOnceMouseUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseUp[ii];
						this.__cbOnceMouseUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseUp[ii];
						this.__cbOnceOwnerUnbindMouseUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseUp[ii]);
						newCbOnceArray.push(this.__cbOnceMouseUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnMouseUp == null) {
			this.__cbOnMouseUp = [];
		}
		this.__cbOnMouseUp.push(handleButtonIdXY);
	}
	,onceMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnceMouseUp == null) {
			this.__cbOnceMouseUp = [];
		}
		this.__cbOnceMouseUp.push(handleButtonIdXY);
	}
	,offMouseUp: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseUp != null) {
				index = this.__cbOnMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseUp.splice(index,1);
				}
			}
			if(this.__cbOnceMouseUp != null) {
				index = this.__cbOnceMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseUp = null;
			}
			if(this.__cbOnceOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseUp = null;
			}
			this.__cbOnMouseUp = null;
			this.__cbOnceMouseUp = null;
		}
	}
	,listensMouseUp: function() {
		if(!(this.__cbOnMouseUp != null && this.__cbOnMouseUp.length > 0)) {
			if(this.__cbOnceMouseUp != null) {
				return this.__cbOnceMouseUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseWheel: null
	,__cbOnceMouseWheel: null
	,__cbOnOwnerUnbindMouseWheel: null
	,__cbOnceOwnerUnbindMouseWheel: null
	,emitMouseWheel: function(x,y) {
		var len = 0;
		if(this.__cbOnMouseWheel != null) {
			len += this.__cbOnMouseWheel.length;
		}
		if(this.__cbOnceMouseWheel != null) {
			len += this.__cbOnceMouseWheel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseWheel[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseWheel[ii];
						this.__cbOnceMouseWheel[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseWheel[ii];
						this.__cbOnceOwnerUnbindMouseWheel[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseWheel[ii]);
						newCbOnceArray.push(this.__cbOnceMouseWheel[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseWheel = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseWheel = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnMouseWheel == null) {
			this.__cbOnMouseWheel = [];
		}
		this.__cbOnMouseWheel.push(handleXY);
	}
	,onceMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnceMouseWheel == null) {
			this.__cbOnceMouseWheel = [];
		}
		this.__cbOnceMouseWheel.push(handleXY);
	}
	,offMouseWheel: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseWheel != null) {
				index = this.__cbOnMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseWheel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseWheel.splice(index,1);
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				index = this.__cbOnceMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseWheel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseWheel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseWheel = null;
			}
			if(this.__cbOnceOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseWheel = null;
			}
			this.__cbOnMouseWheel = null;
			this.__cbOnceMouseWheel = null;
		}
	}
	,listensMouseWheel: function() {
		if(!(this.__cbOnMouseWheel != null && this.__cbOnMouseWheel.length > 0)) {
			if(this.__cbOnceMouseWheel != null) {
				return this.__cbOnceMouseWheel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseMove: null
	,__cbOnceMouseMove: null
	,__cbOnOwnerUnbindMouseMove: null
	,__cbOnceOwnerUnbindMouseMove: null
	,emitMouseMove: function(x,y) {
		var len = 0;
		if(this.__cbOnMouseMove != null) {
			len += this.__cbOnMouseMove.length;
		}
		if(this.__cbOnceMouseMove != null) {
			len += this.__cbOnceMouseMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseMove[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseMove != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseMove[ii];
						this.__cbOnceMouseMove[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseMove[ii];
						this.__cbOnceOwnerUnbindMouseMove[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseMove[ii]);
						newCbOnceArray.push(this.__cbOnceMouseMove[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseMove = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseMove = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnMouseMove == null) {
			this.__cbOnMouseMove = [];
		}
		this.__cbOnMouseMove.push(handleXY);
	}
	,onceMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnceMouseMove == null) {
			this.__cbOnceMouseMove = [];
		}
		this.__cbOnceMouseMove.push(handleXY);
	}
	,offMouseMove: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseMove != null) {
				index = this.__cbOnMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseMove.splice(index,1);
				}
			}
			if(this.__cbOnceMouseMove != null) {
				index = this.__cbOnceMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseMove = null;
			}
			if(this.__cbOnceOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseMove = null;
			}
			this.__cbOnMouseMove = null;
			this.__cbOnceMouseMove = null;
		}
	}
	,listensMouseMove: function() {
		if(!(this.__cbOnMouseMove != null && this.__cbOnMouseMove.length > 0)) {
			if(this.__cbOnceMouseMove != null) {
				return this.__cbOnceMouseMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTouchDown: null
	,__cbOnceTouchDown: null
	,__cbOnOwnerUnbindTouchDown: null
	,__cbOnceOwnerUnbindTouchDown: null
	,emitTouchDown: function(touchIndex,x,y) {
		this.tryResumeAudioContextIfNeeded();
		var len = 0;
		if(this.__cbOnTouchDown != null) {
			len += this.__cbOnTouchDown.length;
		}
		if(this.__cbOnceTouchDown != null) {
			len += this.__cbOnceTouchDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTouchDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTouchDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTouchDown[ii];
						this.__cbOnceTouchDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTouchDown[ii];
						this.__cbOnceOwnerUnbindTouchDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTouchDown[ii]);
						newCbOnceArray.push(this.__cbOnceTouchDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTouchDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceTouchDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnTouchDown == null) {
			this.__cbOnTouchDown = [];
		}
		this.__cbOnTouchDown.push(handleTouchIndexXY);
	}
	,onceTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnceTouchDown == null) {
			this.__cbOnceTouchDown = [];
		}
		this.__cbOnceTouchDown.push(handleTouchIndexXY);
	}
	,offTouchDown: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchDown != null) {
				index = this.__cbOnTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchDown.splice(index,1);
				}
			}
			if(this.__cbOnceTouchDown != null) {
				index = this.__cbOnceTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchDown = null;
			}
			if(this.__cbOnceOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchDown = null;
			}
			this.__cbOnTouchDown = null;
			this.__cbOnceTouchDown = null;
		}
	}
	,listensTouchDown: function() {
		if(!(this.__cbOnTouchDown != null && this.__cbOnTouchDown.length > 0)) {
			if(this.__cbOnceTouchDown != null) {
				return this.__cbOnceTouchDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTouchUp: null
	,__cbOnceTouchUp: null
	,__cbOnOwnerUnbindTouchUp: null
	,__cbOnceOwnerUnbindTouchUp: null
	,emitTouchUp: function(touchIndex,x,y) {
		var len = 0;
		if(this.__cbOnTouchUp != null) {
			len += this.__cbOnTouchUp.length;
		}
		if(this.__cbOnceTouchUp != null) {
			len += this.__cbOnceTouchUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTouchUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTouchUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTouchUp[ii];
						this.__cbOnceTouchUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTouchUp[ii];
						this.__cbOnceOwnerUnbindTouchUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTouchUp[ii]);
						newCbOnceArray.push(this.__cbOnceTouchUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTouchUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceTouchUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnTouchUp == null) {
			this.__cbOnTouchUp = [];
		}
		this.__cbOnTouchUp.push(handleTouchIndexXY);
	}
	,onceTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnceTouchUp == null) {
			this.__cbOnceTouchUp = [];
		}
		this.__cbOnceTouchUp.push(handleTouchIndexXY);
	}
	,offTouchUp: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchUp != null) {
				index = this.__cbOnTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchUp.splice(index,1);
				}
			}
			if(this.__cbOnceTouchUp != null) {
				index = this.__cbOnceTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchUp = null;
			}
			if(this.__cbOnceOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchUp = null;
			}
			this.__cbOnTouchUp = null;
			this.__cbOnceTouchUp = null;
		}
	}
	,listensTouchUp: function() {
		if(!(this.__cbOnTouchUp != null && this.__cbOnTouchUp.length > 0)) {
			if(this.__cbOnceTouchUp != null) {
				return this.__cbOnceTouchUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTouchMove: null
	,__cbOnceTouchMove: null
	,__cbOnOwnerUnbindTouchMove: null
	,__cbOnceOwnerUnbindTouchMove: null
	,emitTouchMove: function(touchIndex,x,y) {
		var len = 0;
		if(this.__cbOnTouchMove != null) {
			len += this.__cbOnTouchMove.length;
		}
		if(this.__cbOnceTouchMove != null) {
			len += this.__cbOnceTouchMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTouchMove[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTouchMove != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTouchMove[ii];
						this.__cbOnceTouchMove[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTouchMove[ii];
						this.__cbOnceOwnerUnbindTouchMove[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTouchMove[ii]);
						newCbOnceArray.push(this.__cbOnceTouchMove[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTouchMove = newCbOnceOwnerUnbindArray;
				this.__cbOnceTouchMove = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnTouchMove == null) {
			this.__cbOnTouchMove = [];
		}
		this.__cbOnTouchMove.push(handleTouchIndexXY);
	}
	,onceTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnceTouchMove == null) {
			this.__cbOnceTouchMove = [];
		}
		this.__cbOnceTouchMove.push(handleTouchIndexXY);
	}
	,offTouchMove: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchMove != null) {
				index = this.__cbOnTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchMove.splice(index,1);
				}
			}
			if(this.__cbOnceTouchMove != null) {
				index = this.__cbOnceTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchMove = null;
			}
			if(this.__cbOnceOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchMove = null;
			}
			this.__cbOnTouchMove = null;
			this.__cbOnceTouchMove = null;
		}
	}
	,listensTouchMove: function() {
		if(!(this.__cbOnTouchMove != null && this.__cbOnTouchMove.length > 0)) {
			if(this.__cbOnceTouchMove != null) {
				return this.__cbOnceTouchMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,didTryResumeAudioContext: null
	,willEmitMouseDown: function(buttonId,x,y) {
		this.tryResumeAudioContextIfNeeded();
	}
	,willEmitTouchDown: function(buttonId,x,y) {
		this.tryResumeAudioContextIfNeeded();
	}
	,tryResumeAudioContextIfNeeded: function() {
		if(!this.didTryResumeAudioContext) {
			this.didTryResumeAudioContext = true;
			ceramic_App.app.backend.audio.resumeAudioContext(function(resumed) {
				if(resumed) {
					ceramic_App.app.logger.success("Did resume audio context",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Screen.hx", lineNumber : 51, className : "backend.Screen", methodName : "tryResumeAudioContextIfNeeded"});
				} else {
					ceramic_App.app.logger.error("Failed to resume audio context",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Screen.hx", lineNumber : 54, className : "backend.Screen", methodName : "tryResumeAudioContextIfNeeded"});
				}
			});
		}
	}
	,getWidth: function() {
		return clay_Clay.app.screenWidth;
	}
	,getHeight: function() {
		return clay_Clay.app.screenHeight;
	}
	,getDensity: function() {
		return clay_Clay.app.screenDensity;
	}
	,setBackground: function(background) {
	}
	,setWindowTitle: function(title) {
		clay_Clay.app.runtime.setWindowTitle(title);
	}
	,setWindowFullscreen: function(fullscreen) {
		if(backend_ElectronRunner.electronRunner != null && backend_ElectronRunner.electronRunner.setFullscreen != null) {
			backend_ElectronRunner.electronRunner.setFullscreen(fullscreen);
			return;
		}
		if(!clay_Clay.app.runtime.setWindowFullscreen(fullscreen)) {
			ceramic_App.app.settings.set_fullscreen(!fullscreen);
		}
	}
	,nextScreenshotIndex: null
	,screenshotToTexture: function(done) {
		var _gthis = this;
		var $window = clay_Clay.app.runtime.window;
		$window.toBlob(function(blob) {
			blob.arrayBuffer().then(function(buffer) {
				var pngBytes = new Uint8Array(buffer,0,buffer.byteLength);
				clay_Clay.app.assets.imageFromBytes(pngBytes,"png",4,true,function(image) {
					if(image != null) {
						var id = "screenshot:" + _gthis.nextScreenshotIndex++;
						var texture = clay_graphics_Texture.fromImage(image);
						texture.id = id;
						texture.init();
						done(texture);
					} else {
						done(null);
					}
				});
			});
		},"image/png");
	}
	,screenshotToPng: function(path,done) {
		var $window = clay_Clay.app.runtime.window;
		$window.toBlob(function(blob) {
			blob.arrayBuffer().then(function(buffer) {
				var pngBytes = new haxe_io_Bytes(new Uint8Array(new Uint8Array(buffer,0,buffer.byteLength).buffer));
				if(path != null) {
					ceramic_Files.saveBytes(path,pngBytes);
					done();
				} else {
					done(pngBytes);
				}
			});
		},"image/png");
	}
	,screenshotToPixels: function(done) {
		var $window = clay_Clay.app.runtime.window;
		$window.toBlob(function(blob) {
			blob.arrayBuffer().then(function(buffer) {
				var pngBytes = new Uint8Array(buffer,0,buffer.byteLength);
				clay_Clay.app.assets.imageFromBytes(pngBytes,"png",4,false,function(image) {
					if(image != null) {
						done(image.pixels,image.width,image.height);
					} else {
						done(null,0,0);
					}
				});
			});
		},"image/png");
	}
	,unbindEvents: function() {
		this.offResize();
		this.offMouseDown();
		this.offMouseUp();
		this.offMouseWheel();
		this.offMouseMove();
		this.offTouchDown();
		this.offTouchUp();
		this.offTouchMove();
	}
	,__class__: backend_Screen
};
var clay_Resource = function() {
	this.id = null;
};
$hxClasses["clay.Resource"] = clay_Resource;
clay_Resource.__name__ = "clay.Resource";
clay_Resource.prototype = {
	id: null
	,__class__: clay_Resource
};
var clay_graphics_Shader = function() {
	this.gpuShader = null;
	this.uniforms = null;
	this.textures = null;
	this.attributes = null;
	this.fragSource = null;
	this.vertSource = null;
	clay_Resource.call(this);
};
$hxClasses["clay.graphics.Shader"] = clay_graphics_Shader;
clay_graphics_Shader.__name__ = "clay.graphics.Shader";
clay_graphics_Shader.__super__ = clay_Resource;
clay_graphics_Shader.prototype = $extend(clay_Resource.prototype,{
	vertSource: null
	,fragSource: null
	,attributes: null
	,textures: null
	,uniforms: null
	,gpuShader: null
	,init: function() {
		this.gpuShader = clay_opengl_GLGraphics.createShader(this.vertSource,this.fragSource,this.attributes,this.textures);
		if(this.gpuShader == null) {
			throw haxe_Exception.thrown("Failed to create shader (id=" + this.id + ")");
		}
		this.uniforms = new clay_graphics_Uniforms(this.gpuShader);
	}
	,activate: function() {
		var shader = this.gpuShader;
		if(clay_opengl_GLGraphics._boundProgram != shader.program) {
			clay_opengl_GLGraphics._boundProgram = shader.program;
			clay_opengl_web_GL.gl.useProgram(shader.program);
		}
		if(this.uniforms != null) {
			this.uniforms.apply();
		}
	}
	,destroy: function() {
		clay_opengl_GLGraphics.deleteShader(this.gpuShader);
	}
	,__class__: clay_graphics_Shader
});
var backend_ShaderImpl = function() {
	this.isBatchingMultiTexture = false;
	this.customAttributes = null;
	clay_graphics_Shader.call(this);
};
$hxClasses["backend.ShaderImpl"] = backend_ShaderImpl;
backend_ShaderImpl.__name__ = "backend.ShaderImpl";
backend_ShaderImpl.__super__ = clay_graphics_Shader;
backend_ShaderImpl.prototype = $extend(clay_graphics_Shader.prototype,{
	customAttributes: null
	,isBatchingMultiTexture: null
	,clone: function() {
		var shader = new backend_ShaderImpl();
		shader.vertSource = this.vertSource;
		shader.fragSource = this.fragSource;
		shader.customAttributes = this.customAttributes;
		shader.isBatchingMultiTexture = this.isBatchingMultiTexture;
		shader.attributes = this.attributes;
		shader.textures = this.textures;
		shader.init();
		return shader;
	}
	,__class__: backend_ShaderImpl
});
var spec_Shaders = function() { };
$hxClasses["spec.Shaders"] = spec_Shaders;
spec_Shaders.__name__ = "spec.Shaders";
spec_Shaders.__isInterface__ = true;
spec_Shaders.prototype = {
	destroy: null
	,fromSource: null
	,clone: null
	,setInt: null
	,setFloat: null
	,setColor: null
	,setVec2: null
	,setVec3: null
	,setVec4: null
	,setFloatArray: null
	,setTexture: null
	,customFloatAttributesSize: null
	,maxIfStatementsByFragmentShader: null
	,canBatchWithMultipleTextures: null
	,supportsHotReloadPath: null
	,__class__: spec_Shaders
};
var backend_Shaders = function() {
};
$hxClasses["backend.Shaders"] = backend_Shaders;
backend_Shaders.__name__ = "backend.Shaders";
backend_Shaders.__interfaces__ = [spec_Shaders];
backend_Shaders.removeExtensions = function(source) {
	var lines = [];
	var _g = 0;
	var _g1 = source.split("\n");
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		if(!(StringTools.startsWith(StringTools.trim(line),"#extension GL_OES_") || StringTools.startsWith(line,"#extension OES_"))) {
			lines.push(line);
		}
	}
	source = lines.join("\n");
	return source;
};
backend_Shaders.convertToGLES3 = function(source,isFrag) {
	var sourceLines = source.split("\n");
	if(StringTools.startsWith(StringTools.trim(sourceLines[0]),"#version 100")) {
		sourceLines.shift();
		source = sourceLines.join("\n");
	}
	if(!StringTools.startsWith(source,"#version ")) {
		source = "#version 300 es\n" + source;
		if(isFrag) {
			source = StringTools.replace(source,"void main(","out vec4 fragColor;\nvoid main(");
		}
		source = ceramic_Utils.replaceIdentifier(source,"attribute","in");
		if(isFrag) {
			source = ceramic_Utils.replaceIdentifier(source,"varying","in");
		} else {
			source = ceramic_Utils.replaceIdentifier(source,"varying","out");
		}
		source = ceramic_Utils.replaceIdentifier(source,"texture2D","texture");
		source = ceramic_Utils.replaceIdentifier(source,"gl_FragColor","fragColor");
	}
	return source;
};
backend_Shaders.processMultiTextureVertTemplate = function(vertSource,maxTextures,maxIfs) {
	var lines = vertSource.split("\n");
	var newLines = [];
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		var line = lines[i];
		var cleanedLine = StringTools.replace(StringTools.trim(line)," ","").toLowerCase();
		if(cleanedLine == "//ceramic:multitexture/vertextextureid") {
			newLines.push("attribute float vertexTextureId;");
		} else if(cleanedLine == "//ceramic:multitexture/textureid") {
			newLines.push("varying float textureId;");
		} else if(cleanedLine == "//ceramic:multitexture/assigntextureid") {
			newLines.push("textureId = vertexTextureId;");
		} else {
			newLines.push(line);
		}
	}
	return newLines.join("\n");
};
backend_Shaders.processMultiTextureFragTemplate = function(fragSource,maxTextures,maxIfs) {
	var maxConditions = Math.min(maxTextures,maxIfs) | 0;
	var lines = fragSource.split("\n");
	var newLines = [];
	var nextLineIsTextureUniform = false;
	var inConditionBody = false;
	var conditionLines = [];
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		var line = lines[i];
		var cleanedLine = StringTools.replace(StringTools.trim(line)," ","").toLowerCase();
		if(nextLineIsTextureUniform) {
			nextLineIsTextureUniform = false;
			var _g2 = 0;
			var _g3 = maxConditions;
			while(_g2 < _g3) {
				var n = _g2++;
				if(n == 0) {
					newLines.push(line);
				} else {
					newLines.push(StringTools.replace(line,"tex0","tex" + n));
				}
			}
		} else if(inConditionBody) {
			if(cleanedLine == "//ceramic:multitexture/endif") {
				inConditionBody = false;
				if(conditionLines.length > 0) {
					var _g4 = 0;
					var _g5 = maxConditions;
					while(_g4 < _g5) {
						var n1 = _g4++;
						if(n1 == 0) {
							newLines.push("if (textureId == 0.0) {");
						} else {
							newLines.push("else if (textureId == " + n1 + ".0) {");
						}
						var _g6 = 0;
						var _g7 = conditionLines.length;
						while(_g6 < _g7) {
							var l = _g6++;
							if(n1 == 0) {
								newLines.push(conditionLines[l]);
							} else {
								newLines.push(StringTools.replace(conditionLines[l],"tex0","tex" + n1));
							}
						}
						newLines.push("}");
					}
				}
			} else {
				conditionLines.push(line);
			}
		} else if(StringTools.startsWith(cleanedLine,"//ceramic:multitexture")) {
			if(cleanedLine == "//ceramic:multitexture/texture") {
				nextLineIsTextureUniform = true;
			} else if(cleanedLine == "//ceramic:multitexture/textureid") {
				newLines.push("varying float textureId;");
			} else if(cleanedLine == "//ceramic:multitexture/if") {
				inConditionBody = true;
			}
		} else {
			newLines.push(line);
		}
	}
	return newLines.join("\n");
};
backend_Shaders.computeMaxIfStatementsByFragmentShaderIfNeeded = function(maxIfs) {
	if(maxIfs == null) {
		maxIfs = 32;
	}
	if(backend_Shaders._maxIfStatementsByFragmentShader == -1) {
		var fragTpl = StringTools.trim("\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#else\r\n#define mediump\r\n#endif\r\nvarying float test;\r\nvoid main() {\r\n    {{CONDITIONS}}\r\n    gl_FragColor = vec4(0.0);\r\n}\r\n");
		var shader = clay_opengl_web_GL.gl.createShader(35632);
		while(maxIfs > 0) {
			var frag = StringTools.replace(fragTpl,"{{CONDITIONS}}",backend_Shaders.generateIfStatements(maxIfs));
			clay_opengl_web_GL.gl.shaderSource(shader,frag);
			clay_opengl_web_GL.gl.compileShader(shader);
			if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
				maxIfs = maxIfs / 2 | 0;
			} else {
				backend_Shaders._maxIfStatementsByFragmentShader = maxIfs;
				break;
			}
		}
		clay_opengl_web_GL.gl.deleteShader(shader);
	}
};
backend_Shaders.generateIfStatements = function(maxIfs) {
	var result_b = "";
	var _g = 0;
	var _g1 = maxIfs;
	while(_g < _g1) {
		var i = _g++;
		if(i > 0) {
			result_b += "\nelse ";
		}
		if(i < maxIfs - 1) {
			result_b += Std.string("if (test == " + i + ".0) {}");
		}
	}
	return result_b;
};
backend_Shaders.prototype = {
	fromSource: function(vertSource,fragSource,customAttributes) {
		var isMultiTextureTemplate = false;
		var _g = 0;
		var _g1 = fragSource.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(StringTools.replace(StringTools.trim(line)," ","").toLowerCase() == "//ceramic:multitexture") {
				isMultiTextureTemplate = true;
				break;
			}
		}
		var textures = ["tex0"];
		if(isMultiTextureTemplate) {
			var maxTextures = ceramic_App.app.backend.textures.maxTexturesByBatch();
			var maxIfs = this.maxIfStatementsByFragmentShader();
			var maxTexturesAndIfs = Math.min(maxTextures,maxIfs) | 0;
			if(maxTexturesAndIfs > 1) {
				var i = 1;
				while(i <= maxTexturesAndIfs) {
					textures.push("tex" + i);
					++i;
				}
			}
			fragSource = backend_Shaders.processMultiTextureFragTemplate(fragSource,maxTextures,maxIfs);
			vertSource = backend_Shaders.processMultiTextureVertTemplate(vertSource,maxTextures,maxIfs);
		}
		var shouldRemoveExtensions = false;
		var shouldConvertToGLES3 = false;
		if(clay_Clay.app.runtime.webglVersion >= 2) {
			shouldRemoveExtensions = true;
			shouldConvertToGLES3 = true;
		}
		if(shouldRemoveExtensions) {
			fragSource = backend_Shaders.removeExtensions(fragSource);
			vertSource = backend_Shaders.removeExtensions(vertSource);
		}
		if(shouldConvertToGLES3) {
			fragSource = backend_Shaders.convertToGLES3(fragSource,true);
			vertSource = backend_Shaders.convertToGLES3(vertSource,false);
		}
		var shader = new backend_ShaderImpl();
		shader.attributes = isMultiTextureTemplate ? backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE : backend_Shaders.SHADER_ATTRIBUTES;
		shader.textures = textures;
		shader.vertSource = vertSource;
		shader.fragSource = fragSource;
		shader.isBatchingMultiTexture = isMultiTextureTemplate;
		shader.customAttributes = customAttributes;
		shader.init();
		return shader;
	}
	,destroy: function(shader) {
		shader.destroy();
	}
	,clone: function(shader) {
		return shader.clone();
	}
	,setInt: function(shader,name,value) {
		shader.uniforms.setInt(name,value);
	}
	,setFloat: function(shader,name,value) {
		shader.uniforms.setFloat(name,value);
	}
	,setColor: function(shader,name,r,g,b,a) {
		shader.uniforms.setColor(name,r,g,b,a);
	}
	,setVec2: function(shader,name,x,y) {
		shader.uniforms.setVector2(name,x,y);
	}
	,setVec3: function(shader,name,x,y,z) {
		shader.uniforms.setVector3(name,x,y,z);
	}
	,setVec4: function(shader,name,x,y,z,w) {
		shader.uniforms.setVector4(name,x,y,z,w);
	}
	,setFloatArray: function(shader,name,array) {
		shader.uniforms.setFloatArray(name,new Float32Array(array));
	}
	,setTexture: function(shader,name,slot,texture) {
		shader.uniforms.setTexture(name,slot,texture);
	}
	,setMat4FromTransform: function(shader,name,transform) {
		shader.uniforms.setMatrix4(name,new Float32Array([transform.a,transform.b,0,0,transform.c,transform.d,0,0,0,0,1,0,transform.tx,transform.ty,0,1]));
	}
	,customFloatAttributesSize: function(shader) {
		var customFloatAttributesSize = 0;
		var allAttrs = shader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		return customFloatAttributesSize;
	}
	,maxIfStatementsByFragmentShader: function() {
		var maxIfs = 32;
		if(backend_Shaders._maxIfStatementsByFragmentShader == -1) {
			var fragTpl = StringTools.trim("\r\n#ifdef GL_ES\r\nprecision mediump float;\r\n#else\r\n#define mediump\r\n#endif\r\nvarying float test;\r\nvoid main() {\r\n    {{CONDITIONS}}\r\n    gl_FragColor = vec4(0.0);\r\n}\r\n");
			var shader = clay_opengl_web_GL.gl.createShader(35632);
			while(maxIfs > 0) {
				var frag = StringTools.replace(fragTpl,"{{CONDITIONS}}",backend_Shaders.generateIfStatements(maxIfs));
				clay_opengl_web_GL.gl.shaderSource(shader,frag);
				clay_opengl_web_GL.gl.compileShader(shader);
				if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
					maxIfs = maxIfs / 2 | 0;
				} else {
					backend_Shaders._maxIfStatementsByFragmentShader = maxIfs;
					break;
				}
			}
			clay_opengl_web_GL.gl.deleteShader(shader);
		}
		return backend_Shaders._maxIfStatementsByFragmentShader;
	}
	,canBatchWithMultipleTextures: function(shader) {
		return shader.isBatchingMultiTexture;
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,__class__: backend_Shaders
};
var spec_TextInput = function() { };
$hxClasses["spec.TextInput"] = spec_TextInput;
spec_TextInput.__name__ = "spec.TextInput";
spec_TextInput.__isInterface__ = true;
spec_TextInput.prototype = {
	start: null
	,stop: null
	,__class__: spec_TextInput
};
var backend_TextInput = function() {
	this.inputRectH = 0;
	this.inputRectW = 0;
	this.inputRectY = 0;
	this.inputRectX = 0;
	this.inputActive = false;
};
$hxClasses["backend.TextInput"] = backend_TextInput;
backend_TextInput.__name__ = "backend.TextInput";
backend_TextInput.__interfaces__ = [spec_TextInput];
backend_TextInput.prototype = {
	inputActive: null
	,inputRectX: null
	,inputRectY: null
	,inputRectW: null
	,inputRectH: null
	,start: function(initialText,x,y,w,h) {
		if(this.inputActive) {
			return;
		}
		this.inputRectX = x | 0;
		this.inputRectY = y | 0;
		this.inputRectW = Math.max(1,w) | 0;
		this.inputRectH = Math.max(1,h) | 0;
		this.inputActive = true;
	}
	,stop: function() {
		if(!this.inputActive) {
			return;
		}
		this.inputRectX = 0;
		this.inputRectY = 0;
		this.inputRectW = 0;
		this.inputRectH = 0;
		this.inputActive = false;
	}
	,handleTextInput: function(text) {
		if(text == " ") {
			return;
		}
		ceramic_App.app.textInput.appendText(text);
	}
	,handleKeyDown: function(keyCode,scanCode) {
		if(this.inputActive) {
			if(scanCode == 42) {
				ceramic_App.app.textInput.backspace();
			} else if(scanCode == 44) {
				ceramic_App.app.textInput.space();
			} else if(scanCode == 40) {
				ceramic_App.app.textInput.enter();
			} else if(scanCode == 41) {
				ceramic_App.app.textInput.escape();
			} else if(scanCode == 80) {
				ceramic_App.app.textInput.moveLeft();
			} else if(scanCode == 79) {
				ceramic_App.app.textInput.moveRight();
			} else if(scanCode == 82) {
				ceramic_App.app.textInput.moveUp();
			} else if(scanCode == 81) {
				ceramic_App.app.textInput.moveDown();
			}
		}
		if(scanCode == 225) {
			ceramic_App.app.textInput.lshiftDown();
		} else if(scanCode == 229) {
			ceramic_App.app.textInput.rshiftDown();
		} else if(scanCode == 224) {
			ceramic_App.app.textInput.lctrlDown();
		} else if(scanCode == 228) {
			ceramic_App.app.textInput.rctrlDown();
		} else if(scanCode == 227) {
			ceramic_App.app.textInput.lmetaDown();
		} else if(scanCode == 231) {
			ceramic_App.app.textInput.rmetaDown();
		}
	}
	,handleKeyUp: function(keyCode,scanCode) {
		if(scanCode == 225) {
			ceramic_App.app.textInput.lshiftUp();
		} else if(scanCode == 229) {
			ceramic_App.app.textInput.rshiftUp();
		} else if(scanCode == 224) {
			ceramic_App.app.textInput.lctrlUp();
		} else if(scanCode == 228) {
			ceramic_App.app.textInput.rctrlUp();
		} else if(scanCode == 227) {
			ceramic_App.app.textInput.lmetaUp();
		} else if(scanCode == 231) {
			ceramic_App.app.textInput.rmetaUp();
		}
	}
	,__class__: backend_TextInput
};
var spec_Texts = function() { };
$hxClasses["spec.Texts"] = spec_Texts;
spec_Texts.__name__ = "spec.Texts";
spec_Texts.__isInterface__ = true;
spec_Texts.prototype = {
	load: null
	,supportsHotReloadPath: null
	,__class__: spec_Texts
};
var backend_Texts = function() {
	this.loadingTextCallbacks = new haxe_ds_StringMap();
};
$hxClasses["backend.Texts"] = backend_Texts;
backend_Texts.__name__ = "backend.Texts";
backend_Texts.__interfaces__ = [spec_Texts];
backend_Texts.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var synchronous = options != null && options.loadMethod == 2;
		var immediate = options != null ? options.immediate : null;
		var done = function(text) {
			var fn = function() {
				_done(text);
				_done = null;
			};
			if(immediate != null) {
				immediate.push(fn);
			} else {
				ceramic_App.app._onceImmediate(fn);
			}
		};
		var isUrl = StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://");
		if(!(ceramic_Path.isAbsolute(path) || isUrl)) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingTextCallbacks.h,path)) {
			this.loadingTextCallbacks.h[path].push(function(text) {
				done(text);
			});
			return;
		} else {
			this.loadingTextCallbacks.h[path] = [];
		}
		var cleanedPath = path;
		if(!isUrl) {
			var questionMarkIndex = cleanedPath.indexOf("?");
			if(questionMarkIndex != -1) {
				cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
			}
		}
		var fullPath = isUrl ? cleanedPath : clay_Clay.app.assets.fullPath(cleanedPath);
		clay_Clay.app.io.loadData(fullPath,true,!synchronous,function(res) {
			if(res == null) {
				var callbacks = _gthis.loadingTextCallbacks.h[path];
				if(callbacks != null) {
					var _this = _gthis.loadingTextCallbacks;
					if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
						delete(_this.h[path]);
					}
					done(null);
					var _g = 0;
					while(_g < callbacks.length) {
						var callback = callbacks[_g];
						++_g;
						callback(null);
					}
				} else {
					done(null);
				}
				return;
			}
			var text = new haxe_io_Bytes(new Uint8Array(res.buffer)).toString();
			var callbacks = _gthis.loadingTextCallbacks.h[path];
			if(callbacks != null) {
				var _this = _gthis.loadingTextCallbacks;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
				done(text);
				var _g = 0;
				while(_g < callbacks.length) {
					var callback = callbacks[_g];
					++_g;
					callback(text);
				}
			} else {
				done(text);
			}
		});
		if(immediate != null) {
			immediate.push(clay_Immediate.flush);
		} else {
			ceramic_App.app._onceImmediate(clay_Immediate.flush);
		}
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,loadingTextCallbacks: null
	,__class__: backend_Texts
};
var clay_opengl_GLGraphics = function() { };
$hxClasses["clay.opengl.GLGraphics"] = clay_opengl_GLGraphics;
clay_opengl_GLGraphics.__name__ = "clay.opengl.GLGraphics";
clay_opengl_GLGraphics.setup = function() {
	clay_opengl_GLGraphics._defaultFramebuffer = clay_opengl_web_GL.gl.getParameter(36006);
	clay_opengl_GLGraphics._defaultRenderbuffer = clay_opengl_web_GL.gl.getParameter(36007);
	clay_opengl_GLGraphics._didFetchDefaultBuffers = true;
};
clay_opengl_GLGraphics.clear = function(r,g,b,a,clearDepth) {
	if(clearDepth == null) {
		clearDepth = true;
	}
	clay_opengl_web_GL.gl.clearColor(r,g,b,a);
	if(clearDepth && clay_Clay.app.config.render.depth > 0) {
		clay_opengl_web_GL.gl.clear(16640);
		clay_opengl_web_GL.gl.clearDepth(1.0);
	} else {
		clay_opengl_web_GL.gl.clear(16384);
	}
};
clay_opengl_GLGraphics.createTextureId = function() {
	return clay_opengl_web_GL.gl.createTexture();
};
clay_opengl_GLGraphics.setActiveTexture = function(slot) {
	if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
		clay_opengl_GLGraphics._activeTextureSlot = slot;
		while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
		clay_opengl_web_GL.gl.activeTexture(33984 + slot);
	}
};
clay_opengl_GLGraphics.deleteTexture = function(textureId) {
	clay_opengl_web_GL.gl.deleteTexture(textureId);
	var _g = 0;
	var _g1 = clay_opengl_GLGraphics._boundTexture2D.length;
	while(_g < _g1) {
		var i = _g++;
		if(clay_opengl_GLGraphics._boundTexture2D[i] == textureId) {
			clay_opengl_GLGraphics._boundTexture2D[i] = clay_opengl_GLGraphics.NO_TEXTURE;
		}
	}
};
clay_opengl_GLGraphics.setViewport = function(x,y,width,height) {
	clay_opengl_web_GL.gl.viewport(x,y,width,height);
};
clay_opengl_GLGraphics.bindTexture2d = function(textureId) {
	if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
		clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
		clay_opengl_web_GL.gl.bindTexture(3553,textureId);
	}
};
clay_opengl_GLGraphics.maxTextureSize = function() {
	var size = clay_opengl_web_GL.gl.getParameter(3379);
	if(size <= 0) {
		size = 4096;
	}
	return size;
};
clay_opengl_GLGraphics.needsPreprocessedPremultipliedAlpha = function() {
	return false;
};
clay_opengl_GLGraphics.submitCompressedTexture2dPixels = function(level,format,width,height,pixels,premultipliedAlpha) {
	clay_opengl_web_GL.gl.pixelStorei(37441,premultipliedAlpha ? 1 : 0);
	clay_opengl_web_GL.gl.compressedTexImage2D(3553,level,format,width,height,0,pixels);
};
clay_opengl_GLGraphics.submitTexture2dPixels = function(level,format,width,height,dataType,pixels,premultipliedAlpha) {
	clay_opengl_web_GL.gl.pixelStorei(37441,premultipliedAlpha ? 1 : 0);
	clay_opengl_web_GL.gl.texImage2D(3553,level,format,width,height,0,format,dataType,pixels);
};
clay_opengl_GLGraphics.fetchTexture2dPixels = function(into,x,y,w,h) {
	if(into == null) {
		throw haxe_Exception.thrown("Texture fetch requires a valid buffer to store the pixels.");
	}
	var textureId = clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot];
	var required = w * h * 4;
	if(into.length < required) {
		throw haxe_Exception.thrown("Texture fetch requires at least " + required + " (w * h * 4) bytes for the pixels, you have " + into.length + "!");
	}
	var fb = clay_opengl_web_GL.gl.createFramebuffer();
	clay_opengl_web_GL.gl.bindFramebuffer(36160,fb);
	clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	if(clay_opengl_web_GL.gl.checkFramebufferStatus(36160) != 36053) {
		throw haxe_Exception.thrown("Incomplete framebuffer");
	}
	clay_opengl_web_GL.gl.readPixels(x,y,w,h,6408,5121,into);
	clay_opengl_web_GL.gl.bindFramebuffer(36160,clay_opengl_GLGraphics.NO_FRAMEBUFFER);
	clay_opengl_web_GL.gl.deleteFramebuffer(fb);
	fb = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
};
clay_opengl_GLGraphics.createFramebuffer = function() {
	return clay_opengl_web_GL.gl.createFramebuffer();
};
clay_opengl_GLGraphics.bindFramebuffer = function(framebuffer) {
	if(clay_opengl_GLGraphics._boundFramebuffer != framebuffer) {
		clay_opengl_GLGraphics._boundFramebuffer = framebuffer;
		if(framebuffer == clay_opengl_GLGraphics.NO_FRAMEBUFFER) {
			framebuffer = clay_opengl_GLGraphics._defaultFramebuffer;
		}
		clay_opengl_web_GL.gl.bindFramebuffer(36160,framebuffer);
	}
};
clay_opengl_GLGraphics.createRenderbuffer = function() {
	return clay_opengl_web_GL.gl.createRenderbuffer();
};
clay_opengl_GLGraphics.bindRenderbuffer = function(renderbuffer) {
	if(clay_opengl_GLGraphics._boundRenderbuffer != renderbuffer) {
		clay_opengl_GLGraphics._boundRenderbuffer = renderbuffer;
		if(renderbuffer == clay_opengl_GLGraphics.NO_RENDERBUFFER) {
			renderbuffer = clay_opengl_GLGraphics._defaultRenderbuffer;
		}
		clay_opengl_web_GL.gl.bindRenderbuffer(36161,renderbuffer);
	}
};
clay_opengl_GLGraphics.setTexture2dMinFilter = function(minFilter) {
	clay_opengl_web_GL.gl.texParameteri(3553,10241,minFilter);
};
clay_opengl_GLGraphics.setTexture2dMagFilter = function(magFilter) {
	clay_opengl_web_GL.gl.texParameteri(3553,10240,magFilter);
};
clay_opengl_GLGraphics.setTexture2dWrapS = function(wrapS) {
	clay_opengl_web_GL.gl.texParameteri(3553,10242,wrapS);
};
clay_opengl_GLGraphics.setTexture2dWrapT = function(wrapT) {
	clay_opengl_web_GL.gl.texParameteri(3553,10243,wrapT);
};
clay_opengl_GLGraphics.configureRenderTargetBuffersStorage = function(renderTarget,textureId,width,height,depth,stencil,antialiasing) {
	if(antialiasing > 1) {
		clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
		clay_opengl_web_GL.gl.renderbufferStorageMultisample(36161,antialiasing,32856,width,height);
		if(depth || stencil) {
			clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.msDepthStencilRenderbuffer);
			if(stencil) {
				clay_opengl_web_GL.gl.renderbufferStorageMultisample(36161,antialiasing,35056,width,height);
			} else {
				clay_opengl_web_GL.gl.renderbufferStorageMultisample(36161,antialiasing,33189,width,height);
			}
		}
		clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
		clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36064,36161,renderTarget.renderbuffer);
		if(depth || stencil) {
			if(stencil) {
				clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,33306,36161,renderTarget.msDepthStencilRenderbuffer);
			} else {
				clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36096,36161,renderTarget.msDepthStencilRenderbuffer);
			}
		}
		clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.msResolveColorRenderbuffer);
		clay_opengl_web_GL.gl.renderbufferStorage(36161,32856,width,height);
		clay_opengl_GLGraphics.bindFramebuffer(renderTarget.msResolveFramebuffer);
		clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
	} else {
		clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
		if(stencil) {
			clay_opengl_web_GL.gl.renderbufferStorage(36161,34041,width,height);
		} else if(depth) {
			clay_opengl_web_GL.gl.renderbufferStorage(36161,33189,width,height);
		} else {
			clay_opengl_web_GL.gl.renderbufferStorage(36161,6408,width,height);
		}
		clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
		clay_opengl_web_GL.gl.framebufferTexture2D(36160,36064,3553,textureId,0);
		if(depth || stencil) {
			if(stencil) {
				clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,33306,36161,renderTarget.renderbuffer);
			} else {
				clay_opengl_web_GL.gl.framebufferRenderbuffer(36160,36096,36161,renderTarget.renderbuffer);
			}
		}
	}
	var status = clay_opengl_web_GL.gl.checkFramebufferStatus(36160);
	switch(status) {
	case 36053:
		break;
	case 36054:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	case 36055:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	case 36057:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	case 36059:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
	case 36060:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
	case 36061:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED");
	case 36182:
		throw haxe_Exception.thrown("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
	default:
		throw haxe_Exception.thrown("Incomplete framebuffer: " + status);
	}
	clay_opengl_GLGraphics.bindFramebuffer(clay_opengl_GLGraphics.NO_FRAMEBUFFER);
	clay_opengl_GLGraphics.bindRenderbuffer(clay_opengl_GLGraphics.NO_RENDERBUFFER);
};
clay_opengl_GLGraphics.blitRenderTargetBuffers = function(renderTarget,width,height) {
	clay_opengl_web_GL.gl.bindFramebuffer(36008,renderTarget.framebuffer);
	clay_opengl_web_GL.gl.bindFramebuffer(36009,renderTarget.msResolveFramebuffer);
	clay_opengl_web_GL.gl.clearBufferfv(6144,0,clay_opengl_GLGraphics.clearBufferForBlitValues,0);
	clay_opengl_web_GL.gl.blitFramebuffer(0,0,width,height,0,0,width,height,16384,9728);
	clay_opengl_web_GL.gl.bindFramebuffer(36008,clay_opengl_GLGraphics.NO_FRAMEBUFFER);
	clay_opengl_web_GL.gl.bindFramebuffer(36009,clay_opengl_GLGraphics.NO_FRAMEBUFFER);
};
clay_opengl_GLGraphics.createRenderTarget = function(textureId,width,height,depth,stencil,antialiasing,level,format,dataType) {
	var renderTarget = new clay_opengl_GLGraphics_$RenderTarget();
	clay_opengl_web_GL.gl.texImage2D(3553,level,format,width,height,0,format,dataType,null);
	renderTarget.framebuffer = clay_opengl_web_GL.gl.createFramebuffer();
	renderTarget.renderbuffer = clay_opengl_web_GL.gl.createRenderbuffer();
	if(antialiasing > 1) {
		renderTarget.msResolveFramebuffer = clay_opengl_web_GL.gl.createFramebuffer();
		renderTarget.msResolveColorRenderbuffer = clay_opengl_web_GL.gl.createRenderbuffer();
		if(depth || stencil) {
			renderTarget.msDepthStencilRenderbuffer = clay_opengl_web_GL.gl.createRenderbuffer();
		} else {
			renderTarget.msDepthStencilRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
		}
	} else {
		renderTarget.msResolveFramebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
		renderTarget.msResolveColorRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
		renderTarget.msDepthStencilRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
	}
	clay_opengl_GLGraphics.configureRenderTargetBuffersStorage(renderTarget,textureId,width,height,depth,stencil,antialiasing);
	return renderTarget;
};
clay_opengl_GLGraphics.deleteRenderTarget = function(renderTarget) {
	if(renderTarget.framebuffer != clay_opengl_GLGraphics.NO_FRAMEBUFFER) {
		if(clay_opengl_GLGraphics._boundFramebuffer == renderTarget.framebuffer) {
			clay_opengl_GLGraphics._boundFramebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
		}
		clay_opengl_web_GL.gl.deleteFramebuffer(renderTarget.framebuffer);
		renderTarget.framebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
	}
	if(renderTarget.renderbuffer != clay_opengl_GLGraphics.NO_RENDERBUFFER) {
		if(clay_opengl_GLGraphics._boundRenderbuffer == renderTarget.renderbuffer) {
			clay_opengl_GLGraphics._boundRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
		}
		clay_opengl_web_GL.gl.deleteRenderbuffer(renderTarget.renderbuffer);
		renderTarget.renderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
	}
	if(renderTarget.msDepthStencilRenderbuffer != clay_opengl_GLGraphics.NO_RENDERBUFFER) {
		if(clay_opengl_GLGraphics._boundRenderbuffer == renderTarget.msDepthStencilRenderbuffer) {
			clay_opengl_GLGraphics._boundRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
		}
		clay_opengl_web_GL.gl.deleteRenderbuffer(renderTarget.msDepthStencilRenderbuffer);
		renderTarget.msDepthStencilRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
	}
	if(renderTarget.msResolveColorRenderbuffer != clay_opengl_GLGraphics.NO_RENDERBUFFER) {
		if(clay_opengl_GLGraphics._boundRenderbuffer == renderTarget.msResolveColorRenderbuffer) {
			clay_opengl_GLGraphics._boundRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
		}
		clay_opengl_web_GL.gl.deleteRenderbuffer(renderTarget.msResolveColorRenderbuffer);
		renderTarget.msResolveColorRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
	}
	if(renderTarget.msResolveFramebuffer != clay_opengl_GLGraphics.NO_FRAMEBUFFER) {
		if(clay_opengl_GLGraphics._boundFramebuffer == renderTarget.msResolveFramebuffer) {
			clay_opengl_GLGraphics._boundFramebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
		}
		clay_opengl_web_GL.gl.deleteFramebuffer(renderTarget.msResolveFramebuffer);
		renderTarget.msResolveFramebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
	}
};
clay_opengl_GLGraphics.setRenderTarget = function(renderTarget) {
	if(renderTarget != null) {
		clay_opengl_GLGraphics.bindFramebuffer(renderTarget.framebuffer);
		clay_opengl_GLGraphics.bindRenderbuffer(renderTarget.renderbuffer);
	} else {
		clay_opengl_GLGraphics.bindFramebuffer(clay_opengl_GLGraphics.NO_FRAMEBUFFER);
		clay_opengl_GLGraphics.bindRenderbuffer(clay_opengl_GLGraphics.NO_RENDERBUFFER);
	}
};
clay_opengl_GLGraphics.enableBlending = function() {
	clay_opengl_web_GL.gl.enable(3042);
};
clay_opengl_GLGraphics.disableBlending = function() {
	clay_opengl_web_GL.gl.disable(3042);
};
clay_opengl_GLGraphics.createShader = function(vertSource,fragSource,attributes,textures) {
	if(vertSource == null) {
		throw haxe_Exception.thrown("Cannot create shader: vertSource is null!");
	}
	if(fragSource == null) {
		throw haxe_Exception.thrown("Cannot create shader: fragSource is null!");
	}
	var shader = new clay_opengl_GLGraphics_$GpuShader();
	shader.vertShader = clay_opengl_GLGraphics.compileGLShader(35633,vertSource);
	if(shader.vertShader == clay_opengl_GLGraphics.NO_SHADER) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	shader.fragShader = clay_opengl_GLGraphics.compileGLShader(35632,fragSource);
	if(shader.fragShader == clay_opengl_GLGraphics.NO_SHADER) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	if(!clay_opengl_GLGraphics.linkShader(shader,attributes)) {
		clay_opengl_GLGraphics.deleteShader(shader);
		return null;
	}
	if(textures != null) {
		clay_opengl_GLGraphics.configureShaderTextureSlots(shader,textures);
	}
	return shader;
};
clay_opengl_GLGraphics.linkShader = function(shader,attributes) {
	var program = clay_opengl_web_GL.gl.createProgram();
	clay_opengl_web_GL.gl.attachShader(program,shader.vertShader);
	clay_opengl_web_GL.gl.attachShader(program,shader.fragShader);
	if(attributes != null) {
		var _g = 0;
		var _g1 = attributes.length;
		while(_g < _g1) {
			var i = _g++;
			clay_opengl_web_GL.gl.bindAttribLocation(program,i,attributes[i]);
		}
	}
	clay_opengl_web_GL.gl.linkProgram(program);
	if(clay_opengl_web_GL.gl.getProgramParameter(program,35714) == 0) {
		clay_Log.error("\tFailed to link shader program:",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\opengl\\GLGraphics.hx", lineNumber : 684, className : "clay.opengl.GLGraphics", methodName : "linkShader"});
		var items = clay_opengl_web_GL.gl.getProgramInfoLog(program).split("\n");
		var _g = [];
		var _g1 = 0;
		var _g2 = items;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(StringTools.trim(v) != "") {
				_g.push(v);
			}
		}
		items = _g;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\t\t" + StringTools.trim(items[i]);
		}
		items = result;
		clay_Log.error(items.join("\n"),{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\opengl\\GLGraphics.hx", lineNumber : 685, className : "clay.opengl.GLGraphics", methodName : "linkShader"});
		clay_opengl_web_GL.gl.deleteProgram(program);
		return false;
	}
	shader.program = program;
	return true;
};
clay_opengl_GLGraphics.configureShaderTextureSlots = function(shader,textures) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	var _g = 0;
	var _g1 = textures.length;
	while(_g < _g1) {
		var i = _g++;
		var texture = textures[i];
		var attr = clay_opengl_web_GL.gl.getUniformLocation(shader.program,texture);
		if(attr != clay_opengl_GLGraphics.NO_LOCATION) {
			clay_opengl_web_GL.gl.uniform1i(attr,i);
			shader.textures[i] = texture;
		}
	}
};
clay_opengl_GLGraphics.useShader = function(shader) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
};
clay_opengl_GLGraphics.deleteShader = function(shader) {
	if(clay_opengl_GLGraphics._boundProgram == shader.program) {
		clay_opengl_GLGraphics._boundProgram = clay_opengl_GLGraphics.NO_PROGRAM;
	}
	if(shader.vertShader != clay_opengl_GLGraphics.NO_SHADER) {
		clay_opengl_web_GL.gl.deleteShader(shader.vertShader);
		shader.vertShader = clay_opengl_GLGraphics.NO_SHADER;
	}
	if(shader.fragShader != clay_opengl_GLGraphics.NO_SHADER) {
		clay_opengl_web_GL.gl.deleteShader(shader.fragShader);
		shader.fragShader = clay_opengl_GLGraphics.NO_SHADER;
	}
	if(shader.program != clay_opengl_GLGraphics.NO_PROGRAM) {
		clay_opengl_web_GL.gl.deleteProgram(shader.program);
		shader.program = clay_opengl_GLGraphics.NO_PROGRAM;
	}
};
clay_opengl_GLGraphics.compileGLShader = function(type,source) {
	var shader = clay_opengl_web_GL.gl.createShader(type);
	clay_opengl_web_GL.gl.shaderSource(shader,source);
	clay_opengl_web_GL.gl.compileShader(shader);
	var compileLog = clay_opengl_web_GL.gl.getShaderInfoLog(shader);
	var log = "";
	if(compileLog != null && compileLog.length > 0) {
		var isFrag = type == 35632;
		var typeName = isFrag ? "frag" : "vert";
		log += "\n\t// start -- (" + typeName + ") compile log --\n";
		var items = compileLog.split("\n");
		var _g = [];
		var _g1 = 0;
		var _g2 = items;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(StringTools.trim(v) != "") {
				_g.push(v);
			}
		}
		items = _g;
		var result = new Array(items.length);
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "\t\t" + StringTools.trim(items[i]);
		}
		items = result;
		log += items.join("\n");
		log += "\n\t// end --\n";
	}
	if(clay_opengl_web_GL.gl.getShaderParameter(shader,35713) == 0) {
		clay_Log.error("GL / Failed to compile shader:",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\opengl\\GLGraphics.hx", lineNumber : 772, className : "clay.opengl.GLGraphics", methodName : "compileGLShader"});
		var tmp;
		if(log.length == 0) {
			var items = clay_opengl_web_GL.gl.getShaderInfoLog(shader).split("\n");
			var _g = [];
			var _g1 = 0;
			var _g2 = items;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(StringTools.trim(v) != "") {
					_g.push(v);
				}
			}
			items = _g;
			var result = new Array(items.length);
			var _g = 0;
			var _g1 = items.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = "\t\t" + StringTools.trim(items[i]);
			}
			items = result;
			tmp = items.join("\n");
		} else {
			tmp = log;
		}
		clay_Log.error(tmp,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\opengl\\GLGraphics.hx", lineNumber : 773, className : "clay.opengl.GLGraphics", methodName : "compileGLShader"});
		clay_opengl_web_GL.gl.deleteShader(shader);
		shader = clay_opengl_GLGraphics.NO_SHADER;
	}
	return shader;
};
clay_opengl_GLGraphics.getUniformLocation = function(shader,name) {
	return clay_opengl_web_GL.gl.getUniformLocation(shader.program,name);
};
clay_opengl_GLGraphics.setIntUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1i(location,value);
};
clay_opengl_GLGraphics.setIntArrayUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1iv(location,value);
};
clay_opengl_GLGraphics.setFloatUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1f(location,value);
};
clay_opengl_GLGraphics.setFloatArrayUniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1fv(location,value);
};
clay_opengl_GLGraphics.setVector2Uniform = function(shader,location,x,y) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform2f(location,x,y);
};
clay_opengl_GLGraphics.setVector3Uniform = function(shader,location,x,y,z) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
};
clay_opengl_GLGraphics.setVector4Uniform = function(shader,location,x,y,z,w) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
};
clay_opengl_GLGraphics.setColorUniform = function(shader,location,r,g,b,a) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform4f(location,r,g,b,a);
};
clay_opengl_GLGraphics.setMatrix4Uniform = function(shader,location,value) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniformMatrix4fv(location,false,value);
};
clay_opengl_GLGraphics.setTexture2dUniform = function(shader,location,slot,texture) {
	if(clay_opengl_GLGraphics._boundProgram != shader.program) {
		clay_opengl_GLGraphics._boundProgram = shader.program;
		clay_opengl_web_GL.gl.useProgram(shader.program);
	}
	clay_opengl_web_GL.gl.uniform1i(location,slot);
	if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
		clay_opengl_GLGraphics._activeTextureSlot = slot;
		while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
		clay_opengl_web_GL.gl.activeTexture(33984 + slot);
	}
	if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != texture) {
		clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = texture;
		clay_opengl_web_GL.gl.bindTexture(3553,texture);
	}
};
clay_opengl_GLGraphics.setBlendFuncSeparate = function(srcRgb,dstRgb,srcAlpha,dstAlpha) {
	clay_opengl_web_GL.gl.blendFuncSeparate(srcRgb,dstRgb,srcAlpha,dstAlpha);
};
clay_opengl_GLGraphics.ensureNoError = function() {
	var error = clay_opengl_web_GL.gl.getError();
	if(error != 0) {
		throw haxe_Exception.thrown("Failed with GL error: " + error);
	}
};
var backend_TextureId = {};
var spec_Textures = function() { };
$hxClasses["spec.Textures"] = spec_Textures;
spec_Textures.__name__ = "spec.Textures";
spec_Textures.__isInterface__ = true;
spec_Textures.prototype = {
	load: null
	,loadFromBytes: null
	,supportsHotReloadPath: null
	,createTexture: null
	,destroyTexture: null
	,getTextureId: null
	,getTextureWidth: null
	,getTextureHeight: null
	,getTextureWidthActual: null
	,getTextureHeightActual: null
	,fetchTexturePixels: null
	,submitTexturePixels: null
	,setTextureFilter: null
	,setTextureWrapS: null
	,setTextureWrapT: null
	,createRenderTarget: null
	,maxTexturesByBatch: null
	,getTextureIndex: null
	,textureToPng: null
	,pixelsToPng: null
	,__class__: spec_Textures
};
var backend_Textures = function() {
	this.loadedTexturesRetainCount = new haxe_ds_StringMap();
	this.loadedTextures = new haxe_ds_StringMap();
	this.loadingTextureCallbacks = new haxe_ds_StringMap();
	this.nextBytesIndex = 0;
	this.nextPixelsIndex = 0;
	this.nextRenderIndex = 0;
};
$hxClasses["backend.Textures"] = backend_Textures;
backend_Textures.__name__ = "backend.Textures";
backend_Textures.__interfaces__ = [spec_Textures];
backend_Textures.computeMaxTexturesByBatchIfNeeded = function() {
	if(backend_Textures._maxTexturesByBatch == -1) {
		backend_Textures._maxTexturesByBatch = Math.min(32,clay_opengl_web_GL.gl.getParameter(34930)) | 0;
	}
};
backend_Textures.prototype = {
	load: function(path,options,_done) {
		var _gthis = this;
		var synchronous = options != null && options.loadMethod == 2;
		var immediate = options != null ? options.immediate : null;
		var done = function(texture) {
			var fn = function() {
				_done(texture);
				_done = null;
			};
			if(immediate != null) {
				immediate.push(fn);
			} else {
				ceramic_App.app._onceImmediate(fn);
			}
		};
		var isUrl = StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://");
		if(!(ceramic_Path.isAbsolute(path) || isUrl)) {
			path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
		}
		if(Object.prototype.hasOwnProperty.call(this.loadedTextures.h,path)) {
			this.loadedTexturesRetainCount.h[path] += 1;
			var existing = this.loadedTextures.h[path];
			done(existing);
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.loadingTextureCallbacks.h,path)) {
			this.loadingTextureCallbacks.h[path].push(function(texture) {
				if(texture != null) {
					var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedTexturesRetainCount.h,path) ? _gthis.loadedTexturesRetainCount.h[path] : 0;
					_gthis.loadedTexturesRetainCount.h[path] = retain + 1;
				}
				done(texture);
			});
			return;
		}
		var cleanedPath = path;
		if(!isUrl) {
			var questionMarkIndex = cleanedPath.indexOf("?");
			if(questionMarkIndex != -1) {
				cleanedPath = HxOverrides.substr(cleanedPath,0,questionMarkIndex);
			}
		}
		this.loadingTextureCallbacks.h[path] = [function(texture) {
			if(texture != null) {
				var retain = Object.prototype.hasOwnProperty.call(_gthis.loadedTexturesRetainCount.h,path) ? _gthis.loadedTexturesRetainCount.h[path] : 0;
				_gthis.loadedTexturesRetainCount.h[path] = retain + 1;
			}
			done(texture);
		}];
		var fullPath = isUrl ? cleanedPath : clay_Clay.app.assets.fullPath(cleanedPath);
		var premultiplyAlpha = true;
		if(options != null && options.premultiplyAlpha != null) {
			premultiplyAlpha = options.premultiplyAlpha;
		}
		var doFail = function() {
			var callbacks = _gthis.loadingTextureCallbacks.h[path];
			var _this = _gthis.loadingTextureCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				try {
					callback(null);
				} catch( _g1 ) {
					var e = [haxe_Exception.caught(_g1).unwrap()];
					ceramic_App.app._onceImmediate((function(e) {
						return function() {
							throw haxe_Exception.thrown(e[0]);
						};
					})(e));
				}
			}
		};
		clay_Clay.app.assets.loadImage(fullPath,null,!synchronous,function(image) {
			if(image == null) {
				doFail();
				return;
			}
			var texture = null;
			try {
				texture = clay_graphics_Texture.fromImage(image,premultiplyAlpha);
				if(texture == null) {
					doFail();
					return;
				}
				texture.id = path;
				texture.init();
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				ceramic_App.app.logger.error("Failed to create texture: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Textures.hx", lineNumber : 127, className : "backend.Textures", methodName : "load"});
				doFail();
				return;
			}
			_gthis.loadedTextures.h[path] = texture;
			var callbacks = _gthis.loadingTextureCallbacks.h[path];
			var _this = _gthis.loadingTextureCallbacks;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				try {
					callback(texture);
				} catch( _g1 ) {
					var e = [haxe_Exception.caught(_g1).unwrap()];
					ceramic_App.app._onceImmediate((function(e) {
						return function() {
							throw haxe_Exception.thrown(e[0]);
						};
					})(e));
				}
			}
		});
		if(immediate != null) {
			immediate.push(clay_Immediate.flush);
		} else {
			ceramic_App.app._onceImmediate(clay_Immediate.flush);
		}
	}
	,loadFromBytes: function(bytes,type,options,_done) {
		var _gthis = this;
		var id = "bytes:" + this.nextBytesIndex++;
		var synchronous = options != null && options.loadMethod == 2;
		var immediate = options != null ? options.immediate : null;
		var done = function(texture) {
			var fn = function() {
				_done(texture);
				_done = null;
			};
			if(immediate != null) {
				immediate.push(fn);
			} else {
				ceramic_App.app._onceImmediate(fn);
			}
		};
		var premultiplyAlpha = true;
		if(options != null && options.premultiplyAlpha != null) {
			premultiplyAlpha = options.premultiplyAlpha;
		}
		var byteOffset = null;
		var len = null;
		clay_Clay.app.assets.imageFromBytes(byteOffset == null ? new Uint8Array(bytes.b.bufferValue) : len == null ? new Uint8Array(bytes.b.bufferValue,byteOffset) : new Uint8Array(bytes.b.bufferValue,byteOffset,len),type,null,null,function(image) {
			if(image == null) {
				done(null);
				return;
			}
			var texture = null;
			try {
				texture = clay_graphics_Texture.fromImage(image,premultiplyAlpha);
				if(texture == null) {
					done(null);
					return;
				}
				texture.id = id;
				texture.init();
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				ceramic_App.app.logger.error("Failed to create texture: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Textures.hx", lineNumber : 205, className : "backend.Textures", methodName : "loadFromBytes"});
				done(null);
				return;
			}
			_gthis.loadedTexturesRetainCount.h[id] = 1;
			done(texture);
		});
		if(immediate != null) {
			immediate.push(clay_Immediate.flush);
		} else {
			ceramic_App.app._onceImmediate(clay_Immediate.flush);
		}
	}
	,supportsHotReloadPath: function() {
		return true;
	}
	,nextRenderIndex: null
	,nextPixelsIndex: null
	,nextBytesIndex: null
	,createTexture: function(width,height,pixels) {
		var id = "pixels:" + this.nextPixelsIndex++;
		var texture = new clay_graphics_Texture();
		texture.id = id;
		texture.width = width;
		texture.height = height;
		texture.pixels = pixels;
		texture.init();
		this.loadedTexturesRetainCount.h[id] = 1;
		return texture;
	}
	,createRenderTarget: function(width,height,depth,stencil,antialiasing) {
		var id = "render:" + this.nextRenderIndex++;
		var webglVersion = clay_Clay.app.runtime.webglVersion;
		var renderTexture = new clay_graphics_RenderTexture();
		renderTexture.id = id;
		renderTexture.width = width;
		renderTexture.height = height;
		renderTexture.depth = depth;
		renderTexture.stencil = stencil;
		renderTexture.antialiasing = webglVersion >= 2 ? antialiasing : 0;
		renderTexture.init();
		this.loadedTexturesRetainCount.h[id] = 1;
		return renderTexture;
	}
	,fetchTexturePixels: function(texture,result) {
		var w = texture.width;
		var h = texture.height;
		if(result == null) {
			result = new Uint8Array(w * h * 4);
		}
		texture.fetch(result);
		return result;
	}
	,submitTexturePixels: function(texture,pixels) {
		texture.submit(pixels);
	}
	,destroyTexture: function(texture) {
		var id = texture.id;
		if(this.loadedTexturesRetainCount.h[id] > 1) {
			this.loadedTexturesRetainCount.h[id] -= 1;
		} else {
			var _this = this.loadedTextures;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			var _this = this.loadedTexturesRetainCount;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			texture.destroy();
		}
	}
	,getTextureId: function(texture) {
		return texture.textureId;
	}
	,getTextureWidth: function(texture) {
		return texture.width;
	}
	,getTextureHeight: function(texture) {
		return texture.height;
	}
	,getTextureWidthActual: function(texture) {
		return texture.widthActual;
	}
	,getTextureHeightActual: function(texture) {
		return texture.heightActual;
	}
	,getTextureIndex: function(texture) {
		return texture.index;
	}
	,setTextureFilter: function(texture,filter) {
		switch(filter._hx_index) {
		case 0:
			texture.set_filterMin(9729);
			texture.set_filterMag(9729);
			break;
		case 1:
			texture.set_filterMin(9728);
			texture.set_filterMag(9728);
			break;
		}
	}
	,setTextureWrapS: function(texture,wrap) {
		switch(wrap) {
		case 0:
			texture.set_wrapS(33071);
			break;
		case 1:
			texture.set_wrapS(10497);
			break;
		case 2:
			texture.set_wrapS(33648);
			break;
		}
	}
	,setTextureWrapT: function(texture,wrap) {
		switch(wrap) {
		case 0:
			texture.set_wrapT(33071);
			break;
		case 1:
			texture.set_wrapT(10497);
			break;
		case 2:
			texture.set_wrapT(33648);
			break;
		}
	}
	,maxTextureWidth: function() {
		return 2048;
	}
	,maxTextureHeight: function() {
		return 2048;
	}
	,maxTexturesByBatch: function() {
		if(backend_Textures._maxTexturesByBatch == -1) {
			backend_Textures._maxTexturesByBatch = Math.min(32,clay_opengl_web_GL.gl.getParameter(34930)) | 0;
		}
		return backend_Textures._maxTexturesByBatch;
	}
	,textureToPng: function(texture,reversePremultiplyAlpha,path,done) {
		if(reversePremultiplyAlpha == null) {
			reversePremultiplyAlpha = true;
		}
		var pixels = this.fetchTexturePixels(texture);
		var id = texture.id;
		if(reversePremultiplyAlpha) {
			ceramic_PremultiplyAlpha.reversePremultiplyAlpha(pixels);
		}
		clay_Clay.app.assets.pixelsToPngData(texture.width,texture.height,pixels,function(data) {
			if(data != null) {
				if(path != null) {
					ceramic_Files.saveBytes(path,new haxe_io_Bytes(new Uint8Array(data.buffer)));
					done();
				} else {
					done(new haxe_io_Bytes(new Uint8Array(data.buffer)));
				}
			} else {
				ceramic_App.app.logger.warning("Failed to get PNG data from texture",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Textures.hx", lineNumber : 540, className : "backend.Textures", methodName : "textureToPng"});
				done(null);
			}
		});
	}
	,pixelsToPng: function(width,height,pixels,path,done) {
		clay_Clay.app.assets.pixelsToPngData(width,height,pixels,function(data) {
			if(data != null) {
				if(path != null) {
					ceramic_Files.saveBytes(path,new haxe_io_Bytes(new Uint8Array(data.buffer)));
					done();
				} else {
					done(new haxe_io_Bytes(new Uint8Array(data.buffer)));
				}
			} else {
				ceramic_App.app.logger.warning("Failed to get PNG data from pixels",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Textures.hx", lineNumber : 560, className : "backend.Textures", methodName : "pixelsToPng"});
				done(null);
			}
		});
	}
	,loadingTextureCallbacks: null
	,loadedTextures: null
	,loadedTexturesRetainCount: null
	,__class__: backend_Textures
};
var backend_VisualItem = $hxEnums["backend.VisualItem"] = { __ename__:"backend.VisualItem",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"backend.VisualItem",toString:$estr}
	,QUAD: {_hx_name:"QUAD",_hx_index:1,__enum__:"backend.VisualItem",toString:$estr}
	,MESH: {_hx_name:"MESH",_hx_index:2,__enum__:"backend.VisualItem",toString:$estr}
};
backend_VisualItem.__constructs__ = [backend_VisualItem.NONE,backend_VisualItem.QUAD,backend_VisualItem.MESH];
var binpacking_IOccupancy = function() { };
$hxClasses["binpacking.IOccupancy"] = binpacking_IOccupancy;
binpacking_IOccupancy.__name__ = "binpacking.IOccupancy";
binpacking_IOccupancy.__isInterface__ = true;
binpacking_IOccupancy.prototype = {
	occupancy: null
	,__class__: binpacking_IOccupancy
};
var binpacking_MaxRectsPackerBestFitPosition = function() {
	this.bestY = -1;
	this.bestX = -1;
	this.bestContactScore = -1;
	this.bestLongSideFit = -1;
	this.bestShortSideFit = -1;
	this.bestAreaFit = -1;
	this.bestNode = null;
};
$hxClasses["binpacking.MaxRectsPackerBestFitPosition"] = binpacking_MaxRectsPackerBestFitPosition;
binpacking_MaxRectsPackerBestFitPosition.__name__ = "binpacking.MaxRectsPackerBestFitPosition";
binpacking_MaxRectsPackerBestFitPosition.prototype = {
	bestNode: null
	,bestAreaFit: null
	,bestShortSideFit: null
	,bestLongSideFit: null
	,bestContactScore: null
	,bestX: null
	,bestY: null
	,__class__: binpacking_MaxRectsPackerBestFitPosition
};
var binpacking_MaxRectsPackerRectScore = function(rect,primaryScore,secondaryScore) {
	this.rect = rect;
	this.primaryScore = primaryScore;
	this.secondaryScore = secondaryScore;
};
$hxClasses["binpacking.MaxRectsPackerRectScore"] = binpacking_MaxRectsPackerRectScore;
binpacking_MaxRectsPackerRectScore.__name__ = "binpacking.MaxRectsPackerRectScore";
binpacking_MaxRectsPackerRectScore.prototype = {
	rect: null
	,primaryScore: null
	,secondaryScore: null
	,__class__: binpacking_MaxRectsPackerRectScore
};
var binpacking_MaxRectsPacker = function(width,height,allowFlip) {
	if(allowFlip == null) {
		allowFlip = true;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this._bestFitPosition = new binpacking_MaxRectsPackerBestFitPosition();
	this.freeRectangles = [];
	this.usedRectangles = [];
	this.binWidth = width;
	this.binHeight = height;
	this.binAllowFlip = allowFlip;
	var n = new binpacking_Rect(0,0,width,height);
	this.freeRectangles.push(n);
};
$hxClasses["binpacking.MaxRectsPacker"] = binpacking_MaxRectsPacker;
binpacking_MaxRectsPacker.__name__ = "binpacking.MaxRectsPacker";
binpacking_MaxRectsPacker.__interfaces__ = [binpacking_IOccupancy];
binpacking_MaxRectsPacker.prototype = {
	binWidth: null
	,binHeight: null
	,binAllowFlip: null
	,usedRectangles: null
	,freeRectangles: null
	,_bestFitPosition: null
	,insert: function(width,height,method) {
		var newNode;
		switch(method) {
		case 1:
			newNode = this.findPositionForNewNodeBestShortSideFit(width,height,this._bestFitPosition).bestNode;
			break;
		case 2:
			newNode = this.findPositionForNewNodeBestLongSideFit(width,height,this._bestFitPosition).bestNode;
			break;
		case 3:
			newNode = this.findPositionForNewNodeBestAreaFit(width,height,this._bestFitPosition).bestNode;
			break;
		case 4:
			newNode = this.findPositionForNewNodeBottomLeft(width,height,this._bestFitPosition).bestNode;
			break;
		case 5:
			newNode = this.findPositionForNewNodeContactPoint(width,height,this._bestFitPosition).bestNode;
			break;
		}
		if(newNode == null || newNode.width == 0 || newNode.height == 0) {
			return null;
		}
		var numRectanglesToProcess = this.freeRectangles.length;
		var i = 0;
		while(i < numRectanglesToProcess) {
			if(this.splitFreeNode(this.freeRectangles[i],newNode)) {
				this.freeRectangles.splice(i,1);
				--i;
				--numRectanglesToProcess;
			}
			++i;
		}
		this.pruneFreeList();
		this.usedRectangles.push(newNode);
		return newNode;
	}
	,occupancy: function() {
		if(this.usedRectangles.length == 0) {
			return 0.0;
		}
		var usedSurfaceArea = 0;
		var _g = 0;
		var _g1 = this.usedRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			usedSurfaceArea += this.usedRectangles[i].width * this.usedRectangles[i].height;
		}
		return usedSurfaceArea / (this.binWidth * this.binHeight);
	}
	,scoreRect: function(width,height,method) {
		var newNode = new binpacking_Rect();
		var score1 = 1073741823;
		var score2 = 1073741823;
		switch(method) {
		case 1:
			var data = this.findPositionForNewNodeBestShortSideFit(width,height,this._bestFitPosition);
			newNode = data.bestNode;
			score1 = data.bestShortSideFit;
			score2 = data.bestLongSideFit;
			break;
		case 2:
			var data = this.findPositionForNewNodeBestLongSideFit(width,height,this._bestFitPosition);
			newNode = data.bestNode;
			score1 = data.bestLongSideFit;
			score2 = data.bestLongSideFit;
			break;
		case 3:
			var data = this.findPositionForNewNodeBestAreaFit(width,height,this._bestFitPosition);
			newNode = data.bestNode;
			score1 = data.bestAreaFit;
			score2 = data.bestShortSideFit;
			break;
		case 4:
			var data = this.findPositionForNewNodeBottomLeft(width,height,this._bestFitPosition);
			newNode = data.bestNode;
			score1 = data.bestY;
			score2 = data.bestX;
			break;
		case 5:
			var data = this.findPositionForNewNodeContactPoint(width,height,this._bestFitPosition);
			newNode = data.bestNode;
			score1 = -data.bestContactScore;
			break;
		}
		if(newNode.height == 0) {
			score1 = 1073741823;
			score2 = 1073741823;
		}
		return new binpacking_MaxRectsPackerRectScore(newNode,score1,score2);
	}
	,contactPointScoreNode: function(x,y,width,height) {
		var score = 0;
		if(x == 0 || x + width == this.binWidth) {
			score += height;
		}
		if(y == 0 || y + height == this.binHeight) {
			score += width;
		}
		var _g = 0;
		var _g1 = this.usedRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.usedRectangles[i].x == x + width || this.usedRectangles[i].x + this.usedRectangles[i].width == x) {
				score += this.commonIntervalLength(this.usedRectangles[i].y,this.usedRectangles[i].height,y,y + height) | 0;
			}
			if(this.usedRectangles[i].y == y + height || this.usedRectangles[i].y + this.usedRectangles[i].height == y) {
				score += this.commonIntervalLength(this.usedRectangles[i].x,this.usedRectangles[i].x + this.usedRectangles[i].width,x,x + width) | 0;
			}
		}
		return score;
	}
	,findPositionForNewNodeBottomLeft: function(width,height,result) {
		var bestNode = new binpacking_Rect();
		var bestY = 1073741823;
		var bestX = 1073741823;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.freeRectangles[i].width >= width && this.freeRectangles[i].height < bestX) {
				var topSideY = this.freeRectangles[i].y + height | 0;
				bestNode.x = this.freeRectangles[i].x;
				bestNode.y = this.freeRectangles[i].y;
				bestNode.width = width;
				bestNode.height = height;
				bestY = topSideY;
				bestX = this.freeRectangles[i].x | 0;
			}
			if(this.binAllowFlip && this.freeRectangles[i].width >= height && this.freeRectangles[i].height >= width) {
				var topSideY1 = this.freeRectangles[i].y + height | 0;
				bestNode.x = this.freeRectangles[i].x;
				bestNode.y = this.freeRectangles[i].y;
				bestNode.width = width;
				bestNode.height = height;
				bestY = topSideY1;
				bestX = this.freeRectangles[i].x | 0;
			}
		}
		result.bestNode = bestNode;
		result.bestY = bestY;
		result.bestX = bestX;
		return result;
	}
	,findPositionForNewNodeBestShortSideFit: function(width,height,result) {
		var bestNode = new binpacking_Rect();
		var bestShortSideFit = 1073741823;
		var bestLongSideFit = 1073741823;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.freeRectangles[i].width >= width && this.freeRectangles[i].height >= height) {
				var leftoverHoriz = Math.abs(this.freeRectangles[i].width - width);
				var leftoverVert = Math.abs(this.freeRectangles[i].height - height);
				var shortSideFit = Math.min(leftoverHoriz,leftoverVert);
				var longSideFit = Math.max(leftoverHoriz,leftoverVert);
				if(shortSideFit < bestShortSideFit || shortSideFit == bestShortSideFit && longSideFit < bestLongSideFit) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = width;
					bestNode.height = height;
					bestShortSideFit = shortSideFit | 0;
					bestLongSideFit = longSideFit | 0;
				}
			}
			if(this.binAllowFlip && this.freeRectangles[i].width >= height && this.freeRectangles[i].height >= width) {
				var flippedLeftoverHoriz = Math.abs(this.freeRectangles[i].width - height);
				var flippedLeftoverVert = Math.abs(this.freeRectangles[i].height - width);
				var flippedShortSideFit = Math.min(flippedLeftoverHoriz,flippedLeftoverVert);
				var flippedLongSideFit = Math.max(flippedLeftoverHoriz,flippedLeftoverVert);
				if(flippedShortSideFit < bestShortSideFit || flippedShortSideFit == bestShortSideFit && flippedLongSideFit < bestLongSideFit) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = height;
					bestNode.height = width;
					bestNode.flipped = !bestNode.flipped;
					bestShortSideFit = flippedShortSideFit | 0;
					bestLongSideFit = flippedLongSideFit | 0;
				}
			}
		}
		result.bestNode = bestNode;
		result.bestShortSideFit = bestShortSideFit;
		result.bestLongSideFit = bestLongSideFit;
		return result;
	}
	,findPositionForNewNodeBestLongSideFit: function(width,height,result) {
		var bestNode = new binpacking_Rect();
		var bestShortSideFit = 1073741823;
		var bestLongSideFit = 1073741823;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.freeRectangles[i].width >= width && this.freeRectangles[i].height >= height) {
				var leftoverHoriz = Math.abs(this.freeRectangles[i].width - width);
				var leftoverVert = Math.abs(this.freeRectangles[i].height - height);
				var shortSideFit = Math.min(leftoverHoriz,leftoverVert);
				var longSideFit = Math.max(leftoverHoriz,leftoverVert);
				if(longSideFit < bestLongSideFit || longSideFit == bestLongSideFit && shortSideFit < bestShortSideFit) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = width;
					bestNode.height = height;
					bestShortSideFit = shortSideFit | 0;
					bestLongSideFit = longSideFit | 0;
				}
			}
			if(this.binAllowFlip && this.freeRectangles[i].width >= height && this.freeRectangles[i].height >= width) {
				var leftoverHoriz1 = Math.abs(this.freeRectangles[i].width - width);
				var leftoverVert1 = Math.abs(this.freeRectangles[i].height - height);
				var shortSideFit1 = Math.min(leftoverHoriz1,leftoverVert1);
				var longSideFit1 = Math.max(leftoverHoriz1,leftoverVert1);
				if(longSideFit1 < bestLongSideFit || longSideFit1 == bestLongSideFit && shortSideFit1 < bestShortSideFit) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = height;
					bestNode.height = width;
					bestNode.flipped = !bestNode.flipped;
					bestShortSideFit = shortSideFit1 | 0;
					bestLongSideFit = longSideFit1 | 0;
				}
			}
		}
		result.bestNode = bestNode;
		result.bestShortSideFit = bestShortSideFit;
		result.bestLongSideFit = bestLongSideFit;
		return result;
	}
	,findPositionForNewNodeBestAreaFit: function(width,height,result) {
		var bestNode = new binpacking_Rect();
		var bestAreaFit = 1073741823;
		var bestShortSideFit = 1073741823;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			var areaFit = this.freeRectangles[i].width * this.freeRectangles[i].height - width * height;
			if(this.freeRectangles[i].width >= width && this.freeRectangles[i].height >= height) {
				var leftoverHoriz = Math.abs(this.freeRectangles[i].width - width);
				var leftoverVert = Math.abs(this.freeRectangles[i].height - height);
				var shortSideFit = Math.min(leftoverHoriz,leftoverVert);
				if(areaFit < bestAreaFit || areaFit == bestAreaFit && shortSideFit < bestShortSideFit) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = width;
					bestNode.height = height;
					bestShortSideFit = shortSideFit | 0;
					bestAreaFit = areaFit | 0;
				}
			}
			if(this.binAllowFlip && this.freeRectangles[i].width >= height && this.freeRectangles[i].height >= width) {
				var leftoverHoriz1 = Math.abs(this.freeRectangles[i].width - height);
				var leftoverVert1 = Math.abs(this.freeRectangles[i].height - width);
				var shortSideFit1 = Math.min(leftoverHoriz1,leftoverVert1);
				if(areaFit < bestAreaFit || areaFit == bestAreaFit && shortSideFit1 < bestShortSideFit) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = height;
					bestNode.height = width;
					bestNode.flipped = !bestNode.flipped;
					bestShortSideFit = shortSideFit1 | 0;
					bestAreaFit = areaFit | 0;
				}
			}
		}
		result.bestNode = bestNode;
		result.bestAreaFit = bestAreaFit;
		result.bestShortSideFit = bestShortSideFit;
		return result;
	}
	,findPositionForNewNodeContactPoint: function(width,height,result) {
		var bestNode = new binpacking_Rect();
		var bestContactScore = -1;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.freeRectangles[i].width >= width && this.freeRectangles[i].height >= height) {
				var score = this.contactPointScoreNode(this.freeRectangles[i].x | 0,this.freeRectangles[i].y | 0,width,height);
				if(score > bestContactScore) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = width;
					bestNode.height = height;
					bestContactScore = score;
				}
			}
			if(this.freeRectangles[i].width >= height && this.freeRectangles[i].height >= width) {
				var score1 = this.contactPointScoreNode(this.freeRectangles[i].x | 0,this.freeRectangles[i].y | 0,height,width);
				if(score1 > bestContactScore) {
					bestNode.x = this.freeRectangles[i].x;
					bestNode.y = this.freeRectangles[i].y;
					bestNode.width = height;
					bestNode.height = width;
					bestNode.flipped = !bestNode.flipped;
					bestContactScore = score1;
				}
			}
		}
		result.bestNode = bestNode;
		result.bestContactScore = bestContactScore;
		return result;
	}
	,splitFreeNode: function(freeNode,usedNode) {
		if(usedNode.x >= freeNode.x + freeNode.width || usedNode.x + usedNode.width <= freeNode.x || usedNode.y >= freeNode.y + freeNode.height || usedNode.y + usedNode.height <= freeNode.y) {
			return false;
		}
		if(usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x) {
			if(usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height) {
				var newNode = new binpacking_Rect(freeNode.x,freeNode.y,freeNode.width,freeNode.height);
				newNode.height = usedNode.y - newNode.y;
				this.freeRectangles.push(newNode);
			}
			if(usedNode.y + usedNode.height < freeNode.y + freeNode.height) {
				var newNode = new binpacking_Rect(freeNode.x,freeNode.y,freeNode.width,freeNode.height);
				newNode.y = usedNode.y + usedNode.height;
				newNode.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);
				this.freeRectangles.push(newNode);
			}
		}
		if(usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y) {
			if(usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width) {
				var newNode = new binpacking_Rect(freeNode.x,freeNode.y,freeNode.width,freeNode.height);
				newNode.width = usedNode.x - newNode.x;
				this.freeRectangles.push(newNode);
			}
			if(usedNode.x + usedNode.width < freeNode.x + freeNode.width) {
				var newNode = new binpacking_Rect(freeNode.x,freeNode.y,freeNode.width,freeNode.height);
				newNode.x = usedNode.x + usedNode.width;
				newNode.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);
				this.freeRectangles.push(newNode);
			}
		}
		return true;
	}
	,pruneFreeList: function() {
		var i = 0;
		while(i < this.freeRectangles.length) {
			var j = i + 1;
			while(j < this.freeRectangles.length) {
				var _this = this.freeRectangles[i];
				var other = this.freeRectangles[j];
				if(_this.x >= other.x && _this.y >= other.y && _this.x + _this.width <= other.x + other.width && _this.y + _this.height <= other.y + other.height) {
					this.freeRectangles.splice(i,1);
					--i;
					break;
				}
				var _this1 = this.freeRectangles[j];
				var other1 = this.freeRectangles[i];
				if(_this1.x >= other1.x && _this1.y >= other1.y && _this1.x + _this1.width <= other1.x + other1.width && _this1.y + _this1.height <= other1.y + other1.height) {
					this.freeRectangles.splice(j,1);
					continue;
				}
				++j;
			}
			++i;
		}
	}
	,commonIntervalLength: function(i1start,i1end,i2start,i2end) {
		if(i1end < i2start || i2end < i1start) {
			return 0;
		}
		return (i1end < i2end ? i1end : i2end) - (i1start > i2start ? i1start : i2start);
	}
	,__class__: binpacking_MaxRectsPacker
};
var binpacking_RectSize = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["binpacking.RectSize"] = binpacking_RectSize;
binpacking_RectSize.__name__ = "binpacking.RectSize";
binpacking_RectSize.prototype = {
	width: null
	,height: null
	,__class__: binpacking_RectSize
};
var binpacking_Rect = function(x,y,width,height,flipped) {
	if(flipped == null) {
		flipped = false;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.flipped = flipped;
};
$hxClasses["binpacking.Rect"] = binpacking_Rect;
binpacking_Rect.__name__ = "binpacking.Rect";
binpacking_Rect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,flipped: null
	,clone: function() {
		return new binpacking_Rect(this.x,this.y,this.width,this.height);
	}
	,isContainedIn: function(other) {
		if(this.x >= other.x && this.y >= other.y && this.x + this.width <= other.x + other.width) {
			return this.y + this.height <= other.y + other.height;
		} else {
			return false;
		}
	}
	,__class__: binpacking_Rect
};
var binpacking_DisjointRectCollection = function() {
	this.rects = [];
};
$hxClasses["binpacking.DisjointRectCollection"] = binpacking_DisjointRectCollection;
binpacking_DisjointRectCollection.__name__ = "binpacking.DisjointRectCollection";
binpacking_DisjointRectCollection.rectsDisjoint = function(a,b) {
	if(!(a.x + a.width <= b.x || b.x + b.width <= a.x || a.y + a.height <= b.y)) {
		return b.y + b.height <= a.y;
	} else {
		return true;
	}
};
binpacking_DisjointRectCollection.prototype = {
	rects: null
	,add: function(r) {
		if(r.width == 0 || r.height == 0) {
			return true;
		}
		if(!this.disjoint(r)) {
			return false;
		}
		this.rects.push(r);
		return true;
	}
	,clear: function() {
		this.rects = [];
	}
	,disjoint: function(r) {
		if(r.width == 0 || r.height == 0) {
			return true;
		}
		var _g = 0;
		var _g1 = this.rects.length;
		while(_g < _g1) {
			var i = _g++;
			if(!binpacking_DisjointRectCollection.rectsDisjoint(this.rects[i],r)) {
				return false;
			}
		}
		return true;
	}
	,__class__: binpacking_DisjointRectCollection
};
var ceramic_AlphaColor = {};
ceramic_AlphaColor.__properties__ = {set_lightnessHSLuv:"set_lightnessHSLuv",get_lightnessHSLuv:"get_lightnessHSLuv",set_saturationHSLuv:"set_saturationHSLuv",get_saturationHSLuv:"get_saturationHSLuv",set_hueHSLuv:"set_hueHSLuv",get_hueHSLuv:"get_hueHSLuv",set_rgb:"set_rgb",get_rgb:"get_rgb",set_color:"set_color",get_color:"get_color",set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_alphaFloat:"set_alphaFloat",get_alphaFloat:"get_alphaFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_alpha:"set_alpha",get_alpha:"get_alpha",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red"};
ceramic_AlphaColor.toColor = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_AlphaColor.random = function(minSatutation,minBrightness) {
	if(minBrightness == null) {
		minBrightness = 0.5;
	}
	if(minSatutation == null) {
		minSatutation = 0.5;
	}
	var minSatutation1 = minSatutation;
	var minBrightness1 = minBrightness;
	if(minBrightness1 == null) {
		minBrightness1 = 0.5;
	}
	if(minSatutation1 == null) {
		minSatutation1 = 0.5;
	}
	var hue = Math.random() * 360;
	var saturation = Math.random() * (1.0 - minSatutation1) + minSatutation1;
	var brightness = Math.random() * (1.0 - minBrightness1) + minBrightness1;
	var value = (ceramic_Color.fromHSB(hue,saturation,brightness) | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_AlphaColor.fromInt = function(value) {
	return value;
};
ceramic_AlphaColor.fromRGB = function(red,green,blue) {
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_AlphaColor.fromRGBFloat = function(red,green,blue) {
	var color = 0;
	var value = Math.round(red * 255);
	color &= 65535;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	color &= 16711935;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	color &= 16776960;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_AlphaColor.fromRGBA = function(red,green,blue,alpha) {
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var alpha1 = alpha;
	if(alpha1 == null) {
		alpha1 = 255;
	}
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= (alpha1 > 255 ? 255 : alpha1 < 0 ? 0 : alpha1) << 24;
	return value;
};
ceramic_AlphaColor.fromRGBAFloat = function(red,green,blue,alpha) {
	var color = -16777216;
	var Value = Math.round(red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = Math.round(green * 255);
	color &= -65281;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = Math.round(blue * 255);
	color &= -256;
	color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	var Value = Math.round(alpha * 255);
	color &= 16777215;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return color;
};
ceramic_AlphaColor.fromCMYK = function(cyan,magenta,yellow,black) {
	var color = -16777216;
	var Value = (1 - cyan) * (1 - black);
	var Value1 = Math.round(Value * 255);
	color &= -16711681;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - magenta) * (1 - black);
	var Value1 = Math.round(Value * 255);
	color &= -65281;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - yellow) * (1 - black);
	var Value1 = Math.round(Value * 255);
	color &= -256;
	color |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return color;
};
ceramic_AlphaColor.fromHSB = function(hue,saturation,brightness) {
	var color = -16777216;
	var chroma = brightness * saturation;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return color;
};
ceramic_AlphaColor.fromHSL = function(hue,saturation,lightness) {
	var color = -16777216;
	var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
	var match = lightness - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return color;
};
ceramic_AlphaColor.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(StringTools.startsWith(str,"0x")) {
		var value = Std.parseInt(str.substring(0,8));
		if(value == null) {
			value = 0;
		}
		var value1 = (value | 0) + (-16777216);
		value1 &= 16777215;
		value1 |= -16777216;
		result = value1;
	} else if(StringTools.startsWith(str,"#")) {
		if(str.length >= 9) {
			var hexColor = "0x" + str.substring(1,9);
			result = Std.parseInt(hexColor);
		} else {
			var hexColor = "0x" + str.substring(1,7);
			var value = Std.parseInt(hexColor);
			if(value == null) {
				value = 0;
			}
			var value1 = (value | 0) + (-16777216);
			value1 &= 16777215;
			result = value1 |= -16777216;
		}
	} else {
		str = str.toUpperCase();
		var colorLookup = ceramic_Color.colorLookup;
		var h = colorLookup.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(key == str) {
				var value = colorLookup.h[key];
				if(value == null) {
					value = 0;
				}
				var value1 = (value | 0) + (-16777216);
				value1 &= 16777215;
				result = value1 |= -16777216;
				break;
			}
		}
	}
	return result;
};
ceramic_AlphaColor.getHSBColorWheel = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(ceramic_AlphaColor.fromHSB(c,1.0,1.0));
	}
	return _g;
};
ceramic_AlphaColor.interpolate = function(color1,color2,factor) {
	if(factor == null) {
		factor = 0.5;
	}
	var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
	var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
	var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
	var a = ((color2 >> 24 & 255) - (color1 >> 24 & 255)) * factor + (color1 >> 24 & 255) | 0;
	var color = 0;
	color &= 65535;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= 16711935;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= 16776960;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	var alpha = a;
	if(alpha == null) {
		alpha = 255;
	}
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	return value;
};
ceramic_AlphaColor.gradient = function(color1,color2,steps,ease) {
	var output = [];
	if(ease == null) {
		ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = steps;
	while(_g < _g1) {
		var step = _g++;
		var factor = ease(step / (steps - 1));
		if(factor == null) {
			factor = 0.5;
		}
		var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
		var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
		var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
		var a = ((color2 >> 24 & 255) - (color1 >> 24 & 255)) * factor + (color1 >> 24 & 255) | 0;
		var color = 0;
		color &= 65535;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= 16711935;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= 16776960;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		var alpha = a;
		if(alpha == null) {
			alpha = 255;
		}
		var value = (color | 0) + (-16777216);
		value &= 16777215;
		value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
		output[step] = value;
	}
	return output;
};
ceramic_AlphaColor.multiply = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var color = 0;
	var value = Math.round(red * 255);
	color &= 65535;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	color &= 16711935;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	color &= 16776960;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_AlphaColor.add = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var blue = (lhs & 255) + (rhs & 255);
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_AlphaColor.subtract = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var blue = (lhs & 255) - (rhs & 255);
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_AlphaColor.toHexString = function(this1,prefix) {
	if(prefix == null) {
		prefix = true;
	}
	return (prefix ? "0x" : "") + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
ceramic_AlphaColor.toWebString = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var this1 = color;
	var prefix = false;
	if(prefix == null) {
		prefix = true;
	}
	return "#" + ((prefix ? "0x" : "") + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
ceramic_AlphaColor.getColorInfo = function(this1) {
	var result = "0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2) + "\n";
	result += "alpha: " + (this1 >> 24 & 255) + "red: " + (this1 >> 16 & 255) + " green: " + (this1 >> 8 & 255) + " blue: " + (this1 & 255) + "\n";
	result += "hue: " + ceramic_AlphaColor.roundDecimal(ceramic_AlphaColor.get_hue(this1),2) + " saturation: " + ceramic_AlphaColor.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " brightness: " + ceramic_AlphaColor.roundDecimal(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " lightness: " + ceramic_AlphaColor.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2,2);
	return result;
};
ceramic_AlphaColor.getDarkened = function(this1,factor) {
	if(factor == null) {
		factor = 0.2;
	}
	var lowerBound = factor < 0 ? 0 : factor;
	factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - factor);
	var hue = ceramic_AlphaColor.get_hue(output);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return output;
};
ceramic_AlphaColor.getLightened = function(this1,factor) {
	if(factor == null) {
		factor = 0.2;
	}
	var lowerBound = factor < 0 ? 0 : factor;
	factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * factor;
	var hue = ceramic_AlphaColor.get_hue(output);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		output &= -16711681;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		output &= -65281;
		output |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		output &= -256;
		output |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return output;
};
ceramic_AlphaColor.getInverted = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var lhs = -1;
	var red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var blue = (lhs & 255) - (this1 & 255);
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	var output = value;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	var red = output >> 16 & 255;
	var green = output >> 8 & 255;
	var blue = output & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_AlphaColor.setRGB = function(this1,red,green,blue) {
	this1 &= -16711681;
	this1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	this1 &= -65281;
	this1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	this1 &= -256;
	this1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return this1;
};
ceramic_AlphaColor.setRGBA = function(this1,red,green,blue,alpha) {
	this1 &= -16711681;
	this1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	this1 &= -65281;
	this1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	this1 &= -256;
	this1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	this1 &= 16777215;
	this1 |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	return this1;
};
ceramic_AlphaColor.setRGBFloat = function(this1,red,green,blue) {
	var Value = Math.round(red * 255);
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = Math.round(green * 255);
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = Math.round(blue * 255);
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return this1;
};
ceramic_AlphaColor.setRGBAFloat = function(this1,red,green,blue,alpha) {
	var Value = Math.round(red * 255);
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = Math.round(green * 255);
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = Math.round(blue * 255);
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	var Value = Math.round(alpha * 255);
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return this1;
};
ceramic_AlphaColor.setCMYK = function(this1,cyan,magenta,yellow,black) {
	var Value = (1 - cyan) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - magenta) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - yellow) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return this1;
};
ceramic_AlphaColor.setHSB = function(this1,hue,saturation,brightness) {
	var chroma = brightness * saturation;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return this1;
};
ceramic_AlphaColor.setHSL = function(this1,hue,saturation,lightness) {
	var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
	var match = lightness - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return this1;
};
ceramic_AlphaColor.setHSChromaMatch = function(this1,hue,saturation,chroma,match) {
	hue %= 360;
	var hueD = hue / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return this1;
};
ceramic_AlphaColor._new = function(color,alpha) {
	if(alpha == null) {
		alpha = 255;
	}
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	return value;
};
ceramic_AlphaColor.get_color = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_AlphaColor.set_color = function(this1,color) {
	var Value = color >> 16 & 255;
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = color >> 8 & 255;
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = color & 255;
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return color;
};
ceramic_AlphaColor.get_rgb = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_AlphaColor.set_rgb = function(this1,color) {
	var Value = color >> 16 & 255;
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value = color >> 8 & 255;
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	var Value = color & 255;
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return color;
};
ceramic_AlphaColor.get_red = function(this1) {
	return this1 >> 16 & 255;
};
ceramic_AlphaColor.get_green = function(this1) {
	return this1 >> 8 & 255;
};
ceramic_AlphaColor.get_blue = function(this1) {
	return this1 & 255;
};
ceramic_AlphaColor.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
ceramic_AlphaColor.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
ceramic_AlphaColor.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
ceramic_AlphaColor.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
ceramic_AlphaColor.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
ceramic_AlphaColor.set_red = function(this1,Value) {
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	return Value;
};
ceramic_AlphaColor.set_green = function(this1,Value) {
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	return Value;
};
ceramic_AlphaColor.set_blue = function(this1,Value) {
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return Value;
};
ceramic_AlphaColor.set_alpha = function(this1,Value) {
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return Value;
};
ceramic_AlphaColor.set_redFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	return Value;
};
ceramic_AlphaColor.set_greenFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	return Value;
};
ceramic_AlphaColor.set_blueFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return Value;
};
ceramic_AlphaColor.set_alphaFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
ceramic_AlphaColor.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.set_cyan = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Value = (1 - value) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - magenta) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - yellow) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return value;
};
ceramic_AlphaColor.set_magenta = function(this1,value) {
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Value = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - value) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - yellow) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return value;
};
ceramic_AlphaColor.set_yellow = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Value = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - magenta) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - value) * (1 - black);
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return value;
};
ceramic_AlphaColor.set_black = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Value = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - value);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value = (1 - magenta) * (1 - value);
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value = (1 - yellow) * (1 - value);
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return value;
};
ceramic_AlphaColor.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
ceramic_AlphaColor.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
ceramic_AlphaColor.set_hue = function(this1,value) {
	var brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var chroma = brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = brightness - chroma;
	var hue = value;
	var chroma1 = chroma;
	hue %= 360;
	var hueD = hue / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return value;
};
ceramic_AlphaColor.set_saturation = function(this1,value) {
	var hue = ceramic_AlphaColor.get_hue(this1);
	var brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var chroma = brightness * value;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return value;
};
ceramic_AlphaColor.set_brightness = function(this1,value) {
	var hue = ceramic_AlphaColor.get_hue(this1);
	var chroma = value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return value;
};
ceramic_AlphaColor.set_lightness = function(this1,value) {
	var hue = ceramic_AlphaColor.get_hue(this1);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 1:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 2:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(chroma1 * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 3:
		var Value = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 4:
		var Value = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(chroma1 * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	case 5:
		var Value = Math.round(chroma1 * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		break;
	}
	return value;
};
ceramic_AlphaColor.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_AlphaColor.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
ceramic_AlphaColor.roundDecimal = function(value,precision) {
	var mult = 1;
	var _g = 0;
	var _g1 = precision;
	while(_g < _g1) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(value * mult) / mult;
};
ceramic_AlphaColor.bound = function(value,min,max) {
	var lowerBound = min != null && value < min ? min : value;
	if(max != null && lowerBound > max) {
		return max;
	} else {
		return lowerBound;
	}
};
ceramic_AlphaColor.toString = function(this1) {
	if(this1 == -1) {
		return "NONE";
	} else {
		return "0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
	}
};
ceramic_AlphaColor.get_hueHSLuv = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var key = color;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_AlphaColor._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_AlphaColor._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_AlphaColor._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3];
};
ceramic_AlphaColor.set_hueHSLuv = function(this1,hueHSLuv) {
	var saturation = ceramic_AlphaColor.get_saturationHSLuv(this1);
	var lightness = ceramic_AlphaColor.get_lightnessHSLuv(this1);
	ceramic_AlphaColor._hsluvTuple[0] = hueHSLuv;
	ceramic_AlphaColor._hsluvTuple[1] = saturation * 100;
	ceramic_AlphaColor._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_AlphaColor._hsluvTuple,ceramic_AlphaColor._hsluvResult);
		var v = ceramic_AlphaColor._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		v = ceramic_AlphaColor._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		v = ceramic_AlphaColor._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue = hueHSLuv;
		var chroma1 = chroma;
		hue %= 360;
		var hueD = hue / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 1:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 2:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 3:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 4:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 5:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		}
	}
	return hueHSLuv;
};
ceramic_AlphaColor.get_saturationHSLuv = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var key = color;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_AlphaColor._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_AlphaColor._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_AlphaColor._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3 + 1];
};
ceramic_AlphaColor.set_saturationHSLuv = function(this1,saturationHSLuv) {
	var hue = ceramic_AlphaColor.get_hueHSLuv(this1);
	var lightness = ceramic_AlphaColor.get_lightnessHSLuv(this1);
	ceramic_AlphaColor._hsluvTuple[0] = hue;
	ceramic_AlphaColor._hsluvTuple[1] = saturationHSLuv * 100;
	ceramic_AlphaColor._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_AlphaColor._hsluvTuple,ceramic_AlphaColor._hsluvResult);
		var v = ceramic_AlphaColor._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		v = ceramic_AlphaColor._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		v = ceramic_AlphaColor._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturationHSLuv;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 1:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 2:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 3:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 4:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 5:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		}
	}
	return saturationHSLuv;
};
ceramic_AlphaColor.get_lightnessHSLuv = function(this1) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var key = color;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_AlphaColor._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_AlphaColor._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_AlphaColor._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3 + 2];
};
ceramic_AlphaColor.set_lightnessHSLuv = function(this1,lightnessHSLuv) {
	var hue = ceramic_AlphaColor.get_hueHSLuv(this1);
	var saturation = ceramic_AlphaColor.get_saturationHSLuv(this1);
	ceramic_AlphaColor._hsluvTuple[0] = hue;
	ceramic_AlphaColor._hsluvTuple[1] = saturation * 100;
	ceramic_AlphaColor._hsluvTuple[2] = lightnessHSLuv * 100;
	if(lightnessHSLuv > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_AlphaColor._hsluvTuple,ceramic_AlphaColor._hsluvResult);
		var v = ceramic_AlphaColor._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		v = ceramic_AlphaColor._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		v = ceramic_AlphaColor._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	} else {
		var chroma = (1 - Math.abs(2 * lightnessHSLuv - 1)) * saturation;
		var match = lightnessHSLuv - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 1:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 2:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 3:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 4:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 5:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		}
	}
	return lightnessHSLuv;
};
ceramic_AlphaColor._getOrCreateCachedHSLuvComponent = function(this1,index) {
	var red = this1 >> 16 & 255;
	var green = this1 >> 8 & 255;
	var blue = this1 & 255;
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var key = color;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_AlphaColor._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_AlphaColor._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_AlphaColor._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_AlphaColor._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_AlphaColor._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3 + index];
};
ceramic_AlphaColor.fromHSLuv = function(hue,saturation,lightness) {
	var color = -1;
	ceramic_AlphaColor._hsluvTuple[0] = hue;
	ceramic_AlphaColor._hsluvTuple[1] = saturation * 100;
	ceramic_AlphaColor._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_AlphaColor._hsluvTuple,ceramic_AlphaColor._hsluvResult);
		var v = ceramic_AlphaColor._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		v = ceramic_AlphaColor._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		v = ceramic_AlphaColor._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var Value = Math.round(chroma1 * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 1:
			var Value = Math.round(mid * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 2:
			var Value = Math.round(match * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 3:
			var Value = Math.round(match * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 4:
			var Value = Math.round(mid * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 5:
			var Value = Math.round(chroma1 * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			color &= -65281;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			color &= -256;
			color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		}
	}
	return color;
};
ceramic_AlphaColor.setHSLuv = function(this1,hue,saturation,lightness) {
	ceramic_AlphaColor._hsluvTuple[0] = hue;
	ceramic_AlphaColor._hsluvTuple[1] = saturation * 100;
	ceramic_AlphaColor._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_AlphaColor._hsluvTuple,ceramic_AlphaColor._hsluvResult);
		var v = ceramic_AlphaColor._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		v = ceramic_AlphaColor._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -65281;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		v = ceramic_AlphaColor._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var Value = Math.round(v * 255);
		this1 &= -256;
		this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 1:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(match * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 2:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(chroma1 * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 3:
			var Value = Math.round(match * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(mid * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 4:
			var Value = Math.round(mid * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(chroma1 * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		case 5:
			var Value = Math.round(chroma1 * 255);
			this1 &= -16711681;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value = Math.round(match * 255);
			this1 &= -65281;
			this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
			var Value = Math.round(mid * 255);
			this1 &= -256;
			this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
			break;
		}
	}
	return this1;
};
ceramic_AlphaColor.getHSLuv = function(this1,result) {
	if(result == null) {
		result = [0,0,0];
	}
	ceramic_AlphaColor._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
	ceramic_AlphaColor._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
	ceramic_AlphaColor._hsluvTuple[2] = (this1 & 255) / 255;
	hsluv_Hsluv.rgbToHsluv(ceramic_AlphaColor._hsluvTuple,result);
	result[1] *= 0.01;
	result[2] *= 0.01;
	return result;
};
var ceramic_App = function() {
	this.info = { editable : { item11 : "ceramic.Line", item12 : "ceramic.Particles", item3 : "ceramic.Layer", item10 : "ceramic.Arc", item5 : "ceramic.Quad", item7 : "ceramic.Mesh", item2 : "ceramic.Visual", item6 : "ceramic.Text", item9 : "ceramic.Ngon", item1 : "ceramic.Entity", item4 : "ceramic.Fragment", item8 : "ceramic.Shape", item0 : "ceramic.Tilemap"}, name : "project-sample", collections : { }, version : "1.0", author : "Cartographer Games", displayName : "Editor Sample Project"};
	this.numBlockingDefaultScroll = 0;
	this.disposedEntities = [];
	this.beginUpdateCallbacks = [];
	this.visualsContentDirty = false;
	this.hierarchyDirty = false;
	this.lazyScenes = true;
	this.timelines = new ceramic_Timelines();
	this.converters = new haxe_ds_StringMap();
	this.textInput = null;
	this.persistent = null;
	this.projectDir = null;
	this.defaultFont = null;
	this.defaultWhiteTexture = null;
	this.defaultTexturedShader = null;
	this.renderTextures = [];
	this.groups = [];
	this.destroyedVisuals = [];
	this.pendingVisuals = [];
	this.visuals = [];
	this.logger = new ceramic_Logger();
	this.frame = 0;
	this._computeFps = new ceramic_ComputeFps();
	this.inUpdate = false;
	this._xUpdatesToCallNow = [];
	this._xUpdatesHandlers = [];
	this._xUpdatesHandlersPool = new ceramic_Pool();
	this.loaders = [];
	this.postFlushImmediateCallbacksLen = 0;
	this.postFlushImmediateCallbacksCapacity = 0;
	this.postFlushImmediateCallbacks = [];
	this.immediateCallbacksLen = 0;
	this.immediateCallbacksCapacity = 0;
	this.immediateCallbacks = [];
	ceramic_Entity.call(this);
	ceramic_App.app = this;
	ceramic_TilemapPlugin.pluginInit();
	ceramic_Runner.init();
	tracker_Tracker.backend = new ceramic_TrackerBackend();
	this.settings = new ceramic_Settings();
	this.screen = new ceramic_Screen();
	this.audio = new ceramic_Audio();
	this.input = new ceramic_Input();
	this.systems = new ceramic_Systems();
	this.assets = new ceramic_Assets();
	this.backend = new backend_Backend();
	this.backend.onceReady(this,$bind(this,this.backendReady));
	this.backend.init(this);
};
$hxClasses["ceramic.App"] = ceramic_App;
ceramic_App.__name__ = "ceramic.App";
ceramic_App.__properties__ = {get_app:"get_app"};
ceramic_App.get_app = function() {
	return ceramic_App.app;
};
ceramic_App.oncePreInit = function(handle) {
	if(ceramic_App.preInitCallbacks == null) {
		ceramic_App.preInitCallbacks = [];
	}
	ceramic_App.preInitCallbacks.push(handle);
};
ceramic_App.init = function() {
	assets_AllAssets.bind();
	new ceramic_App();
	var initSettings = new ceramic_InitSettings(ceramic_App.app.settings);
	return initSettings;
};
ceramic_App.__super__ = ceramic_Entity;
ceramic_App.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnReady: null
	,__cbOnceReady: null
	,__cbOnOwnerUnbindReady: null
	,__cbOnceOwnerUnbindReady: null
	,emitReady: function() {
		var len = 0;
		if(this.__cbOnReady != null) {
			len += this.__cbOnReady.length;
		}
		if(this.__cbOnceReady != null) {
			len += this.__cbOnceReady.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnReady.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReady[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReady != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReady.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReady[ii];
						this.__cbOnceReady[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReady[ii];
						this.__cbOnceOwnerUnbindReady[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReady[ii]);
						newCbOnceArray.push(this.__cbOnceReady[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReady = newCbOnceOwnerUnbindArray;
				this.__cbOnceReady = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(null);
		}
		if(this.__cbOnReady == null) {
			this.__cbOnReady = [];
		}
		this.__cbOnReady.push(handle);
	}
	,onceReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(null);
		}
		if(this.__cbOnceReady == null) {
			this.__cbOnceReady = [];
		}
		this.__cbOnceReady.push(handle);
	}
	,offReady: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReady != null) {
				index = this.__cbOnReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnReady.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReady.splice(index,1);
				}
			}
			if(this.__cbOnceReady != null) {
				index = this.__cbOnceReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReady.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReady.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReady = null;
			}
			if(this.__cbOnceOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReady = null;
			}
			this.__cbOnReady = null;
			this.__cbOnceReady = null;
		}
	}
	,listensReady: function() {
		if(!(this.__cbOnReady != null && this.__cbOnReady.length > 0)) {
			if(this.__cbOnceReady != null) {
				return this.__cbOnceReady.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnUpdate: null
	,__cbOnceUpdate: null
	,__cbOnOwnerUnbindUpdate: null
	,__cbOnceOwnerUnbindUpdate: null
	,emitUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceUpdate[ii];
						this.__cbOnceUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
						this.__cbOnceOwnerUnbindUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleDelta);
	}
	,onceUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleDelta);
	}
	,offUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPreUpdate: null
	,__cbOncePreUpdate: null
	,__cbOnOwnerUnbindPreUpdate: null
	,__cbOnceOwnerUnbindPreUpdate: null
	,emitPreUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnPreUpdate != null) {
			len += this.__cbOnPreUpdate.length;
		}
		if(this.__cbOncePreUpdate != null) {
			len += this.__cbOncePreUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnPreUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPreUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePreUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePreUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePreUpdate[ii];
						this.__cbOncePreUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPreUpdate[ii];
						this.__cbOnceOwnerUnbindPreUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPreUpdate[ii]);
						newCbOnceArray.push(this.__cbOncePreUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPreUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOncePreUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPreUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPreUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPreUpdate == null) {
				this.__cbOnOwnerUnbindPreUpdate = [];
			}
			this.__cbOnOwnerUnbindPreUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPreUpdate == null) {
				this.__cbOnOwnerUnbindPreUpdate = [];
			}
			this.__cbOnOwnerUnbindPreUpdate.push(null);
		}
		if(this.__cbOnPreUpdate == null) {
			this.__cbOnPreUpdate = [];
		}
		this.__cbOnPreUpdate.push(handleDelta);
	}
	,oncePreUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPreUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPreUpdate == null) {
				this.__cbOnceOwnerUnbindPreUpdate = [];
			}
			this.__cbOnceOwnerUnbindPreUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPreUpdate == null) {
				this.__cbOnceOwnerUnbindPreUpdate = [];
			}
			this.__cbOnceOwnerUnbindPreUpdate.push(null);
		}
		if(this.__cbOncePreUpdate == null) {
			this.__cbOncePreUpdate = [];
		}
		this.__cbOncePreUpdate.push(handleDelta);
	}
	,offPreUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnPreUpdate != null) {
				index = this.__cbOnPreUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnPreUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPreUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPreUpdate.splice(index,1);
				}
			}
			if(this.__cbOncePreUpdate != null) {
				index = this.__cbOncePreUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOncePreUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPreUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPreUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPreUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPreUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPreUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindPreUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPreUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPreUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPreUpdate = null;
			}
			this.__cbOnPreUpdate = null;
			this.__cbOncePreUpdate = null;
		}
	}
	,listensPreUpdate: function() {
		if(!(this.__cbOnPreUpdate != null && this.__cbOnPreUpdate.length > 0)) {
			if(this.__cbOncePreUpdate != null) {
				return this.__cbOncePreUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPostUpdate: null
	,__cbOncePostUpdate: null
	,__cbOnOwnerUnbindPostUpdate: null
	,__cbOnceOwnerUnbindPostUpdate: null
	,emitPostUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnPostUpdate != null) {
			len += this.__cbOnPostUpdate.length;
		}
		if(this.__cbOncePostUpdate != null) {
			len += this.__cbOncePostUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnPostUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPostUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePostUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePostUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePostUpdate[ii];
						this.__cbOncePostUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPostUpdate[ii];
						this.__cbOnceOwnerUnbindPostUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPostUpdate[ii]);
						newCbOnceArray.push(this.__cbOncePostUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPostUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOncePostUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPostUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "postUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPostUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPostUpdate == null) {
				this.__cbOnOwnerUnbindPostUpdate = [];
			}
			this.__cbOnOwnerUnbindPostUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPostUpdate == null) {
				this.__cbOnOwnerUnbindPostUpdate = [];
			}
			this.__cbOnOwnerUnbindPostUpdate.push(null);
		}
		if(this.__cbOnPostUpdate == null) {
			this.__cbOnPostUpdate = [];
		}
		this.__cbOnPostUpdate.push(handleDelta);
	}
	,oncePostUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "postUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offPostUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPostUpdate == null) {
				this.__cbOnceOwnerUnbindPostUpdate = [];
			}
			this.__cbOnceOwnerUnbindPostUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPostUpdate == null) {
				this.__cbOnceOwnerUnbindPostUpdate = [];
			}
			this.__cbOnceOwnerUnbindPostUpdate.push(null);
		}
		if(this.__cbOncePostUpdate == null) {
			this.__cbOncePostUpdate = [];
		}
		this.__cbOncePostUpdate.push(handleDelta);
	}
	,offPostUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnPostUpdate != null) {
				index = this.__cbOnPostUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnPostUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPostUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPostUpdate.splice(index,1);
				}
			}
			if(this.__cbOncePostUpdate != null) {
				index = this.__cbOncePostUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOncePostUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPostUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPostUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPostUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPostUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPostUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindPostUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPostUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPostUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPostUpdate = null;
			}
			this.__cbOnPostUpdate = null;
			this.__cbOncePostUpdate = null;
		}
	}
	,listensPostUpdate: function() {
		if(!(this.__cbOnPostUpdate != null && this.__cbOnPostUpdate.length > 0)) {
			if(this.__cbOncePostUpdate != null) {
				return this.__cbOncePostUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnDefaultAssetsLoad: null
	,__cbOnceDefaultAssetsLoad: null
	,__cbOnOwnerUnbindDefaultAssetsLoad: null
	,__cbOnceOwnerUnbindDefaultAssetsLoad: null
	,emitDefaultAssetsLoad: function(assets) {
		var len = 0;
		if(this.__cbOnDefaultAssetsLoad != null) {
			len += this.__cbOnDefaultAssetsLoad.length;
		}
		if(this.__cbOnceDefaultAssetsLoad != null) {
			len += this.__cbOnceDefaultAssetsLoad.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnDefaultAssetsLoad.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDefaultAssetsLoad[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDefaultAssetsLoad != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDefaultAssetsLoad.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDefaultAssetsLoad[ii];
						this.__cbOnceDefaultAssetsLoad[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDefaultAssetsLoad[ii];
						this.__cbOnceOwnerUnbindDefaultAssetsLoad[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDefaultAssetsLoad[ii]);
						newCbOnceArray.push(this.__cbOnceDefaultAssetsLoad[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = newCbOnceOwnerUnbindArray;
				this.__cbOnceDefaultAssetsLoad = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(assets);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDefaultAssetsLoad: function(owner,handleAssets) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "defaultAssetsLoad" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAssets != null) {
					_gthis.offDefaultAssetsLoad(handleAssets);
					handleAssets = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnOwnerUnbindDefaultAssetsLoad.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAssets = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnOwnerUnbindDefaultAssetsLoad.push(null);
		}
		if(this.__cbOnDefaultAssetsLoad == null) {
			this.__cbOnDefaultAssetsLoad = [];
		}
		this.__cbOnDefaultAssetsLoad.push(handleAssets);
	}
	,onceDefaultAssetsLoad: function(owner,handleAssets) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "defaultAssetsLoad" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleAssets != null) {
					_gthis.offDefaultAssetsLoad(handleAssets);
					handleAssets = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnceOwnerUnbindDefaultAssetsLoad.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleAssets = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDefaultAssetsLoad == null) {
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = [];
			}
			this.__cbOnceOwnerUnbindDefaultAssetsLoad.push(null);
		}
		if(this.__cbOnceDefaultAssetsLoad == null) {
			this.__cbOnceDefaultAssetsLoad = [];
		}
		this.__cbOnceDefaultAssetsLoad.push(handleAssets);
	}
	,offDefaultAssetsLoad: function(handleAssets) {
		if(handleAssets != null) {
			var index;
			var unbind;
			if(this.__cbOnDefaultAssetsLoad != null) {
				index = this.__cbOnDefaultAssetsLoad.indexOf(handleAssets);
				if(index != -1) {
					this.__cbOnDefaultAssetsLoad.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDefaultAssetsLoad[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDefaultAssetsLoad.splice(index,1);
				}
			}
			if(this.__cbOnceDefaultAssetsLoad != null) {
				index = this.__cbOnceDefaultAssetsLoad.indexOf(handleAssets);
				if(index != -1) {
					this.__cbOnceDefaultAssetsLoad.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDefaultAssetsLoad[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDefaultAssetsLoad.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDefaultAssetsLoad.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDefaultAssetsLoad[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDefaultAssetsLoad = null;
			}
			if(this.__cbOnceOwnerUnbindDefaultAssetsLoad != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDefaultAssetsLoad.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDefaultAssetsLoad[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDefaultAssetsLoad = null;
			}
			this.__cbOnDefaultAssetsLoad = null;
			this.__cbOnceDefaultAssetsLoad = null;
		}
	}
	,listensDefaultAssetsLoad: function() {
		if(!(this.__cbOnDefaultAssetsLoad != null && this.__cbOnDefaultAssetsLoad.length > 0)) {
			if(this.__cbOnceDefaultAssetsLoad != null) {
				return this.__cbOnceDefaultAssetsLoad.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnCriticalError: null
	,__cbOnceCriticalError: null
	,__cbOnOwnerUnbindCriticalError: null
	,__cbOnceOwnerUnbindCriticalError: null
	,emitCriticalError: function(error,stack) {
		var len = 0;
		if(this.__cbOnCriticalError != null) {
			len += this.__cbOnCriticalError.length;
		}
		if(this.__cbOnceCriticalError != null) {
			len += this.__cbOnceCriticalError.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnCriticalError.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnCriticalError[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceCriticalError != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceCriticalError.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceCriticalError[ii];
						this.__cbOnceCriticalError[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindCriticalError[ii];
						this.__cbOnceOwnerUnbindCriticalError[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindCriticalError[ii]);
						newCbOnceArray.push(this.__cbOnceCriticalError[ii]);
					}
				}
				this.__cbOnceOwnerUnbindCriticalError = newCbOnceOwnerUnbindArray;
				this.__cbOnceCriticalError = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(error,stack);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCriticalError: function(owner,handleErrorStack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "criticalError" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleErrorStack != null) {
					_gthis.offCriticalError(handleErrorStack);
					handleErrorStack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCriticalError == null) {
				this.__cbOnOwnerUnbindCriticalError = [];
			}
			this.__cbOnOwnerUnbindCriticalError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleErrorStack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCriticalError == null) {
				this.__cbOnOwnerUnbindCriticalError = [];
			}
			this.__cbOnOwnerUnbindCriticalError.push(null);
		}
		if(this.__cbOnCriticalError == null) {
			this.__cbOnCriticalError = [];
		}
		this.__cbOnCriticalError.push(handleErrorStack);
	}
	,onceCriticalError: function(owner,handleErrorStack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "criticalError" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleErrorStack != null) {
					_gthis.offCriticalError(handleErrorStack);
					handleErrorStack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCriticalError == null) {
				this.__cbOnceOwnerUnbindCriticalError = [];
			}
			this.__cbOnceOwnerUnbindCriticalError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleErrorStack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCriticalError == null) {
				this.__cbOnceOwnerUnbindCriticalError = [];
			}
			this.__cbOnceOwnerUnbindCriticalError.push(null);
		}
		if(this.__cbOnceCriticalError == null) {
			this.__cbOnceCriticalError = [];
		}
		this.__cbOnceCriticalError.push(handleErrorStack);
	}
	,offCriticalError: function(handleErrorStack) {
		if(handleErrorStack != null) {
			var index;
			var unbind;
			if(this.__cbOnCriticalError != null) {
				index = this.__cbOnCriticalError.indexOf(handleErrorStack);
				if(index != -1) {
					this.__cbOnCriticalError.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCriticalError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCriticalError.splice(index,1);
				}
			}
			if(this.__cbOnceCriticalError != null) {
				index = this.__cbOnceCriticalError.indexOf(handleErrorStack);
				if(index != -1) {
					this.__cbOnceCriticalError.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCriticalError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCriticalError.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCriticalError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCriticalError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCriticalError = null;
			}
			if(this.__cbOnceOwnerUnbindCriticalError != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCriticalError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCriticalError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCriticalError = null;
			}
			this.__cbOnCriticalError = null;
			this.__cbOnceCriticalError = null;
		}
	}
	,listensCriticalError: function() {
		if(!(this.__cbOnCriticalError != null && this.__cbOnCriticalError.length > 0)) {
			if(this.__cbOnceCriticalError != null) {
				return this.__cbOnceCriticalError.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBeginEnterBackground: null
	,__cbOnceBeginEnterBackground: null
	,__cbOnOwnerUnbindBeginEnterBackground: null
	,__cbOnceOwnerUnbindBeginEnterBackground: null
	,emitBeginEnterBackground: function() {
		var len = 0;
		if(this.__cbOnBeginEnterBackground != null) {
			len += this.__cbOnBeginEnterBackground.length;
		}
		if(this.__cbOnceBeginEnterBackground != null) {
			len += this.__cbOnceBeginEnterBackground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBeginEnterBackground[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBeginEnterBackground != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBeginEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBeginEnterBackground[ii];
						this.__cbOnceBeginEnterBackground[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBeginEnterBackground[ii];
						this.__cbOnceOwnerUnbindBeginEnterBackground[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBeginEnterBackground[ii]);
						newCbOnceArray.push(this.__cbOnceBeginEnterBackground[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBeginEnterBackground = newCbOnceOwnerUnbindArray;
				this.__cbOnceBeginEnterBackground = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterBackground.push(null);
		}
		if(this.__cbOnBeginEnterBackground == null) {
			this.__cbOnBeginEnterBackground = [];
		}
		this.__cbOnBeginEnterBackground.push(handle);
	}
	,onceBeginEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnceOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginEnterBackground == null) {
				this.__cbOnceOwnerUnbindBeginEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterBackground.push(null);
		}
		if(this.__cbOnceBeginEnterBackground == null) {
			this.__cbOnceBeginEnterBackground = [];
		}
		this.__cbOnceBeginEnterBackground.push(handle);
	}
	,offBeginEnterBackground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginEnterBackground != null) {
				index = this.__cbOnBeginEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginEnterBackground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginEnterBackground.splice(index,1);
				}
			}
			if(this.__cbOnceBeginEnterBackground != null) {
				index = this.__cbOnceBeginEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginEnterBackground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginEnterBackground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginEnterBackground = null;
			}
			if(this.__cbOnceOwnerUnbindBeginEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginEnterBackground = null;
			}
			this.__cbOnBeginEnterBackground = null;
			this.__cbOnceBeginEnterBackground = null;
		}
	}
	,listensBeginEnterBackground: function() {
		if(!(this.__cbOnBeginEnterBackground != null && this.__cbOnBeginEnterBackground.length > 0)) {
			if(this.__cbOnceBeginEnterBackground != null) {
				return this.__cbOnceBeginEnterBackground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFinishEnterBackground: null
	,__cbOnceFinishEnterBackground: null
	,__cbOnOwnerUnbindFinishEnterBackground: null
	,__cbOnceOwnerUnbindFinishEnterBackground: null
	,emitFinishEnterBackground: function() {
		var len = 0;
		if(this.__cbOnFinishEnterBackground != null) {
			len += this.__cbOnFinishEnterBackground.length;
		}
		if(this.__cbOnceFinishEnterBackground != null) {
			len += this.__cbOnceFinishEnterBackground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFinishEnterBackground[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFinishEnterBackground != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFinishEnterBackground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFinishEnterBackground[ii];
						this.__cbOnceFinishEnterBackground[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFinishEnterBackground[ii];
						this.__cbOnceOwnerUnbindFinishEnterBackground[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFinishEnterBackground[ii]);
						newCbOnceArray.push(this.__cbOnceFinishEnterBackground[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFinishEnterBackground = newCbOnceOwnerUnbindArray;
				this.__cbOnceFinishEnterBackground = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterBackground.push(null);
		}
		if(this.__cbOnFinishEnterBackground == null) {
			this.__cbOnFinishEnterBackground = [];
		}
		this.__cbOnFinishEnterBackground.push(handle);
	}
	,onceFinishEnterBackground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterBackground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterBackground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnceOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterBackground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishEnterBackground == null) {
				this.__cbOnceOwnerUnbindFinishEnterBackground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterBackground.push(null);
		}
		if(this.__cbOnceFinishEnterBackground == null) {
			this.__cbOnceFinishEnterBackground = [];
		}
		this.__cbOnceFinishEnterBackground.push(handle);
	}
	,offFinishEnterBackground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishEnterBackground != null) {
				index = this.__cbOnFinishEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishEnterBackground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishEnterBackground.splice(index,1);
				}
			}
			if(this.__cbOnceFinishEnterBackground != null) {
				index = this.__cbOnceFinishEnterBackground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishEnterBackground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishEnterBackground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishEnterBackground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishEnterBackground = null;
			}
			if(this.__cbOnceOwnerUnbindFinishEnterBackground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishEnterBackground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishEnterBackground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishEnterBackground = null;
			}
			this.__cbOnFinishEnterBackground = null;
			this.__cbOnceFinishEnterBackground = null;
		}
	}
	,listensFinishEnterBackground: function() {
		if(!(this.__cbOnFinishEnterBackground != null && this.__cbOnFinishEnterBackground.length > 0)) {
			if(this.__cbOnceFinishEnterBackground != null) {
				return this.__cbOnceFinishEnterBackground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBeginEnterForeground: null
	,__cbOnceBeginEnterForeground: null
	,__cbOnOwnerUnbindBeginEnterForeground: null
	,__cbOnceOwnerUnbindBeginEnterForeground: null
	,emitBeginEnterForeground: function() {
		var len = 0;
		if(this.__cbOnBeginEnterForeground != null) {
			len += this.__cbOnBeginEnterForeground.length;
		}
		if(this.__cbOnceBeginEnterForeground != null) {
			len += this.__cbOnceBeginEnterForeground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBeginEnterForeground[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBeginEnterForeground != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBeginEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBeginEnterForeground[ii];
						this.__cbOnceBeginEnterForeground[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBeginEnterForeground[ii];
						this.__cbOnceOwnerUnbindBeginEnterForeground[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBeginEnterForeground[ii]);
						newCbOnceArray.push(this.__cbOnceBeginEnterForeground[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBeginEnterForeground = newCbOnceOwnerUnbindArray;
				this.__cbOnceBeginEnterForeground = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnOwnerUnbindBeginEnterForeground.push(null);
		}
		if(this.__cbOnBeginEnterForeground == null) {
			this.__cbOnBeginEnterForeground = [];
		}
		this.__cbOnBeginEnterForeground.push(handle);
	}
	,onceBeginEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnceOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginEnterForeground == null) {
				this.__cbOnceOwnerUnbindBeginEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindBeginEnterForeground.push(null);
		}
		if(this.__cbOnceBeginEnterForeground == null) {
			this.__cbOnceBeginEnterForeground = [];
		}
		this.__cbOnceBeginEnterForeground.push(handle);
	}
	,offBeginEnterForeground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginEnterForeground != null) {
				index = this.__cbOnBeginEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginEnterForeground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginEnterForeground.splice(index,1);
				}
			}
			if(this.__cbOnceBeginEnterForeground != null) {
				index = this.__cbOnceBeginEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginEnterForeground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginEnterForeground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginEnterForeground = null;
			}
			if(this.__cbOnceOwnerUnbindBeginEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginEnterForeground = null;
			}
			this.__cbOnBeginEnterForeground = null;
			this.__cbOnceBeginEnterForeground = null;
		}
	}
	,listensBeginEnterForeground: function() {
		if(!(this.__cbOnBeginEnterForeground != null && this.__cbOnBeginEnterForeground.length > 0)) {
			if(this.__cbOnceBeginEnterForeground != null) {
				return this.__cbOnceBeginEnterForeground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFinishEnterForeground: null
	,__cbOnceFinishEnterForeground: null
	,__cbOnOwnerUnbindFinishEnterForeground: null
	,__cbOnceOwnerUnbindFinishEnterForeground: null
	,emitFinishEnterForeground: function() {
		var len = 0;
		if(this.__cbOnFinishEnterForeground != null) {
			len += this.__cbOnFinishEnterForeground.length;
		}
		if(this.__cbOnceFinishEnterForeground != null) {
			len += this.__cbOnceFinishEnterForeground.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFinishEnterForeground[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFinishEnterForeground != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFinishEnterForeground.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFinishEnterForeground[ii];
						this.__cbOnceFinishEnterForeground[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFinishEnterForeground[ii];
						this.__cbOnceOwnerUnbindFinishEnterForeground[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFinishEnterForeground[ii]);
						newCbOnceArray.push(this.__cbOnceFinishEnterForeground[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFinishEnterForeground = newCbOnceOwnerUnbindArray;
				this.__cbOnceFinishEnterForeground = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnOwnerUnbindFinishEnterForeground.push(null);
		}
		if(this.__cbOnFinishEnterForeground == null) {
			this.__cbOnFinishEnterForeground = [];
		}
		this.__cbOnFinishEnterForeground.push(handle);
	}
	,onceFinishEnterForeground: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishEnterForeground" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishEnterForeground(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnceOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterForeground.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishEnterForeground == null) {
				this.__cbOnceOwnerUnbindFinishEnterForeground = [];
			}
			this.__cbOnceOwnerUnbindFinishEnterForeground.push(null);
		}
		if(this.__cbOnceFinishEnterForeground == null) {
			this.__cbOnceFinishEnterForeground = [];
		}
		this.__cbOnceFinishEnterForeground.push(handle);
	}
	,offFinishEnterForeground: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishEnterForeground != null) {
				index = this.__cbOnFinishEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishEnterForeground.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishEnterForeground.splice(index,1);
				}
			}
			if(this.__cbOnceFinishEnterForeground != null) {
				index = this.__cbOnceFinishEnterForeground.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishEnterForeground.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishEnterForeground[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishEnterForeground.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishEnterForeground = null;
			}
			if(this.__cbOnceOwnerUnbindFinishEnterForeground != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishEnterForeground.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishEnterForeground[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishEnterForeground = null;
			}
			this.__cbOnFinishEnterForeground = null;
			this.__cbOnceFinishEnterForeground = null;
		}
	}
	,listensFinishEnterForeground: function() {
		if(!(this.__cbOnFinishEnterForeground != null && this.__cbOnFinishEnterForeground.length > 0)) {
			if(this.__cbOnceFinishEnterForeground != null) {
				return this.__cbOnceFinishEnterForeground.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBeginSortVisuals: null
	,__cbOnceBeginSortVisuals: null
	,__cbOnOwnerUnbindBeginSortVisuals: null
	,__cbOnceOwnerUnbindBeginSortVisuals: null
	,emitBeginSortVisuals: function() {
		var len = 0;
		if(this.__cbOnBeginSortVisuals != null) {
			len += this.__cbOnBeginSortVisuals.length;
		}
		if(this.__cbOnceBeginSortVisuals != null) {
			len += this.__cbOnceBeginSortVisuals.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBeginSortVisuals[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBeginSortVisuals != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBeginSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBeginSortVisuals[ii];
						this.__cbOnceBeginSortVisuals[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBeginSortVisuals[ii];
						this.__cbOnceOwnerUnbindBeginSortVisuals[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBeginSortVisuals[ii]);
						newCbOnceArray.push(this.__cbOnceBeginSortVisuals[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBeginSortVisuals = newCbOnceOwnerUnbindArray;
				this.__cbOnceBeginSortVisuals = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnOwnerUnbindBeginSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnOwnerUnbindBeginSortVisuals.push(null);
		}
		if(this.__cbOnBeginSortVisuals == null) {
			this.__cbOnBeginSortVisuals = [];
		}
		this.__cbOnBeginSortVisuals.push(handle);
	}
	,onceBeginSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnceOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindBeginSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginSortVisuals == null) {
				this.__cbOnceOwnerUnbindBeginSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindBeginSortVisuals.push(null);
		}
		if(this.__cbOnceBeginSortVisuals == null) {
			this.__cbOnceBeginSortVisuals = [];
		}
		this.__cbOnceBeginSortVisuals.push(handle);
	}
	,offBeginSortVisuals: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginSortVisuals != null) {
				index = this.__cbOnBeginSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginSortVisuals.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginSortVisuals.splice(index,1);
				}
			}
			if(this.__cbOnceBeginSortVisuals != null) {
				index = this.__cbOnceBeginSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginSortVisuals.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginSortVisuals.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginSortVisuals = null;
			}
			if(this.__cbOnceOwnerUnbindBeginSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginSortVisuals = null;
			}
			this.__cbOnBeginSortVisuals = null;
			this.__cbOnceBeginSortVisuals = null;
		}
	}
	,listensBeginSortVisuals: function() {
		if(!(this.__cbOnBeginSortVisuals != null && this.__cbOnBeginSortVisuals.length > 0)) {
			if(this.__cbOnceBeginSortVisuals != null) {
				return this.__cbOnceBeginSortVisuals.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFinishSortVisuals: null
	,__cbOnceFinishSortVisuals: null
	,__cbOnOwnerUnbindFinishSortVisuals: null
	,__cbOnceOwnerUnbindFinishSortVisuals: null
	,emitFinishSortVisuals: function() {
		var len = 0;
		if(this.__cbOnFinishSortVisuals != null) {
			len += this.__cbOnFinishSortVisuals.length;
		}
		if(this.__cbOnceFinishSortVisuals != null) {
			len += this.__cbOnceFinishSortVisuals.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFinishSortVisuals[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFinishSortVisuals != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFinishSortVisuals.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFinishSortVisuals[ii];
						this.__cbOnceFinishSortVisuals[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFinishSortVisuals[ii];
						this.__cbOnceOwnerUnbindFinishSortVisuals[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFinishSortVisuals[ii]);
						newCbOnceArray.push(this.__cbOnceFinishSortVisuals[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFinishSortVisuals = newCbOnceOwnerUnbindArray;
				this.__cbOnceFinishSortVisuals = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnOwnerUnbindFinishSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnOwnerUnbindFinishSortVisuals.push(null);
		}
		if(this.__cbOnFinishSortVisuals == null) {
			this.__cbOnFinishSortVisuals = [];
		}
		this.__cbOnFinishSortVisuals.push(handle);
	}
	,onceFinishSortVisuals: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishSortVisuals" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishSortVisuals(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnceOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindFinishSortVisuals.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishSortVisuals == null) {
				this.__cbOnceOwnerUnbindFinishSortVisuals = [];
			}
			this.__cbOnceOwnerUnbindFinishSortVisuals.push(null);
		}
		if(this.__cbOnceFinishSortVisuals == null) {
			this.__cbOnceFinishSortVisuals = [];
		}
		this.__cbOnceFinishSortVisuals.push(handle);
	}
	,offFinishSortVisuals: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishSortVisuals != null) {
				index = this.__cbOnFinishSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishSortVisuals.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishSortVisuals.splice(index,1);
				}
			}
			if(this.__cbOnceFinishSortVisuals != null) {
				index = this.__cbOnceFinishSortVisuals.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishSortVisuals.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishSortVisuals[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishSortVisuals.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishSortVisuals = null;
			}
			if(this.__cbOnceOwnerUnbindFinishSortVisuals != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishSortVisuals.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishSortVisuals[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishSortVisuals = null;
			}
			this.__cbOnFinishSortVisuals = null;
			this.__cbOnceFinishSortVisuals = null;
		}
	}
	,listensFinishSortVisuals: function() {
		if(!(this.__cbOnFinishSortVisuals != null && this.__cbOnFinishSortVisuals.length > 0)) {
			if(this.__cbOnceFinishSortVisuals != null) {
				return this.__cbOnceFinishSortVisuals.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBeginDraw: null
	,__cbOnceBeginDraw: null
	,__cbOnOwnerUnbindBeginDraw: null
	,__cbOnceOwnerUnbindBeginDraw: null
	,emitBeginDraw: function() {
		var len = 0;
		if(this.__cbOnBeginDraw != null) {
			len += this.__cbOnBeginDraw.length;
		}
		if(this.__cbOnceBeginDraw != null) {
			len += this.__cbOnceBeginDraw.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBeginDraw[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBeginDraw != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBeginDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBeginDraw[ii];
						this.__cbOnceBeginDraw[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBeginDraw[ii];
						this.__cbOnceOwnerUnbindBeginDraw[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBeginDraw[ii]);
						newCbOnceArray.push(this.__cbOnceBeginDraw[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBeginDraw = newCbOnceOwnerUnbindArray;
				this.__cbOnceBeginDraw = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginDraw == null) {
				this.__cbOnOwnerUnbindBeginDraw = [];
			}
			this.__cbOnOwnerUnbindBeginDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginDraw == null) {
				this.__cbOnOwnerUnbindBeginDraw = [];
			}
			this.__cbOnOwnerUnbindBeginDraw.push(null);
		}
		if(this.__cbOnBeginDraw == null) {
			this.__cbOnBeginDraw = [];
		}
		this.__cbOnBeginDraw.push(handle);
	}
	,onceBeginDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offBeginDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginDraw == null) {
				this.__cbOnceOwnerUnbindBeginDraw = [];
			}
			this.__cbOnceOwnerUnbindBeginDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginDraw == null) {
				this.__cbOnceOwnerUnbindBeginDraw = [];
			}
			this.__cbOnceOwnerUnbindBeginDraw.push(null);
		}
		if(this.__cbOnceBeginDraw == null) {
			this.__cbOnceBeginDraw = [];
		}
		this.__cbOnceBeginDraw.push(handle);
	}
	,offBeginDraw: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginDraw != null) {
				index = this.__cbOnBeginDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnBeginDraw.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginDraw.splice(index,1);
				}
			}
			if(this.__cbOnceBeginDraw != null) {
				index = this.__cbOnceBeginDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnceBeginDraw.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginDraw.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginDraw = null;
			}
			if(this.__cbOnceOwnerUnbindBeginDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginDraw = null;
			}
			this.__cbOnBeginDraw = null;
			this.__cbOnceBeginDraw = null;
		}
	}
	,listensBeginDraw: function() {
		if(!(this.__cbOnBeginDraw != null && this.__cbOnBeginDraw.length > 0)) {
			if(this.__cbOnceBeginDraw != null) {
				return this.__cbOnceBeginDraw.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFinishDraw: null
	,__cbOnceFinishDraw: null
	,__cbOnOwnerUnbindFinishDraw: null
	,__cbOnceOwnerUnbindFinishDraw: null
	,emitFinishDraw: function() {
		var len = 0;
		if(this.__cbOnFinishDraw != null) {
			len += this.__cbOnFinishDraw.length;
		}
		if(this.__cbOnceFinishDraw != null) {
			len += this.__cbOnceFinishDraw.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFinishDraw[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFinishDraw != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFinishDraw.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFinishDraw[ii];
						this.__cbOnceFinishDraw[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFinishDraw[ii];
						this.__cbOnceOwnerUnbindFinishDraw[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFinishDraw[ii]);
						newCbOnceArray.push(this.__cbOnceFinishDraw[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFinishDraw = newCbOnceOwnerUnbindArray;
				this.__cbOnceFinishDraw = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishDraw == null) {
				this.__cbOnOwnerUnbindFinishDraw = [];
			}
			this.__cbOnOwnerUnbindFinishDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishDraw == null) {
				this.__cbOnOwnerUnbindFinishDraw = [];
			}
			this.__cbOnOwnerUnbindFinishDraw.push(null);
		}
		if(this.__cbOnFinishDraw == null) {
			this.__cbOnFinishDraw = [];
		}
		this.__cbOnFinishDraw.push(handle);
	}
	,onceFinishDraw: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishDraw" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishDraw(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishDraw == null) {
				this.__cbOnceOwnerUnbindFinishDraw = [];
			}
			this.__cbOnceOwnerUnbindFinishDraw.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishDraw == null) {
				this.__cbOnceOwnerUnbindFinishDraw = [];
			}
			this.__cbOnceOwnerUnbindFinishDraw.push(null);
		}
		if(this.__cbOnceFinishDraw == null) {
			this.__cbOnceFinishDraw = [];
		}
		this.__cbOnceFinishDraw.push(handle);
	}
	,offFinishDraw: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishDraw != null) {
				index = this.__cbOnFinishDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishDraw.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishDraw.splice(index,1);
				}
			}
			if(this.__cbOnceFinishDraw != null) {
				index = this.__cbOnceFinishDraw.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishDraw.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishDraw[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishDraw.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishDraw = null;
			}
			if(this.__cbOnceOwnerUnbindFinishDraw != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishDraw.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishDraw[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishDraw = null;
			}
			this.__cbOnFinishDraw = null;
			this.__cbOnceFinishDraw = null;
		}
	}
	,listensFinishDraw: function() {
		if(!(this.__cbOnFinishDraw != null && this.__cbOnFinishDraw.length > 0)) {
			if(this.__cbOnceFinishDraw != null) {
				return this.__cbOnceFinishDraw.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnLowMemory: null
	,__cbOnceLowMemory: null
	,__cbOnOwnerUnbindLowMemory: null
	,__cbOnceOwnerUnbindLowMemory: null
	,emitLowMemory: function() {
		var len = 0;
		if(this.__cbOnLowMemory != null) {
			len += this.__cbOnLowMemory.length;
		}
		if(this.__cbOnceLowMemory != null) {
			len += this.__cbOnceLowMemory.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnLowMemory.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnLowMemory[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceLowMemory != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceLowMemory.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceLowMemory[ii];
						this.__cbOnceLowMemory[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindLowMemory[ii];
						this.__cbOnceOwnerUnbindLowMemory[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindLowMemory[ii]);
						newCbOnceArray.push(this.__cbOnceLowMemory[ii]);
					}
				}
				this.__cbOnceOwnerUnbindLowMemory = newCbOnceOwnerUnbindArray;
				this.__cbOnceLowMemory = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onLowMemory: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "lowMemory" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offLowMemory(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindLowMemory == null) {
				this.__cbOnOwnerUnbindLowMemory = [];
			}
			this.__cbOnOwnerUnbindLowMemory.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindLowMemory == null) {
				this.__cbOnOwnerUnbindLowMemory = [];
			}
			this.__cbOnOwnerUnbindLowMemory.push(null);
		}
		if(this.__cbOnLowMemory == null) {
			this.__cbOnLowMemory = [];
		}
		this.__cbOnLowMemory.push(handle);
	}
	,onceLowMemory: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "lowMemory" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offLowMemory(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindLowMemory == null) {
				this.__cbOnceOwnerUnbindLowMemory = [];
			}
			this.__cbOnceOwnerUnbindLowMemory.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindLowMemory == null) {
				this.__cbOnceOwnerUnbindLowMemory = [];
			}
			this.__cbOnceOwnerUnbindLowMemory.push(null);
		}
		if(this.__cbOnceLowMemory == null) {
			this.__cbOnceLowMemory = [];
		}
		this.__cbOnceLowMemory.push(handle);
	}
	,offLowMemory: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnLowMemory != null) {
				index = this.__cbOnLowMemory.indexOf(handle);
				if(index != -1) {
					this.__cbOnLowMemory.splice(index,1);
					unbind = this.__cbOnOwnerUnbindLowMemory[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindLowMemory.splice(index,1);
				}
			}
			if(this.__cbOnceLowMemory != null) {
				index = this.__cbOnceLowMemory.indexOf(handle);
				if(index != -1) {
					this.__cbOnceLowMemory.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindLowMemory[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindLowMemory.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindLowMemory.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindLowMemory[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindLowMemory = null;
			}
			if(this.__cbOnceOwnerUnbindLowMemory != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindLowMemory.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindLowMemory[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindLowMemory = null;
			}
			this.__cbOnLowMemory = null;
			this.__cbOnceLowMemory = null;
		}
	}
	,listensLowMemory: function() {
		if(!(this.__cbOnLowMemory != null && this.__cbOnLowMemory.length > 0)) {
			if(this.__cbOnceLowMemory != null) {
				return this.__cbOnceLowMemory.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTerminate: null
	,__cbOnceTerminate: null
	,__cbOnOwnerUnbindTerminate: null
	,__cbOnceOwnerUnbindTerminate: null
	,emitTerminate: function() {
		var len = 0;
		if(this.__cbOnTerminate != null) {
			len += this.__cbOnTerminate.length;
		}
		if(this.__cbOnceTerminate != null) {
			len += this.__cbOnceTerminate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnTerminate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTerminate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTerminate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTerminate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTerminate[ii];
						this.__cbOnceTerminate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTerminate[ii];
						this.__cbOnceOwnerUnbindTerminate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTerminate[ii]);
						newCbOnceArray.push(this.__cbOnceTerminate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTerminate = newCbOnceOwnerUnbindArray;
				this.__cbOnceTerminate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTerminate: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "terminate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offTerminate(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTerminate == null) {
				this.__cbOnOwnerUnbindTerminate = [];
			}
			this.__cbOnOwnerUnbindTerminate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTerminate == null) {
				this.__cbOnOwnerUnbindTerminate = [];
			}
			this.__cbOnOwnerUnbindTerminate.push(null);
		}
		if(this.__cbOnTerminate == null) {
			this.__cbOnTerminate = [];
		}
		this.__cbOnTerminate.push(handle);
	}
	,onceTerminate: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "terminate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offTerminate(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTerminate == null) {
				this.__cbOnceOwnerUnbindTerminate = [];
			}
			this.__cbOnceOwnerUnbindTerminate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTerminate == null) {
				this.__cbOnceOwnerUnbindTerminate = [];
			}
			this.__cbOnceOwnerUnbindTerminate.push(null);
		}
		if(this.__cbOnceTerminate == null) {
			this.__cbOnceTerminate = [];
		}
		this.__cbOnceTerminate.push(handle);
	}
	,offTerminate: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnTerminate != null) {
				index = this.__cbOnTerminate.indexOf(handle);
				if(index != -1) {
					this.__cbOnTerminate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTerminate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTerminate.splice(index,1);
				}
			}
			if(this.__cbOnceTerminate != null) {
				index = this.__cbOnceTerminate.indexOf(handle);
				if(index != -1) {
					this.__cbOnceTerminate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTerminate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTerminate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTerminate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTerminate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTerminate = null;
			}
			if(this.__cbOnceOwnerUnbindTerminate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTerminate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTerminate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTerminate = null;
			}
			this.__cbOnTerminate = null;
			this.__cbOnceTerminate = null;
		}
	}
	,listensTerminate: function() {
		if(!(this.__cbOnTerminate != null && this.__cbOnTerminate.length > 0)) {
			if(this.__cbOnceTerminate != null) {
				return this.__cbOnceTerminate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,immediateCallbacks: null
	,immediateCallbacksCapacity: null
	,immediateCallbacksLen: null
	,postFlushImmediateCallbacks: null
	,postFlushImmediateCallbacksCapacity: null
	,postFlushImmediateCallbacksLen: null
	,loaders: null
	,_onceImmediateWithOwner: function(owner,handleImmediate) {
		this._onceImmediate(function() {
			if(owner == null || owner._lifecycleState >= 0) {
				handleImmediate();
			}
		});
	}
	,_onceImmediate: function(handleImmediate) {
		if(handleImmediate == null) {
			throw haxe_Exception.thrown("Immediate callback should not be null!");
		}
		if(this.immediateCallbacksLen < this.immediateCallbacksCapacity) {
			this.immediateCallbacks[this.immediateCallbacksLen] = handleImmediate;
			this.immediateCallbacksLen++;
		} else {
			this.immediateCallbacks[this.immediateCallbacksLen++] = handleImmediate;
			this.immediateCallbacksCapacity++;
		}
	}
	,_oncePostFlushImmediateWithOwner: function(owner,handlePostFlushImmediate,defer) {
		this._oncePostFlushImmediate(function() {
			if(owner == null || owner._lifecycleState >= 0) {
				handlePostFlushImmediate();
			}
		},defer);
	}
	,_oncePostFlushImmediate: function(handlePostFlushImmediate,defer) {
		var _gthis = this;
		if(!defer) {
			if(this.immediateCallbacksLen == 0) {
				handlePostFlushImmediate();
			} else if(this.postFlushImmediateCallbacksLen < this.postFlushImmediateCallbacksCapacity) {
				this.postFlushImmediateCallbacks[this.postFlushImmediateCallbacksLen] = handlePostFlushImmediate;
				this.postFlushImmediateCallbacksLen++;
			} else {
				this.postFlushImmediateCallbacks[this.postFlushImmediateCallbacksLen++] = handlePostFlushImmediate;
				this.postFlushImmediateCallbacksCapacity++;
			}
		} else {
			ceramic_App.app._onceImmediate(function() {
				var defer = false;
				if(defer == null) {
					defer = true;
				}
				_gthis._oncePostFlushImmediate(handlePostFlushImmediate,defer);
			});
		}
	}
	,flushImmediate: function() {
		var didFlush = false;
		while(this.immediateCallbacksLen > 0) {
			didFlush = true;
			var pool = ceramic_ArrayPool.pool(this.immediateCallbacksLen);
			var callbacks = pool.get();
			var len = this.immediateCallbacksLen;
			this.immediateCallbacksLen = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				callbacks.vector[i] = this.immediateCallbacks[i];
				this.immediateCallbacks[i] = null;
			}
			var _g2 = 0;
			var _g3 = len;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var cb = callbacks.vector[i1];
				cb();
			}
			pool.release(callbacks);
		}
		if(this.postFlushImmediateCallbacksLen > 0) {
			var pool = ceramic_ArrayPool.pool(this.postFlushImmediateCallbacksLen);
			var callbacks = pool.get();
			var len = this.postFlushImmediateCallbacksLen;
			this.postFlushImmediateCallbacksLen = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				callbacks.vector[i] = this.postFlushImmediateCallbacks[i];
				this.postFlushImmediateCallbacks[i] = null;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
		}
		return didFlush;
	}
	,_xUpdatesHandlersPool: null
	,_xUpdatesHandlers: null
	,_xUpdatesToCallNow: null
	,onceXUpdates: function(owner,numUpdates,callback) {
		var _this = this._xUpdatesHandlersPool;
		var handler = _this.availableItems.length > 0 ? _this.availableItems.pop() : null;
		if(handler == null) {
			handler = new ceramic_AppXUpdatesHandler();
		}
		handler.owner = owner;
		handler.numUpdates = numUpdates;
		handler.callback = callback;
		var didAdd = false;
		var _g = 0;
		var _g1 = this._xUpdatesHandlers.length;
		while(_g < _g1) {
			var i = _g++;
			var existing = this._xUpdatesHandlers[i];
			if(existing == null) {
				this._xUpdatesHandlers[i] = handler;
				didAdd = true;
				break;
			}
		}
		if(!didAdd) {
			this._xUpdatesHandlers.push(handler);
		}
	}
	,offXUpdates: function(callback) {
		var needsClean = false;
		var _g = 0;
		var _g1 = this._xUpdatesHandlers.length;
		while(_g < _g1) {
			var i = _g++;
			var handler = this._xUpdatesHandlers[i];
			if(handler.callback == callback) {
				handler.reset();
				this._xUpdatesHandlersPool.recycle(handler);
				this._xUpdatesHandlers[i] = null;
				needsClean = true;
			}
		}
		if(needsClean) {
			this.cleanXUpdatesNullValues();
		}
	}
	,tickOnceXUpdates: function() {
		var numToCall = 0;
		var needsClean = false;
		var _g = 0;
		var _g1 = this._xUpdatesHandlers.length;
		while(_g < _g1) {
			var i = _g++;
			var handler = this._xUpdatesHandlers[i];
			if(handler != null) {
				handler.numUpdates--;
				if(handler.numUpdates <= 0) {
					var owner = handler.owner;
					if(owner == null || owner._lifecycleState >= 0) {
						this._xUpdatesToCallNow[numToCall] = handler.callback;
						++numToCall;
					}
					this._xUpdatesHandlers[i] = null;
					needsClean = true;
				}
			}
		}
		if(numToCall > 0) {
			var _g = 0;
			var _g1 = numToCall;
			while(_g < _g1) {
				var i = _g++;
				var callback = this._xUpdatesToCallNow[i];
				this._xUpdatesToCallNow[i] = null;
				callback();
			}
		}
		if(needsClean) {
			this.cleanXUpdatesNullValues();
		}
	}
	,cleanXUpdatesNullValues: function() {
		var i = 0;
		var gap = 0;
		var len = this._xUpdatesHandlers.length;
		while(i < len) {
			do {
				var handler = this._xUpdatesHandlers[i];
				if(handler == null) {
					++i;
					++gap;
				} else {
					break;
				}
			} while(i < len);
			if(gap != 0 && i < len) {
				var key = i - gap;
				this._xUpdatesHandlers[key] = this._xUpdatesHandlers[i];
			}
			++i;
		}
		ceramic_Extensions.setArrayLength(this._xUpdatesHandlers,len - gap);
	}
	,inUpdate: null
	,get_computedFps: function() {
		return this._computeFps.fps;
	}
	,_computeFps: null
	,frame: null
	,delta: null
	,realDelta: null
	,backend: null
	,screen: null
	,audio: null
	,settings: null
	,systems: null
	,logger: null
	,visuals: null
	,pendingVisuals: null
	,destroyedVisuals: null
	,groups: null
	,input: null
	,renderTextures: null
	,assets: null
	,defaultTexturedShader: null
	,defaultWhiteTexture: null
	,defaultFont: null
	,projectDir: null
	,persistent: null
	,textInput: null
	,converters: null
	,timelines: null
	,lazyScenes: null
	,scenes: null
	,get_scenes: function() {
		if(this.lazyScenes) {
			this.lazyScenes = false;
			this.scenes = ceramic_SceneSystem.get_shared();
		}
		return this.scenes;
	}
	,set_scenes: function(scenes_) {
		return this.scenes = scenes_;
	}
	,hierarchyDirty: null
	,visualsContentDirty: null
	,beginUpdateCallbacks: null
	,disposedEntities: null
	,numBlockingDefaultScroll: null
	,quit: function() {
		ceramic_PlatformSpecific.quit();
	}
	,backendReady: function() {
		var _gthis = this;
		this.backend.onUpdate(this,$bind(this,this.updatePreReady));
		this.persistent = new ceramic_PersistentData("app");
		this.textInput = new ceramic_TextInput();
		this.bindSettings();
		this.screen.backendReady();
		if(ceramic_App.preInitCallbacks != null) {
			var _g = 0;
			var _g1 = [].concat(ceramic_App.preInitCallbacks);
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback();
			}
			ceramic_App.preInitCallbacks = null;
		}
		this.initFieldConverters();
		if(this.settings.collections != null) {
			this.initCollections(this.settings.collections(),this.settings.appInfo);
		}
		this.assets.add(this.settings.defaultShader);
		this.assets.add("shader:msdf");
		this.assets.add("shader:pixelArt");
		this.assets.onceComplete(this,function(success) {
			_gthis.assets.add(_gthis.settings.defaultFont);
			_gthis.assets.add("image:white");
			_gthis.assets.onceComplete(_gthis,function(success) {
				if(success) {
					_gthis.defaultFont = _gthis.assets.font(_gthis.settings.defaultFont);
					_gthis.defaultWhiteTexture = _gthis.assets.texture("image:white");
					_gthis.defaultTexturedShader = _gthis.assets.shader(_gthis.settings.defaultShader);
					_gthis.logger.success("Default assets loaded.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\App.hx", lineNumber : 834, className : "ceramic.App", methodName : "backendReady"});
					_gthis.assetsLoaded();
				} else {
					ceramic_App.app.logger.error("Failed to load default assets.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\App.hx", lineNumber : 837, className : "ceramic.App", methodName : "backendReady"});
				}
			});
			_gthis.emitDefaultAssetsLoad(_gthis.assets);
			_gthis.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\App.hx", lineNumber : 845, className : "ceramic.App", methodName : "backendReady"});
			_gthis.assets.immediate.flush();
			_gthis.flushImmediate();
		});
		this.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\App.hx", lineNumber : 851, className : "ceramic.App", methodName : "backendReady"});
		this.assets.immediate.flush();
		this.flushImmediate();
	}
	,bindSettings: function() {
		this.settings.onTargetFpsChange(this,function(targetFps,prevTargetFps) {
			ceramic_App.app.logger.info("Setting targetFps=" + targetFps,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\App.hx", lineNumber : 860, className : "ceramic.App", methodName : "bindSettings"});
			ceramic_App.app.backend.setTargetFps(targetFps);
		});
		ceramic_App.app.backend.setTargetFps(this.settings.get_targetFps());
	}
	,initFieldConverters: function() {
		var this1 = this.converters;
		var value = new ceramic_ConvertTexture();
		this1.h["ceramic.Texture"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertFont();
		this1.h["ceramic.BitmapFont"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertFragmentData();
		this1.h["ceramic.FragmentData"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["Map<String,String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["Map<String,Bool>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["ceramic.ReadOnlyMap<String,String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertMap();
		this1.h["ceramic.ReadOnlyMap<String,Bool>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["Array<Float>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["Array<Int>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["Array<String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["ceramic.ReadOnlyArray<Float>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["ceramic.ReadOnlyArray<Int>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertArray();
		this1.h["ceramic.ReadOnlyArray<String>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertComponentMap();
		this1.h["Map<String,ceramic.Component>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertComponentMap();
		this1.h["ceramic.ReadOnlyMap<String,ceramic.Component>"] = value;
		var this1 = this.converters;
		var value = new ceramic_ConvertIntBoolMap();
		this1.h["ceramic.IntBoolMap"] = value;
	}
	,initCollections: function(collections,info) {
		var _gthis = this;
		if(info == null) {
			info = this.info;
		}
		var addedAssets_h = Object.create(null);
		var numAdded = 0;
		var _g = 0;
		var _g1 = Reflect.fields(info.collections);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(Reflect.field(info.collections,key));
			while(_g2 < _g3.length) {
				var collectionName = _g3[_g2];
				++_g2;
				var collectionInfo = Reflect.field(Reflect.field(info.collections,key),collectionName);
				if(typeof(collectionInfo) != "string") {
					var dataName = collectionInfo.data;
					if(dataName != null) {
						if(!Object.prototype.hasOwnProperty.call(addedAssets_h,dataName)) {
							addedAssets_h[dataName] = true;
							this.assets.addDatabase(dataName);
							++numAdded;
						}
					}
				}
			}
		}
		if(numAdded > 0) {
			this.assets.onceComplete(this,function(success) {
				var _g = 0;
				var _g1 = Reflect.fields(info.collections);
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					var _g2 = 0;
					var _g3 = Reflect.fields(Reflect.field(info.collections,key));
					while(_g2 < _g3.length) {
						var collectionName = _g3[_g2];
						++_g2;
						var collectionInfo = Reflect.field(Reflect.field(info.collections,key),collectionName);
						if(typeof(collectionInfo) != "string") {
							var dataName = collectionInfo.data;
							if(dataName != null) {
								var data = _gthis.assets.database(dataName);
								var collection = Reflect.field(collections,collectionName);
								var name = collectionInfo.type;
								var entryClass = $hxClasses[name];
								var _g4 = 0;
								while(_g4 < data.length) {
									var item = data[_g4];
									++_g4;
									var instance = Type.createInstance(entryClass,[null,null]);
									instance.setRawData(item);
									collection.push(instance);
								}
								collection.synchronize();
							}
						}
					}
				}
			});
		}
	}
	,assetsLoaded: function() {
		this.runNextLoader();
	}
	,runNextLoader: function() {
		if(this.loaders.length > 0) {
			var loader = this.loaders.shift();
			loader($bind(this,this.runNextLoader));
		} else {
			this.loaders = null;
			this.runReady();
		}
	}
	,runReady: function() {
		var _gthis = this;
		ceramic_PlatformSpecific.postAppInit();
		this.emitReady();
		this.screen.resize();
		this.backend.offUpdate($bind(this,this.updatePreReady));
		this.backend.onUpdate(this,$bind(this,this.update));
		this.backend.onRender(this,$bind(this,this.render));
		this.backend.input.onKeyDown(this,function(key) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitKeyDown(key);
			});
		});
		this.backend.input.onKeyUp(this,function(key) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitKeyUp(key);
			});
		});
		this.backend.input.onGamepadEnable(this,function(gamepadId,name) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadEnable(gamepadId,name);
			});
		});
		this.backend.input.onGamepadDisable(this,function(gamepadId) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadDisable(gamepadId);
			});
		});
		this.backend.input.onGamepadDown(this,function(gamepadId,buttonId) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadDown(gamepadId,buttonId);
			});
		});
		this.backend.input.onGamepadUp(this,function(gamepadId,buttonId) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadUp(gamepadId,buttonId);
			});
		});
		this.backend.input.onGamepadGyro(this,function(gamepadId,dx,dy,dz) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadGyro(gamepadId,dx,dy,dz);
			});
		});
		this.backend.input.onGamepadAxis(this,function(gamepadId,axisId,value) {
			_gthis.beginUpdateCallbacks.push(function() {
				_gthis.input.emitGamepadAxis(gamepadId,axisId,value);
			});
		});
	}
	,updatePreReady: function(delta) {
		ceramic_Assets.flushAllInstancesImmediate();
		this.flushImmediate();
	}
	,update: function(realDelta) {
		if(++this.frame > 999999999) {
			this.frame -= 999999999;
		}
		var delta = realDelta;
		if(delta > this.settings.get_maxDelta()) {
			delta = this.settings.get_maxDelta();
		}
		if(this.settings.get_overrideDelta() >= 0) {
			delta = this.settings.get_overrideDelta();
		}
		this._computeFps.addFrame(delta);
		this.delta = delta;
		this.realDelta = realDelta;
		ceramic_Timer.update(delta,realDelta);
		ceramic_Runner.tick();
		this.screen.updatePointerOverState(delta);
		this.inUpdate = true;
		this.screen.resetDeltas();
		this.input.resetDeltas();
		if(this.beginUpdateCallbacks.length > 0) {
			var callbacks = this.beginUpdateCallbacks;
			this.beginUpdateCallbacks = [];
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				callback();
			}
		}
		this.emitPreUpdate(delta);
		this.systems.earlyUpdate(delta);
		ceramic_Assets.flushAllInstancesImmediate();
		this.flushImmediate();
		if(delta > 0) {
			ceramic_Tween.tick(delta);
			this.flushImmediate();
		}
		this.emitUpdate(delta);
		this.tickOnceXUpdates();
		this.flushImmediate();
		this.systems.lateUpdate(delta);
		this.emitPostUpdate(delta);
		this.flushImmediate();
		while(this.disposedEntities.length > 0) {
			var toDestroy = this.disposedEntities.shift();
			toDestroy.destroy();
		}
		this.syncPendingVisuals();
		this.updateVisuals(this.visuals);
		this.computeHierarchy();
		this.computeRenderTexturesPriority(this.renderTextures);
		this.syncDestroyedVisuals();
		this.sortVisuals(this.visuals);
		this.inUpdate = false;
	}
	,render: function() {
		this.emitBeginDraw();
		this.backend.draw.draw(this.visuals);
		this.emitFinishDraw();
	}
	,addVisual: function(visual) {
		this.pendingVisuals.push(visual);
	}
	,removeVisual: function(visual) {
		this.destroyedVisuals.push(visual);
	}
	,syncPendingVisuals: function() {
		if(this.pendingVisuals.length > 0) {
			while(this.pendingVisuals.length > 0) this.visuals.push(this.pendingVisuals.pop());
			this.hierarchyDirty = true;
			return true;
		}
		return false;
	}
	,syncDestroyedVisuals: function() {
		if(this.destroyedVisuals.length > 0) {
			var i = 0;
			var gap = 0;
			var len = this.visuals.length;
			while(i < len) {
				do {
					var visual = this.visuals[i];
					if(visual._lifecycleState < 0) {
						++i;
						++gap;
					} else {
						break;
					}
				} while(i < len);
				if(gap != 0 && i < len) {
					var key = i - gap;
					this.visuals[key] = this.visuals[i];
				}
				++i;
			}
			ceramic_Extensions.setArrayLength(this.destroyedVisuals,0);
			ceramic_Extensions.setArrayLength(this.visuals,len - gap);
			this.hierarchyDirty = true;
		}
	}
	,updateVisuals: function(visuals) {
		var numIterations = 0;
		var didFlush = false;
		var didSyncVisuals = false;
		do {
			this.visualsContentDirty = false;
			this.screen.matrix.computeChanged();
			if(this.screen.matrix.changed) {
				this.screen.matrix.emitChange();
			}
			var _g = 0;
			var _g1 = visuals.length;
			while(_g < _g1) {
				var i = _g++;
				var visual = visuals[i];
				if(visual._lifecycleState >= 0) {
					if(visual.touchableDirty) {
						visual.computeTouchable();
					}
					if(visual.contentDirty) {
						if(visual.visibilityDirty) {
							visual.computeVisibility();
						}
						if(visual.computedVisible) {
							visual.computeContent();
						}
					}
				}
			}
			var _g2 = 0;
			var _g3 = visuals.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var visual1 = visuals[i1];
				if(visual1._lifecycleState >= 0 && visual1.transform != null) {
					visual1.transform.computeChanged();
					if(visual1.transform.changed) {
						visual1.transform.emitChange();
					}
				}
			}
			if(numIterations++ > 9999) {
				if(didFlush && this.visualsContentDirty) {
					throw haxe_Exception.thrown("Failed to update visuals because flushImmediate() is being called continuously and visuals content stays dirty.");
				} else if(didFlush) {
					throw haxe_Exception.thrown("Failed to update visuals because flushImmediate() is being called continuously.");
				} else {
					var _g4 = 0;
					var _g5 = visuals.length;
					while(_g4 < _g5) {
						var i2 = _g4++;
						var visual2 = visuals[i2];
						if(visual2._lifecycleState >= 0 && visual2.contentDirty) {
							throw haxe_Exception.thrown("Failed to update visuals because visuals content stays dirty. (" + Std.string(visual2) + ")");
						}
					}
				}
			}
			didFlush = this.flushImmediate();
			didSyncVisuals = this.syncPendingVisuals();
		} while(didFlush || this.visualsContentDirty || didSyncVisuals);
		var _g = 0;
		var _g1 = this.renderTextures.length;
		while(_g < _g1) {
			var i = _g++;
			var renderTexture = this.renderTextures[i];
			if(renderTexture.dependingTextures != null) {
				renderTexture.dependingTextures.clear();
			}
		}
		var _g = 0;
		var _g1 = visuals.length;
		while(_g < _g1) {
			var i = _g++;
			var visual = visuals[i];
			if(visual._lifecycleState >= 0) {
				if(visual.renderTargetDirty) {
					visual.computeRenderTarget();
				}
				if(visual.matrixDirty) {
					visual.computeMatrix();
				}
				if(visual.visibilityDirty) {
					visual.computeVisibility();
				}
				if(visual.computedVisible) {
					if(visual.clipDirty) {
						visual.computeClip();
					}
					if(visual.computedRenderTarget != null) {
						if(visual.asQuad != null) {
							if(visual.asQuad._texture != null) {
								var _this = visual.computedRenderTarget;
								var texture = visual.asQuad._texture;
								if(_this.dependingTextures == null) {
									_this.dependingTextures = new ceramic_IntIntMap();
								}
								var value = _this.dependingTextures.intMap.h[texture.index | 0];
								var prevValue = value != null ? value : 0;
								_this.dependingTextures.set(texture.index,prevValue + 1);
							}
						} else if(visual.asMesh != null) {
							if(visual.asMesh.texture != null) {
								var _this1 = visual.computedRenderTarget;
								var texture1 = visual.asMesh.texture;
								if(_this1.dependingTextures == null) {
									_this1.dependingTextures = new ceramic_IntIntMap();
								}
								var value1 = _this1.dependingTextures.intMap.h[texture1.index | 0];
								var prevValue1 = value1 != null ? value1 : 0;
								_this1.dependingTextures.set(texture1.index,prevValue1 + 1);
							}
						}
					}
				}
			}
		}
	}
	,computeHierarchy: function() {
		if(this.hierarchyDirty) {
			var _g = 0;
			var _g1 = this.visuals.length;
			while(_g < _g1) {
				var i = _g++;
				var visual = this.visuals[i];
				if(visual._lifecycleState >= 0) {
					if(visual.parent == null) {
						visual.computedDepth = visual.depth * 1000;
						if(visual.children != null) {
							ceramic_Visual._computeChildrenDepth0(visual);
						}
					}
				}
			}
			this.hierarchyDirty = false;
		}
	}
	,computeRenderTexturesPriority: function(renderTextures) {
		if(renderTextures.length == 0) {
			return;
		}
		var len = renderTextures.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var renderTexture = renderTextures[i];
			renderTexture.priority = 0;
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var a = renderTextures[i];
			var _g2 = 0;
			var _g3 = len;
			while(_g2 < _g3) {
				var j = _g2++;
				var b = renderTextures[j];
				var tmp;
				if(a.dependingTextures != null) {
					var value = a.dependingTextures.intMap.h[b.index | 0];
					tmp = (value != null ? value : 0) > 0;
				} else {
					tmp = false;
				}
				if(tmp && b.priority <= a.priority) {
					b.priority = a.priority + 1;
				}
			}
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var a = renderTextures[i];
			var _g2 = 0;
			var _g3 = len;
			while(_g2 < _g3) {
				var j = _g2++;
				var b = renderTextures[j];
				var tmp;
				if(a.dependingTextures != null) {
					var value = a.dependingTextures.intMap.h[b.index | 0];
					tmp = (value != null ? value : 0) > 0;
				} else {
					tmp = false;
				}
				if(tmp && b.priority <= a.priority) {
					b.priority = a.priority + 1;
				}
			}
		}
	}
	,sortVisuals: function(visuals) {
		this.emitBeginSortVisuals();
		ceramic_SortVisuals.rec(visuals,0,visuals.length);
		this.emitFinishSortVisuals();
	}
	,group: function(id,createIfNeeded) {
		if(createIfNeeded == null) {
			createIfNeeded = true;
		}
		var _g = 0;
		var _g1 = this.groups.length;
		while(_g < _g1) {
			var i = _g++;
			var group = this.groups[i];
			if(group.id == id) {
				return group;
			}
		}
		if(createIfNeeded) {
			return new ceramic_Group(id);
		}
		return null;
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offReady();
		this.offUpdate();
		this.offPreUpdate();
		this.offPostUpdate();
		this.offDefaultAssetsLoad();
		this.offCriticalError();
		this.offBeginEnterBackground();
		this.offFinishEnterBackground();
		this.offBeginEnterForeground();
		this.offFinishEnterForeground();
		this.offBeginSortVisuals();
		this.offFinishSortVisuals();
		this.offBeginDraw();
		this.offFinishDraw();
		this.offLowMemory();
		this.offTerminate();
	}
	,info: null
	,__class__: ceramic_App
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_scenes:"set_scenes",get_scenes:"get_scenes",get_computedFps:"get_computedFps"})
});
var ceramic_AppXUpdatesHandler = function() {
	this.callback = null;
	this.numUpdates = -1;
	this.owner = null;
};
$hxClasses["ceramic.AppXUpdatesHandler"] = ceramic_AppXUpdatesHandler;
ceramic_AppXUpdatesHandler.__name__ = "ceramic.AppXUpdatesHandler";
ceramic_AppXUpdatesHandler.prototype = {
	owner: null
	,numUpdates: null
	,callback: null
	,reset: function() {
		this.owner = null;
		this.numUpdates = -1;
		this.callback = null;
	}
	,__class__: ceramic_AppXUpdatesHandler
};
var ceramic_ArrayPool = function(arrayLengths) {
	this.nextFree = 0;
	this.arrays = null;
	this.arrayLengths = arrayLengths;
};
$hxClasses["ceramic.ArrayPool"] = ceramic_ArrayPool;
ceramic_ArrayPool.__name__ = "ceramic.ArrayPool";
ceramic_ArrayPool.pool = function(size) {
	if(size <= 10) {
		return ceramic_ArrayPool.dynPool10;
	} else if(size <= 100) {
		return ceramic_ArrayPool.dynPool100;
	} else if(size <= 1000) {
		return ceramic_ArrayPool.dynPool1000;
	} else if(size <= 10000) {
		return ceramic_ArrayPool.dynPool10000;
	} else if(size <= 100000) {
		return ceramic_ArrayPool.dynPool100000;
	} else {
		if(!ceramic_ArrayPool.didNotifyLargePool) {
			ceramic_ArrayPool.didNotifyLargePool = true;
			ceramic_Timer.schedule(null,0.5,function() {
				ceramic_ArrayPool.didNotifyLargePool = false;
			},-1);
			ceramic_App.app.logger.warning("You should avoid asking a pool for arrays with more than 100000 elements (asked: " + size + ") because it needs allocating a temporary one-time pool each time for that.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ArrayPool.hx", lineNumber : 45, className : "ceramic.ArrayPool", methodName : "pool"});
		}
		return new ceramic_ArrayPool(size);
	}
};
ceramic_ArrayPool.prototype = {
	arrays: null
	,nextFree: null
	,arrayLengths: null
	,get: function() {
		if(this.arrays == null) {
			this.arrays = new ceramic_ReusableArray(ceramic_ArrayPool.ALLOC_STEP);
		} else if(this.nextFree >= this.arrays.length) {
			var fh = this.arrays;
			fh.set_length(fh.length + ceramic_ArrayPool.ALLOC_STEP);
		}
		var result = this.arrays.vector[this.nextFree];
		if(result == null) {
			result = new ceramic_ReusableArray(this.arrayLengths);
			this.arrays.vector[this.nextFree] = result;
		}
		result._poolIndex = this.nextFree;
		while(true) {
			this.nextFree++;
			if(this.nextFree == this.arrays.length) {
				break;
			}
			var item = this.arrays.vector[this.nextFree];
			if(item == null) {
				break;
			}
			if(item._poolIndex == -1) {
				break;
			}
		}
		return result;
	}
	,release: function(array) {
		var poolIndex = array._poolIndex;
		array._poolIndex = -1;
		if(this.nextFree > poolIndex) {
			this.nextFree = poolIndex;
		}
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			array.vector[i] = null;
		}
	}
	,__class__: ceramic_ArrayPool
};
var ceramic_Assert = function() { };
$hxClasses["ceramic.Assert"] = ceramic_Assert;
ceramic_Assert.__name__ = "ceramic.Assert";
var ceramic_Asset = function(kind,name,options) {
	this.customExtensions = null;
	this.hotReload = false;
	this.handleTexturesDensityChange = false;
	this.unobservedStatus = ceramic_AssetStatus.NONE;
	this.statusAutoruns = null;
	this.refCount = 0;
	this.assets = null;
	this.density = 1.0;
	this.observedDirty = false;
	ceramic_Entity.call(this);
	this.kind = kind;
	this.options = options != null ? options : { };
	this.set_name(name);
	this.computePath();
};
$hxClasses["ceramic.Asset"] = ceramic_Asset;
ceramic_Asset.__name__ = "ceramic.Asset";
ceramic_Asset.__interfaces__ = [tracker_Observable];
ceramic_Asset.__super__ = ceramic_Entity;
ceramic_Asset.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,__cbOnComplete: null
	,__cbOnceComplete: null
	,__cbOnOwnerUnbindComplete: null
	,__cbOnceOwnerUnbindComplete: null
	,emitComplete: function(success) {
		if(success && this.owner != null) {
			this.owner.emitUpdate(this);
		}
		var len = 0;
		if(this.__cbOnComplete != null) {
			len += this.__cbOnComplete.length;
		}
		if(this.__cbOnceComplete != null) {
			len += this.__cbOnceComplete.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnComplete[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceComplete != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceComplete[ii];
						this.__cbOnceComplete[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindComplete[ii];
						this.__cbOnceOwnerUnbindComplete[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindComplete[ii]);
						newCbOnceArray.push(this.__cbOnceComplete[ii]);
					}
				}
				this.__cbOnceOwnerUnbindComplete = newCbOnceOwnerUnbindArray;
				this.__cbOnceComplete = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(success);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnComplete == null) {
			this.__cbOnComplete = [];
		}
		this.__cbOnComplete.push(handleSuccess);
	}
	,onceComplete: function(owner,handleSuccess) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSuccess != null) {
					_gthis.offComplete(handleSuccess);
					handleSuccess = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSuccess = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnceComplete == null) {
			this.__cbOnceComplete = [];
		}
		this.__cbOnceComplete.push(handleSuccess);
	}
	,offComplete: function(handleSuccess) {
		if(handleSuccess != null) {
			var index;
			var unbind;
			if(this.__cbOnComplete != null) {
				index = this.__cbOnComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnComplete.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComplete.splice(index,1);
				}
			}
			if(this.__cbOnceComplete != null) {
				index = this.__cbOnceComplete.indexOf(handleSuccess);
				if(index != -1) {
					this.__cbOnceComplete.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComplete.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComplete = null;
			}
			if(this.__cbOnceOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComplete = null;
			}
			this.__cbOnComplete = null;
			this.__cbOnceComplete = null;
		}
	}
	,listensComplete: function() {
		if(!(this.__cbOnComplete != null && this.__cbOnComplete.length > 0)) {
			if(this.__cbOnceComplete != null) {
				return this.__cbOnceComplete.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,kind: null
	,name: null
	,path: null
	,allPaths: null
	,density: null
	,owner: null
	,runtimeAssets: null
	,options: null
	,assets: null
	,refCount: null
	,statusAutoruns: null
	,get_status: function() {
		var value = this.unobservedStatus;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.statusAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.statusAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_status: function(status) {
		var prevValue = this.unobservedStatus;
		this.unobservedStatus = status;
		if(prevValue == status) {
			return status;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitStatusChange(status,prevValue);
		var fieldAutoruns = this.statusAutoruns;
		if(fieldAutoruns != null) {
			this.statusAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return status;
	}
	,invalidateStatus: function() {
		var value = this.unobservedStatus;
		this.emitStatusChange(value,value);
		var fieldAutoruns = this.statusAutoruns;
		if(fieldAutoruns != null) {
			this.statusAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedStatus: null
	,__cbOnStatusChange: null
	,__cbOnceStatusChange: null
	,__cbOnOwnerUnbindStatusChange: null
	,__cbOnceOwnerUnbindStatusChange: null
	,emitStatusChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnStatusChange != null) {
			len += this.__cbOnStatusChange.length;
		}
		if(this.__cbOnceStatusChange != null) {
			len += this.__cbOnceStatusChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnStatusChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnStatusChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceStatusChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceStatusChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceStatusChange[ii];
						this.__cbOnceStatusChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindStatusChange[ii];
						this.__cbOnceOwnerUnbindStatusChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindStatusChange[ii]);
						newCbOnceArray.push(this.__cbOnceStatusChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindStatusChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceStatusChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStatusChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "statusChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStatusChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStatusChange == null) {
				this.__cbOnOwnerUnbindStatusChange = [];
			}
			this.__cbOnOwnerUnbindStatusChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStatusChange == null) {
				this.__cbOnOwnerUnbindStatusChange = [];
			}
			this.__cbOnOwnerUnbindStatusChange.push(null);
		}
		if(this.__cbOnStatusChange == null) {
			this.__cbOnStatusChange = [];
		}
		this.__cbOnStatusChange.push(handleCurrentPrevious);
	}
	,onceStatusChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "statusChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStatusChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStatusChange == null) {
				this.__cbOnceOwnerUnbindStatusChange = [];
			}
			this.__cbOnceOwnerUnbindStatusChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStatusChange == null) {
				this.__cbOnceOwnerUnbindStatusChange = [];
			}
			this.__cbOnceOwnerUnbindStatusChange.push(null);
		}
		if(this.__cbOnceStatusChange == null) {
			this.__cbOnceStatusChange = [];
		}
		this.__cbOnceStatusChange.push(handleCurrentPrevious);
	}
	,offStatusChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnStatusChange != null) {
				index = this.__cbOnStatusChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnStatusChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStatusChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStatusChange.splice(index,1);
				}
			}
			if(this.__cbOnceStatusChange != null) {
				index = this.__cbOnceStatusChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceStatusChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStatusChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStatusChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStatusChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStatusChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStatusChange = null;
			}
			if(this.__cbOnceOwnerUnbindStatusChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStatusChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStatusChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStatusChange = null;
			}
			this.__cbOnStatusChange = null;
			this.__cbOnceStatusChange = null;
		}
	}
	,listensStatusChange: function() {
		if(!(this.__cbOnStatusChange != null && this.__cbOnStatusChange.length > 0)) {
			if(this.__cbOnceStatusChange != null) {
				return this.__cbOnceStatusChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,handleTexturesDensityChange: null
	,hotReload: null
	,customExtensions: null
	,load: function() {
		this.set_status(ceramic_AssetStatus.BROKEN);
		ceramic_App.app.logger.error("This asset as no load implementation.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Asset.hx", lineNumber : 97, className : "ceramic.Asset", methodName : "load"});
		this.emitComplete(false);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.owner != null) {
			this.owner.removeAsset(this);
			this.owner = null;
		}
		if(this.assets != null) {
			this.assets.destroy();
			this.assets = null;
		}
	}
	,computePath: function(extensions,dir,runtimeAssets) {
		if(runtimeAssets == null && this.runtimeAssets != null) {
			runtimeAssets = this.runtimeAssets;
		}
		if(extensions == null) {
			switch(this.kind) {
			case "atlas":
				extensions = ["atlas"];
				break;
			case "database":
				extensions = ["csv"];
				break;
			case "font":
				extensions = ["fnt"];
				break;
			case "fragments":
				extensions = ["fragments"];
				break;
			case "image":
				extensions = ["png","jpg","jpeg"];
				break;
			case "shader":
				extensions = ["frag","vert"];
				break;
			case "sound":
				var _this = ceramic_App.app.backend.info;
				if(backend_Info._soundExtensions != null) {
					extensions = [].concat(backend_Info._soundExtensions);
				} else {
					backend_Info._soundExtensions = [];
					var audioTest = new Audio();
					var ua = $global.navigator != null ? $global.navigator.userAgent : "";
					var checkOpera = backend_Info.RE_OPERA.match(ua);
					var isOldOpera = checkOpera && parseInt(backend_Info.RE_OPERA.matched(0).split("/")[1],10) < 33;
					var checkSafari = ua.indexOf("Safari") != -1 && ua.indexOf("Chrome") == -1;
					var safariVersion = backend_Info.RE_SAFARI_VERSION.match(ua);
					var isOldSafari = checkSafari && safariVersion && parseInt(backend_Info.RE_SAFARI_VERSION.matched(1),10) < 15;
					var oggTest = audioTest.canPlayType("audio/ogg; codecs=\"vorbis\"");
					var canPlayOgg = oggTest != null && oggTest != "no" && oggTest != "";
					if(canPlayOgg) {
						backend_Info._soundExtensions.push("ogg");
					}
					var mpegTest = audioTest.canPlayType("audio/mpeg;");
					var mp3Test = audioTest.canPlayType("audio/mp3;");
					var canPlayMp3 = mpegTest != null && mpegTest != "no" && mpegTest != "" || mp3Test != null && mp3Test != "no" && mp3Test != "";
					if(!isOldOpera && canPlayMp3) {
						backend_Info._soundExtensions.push("mp3");
					}
					var xFlacTest = audioTest.canPlayType("audio/x-flac;");
					var flacTest = audioTest.canPlayType("audio/flac;");
					var canPlayFlac = xFlacTest != null && xFlacTest != "no" && xFlacTest != "" || flacTest != null && flacTest != "no" && flacTest != "";
					if(canPlayFlac) {
						backend_Info._soundExtensions.push("flac");
					}
					var wavCodecTest = audioTest.canPlayType("audio/wav; codecs=\"1\"");
					var wavTest = audioTest.canPlayType("audio/wav;");
					var canPlayWav = wavCodecTest != null && wavCodecTest != "no" && wavCodecTest != "" || wavTest != null && wavTest != "no" && wavTest != "";
					if(canPlayWav) {
						backend_Info._soundExtensions.push("wav");
					}
					extensions = [].concat(backend_Info._soundExtensions);
				}
				break;
			case "text":
				extensions = ["txt","json","fnt","atlas"];
				break;
			default:
				extensions = null;
			}
		}
		if(extensions == null || dir == null) {
			if(Object.prototype.hasOwnProperty.call(ceramic_Assets.customAssetKinds.h,this.kind)) {
				var kindInfo = ceramic_Assets.customAssetKinds.h[this.kind];
				if(extensions == null) {
					extensions = kindInfo.extensions;
				}
				if(dir == null) {
					dir = kindInfo.dir;
				}
			}
		}
		if(extensions == null) {
			extensions = [];
		}
		if(this.customExtensions != null) {
			extensions = extensions.concat(this.customExtensions);
		}
		if(dir == null) {
			dir = false;
		}
		var targetDensity = ceramic_App.app.screen.get_texturesDensity();
		var path = null;
		var allPaths = [];
		var bestPathInfo = null;
		var byName = dir ? runtimeAssets != null ? runtimeAssets.getLists().allDirsByName : ceramic_Assets.allDirsByName : runtimeAssets != null ? runtimeAssets.getLists().allByName : ceramic_Assets.allByName;
		var name = this.name;
		if(path == null && name != null && ceramic_Path.isAbsolute(name)) {
			path = name;
		}
		if(extensions.length > 0) {
			var _g = 0;
			while(_g < extensions.length) {
				var ext = extensions[_g];
				++_g;
				if(StringTools.endsWith(name,"." + ext)) {
					name = HxOverrides.substr(name,0,name.length - ext.length - 1);
					break;
				}
			}
			var resolvedPath = false;
			if(Object.prototype.hasOwnProperty.call(byName.h,name)) {
				var list = byName.h[name];
				var _g = 0;
				while(_g < extensions.length) {
					var ext = extensions[_g];
					++_g;
					var bestDensity = 1.0;
					var bestDensityDiff = 99999999999.0;
					var _g1 = 0;
					while(_g1 < list.length) {
						var item = list[_g1];
						++_g1;
						var pathInfo = ceramic_Assets.decodePath(item);
						if(pathInfo.extension == ext) {
							if(!resolvedPath) {
								var diff = Math.abs(targetDensity - pathInfo.density);
								if(diff < bestDensityDiff) {
									bestDensityDiff = diff;
									bestDensity = pathInfo.density;
									path = pathInfo.path;
									bestPathInfo = pathInfo;
								}
							}
							allPaths.push(pathInfo.path);
						}
					}
					if(path != null) {
						resolvedPath = true;
					}
				}
			}
		}
		if(path == null) {
			path = name;
		}
		this.allPaths = allPaths;
		this.set_path(path);
		if(bestPathInfo != null && bestPathInfo.flags != null) {
			var h = bestPathInfo.flags.h;
			var flag_h = h;
			var flag_keys = Object.keys(h);
			var flag_length = flag_keys.length;
			var flag_current = 0;
			while(flag_current < flag_length) {
				var flag = flag_keys[flag_current++];
				if(!Object.prototype.hasOwnProperty.call(this.options,flag)) {
					this.options[flag] = bestPathInfo.flags.h[flag];
				}
			}
		}
	}
	,set_path: function(path) {
		if(this.path == path) {
			return path;
		}
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.set_status(ceramic_AssetStatus.NONE);
		}
		this.path = path;
		if(path == null) {
			this.density = 1.0;
		} else {
			this.density = ceramic_Assets.decodePath(path).density;
		}
		return path;
	}
	,set_name: function(name) {
		if(this.name == name) {
			return name;
		}
		this.name = name;
		this.id = "asset:" + this.kind + ":" + name;
		return name;
	}
	,set_runtimeAssets: function(runtimeAssets) {
		if(this.runtimeAssets == runtimeAssets) {
			return runtimeAssets;
		}
		this.runtimeAssets = runtimeAssets;
		this.computePath();
		return runtimeAssets;
	}
	,set_handleTexturesDensityChange: function(value) {
		if(this.handleTexturesDensityChange == value) {
			return value;
		}
		this.handleTexturesDensityChange = value;
		if(value) {
			ceramic_App.app.screen.onTexturesDensityChange(this,$bind(this,this.texturesDensityDidChange));
		} else {
			ceramic_App.app.screen.offTexturesDensityChange($bind(this,this.texturesDensityDidChange));
		}
		return value;
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
	}
	,set_hotReload: function(value) {
		if(this.hotReload == value) {
			return value;
		}
		this.hotReload = value;
		if(value) {
			this.owner.onAssetFilesChange(this,$bind(this,this.assetFilesDidChange));
		} else {
			this.owner.offAssetFilesChange($bind(this,this.assetFilesDidChange));
		}
		return value;
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
	}
	,toString: function() {
		var className = this.className();
		if(this.path != null && StringTools.trim(this.path) != "") {
			return "" + className + "(" + this.name + " " + this.path + ")";
		} else {
			return "" + className + "(" + this.name + ")";
		}
	}
	,willEmitComplete: function(success) {
		if(success && this.owner != null) {
			this.owner.emitUpdate(this);
		}
	}
	,retain: function() {
		this.refCount++;
	}
	,release: function() {
		if(this.refCount == 0) {
			ceramic_App.app.logger.warning("Called release() on asset " + Std.string(this) + (" when its refCount is already 0 (destroyed=" + Std.string(this._lifecycleState < 0) + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Asset.hx", lineNumber : 374, className : "ceramic.Asset", methodName : "release"});
		} else {
			this.refCount--;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offStatusChange();
		this.offComplete();
	}
	,__class__: ceramic_Asset
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_hotReload:"set_hotReload",set_handleTexturesDensityChange:"set_handleTexturesDensityChange",set_status:"set_status",get_status:"get_status",set_runtimeAssets:"set_runtimeAssets",set_path:"set_path",set_name:"set_name"})
});
var ceramic_AssetId = {};
ceramic_AssetId._new = function(value) {
	return value;
};
var ceramic_AssetPathInfo = function(path) {
	this.path = path;
	var dotIndex = path.lastIndexOf(".");
	this.extension = HxOverrides.substr(path,dotIndex + 1,null).toLowerCase();
	var truncatedName = HxOverrides.substr(path,0,dotIndex);
	var baseAtIndex = truncatedName.lastIndexOf("@");
	this.density = 1;
	if(baseAtIndex == -1) {
		baseAtIndex = dotIndex;
	} else {
		var afterAtParts = HxOverrides.substr(truncatedName,baseAtIndex + 1,null);
		var _g = 0;
		var _g1 = afterAtParts.split("+");
		while(_g < _g1.length) {
			var afterAt = _g1[_g];
			++_g;
			var isFlag = true;
			if(StringTools.endsWith(afterAt,"x")) {
				var flt = parseFloat(HxOverrides.substr(afterAt,0,afterAt.length - 1));
				if(!isNaN(flt)) {
					this.density = flt;
					isFlag = false;
				}
			}
			if(isFlag) {
				if(this.flags == null) {
					this.flags = new haxe_ds_StringMap();
				}
				var equalIndex = afterAt.indexOf("=");
				if(equalIndex == -1) {
					this.flags.h[afterAt] = true;
				} else {
					var key = HxOverrides.substr(afterAt,0,equalIndex);
					var val = HxOverrides.substr(afterAt,equalIndex + 1,null);
					this.flags.h[key] = val;
				}
			}
		}
	}
	this.name = HxOverrides.substr(path,0,Math.min(baseAtIndex,dotIndex));
};
$hxClasses["ceramic.AssetPathInfo"] = ceramic_AssetPathInfo;
ceramic_AssetPathInfo.__name__ = "ceramic.AssetPathInfo";
ceramic_AssetPathInfo.prototype = {
	density: null
	,extension: null
	,name: null
	,path: null
	,flags: null
	,toString: function() {
		return "" + Std.string({ extension : this.extension, name : this.name, path : this.path, density : this.density});
	}
	,__class__: ceramic_AssetPathInfo
};
var ceramic_AssetStatus = $hxEnums["ceramic.AssetStatus"] = { __ename__:"ceramic.AssetStatus",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"ceramic.AssetStatus",toString:$estr}
	,LOADING: {_hx_name:"LOADING",_hx_index:1,__enum__:"ceramic.AssetStatus",toString:$estr}
	,READY: {_hx_name:"READY",_hx_index:2,__enum__:"ceramic.AssetStatus",toString:$estr}
	,BROKEN: {_hx_name:"BROKEN",_hx_index:3,__enum__:"ceramic.AssetStatus",toString:$estr}
};
ceramic_AssetStatus.__constructs__ = [ceramic_AssetStatus.NONE,ceramic_AssetStatus.LOADING,ceramic_AssetStatus.READY,ceramic_AssetStatus.BROKEN];
var ceramic_AtlasAsset = function(name,options) {
	this.parseAtlas = null;
	this.unobservedText = null;
	this.textAutoruns = null;
	this.unobservedAtlas = null;
	this.atlasAutoruns = null;
	ceramic_Asset.call(this,"atlas",name,options);
	this.set_handleTexturesDensityChange(true);
	this.assets = new ceramic_Assets();
};
$hxClasses["ceramic.AtlasAsset"] = ceramic_AtlasAsset;
ceramic_AtlasAsset.__name__ = "ceramic.AtlasAsset";
ceramic_AtlasAsset.__super__ = ceramic_Asset;
ceramic_AtlasAsset.prototype = $extend(ceramic_Asset.prototype,{
	__cbOnReplaceAtlas: null
	,__cbOnceReplaceAtlas: null
	,__cbOnOwnerUnbindReplaceAtlas: null
	,__cbOnceOwnerUnbindReplaceAtlas: null
	,emitReplaceAtlas: function(newAtlas,prevAtlas) {
		var len = 0;
		if(this.__cbOnReplaceAtlas != null) {
			len += this.__cbOnReplaceAtlas.length;
		}
		if(this.__cbOnceReplaceAtlas != null) {
			len += this.__cbOnceReplaceAtlas.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceAtlas != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceAtlas.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReplaceAtlas[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReplaceAtlas != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReplaceAtlas.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReplaceAtlas[ii];
						this.__cbOnceReplaceAtlas[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReplaceAtlas[ii];
						this.__cbOnceOwnerUnbindReplaceAtlas[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReplaceAtlas[ii]);
						newCbOnceArray.push(this.__cbOnceReplaceAtlas[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReplaceAtlas = newCbOnceOwnerUnbindArray;
				this.__cbOnceReplaceAtlas = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newAtlas,prevAtlas);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceAtlas: function(owner,handleNewAtlasPrevAtlas) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceAtlas" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewAtlasPrevAtlas != null) {
					_gthis.offReplaceAtlas(handleNewAtlasPrevAtlas);
					handleNewAtlasPrevAtlas = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceAtlas == null) {
				this.__cbOnOwnerUnbindReplaceAtlas = [];
			}
			this.__cbOnOwnerUnbindReplaceAtlas.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewAtlasPrevAtlas = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceAtlas == null) {
				this.__cbOnOwnerUnbindReplaceAtlas = [];
			}
			this.__cbOnOwnerUnbindReplaceAtlas.push(null);
		}
		if(this.__cbOnReplaceAtlas == null) {
			this.__cbOnReplaceAtlas = [];
		}
		this.__cbOnReplaceAtlas.push(handleNewAtlasPrevAtlas);
	}
	,onceReplaceAtlas: function(owner,handleNewAtlasPrevAtlas) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceAtlas" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewAtlasPrevAtlas != null) {
					_gthis.offReplaceAtlas(handleNewAtlasPrevAtlas);
					handleNewAtlasPrevAtlas = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceAtlas == null) {
				this.__cbOnceOwnerUnbindReplaceAtlas = [];
			}
			this.__cbOnceOwnerUnbindReplaceAtlas.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewAtlasPrevAtlas = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceAtlas == null) {
				this.__cbOnceOwnerUnbindReplaceAtlas = [];
			}
			this.__cbOnceOwnerUnbindReplaceAtlas.push(null);
		}
		if(this.__cbOnceReplaceAtlas == null) {
			this.__cbOnceReplaceAtlas = [];
		}
		this.__cbOnceReplaceAtlas.push(handleNewAtlasPrevAtlas);
	}
	,offReplaceAtlas: function(handleNewAtlasPrevAtlas) {
		if(handleNewAtlasPrevAtlas != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceAtlas != null) {
				index = this.__cbOnReplaceAtlas.indexOf(handleNewAtlasPrevAtlas);
				if(index != -1) {
					this.__cbOnReplaceAtlas.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceAtlas[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceAtlas.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceAtlas != null) {
				index = this.__cbOnceReplaceAtlas.indexOf(handleNewAtlasPrevAtlas);
				if(index != -1) {
					this.__cbOnceReplaceAtlas.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceAtlas[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceAtlas.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceAtlas != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceAtlas.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceAtlas[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceAtlas = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceAtlas != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceAtlas.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceAtlas[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceAtlas = null;
			}
			this.__cbOnReplaceAtlas = null;
			this.__cbOnceReplaceAtlas = null;
		}
	}
	,listensReplaceAtlas: function() {
		if(!(this.__cbOnReplaceAtlas != null && this.__cbOnReplaceAtlas.length > 0)) {
			if(this.__cbOnceReplaceAtlas != null) {
				return this.__cbOnceReplaceAtlas.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,atlasAutoruns: null
	,get_atlas: function() {
		var value = this.unobservedAtlas;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.atlasAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.atlasAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_atlas: function(atlas) {
		var prevValue = this.unobservedAtlas;
		this.unobservedAtlas = atlas;
		if(prevValue == atlas) {
			return atlas;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitAtlasChange(atlas,prevValue);
		var fieldAutoruns = this.atlasAutoruns;
		if(fieldAutoruns != null) {
			this.atlasAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return atlas;
	}
	,invalidateAtlas: function() {
		var value = this.unobservedAtlas;
		this.emitAtlasChange(value,value);
		var fieldAutoruns = this.atlasAutoruns;
		if(fieldAutoruns != null) {
			this.atlasAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedAtlas: null
	,__cbOnAtlasChange: null
	,__cbOnceAtlasChange: null
	,__cbOnOwnerUnbindAtlasChange: null
	,__cbOnceOwnerUnbindAtlasChange: null
	,emitAtlasChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnAtlasChange != null) {
			len += this.__cbOnAtlasChange.length;
		}
		if(this.__cbOnceAtlasChange != null) {
			len += this.__cbOnceAtlasChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnAtlasChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnAtlasChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnAtlasChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceAtlasChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceAtlasChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceAtlasChange[ii];
						this.__cbOnceAtlasChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindAtlasChange[ii];
						this.__cbOnceOwnerUnbindAtlasChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindAtlasChange[ii]);
						newCbOnceArray.push(this.__cbOnceAtlasChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindAtlasChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceAtlasChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onAtlasChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "atlasChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offAtlasChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindAtlasChange == null) {
				this.__cbOnOwnerUnbindAtlasChange = [];
			}
			this.__cbOnOwnerUnbindAtlasChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindAtlasChange == null) {
				this.__cbOnOwnerUnbindAtlasChange = [];
			}
			this.__cbOnOwnerUnbindAtlasChange.push(null);
		}
		if(this.__cbOnAtlasChange == null) {
			this.__cbOnAtlasChange = [];
		}
		this.__cbOnAtlasChange.push(handleCurrentPrevious);
	}
	,onceAtlasChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "atlasChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offAtlasChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindAtlasChange == null) {
				this.__cbOnceOwnerUnbindAtlasChange = [];
			}
			this.__cbOnceOwnerUnbindAtlasChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindAtlasChange == null) {
				this.__cbOnceOwnerUnbindAtlasChange = [];
			}
			this.__cbOnceOwnerUnbindAtlasChange.push(null);
		}
		if(this.__cbOnceAtlasChange == null) {
			this.__cbOnceAtlasChange = [];
		}
		this.__cbOnceAtlasChange.push(handleCurrentPrevious);
	}
	,offAtlasChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnAtlasChange != null) {
				index = this.__cbOnAtlasChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnAtlasChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindAtlasChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindAtlasChange.splice(index,1);
				}
			}
			if(this.__cbOnceAtlasChange != null) {
				index = this.__cbOnceAtlasChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceAtlasChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindAtlasChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindAtlasChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindAtlasChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindAtlasChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindAtlasChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindAtlasChange = null;
			}
			if(this.__cbOnceOwnerUnbindAtlasChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindAtlasChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindAtlasChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindAtlasChange = null;
			}
			this.__cbOnAtlasChange = null;
			this.__cbOnceAtlasChange = null;
		}
	}
	,listensAtlasChange: function() {
		if(!(this.__cbOnAtlasChange != null && this.__cbOnAtlasChange.length > 0)) {
			if(this.__cbOnceAtlasChange != null) {
				return this.__cbOnceAtlasChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,textAutoruns: null
	,get_text: function() {
		var value = this.unobservedText;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.textAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.textAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_text: function(text) {
		var prevValue = this.unobservedText;
		this.unobservedText = text;
		if(prevValue == text) {
			return text;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTextChange(text,prevValue);
		var fieldAutoruns = this.textAutoruns;
		if(fieldAutoruns != null) {
			this.textAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return text;
	}
	,invalidateText: function() {
		var value = this.unobservedText;
		this.emitTextChange(value,value);
		var fieldAutoruns = this.textAutoruns;
		if(fieldAutoruns != null) {
			this.textAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedText: null
	,__cbOnTextChange: null
	,__cbOnceTextChange: null
	,__cbOnOwnerUnbindTextChange: null
	,__cbOnceOwnerUnbindTextChange: null
	,emitTextChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTextChange != null) {
			len += this.__cbOnTextChange.length;
		}
		if(this.__cbOnceTextChange != null) {
			len += this.__cbOnceTextChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTextChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTextChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTextChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTextChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTextChange[ii];
						this.__cbOnceTextChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTextChange[ii];
						this.__cbOnceOwnerUnbindTextChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTextChange[ii]);
						newCbOnceArray.push(this.__cbOnceTextChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTextChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTextChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTextChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTextChange == null) {
				this.__cbOnOwnerUnbindTextChange = [];
			}
			this.__cbOnOwnerUnbindTextChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTextChange == null) {
				this.__cbOnOwnerUnbindTextChange = [];
			}
			this.__cbOnOwnerUnbindTextChange.push(null);
		}
		if(this.__cbOnTextChange == null) {
			this.__cbOnTextChange = [];
		}
		this.__cbOnTextChange.push(handleCurrentPrevious);
	}
	,onceTextChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTextChange == null) {
				this.__cbOnceOwnerUnbindTextChange = [];
			}
			this.__cbOnceOwnerUnbindTextChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTextChange == null) {
				this.__cbOnceOwnerUnbindTextChange = [];
			}
			this.__cbOnceOwnerUnbindTextChange.push(null);
		}
		if(this.__cbOnceTextChange == null) {
			this.__cbOnceTextChange = [];
		}
		this.__cbOnceTextChange.push(handleCurrentPrevious);
	}
	,offTextChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTextChange != null) {
				index = this.__cbOnTextChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTextChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTextChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTextChange.splice(index,1);
				}
			}
			if(this.__cbOnceTextChange != null) {
				index = this.__cbOnceTextChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTextChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTextChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTextChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTextChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTextChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTextChange = null;
			}
			if(this.__cbOnceOwnerUnbindTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTextChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTextChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTextChange = null;
			}
			this.__cbOnTextChange = null;
			this.__cbOnceTextChange = null;
		}
	}
	,listensTextChange: function() {
		if(!(this.__cbOnTextChange != null && this.__cbOnTextChange.length > 0)) {
			if(this.__cbOnceTextChange != null) {
				return this.__cbOnceTextChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,parseAtlas: null
	,load: function() {
		var _gthis = this;
		if(this.owner != null) {
			this.assets.inheritRuntimeAssetsFromAssets(this.owner);
			this.assets.loadMethod = this.owner.loadMethod;
			this.assets.scheduleMethod = this.owner.scheduleMethod;
			this.assets.delayBetweenXAssets = this.owner.delayBetweenXAssets;
		}
		var toDestroy = [];
		var asset = this.assets.iterator();
		while(asset.hasNext()) {
			var asset1 = asset.next();
			toDestroy.push(asset1);
		}
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load atlas asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 55, className : "ceramic.AtlasAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		ceramic_App.app.logger.info("Load atlas " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 61, className : "ceramic.AtlasAsset", methodName : "load"});
		this.assets.runtimeAssets = this.runtimeAssets;
		var asset = new ceramic_TextAsset(this.name);
		asset.set_handleTexturesDensityChange(false);
		this.assets.addAsset(asset);
		asset.set_path(this.path);
		this.assets.onceComplete(this,function(success) {
			_gthis.set_text(asset.get_text());
			if(_gthis.get_text() != null) {
				try {
					var newAtlas = _gthis.parseAtlas != null ? _gthis.parseAtlas(_gthis.get_text()) : ceramic_TextureAtlasParser.parse(_gthis.get_text());
					newAtlas.id = "atlas:" + _gthis.path;
					var assetList = [];
					var _g = 0;
					var _g1 = newAtlas.pages.length;
					while(_g < _g1) {
						var i = _g++;
						var page = newAtlas.pages[i];
						var imagePath = page.get_name();
						var directory = ceramic_Path.directory(_gthis.path);
						if(directory != null && directory.length > 0) {
							imagePath = ceramic_Path.join([directory,imagePath]);
						}
						var pathInfo = ceramic_Assets.decodePath(imagePath);
						var asset1 = new ceramic_ImageAsset(pathInfo.name);
						asset1.set_handleTexturesDensityChange(false);
						asset1.set_path(pathInfo.path);
						_gthis.assets.addAsset(asset1);
						assetList.push(asset1);
					}
					_gthis.assets.onceComplete(_gthis,function(success) {
						if(success) {
							var _g = 0;
							var _g1 = assetList.length;
							while(_g < _g1) {
								var i = _g++;
								var asset = assetList[i];
								var texture = asset.get_texture();
								if(texture != null) {
									texture.set_filter(newAtlas.pages[i].get_filter());
								}
								newAtlas.pages[i].set_texture(texture);
							}
							newAtlas.computeFrames();
							var prevAtlas = _gthis.get_atlas();
							newAtlas.asset = _gthis;
							_gthis.set_atlas(newAtlas);
							if(prevAtlas != null) {
								_gthis.emitReplaceAtlas(_gthis.get_atlas(),prevAtlas);
								var _g = 0;
								var _g1 = [].concat(ceramic_App.app.visuals);
								while(_g < _g1.length) {
									var visual = _g1[_g];
									++_g;
									if(visual._lifecycleState >= 0) {
										if(visual.asQuad != null) {
											var quad = visual.asQuad;
											if(quad.tile != null && ((quad.tile) instanceof ceramic_TextureAtlasRegion)) {
												var prevRegion = quad.tile;
												if(prevRegion != null && prevRegion.atlas == prevAtlas) {
													var regionName = prevRegion.name;
													if(regionName != null) {
														var newRegion = newAtlas.region(regionName);
														if(newRegion != null) {
															quad.set_tile(newRegion);
														} else {
															quad.set_tile(null);
														}
													} else {
														quad.set_tile(null);
													}
												}
											}
										}
									}
								}
								prevAtlas.asset = null;
								prevAtlas.destroy();
							}
							var _g = 0;
							while(_g < toDestroy.length) {
								var asset = toDestroy[_g];
								++_g;
								if(((asset) instanceof ceramic_ImageAsset)) {
									var imageAsset = asset;
									if(assetList.indexOf(imageAsset) == -1) {
										asset.destroy();
									}
								} else {
									asset.destroy();
								}
							}
							_gthis.set_status(ceramic_AssetStatus.READY);
							_gthis.emitComplete(true);
							if(_gthis.handleTexturesDensityChange) {
								_gthis.checkTexturesDensity();
							}
						} else {
							_gthis.set_status(ceramic_AssetStatus.BROKEN);
							ceramic_App.app.logger.error("Failed to load textures for atlas at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 189, className : "ceramic.AtlasAsset", methodName : "load"});
							_gthis.emitComplete(false);
						}
					});
					_gthis.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 195, className : "ceramic.AtlasAsset", methodName : "load"});
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to decode atlas data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 199, className : "ceramic.AtlasAsset", methodName : "load"});
					_gthis.emitComplete(false);
				}
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load atlas data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 205, className : "ceramic.AtlasAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
		this.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 210, className : "ceramic.AtlasAsset", methodName : "load"});
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.checkTexturesDensity();
		}
	}
	,checkTexturesDensity: function() {
		if(this.owner == null || !this.owner.reloadOnTextureDensityChange) {
			return;
		}
		var prevPath = this.path;
		this.computePath();
		if(prevPath != this.path) {
			ceramic_App.app.logger.info("Reload atlas (" + prevPath + " -> " + this.path + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 234, className : "ceramic.AtlasAsset", methodName : "checkTexturesDensity"});
			this.load();
		}
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload atlas (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\AtlasAsset.hx", lineNumber : 255, className : "ceramic.AtlasAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_atlas() != null) {
			this.get_atlas().destroy();
			this.set_atlas(null);
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceAtlas();
		this.offAtlasChange();
		this.offTextChange();
	}
	,__class__: ceramic_AtlasAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_text:"set_text",get_text:"get_text",set_atlas:"set_atlas",get_atlas:"get_atlas"})
});
var ceramic_Audio = function() {
	ceramic_Entity.call(this);
	this.mixers = new ceramic_IntMap();
	if(!this.mixers.exists(0)) {
		this.mixers.set(0,new ceramic_AudioMixer(0));
	}
};
$hxClasses["ceramic.Audio"] = ceramic_Audio;
ceramic_Audio.__name__ = "ceramic.Audio";
ceramic_Audio.__super__ = ceramic_Entity;
ceramic_Audio.prototype = $extend(ceramic_Entity.prototype,{
	mixers: null
	,initMixerIfNeeded: function(index) {
		if(!this.mixers.exists(index)) {
			this.mixers.set(index,new ceramic_AudioMixer(index));
		}
	}
	,mixer: function(index) {
		if(!this.mixers.exists(index)) {
			this.mixers.set(index,new ceramic_AudioMixer(index));
		}
		var _this = this.mixers;
		var value = _this._keys.intMap.h[index | 0];
		var index = value != null ? value : 0;
		if(index >= 2) {
			return _this.values[index - 2];
		} else {
			return ceramic_IntMap.RET_NULL;
		}
	}
	,__class__: ceramic_Audio
});
var ceramic_AudioMixer = function(index) {
	this.mute = false;
	this.pitch = 1;
	this.pan = 0;
	this.volume = 0.5;
	ceramic_Entity.call(this);
	this.index = index;
};
$hxClasses["ceramic.AudioMixer"] = ceramic_AudioMixer;
ceramic_AudioMixer.__name__ = "ceramic.AudioMixer";
ceramic_AudioMixer.__super__ = ceramic_Entity;
ceramic_AudioMixer.prototype = $extend(ceramic_Entity.prototype,{
	volume: null
	,pan: null
	,pitch: null
	,mute: null
	,index: null
	,__class__: ceramic_AudioMixer
});
var ceramic_AutoCollections = function() { };
$hxClasses["ceramic.AutoCollections"] = ceramic_AutoCollections;
ceramic_AutoCollections.__name__ = "ceramic.AutoCollections";
ceramic_AutoCollections.__isInterface__ = true;
var ceramic_BackgroundQueue = function(checkInterval) {
	if(checkInterval == null) {
		checkInterval = 0.1;
	}
	this.pending = [];
	this.stop = false;
	this.runsInBackground = false;
	this.checkInterval = 0.1;
	ceramic_Entity.call(this);
	this.checkInterval = 0.1;
};
$hxClasses["ceramic.BackgroundQueue"] = ceramic_BackgroundQueue;
ceramic_BackgroundQueue.__name__ = "ceramic.BackgroundQueue";
ceramic_BackgroundQueue.__super__ = ceramic_Entity;
ceramic_BackgroundQueue.prototype = $extend(ceramic_Entity.prototype,{
	checkInterval: null
	,runsInBackground: null
	,stop: null
	,pending: null
	,schedule: function(fn) {
		ceramic_App.app._onceImmediate(fn);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		this.stop = true;
	}
	,__class__: ceramic_BackgroundQueue
});
var ceramic_BezierEasing = function(x1,y1,x2,y2) {
	this.quadratic = false;
	this.cached = false;
	this.linearEasing = false;
	if(this.cached) {
		this.removeFromCache(this.mX1,this.mY1,this.mX2,this.mY2);
	}
	if(x2 == null || y2 == null) {
		this.quadratic = true;
		this.mQuadraticX1 = x1;
		this.mQuadraticX2 = x2;
		this.mX1 = ceramic_BezierEasing.TWO_THIRD * x1;
		this.mY1 = ceramic_BezierEasing.TWO_THIRD * y1;
		this.mX2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (x1 - 1.0);
		this.mY2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (y1 - 1.0);
	} else {
		this.quadratic = false;
		this.mX1 = x1;
		this.mY1 = y1;
		this.mX2 = x2;
		this.mY2 = y2;
	}
	if(!(0 <= this.mX1 && this.mX1 <= 1 && 0 <= this.mX2 && this.mX2 <= 1)) {
		ceramic_App.app.logger.error("(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)" + (" (" + "bezier x values must be in [0, 1] range" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\BezierEasing.hx", lineNumber : 85, className : "ceramic.BezierEasing", methodName : "configure"});
		throw haxe_Exception.thrown("(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)" + (" (" + "bezier x values must be in [0, 1] range" + ")"));
	}
	if(this.mX1 == this.mY1 && this.mX2 == this.mY2) {
		this.linearEasing = true;
	} else {
		this.linearEasing = false;
		if(this.sampleValues == null) {
			this.sampleValues = [];
		}
		var _g = 0;
		var _g1 = ceramic_BezierEasing.SPLINE_TABLE_SIZE;
		while(_g < _g1) {
			var i = _g++;
			var aT = i * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			var aA1 = this.mX1;
			var aA2 = this.mX2;
			this.sampleValues[i] = (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
		}
	}
};
$hxClasses["ceramic.BezierEasing"] = ceramic_BezierEasing;
ceramic_BezierEasing.__name__ = "ceramic.BezierEasing";
ceramic_BezierEasing.quadraticToCubicCP1 = function(p) {
	return ceramic_BezierEasing.TWO_THIRD * p;
};
ceramic_BezierEasing.quadraticToCubicCP2 = function(p) {
	return 1.0 + ceramic_BezierEasing.TWO_THIRD * (p - 1.0);
};
ceramic_BezierEasing.cacheKey = function(x1,y1,x2,y2) {
	var floatKey = x1 * 100 + y1 * 1000 + x2 * 10000 + y2 * 100000;
	return floatKey | 0;
};
ceramic_BezierEasing.clearCache = function() {
	ceramic_BezierEasing.cachedInstances = null;
	ceramic_BezierEasing.numCachedInstances = 0;
};
ceramic_BezierEasing.get = function(x1,y1,x2,y2) {
	var quadratic = x2 == null || y2 == null;
	var _x1 = quadratic ? ceramic_BezierEasing.TWO_THIRD * x1 : x1;
	var _y1 = quadratic ? ceramic_BezierEasing.TWO_THIRD * y1 : y1;
	var _x2 = quadratic ? 1.0 + ceramic_BezierEasing.TWO_THIRD * (x1 - 1.0) : x2;
	var _y2 = quadratic ? 1.0 + ceramic_BezierEasing.TWO_THIRD * (y1 - 1.0) : y2;
	var result = null;
	var floatKey = _x1 * 100 + _y1 * 1000 + _x2 * 10000 + _y2 * 100000;
	var key = floatKey | 0;
	if(ceramic_BezierEasing.cachedInstances == null) {
		ceramic_BezierEasing.cachedInstances = new ceramic_IntMap();
	}
	var _this = ceramic_BezierEasing.cachedInstances;
	var value = _this._keys.intMap.h[key | 0];
	var index = value != null ? value : 0;
	var list = index >= 2 ? _this.values[index - 2] : ceramic_IntMap.RET_NULL;
	if(list == null) {
		if(ceramic_BezierEasing.numCachedInstances >= ceramic_BezierEasing.CACHE_SIZE) {
			ceramic_BezierEasing.clearCache();
		}
		result = new ceramic_BezierEasing(_x1,_y1,_x2,_y2);
		ceramic_BezierEasing.cachedInstances.set(key,[result]);
		ceramic_BezierEasing.numCachedInstances++;
	} else {
		var i = list.length - 1;
		while(i >= 0) {
			var instance = list[i];
			if(instance.mX1 == _x1 && instance.mY1 == _y1 && instance.mX2 == _x2 && instance.mY2 == _y2) {
				result = instance;
				break;
			}
			--i;
		}
		if(result == null) {
			result = new ceramic_BezierEasing(x1,y1,x2,y2);
			result.cached = true;
			list.push(result);
		}
	}
	return result;
};
ceramic_BezierEasing.prototype = {
	linearEasing: null
	,sampleValues: null
	,cached: null
	,quadratic: null
	,mQuadraticX1: null
	,mQuadraticX2: null
	,mX1: null
	,mY1: null
	,mX2: null
	,mY2: null
	,configure: function(x1,y1,x2,y2) {
		if(this.cached) {
			this.removeFromCache(this.mX1,this.mY1,this.mX2,this.mY2);
		}
		if(x2 == null || y2 == null) {
			this.quadratic = true;
			this.mQuadraticX1 = x1;
			this.mQuadraticX2 = x2;
			this.mX1 = ceramic_BezierEasing.TWO_THIRD * x1;
			this.mY1 = ceramic_BezierEasing.TWO_THIRD * y1;
			this.mX2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (x1 - 1.0);
			this.mY2 = 1.0 + ceramic_BezierEasing.TWO_THIRD * (y1 - 1.0);
		} else {
			this.quadratic = false;
			this.mX1 = x1;
			this.mY1 = y1;
			this.mX2 = x2;
			this.mY2 = y2;
		}
		if(!(0 <= this.mX1 && this.mX1 <= 1 && 0 <= this.mX2 && this.mX2 <= 1)) {
			ceramic_App.app.logger.error("(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)" + (" (" + "bezier x values must be in [0, 1] range" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\BezierEasing.hx", lineNumber : 85, className : "ceramic.BezierEasing", methodName : "configure"});
			throw haxe_Exception.thrown("(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)" + (" (" + "bezier x values must be in [0, 1] range" + ")"));
		}
		if(this.mX1 == this.mY1 && this.mX2 == this.mY2) {
			this.linearEasing = true;
		} else {
			this.linearEasing = false;
			if(this.sampleValues == null) {
				this.sampleValues = [];
			}
			var _g = 0;
			var _g1 = ceramic_BezierEasing.SPLINE_TABLE_SIZE;
			while(_g < _g1) {
				var i = _g++;
				var aT = i * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
				var aA1 = this.mX1;
				var aA2 = this.mX2;
				this.sampleValues[i] = (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
			}
		}
	}
	,ease: function(x) {
		if(this.linearEasing) {
			return x;
		}
		if(x == 0) {
			return 0;
		}
		if(x == 1) {
			return 1;
		}
		var intervalStart = 0.0;
		var currentSample = 1;
		var lastSample = ceramic_BezierEasing.SPLINE_TABLE_SIZE - 1;
		while(currentSample != lastSample && this.sampleValues[currentSample] <= x) {
			intervalStart += ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			++currentSample;
		}
		--currentSample;
		var dist = (x - this.sampleValues[currentSample]) / (this.sampleValues[currentSample + 1] - this.sampleValues[currentSample]);
		var guessForT = intervalStart + dist * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
		var aA1 = this.mX1;
		var aA2 = this.mX2;
		var initialSlope = 3.0 * (1.0 - 3.0 * aA2 + 3.0 * aA1) * guessForT * guessForT + 2.0 * (3.0 * aA2 - 6.0 * aA1) * guessForT + 3.0 * aA1;
		var aT;
		if(initialSlope >= ceramic_BezierEasing.NEWTON_MIN_SLOPE) {
			aT = this.newtonRaphsonIterate(x,guessForT,this.mX1,this.mX2);
		} else if(initialSlope == 0.0) {
			aT = guessForT;
		} else {
			var aA = intervalStart;
			var aB = intervalStart + ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			var mX1 = this.mX1;
			var mX2 = this.mX2;
			var currentX;
			var currentT;
			var i = 0;
			do {
				currentT = aA + (aB - aA) / 2.0;
				currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * currentT + (3.0 * mX2 - 6.0 * mX1)) * currentT + 3.0 * mX1) * currentT - x;
				if(currentX > 0.0) {
					aB = currentT;
				} else {
					aA = currentT;
				}
			} while(Math.abs(currentX) > ceramic_BezierEasing.SUBDIVISION_PRECISION && ++i < ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS);
			aT = currentT;
		}
		var aA1 = this.mY1;
		var aA2 = this.mY2;
		return (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
	}
	,getTForX: function(aX) {
		var intervalStart = 0.0;
		var currentSample = 1;
		var lastSample = ceramic_BezierEasing.SPLINE_TABLE_SIZE - 1;
		while(currentSample != lastSample && this.sampleValues[currentSample] <= aX) {
			intervalStart += ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			++currentSample;
		}
		--currentSample;
		var dist = (aX - this.sampleValues[currentSample]) / (this.sampleValues[currentSample + 1] - this.sampleValues[currentSample]);
		var guessForT = intervalStart + dist * ceramic_BezierEasing.SAMPLE_STEP_SIZE;
		var aA1 = this.mX1;
		var aA2 = this.mX2;
		var initialSlope = 3.0 * (1.0 - 3.0 * aA2 + 3.0 * aA1) * guessForT * guessForT + 2.0 * (3.0 * aA2 - 6.0 * aA1) * guessForT + 3.0 * aA1;
		if(initialSlope >= ceramic_BezierEasing.NEWTON_MIN_SLOPE) {
			return this.newtonRaphsonIterate(aX,guessForT,this.mX1,this.mX2);
		} else if(initialSlope == 0.0) {
			return guessForT;
		} else {
			var aA = intervalStart;
			var aB = intervalStart + ceramic_BezierEasing.SAMPLE_STEP_SIZE;
			var mX1 = this.mX1;
			var mX2 = this.mX2;
			var currentX;
			var currentT;
			var i = 0;
			do {
				currentT = aA + (aB - aA) / 2.0;
				currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * currentT + (3.0 * mX2 - 6.0 * mX1)) * currentT + 3.0 * mX1) * currentT - aX;
				if(currentX > 0.0) {
					aB = currentT;
				} else {
					aA = currentT;
				}
			} while(Math.abs(currentX) > ceramic_BezierEasing.SUBDIVISION_PRECISION && ++i < ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS);
			return currentT;
		}
	}
	,calcBezier: function(aT,aA1,aA2) {
		return (((1.0 - 3.0 * aA2 + 3.0 * aA1) * aT + (3.0 * aA2 - 6.0 * aA1)) * aT + 3.0 * aA1) * aT;
	}
	,getSlope: function(aT,aA1,aA2) {
		return 3.0 * (1.0 - 3.0 * aA2 + 3.0 * aA1) * aT * aT + 2.0 * (3.0 * aA2 - 6.0 * aA1) * aT + 3.0 * aA1;
	}
	,binarySubdivide: function(aX,aA,aB,mX1,mX2) {
		var currentX;
		var currentT;
		var i = 0;
		do {
			currentT = aA + (aB - aA) / 2.0;
			currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * currentT + (3.0 * mX2 - 6.0 * mX1)) * currentT + 3.0 * mX1) * currentT - aX;
			if(currentX > 0.0) {
				aB = currentT;
			} else {
				aA = currentT;
			}
		} while(Math.abs(currentX) > ceramic_BezierEasing.SUBDIVISION_PRECISION && ++i < ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS);
		return currentT;
	}
	,newtonRaphsonIterate: function(aX,aGuessT,mX1,mX2) {
		var _g = 0;
		var _g1 = ceramic_BezierEasing.NEWTON_ITERATIONS;
		while(_g < _g1) {
			var i = _g++;
			var currentSlope = 3.0 * (1.0 - 3.0 * mX2 + 3.0 * mX1) * aGuessT * aGuessT + 2.0 * (3.0 * mX2 - 6.0 * mX1) * aGuessT + 3.0 * mX1;
			if(currentSlope == 0.0) {
				return aGuessT;
			}
			var currentX = (((1.0 - 3.0 * mX2 + 3.0 * mX1) * aGuessT + (3.0 * mX2 - 6.0 * mX1)) * aGuessT + 3.0 * mX1) * aGuessT - aX;
			aGuessT -= currentX / currentSlope;
		}
		return aGuessT;
	}
	,A: function(aA1,aA2) {
		return 1.0 - 3.0 * aA2 + 3.0 * aA1;
	}
	,B: function(aA1,aA2) {
		return 3.0 * aA2 - 6.0 * aA1;
	}
	,C: function(aA1) {
		return 3.0 * aA1;
	}
	,removeFromCache: function(x1,y1,x2,y2) {
		this.cached = false;
		var floatKey = x1 * 100 + y1 * 1000 + x2 * 10000 + y2 * 100000;
		var key = floatKey | 0;
		if(ceramic_BezierEasing.cachedInstances != null) {
			var _this = ceramic_BezierEasing.cachedInstances;
			var value = _this._keys.intMap.h[key | 0];
			var index = value != null ? value : 0;
			var list = index >= 2 ? _this.values[index - 2] : ceramic_IntMap.RET_NULL;
			if(list != null) {
				if(list.length == 1 && list[0] == this) {
					ceramic_BezierEasing.cachedInstances.remove(key);
				} else {
					HxOverrides.remove(list,this);
				}
			}
		}
	}
	,__class__: ceramic_BezierEasing
};
var ceramic_BinaryAsset = function(name,options) {
	this.unobservedBytes = null;
	this.bytesAutoruns = null;
	ceramic_Asset.call(this,"binary",name,options);
};
$hxClasses["ceramic.BinaryAsset"] = ceramic_BinaryAsset;
ceramic_BinaryAsset.__name__ = "ceramic.BinaryAsset";
ceramic_BinaryAsset.__super__ = ceramic_Asset;
ceramic_BinaryAsset.prototype = $extend(ceramic_Asset.prototype,{
	bytesAutoruns: null
	,get_bytes: function() {
		var value = this.unobservedBytes;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.bytesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.bytesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_bytes: function(bytes) {
		var prevValue = this.unobservedBytes;
		this.unobservedBytes = bytes;
		if(prevValue == bytes) {
			return bytes;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitBytesChange(bytes,prevValue);
		var fieldAutoruns = this.bytesAutoruns;
		if(fieldAutoruns != null) {
			this.bytesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return bytes;
	}
	,invalidateBytes: function() {
		var value = this.unobservedBytes;
		this.emitBytesChange(value,value);
		var fieldAutoruns = this.bytesAutoruns;
		if(fieldAutoruns != null) {
			this.bytesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedBytes: null
	,__cbOnBytesChange: null
	,__cbOnceBytesChange: null
	,__cbOnOwnerUnbindBytesChange: null
	,__cbOnceOwnerUnbindBytesChange: null
	,emitBytesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnBytesChange != null) {
			len += this.__cbOnBytesChange.length;
		}
		if(this.__cbOnceBytesChange != null) {
			len += this.__cbOnceBytesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnBytesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBytesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBytesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBytesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBytesChange[ii];
						this.__cbOnceBytesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBytesChange[ii];
						this.__cbOnceOwnerUnbindBytesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBytesChange[ii]);
						newCbOnceArray.push(this.__cbOnceBytesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBytesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceBytesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBytesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bytesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBytesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBytesChange == null) {
				this.__cbOnOwnerUnbindBytesChange = [];
			}
			this.__cbOnOwnerUnbindBytesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBytesChange == null) {
				this.__cbOnOwnerUnbindBytesChange = [];
			}
			this.__cbOnOwnerUnbindBytesChange.push(null);
		}
		if(this.__cbOnBytesChange == null) {
			this.__cbOnBytesChange = [];
		}
		this.__cbOnBytesChange.push(handleCurrentPrevious);
	}
	,onceBytesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bytesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBytesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBytesChange == null) {
				this.__cbOnceOwnerUnbindBytesChange = [];
			}
			this.__cbOnceOwnerUnbindBytesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBytesChange == null) {
				this.__cbOnceOwnerUnbindBytesChange = [];
			}
			this.__cbOnceOwnerUnbindBytesChange.push(null);
		}
		if(this.__cbOnceBytesChange == null) {
			this.__cbOnceBytesChange = [];
		}
		this.__cbOnceBytesChange.push(handleCurrentPrevious);
	}
	,offBytesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnBytesChange != null) {
				index = this.__cbOnBytesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnBytesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBytesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBytesChange.splice(index,1);
				}
			}
			if(this.__cbOnceBytesChange != null) {
				index = this.__cbOnceBytesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceBytesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBytesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBytesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBytesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBytesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBytesChange = null;
			}
			if(this.__cbOnceOwnerUnbindBytesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBytesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBytesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBytesChange = null;
			}
			this.__cbOnBytesChange = null;
			this.__cbOnceBytesChange = null;
		}
	}
	,listensBytesChange: function() {
		if(!(this.__cbOnBytesChange != null && this.__cbOnBytesChange.length > 0)) {
			if(this.__cbOnceBytesChange != null) {
				return this.__cbOnceBytesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load binary asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\BinaryAsset.hx", lineNumber : 21, className : "ceramic.BinaryAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		if(this.options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.options);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.options,key);
			}
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load binary " + backendPath,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\BinaryAsset.hx", lineNumber : 47, className : "ceramic.BinaryAsset", methodName : "load"});
		ceramic_App.app.backend.binaries.load(realPath,loadOptions,function(bytes) {
			if(bytes != null) {
				_gthis.set_bytes(bytes);
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load binary at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\BinaryAsset.hx", lineNumber : 57, className : "ceramic.BinaryAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload binary (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\BinaryAsset.hx", lineNumber : 80, className : "ceramic.BinaryAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_bytes(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offBytesChange();
	}
	,__class__: ceramic_BinaryAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_bytes:"set_bytes",get_bytes:"get_bytes"})
});
var ceramic_BitmapFont = function(fontData,pages) {
	this._preRenderingPages = null;
	this.preRenderedPages = null;
	this.pageShaders = null;
	this.pages = new ceramic_IntMap(16,0.5,true);
	ceramic_Entity.call(this);
	this.set_fontData(fontData);
	if(fontData == null) {
		throw haxe_Exception.thrown("BitmapFont: fontData is null");
	}
	if(pages == null) {
		throw haxe_Exception.thrown("BitmapFont: pages is null");
	}
	if(fontData.distanceField != null) {
		this.pageShaders = new haxe_ds_IntMap();
	}
	var _g = 0;
	var _g1 = fontData.pages;
	while(_g < _g1.length) {
		var pageInfo = _g1[_g];
		++_g;
		var pageFile = pageInfo.file;
		if(fontData.path != null && fontData.path.length > 0 && fontData.path != ".") {
			pageFile = ceramic_Path.join([fontData.path,pageInfo.file]);
		}
		var texture = pages.h[pageFile];
		if(texture == null) {
			throw haxe_Exception.thrown("BitmapFont: missing texture for file " + pageInfo.file);
		}
		this.pages.set(pageInfo.id,texture);
		if(fontData.distanceField != null) {
			var shader = ceramic_App.app.assets.shader("shader:msdf").clone();
			var _this = ceramic_App.app.backend.shaders;
			shader.backendItem.uniforms.setFloat("pxRange",fontData.distanceField.distanceRange);
			var _this1 = ceramic_App.app.backend.shaders;
			shader.backendItem.uniforms.setVector2("texSize",texture.width * texture.density,texture.height * texture.density);
			this.pageShaders.h[pageInfo.id] = shader;
		}
	}
};
$hxClasses["ceramic.BitmapFont"] = ceramic_BitmapFont;
ceramic_BitmapFont.__name__ = "ceramic.BitmapFont";
ceramic_BitmapFont.__super__ = ceramic_Entity;
ceramic_BitmapFont.prototype = $extend(ceramic_Entity.prototype,{
	pages: null
	,fontData: null
	,set_fontData: function(fontData) {
		this.fontData = fontData;
		if(fontData != null) {
			this.spaceChar = fontData.chars.get(32);
			if(fontData.chars.get(160) == null) {
				fontData.chars.set(160,this.spaceChar);
			}
		}
		return fontData;
	}
	,get_face: function() {
		return this.fontData.face;
	}
	,set_face: function(face) {
		return this.fontData.face = face;
	}
	,get_pointSize: function() {
		return this.fontData.pointSize;
	}
	,set_pointSize: function(pointSize) {
		return this.fontData.pointSize = pointSize;
	}
	,get_baseSize: function() {
		return this.fontData.baseSize;
	}
	,set_baseSize: function(baseSize) {
		return this.fontData.baseSize = baseSize;
	}
	,get_chars: function() {
		return this.fontData.chars;
	}
	,set_chars: function(chars) {
		return this.fontData.chars = chars;
	}
	,get_charCount: function() {
		return this.fontData.charCount;
	}
	,set_charCount: function(charCount) {
		return this.fontData.charCount = charCount;
	}
	,get_lineHeight: function() {
		return this.fontData.lineHeight;
	}
	,set_lineHeight: function(lineHeight) {
		return this.fontData.lineHeight = lineHeight;
	}
	,get_kernings: function() {
		return this.fontData.kernings;
	}
	,set_kernings: function(kernings) {
		return this.fontData.kernings = kernings;
	}
	,get_msdf: function() {
		if(this.fontData.distanceField != null) {
			return this.fontData.distanceField.fieldType == "msdf";
		} else {
			return false;
		}
	}
	,spaceChar: null
	,pageShaders: null
	,preRenderedPages: null
	,_preRenderingPages: null
	,asset: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		if(this.pages != null) {
			var iterableKeys = this.pages.iterableKeys;
			var len = iterableKeys.length;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var texture = this.pages.get(iterableKeys[i]);
				texture.destroy();
			}
			this.pages = null;
		}
		if(this.pageShaders != null) {
			var shader = this.pageShaders.iterator();
			while(shader.hasNext()) {
				var shader1 = shader.next();
				shader1.destroy();
			}
			this.pageShaders = null;
		}
		if(this.preRenderedPages != null) {
			var renderedForSize = this.preRenderedPages.iterator();
			while(renderedForSize.hasNext()) {
				var renderedForSize1 = renderedForSize.next();
				var texture = renderedForSize1.iterator();
				while(texture.hasNext()) {
					var texture1 = texture.next();
					texture1.destroy();
				}
			}
			this.preRenderedPages = null;
		}
	}
	,needsToPreRenderAtSize: function(pixelSize) {
		if(this.preRenderedPages == null || !this.preRenderedPages.h.hasOwnProperty(pixelSize)) {
			return true;
		}
		var preRenderedForSize = this.preRenderedPages.h[pixelSize];
		var _g = 0;
		var _g1 = this.pages.iterableKeys;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(!preRenderedForSize.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,preRenderAtSize: function(pixelSize,done) {
		var numPending = 0;
		var _g = 0;
		var _g1 = this.pages.iterableKeys;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			numPending += 1;
			this.preRenderPage(id,pixelSize,function() {
				numPending -= 1;
				if(numPending == 0) {
					done();
					done = null;
				}
			});
		}
	}
	,preRenderPage: function(id,pixelsSize,done) {
		var _gthis = this;
		if(this.preRenderedPages == null) {
			this.preRenderedPages = new haxe_ds_IntMap();
		}
		if(this._preRenderingPages != null) {
			var _renderingForSize = this._preRenderingPages.h[pixelsSize];
			if(_renderingForSize != null) {
				var _renderingPage = _renderingForSize.h[id];
				if(_renderingPage != null) {
					_renderingPage.push(done);
				}
				return;
			}
		}
		if(this._preRenderingPages == null) {
			this._preRenderingPages = new haxe_ds_IntMap();
		}
		var _renderingForSize = this._preRenderingPages.h[pixelsSize];
		if(_renderingForSize == null) {
			_renderingForSize = new haxe_ds_IntMap();
			this._preRenderingPages.h[pixelsSize] = _renderingForSize;
		}
		var _renderingPage = _renderingForSize.h[id];
		if(_renderingPage == null) {
			_renderingPage = [];
			_renderingForSize.h[id] = _renderingPage;
		}
		var renderedForSize = this.preRenderedPages.h[pixelsSize];
		var originalTexture = this.pages.get(id);
		if(originalTexture == null) {
			throw haxe_Exception.thrown("Invalid bitmap font page with id " + id);
		}
		var sizeFactor = pixelsSize / this.fontData.pointSize;
		var scaledWidth = Math.ceil(originalTexture.width * originalTexture.density * sizeFactor);
		var scaledHeight = Math.ceil(originalTexture.width * originalTexture.density * sizeFactor);
		var renderTexture = new ceramic_RenderTexture(scaledWidth,scaledHeight,1);
		renderTexture.clearOnRender = true;
		renderTexture.autoRender = false;
		var quad = new ceramic_Quad();
		if(quad._texture != originalTexture) {
			quad._set_texture(originalTexture);
		}
		quad.set_width(scaledWidth);
		quad.set_height(scaledHeight);
		quad.set_shader(this.pageShaders != null ? this.pageShaders.h[id] : null);
		quad.set_visible(false);
		if(renderedForSize != null && renderedForSize.h.hasOwnProperty(id)) {
			renderedForSize.h[id].destroy();
		}
		renderTexture.stamp(quad,function() {
			quad.destroy();
			quad = null;
			if(renderedForSize == null) {
				renderedForSize = new haxe_ds_IntMap();
				_gthis.preRenderedPages.h[pixelsSize] = renderedForSize;
			}
			renderedForSize.h[id] = renderTexture;
			done();
			done = null;
			_renderingForSize.remove(id);
			while(_renderingPage.length > 0) {
				var cb = _renderingPage.shift();
				cb();
				cb = null;
			}
		});
	}
	,kerning: function(first,second) {
		var map = this.fontData.kernings.get(first);
		if(map != null && map.intMap.h.hasOwnProperty(second | 0)) {
			var value = map.intMap.h[second | 0];
			if(value != null) {
				return value;
			} else {
				return 0;
			}
		}
		return 0;
	}
	,__class__: ceramic_BitmapFont
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_msdf:"get_msdf",set_kernings:"set_kernings",get_kernings:"get_kernings",set_lineHeight:"set_lineHeight",get_lineHeight:"get_lineHeight",set_charCount:"set_charCount",get_charCount:"get_charCount",set_chars:"set_chars",get_chars:"get_chars",set_baseSize:"set_baseSize",get_baseSize:"get_baseSize",set_pointSize:"set_pointSize",get_pointSize:"get_pointSize",set_face:"set_face",get_face:"get_face",set_fontData:"set_fontData"})
});
var ceramic_BitmapFontCharacter = function(id,x,y,width,height,xOffset,yOffset,xAdvance,page) {
	this.id = id;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.xOffset = xOffset;
	this.yOffset = yOffset;
	this.xAdvance = xAdvance;
	this.page = page;
};
$hxClasses["ceramic.BitmapFontCharacter"] = ceramic_BitmapFontCharacter;
ceramic_BitmapFontCharacter.__name__ = "ceramic.BitmapFontCharacter";
ceramic_BitmapFontCharacter.prototype = {
	id: null
	,x: null
	,y: null
	,width: null
	,height: null
	,xOffset: null
	,yOffset: null
	,xAdvance: null
	,page: null
	,__class__: ceramic_BitmapFontCharacter
};
var ceramic_BitmapFontData = function(face,path,pointSize,baseSize,chars,charCount,distanceField,pages,lineHeight,kernings) {
	this.face = face;
	this.path = path;
	this.pointSize = pointSize;
	this.baseSize = baseSize;
	this.chars = chars;
	this.charCount = charCount;
	this.distanceField = distanceField;
	this.pages = pages;
	this.lineHeight = lineHeight;
	this.kernings = kernings;
};
$hxClasses["ceramic.BitmapFontData"] = ceramic_BitmapFontData;
ceramic_BitmapFontData.__name__ = "ceramic.BitmapFontData";
ceramic_BitmapFontData.prototype = {
	face: null
	,path: null
	,pointSize: null
	,baseSize: null
	,chars: null
	,charCount: null
	,distanceField: null
	,pages: null
	,lineHeight: null
	,kernings: null
	,__class__: ceramic_BitmapFontData
};
var ceramic_BitmapFontDataPage = function(id,file) {
	this.id = id;
	this.file = file;
};
$hxClasses["ceramic.BitmapFontDataPage"] = ceramic_BitmapFontDataPage;
ceramic_BitmapFontDataPage.__name__ = "ceramic.BitmapFontDataPage";
ceramic_BitmapFontDataPage.prototype = {
	id: null
	,file: null
	,__class__: ceramic_BitmapFontDataPage
};
var ceramic_BitmapFontDistanceFieldData = function(fieldType,distanceRange) {
	this.fieldType = fieldType;
	this.distanceRange = distanceRange;
};
$hxClasses["ceramic.BitmapFontDistanceFieldData"] = ceramic_BitmapFontDistanceFieldData;
ceramic_BitmapFontDistanceFieldData.__name__ = "ceramic.BitmapFontDistanceFieldData";
ceramic_BitmapFontDistanceFieldData.prototype = {
	fieldType: null
	,distanceRange: null
	,__class__: ceramic_BitmapFontDistanceFieldData
};
var ceramic_BitmapFontParser = function() { };
$hxClasses["ceramic.BitmapFontParser"] = ceramic_BitmapFontParser;
ceramic_BitmapFontParser.__name__ = "ceramic.BitmapFontParser";
ceramic_BitmapFontParser.parse = function(rawFontData) {
	if(rawFontData.length == 0) {
		throw haxe_Exception.thrown("BitmapFont: fontData is 0 length");
	}
	if(StringTools.startsWith(StringTools.trim(rawFontData),"<")) {
		try {
			rawFontData = ceramic_BitmapFontParser.convertXmlFontData(rawFontData);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown("BitmapFont: invalid xml font data specified for parser: " + Std.string(e));
		}
	}
	var info = new ceramic_BitmapFontData(null,".",0,0,new ceramic_IntMap(),0,null,[],0,new ceramic_IntMap());
	var lines = StringTools.replace(StringTools.replace(rawFontData,"\r",""),"\t"," ").split("\n");
	if(lines.length == 0) {
		throw haxe_Exception.thrown("BitmapFont: invalid font data specified for parser.");
	}
	var first = lines[0];
	if(HxOverrides.substr(StringTools.ltrim(first),0,4) != "info") {
		throw haxe_Exception.thrown("BitmapFont: invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.");
	}
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		ceramic_BitmapFontParser.parseLine(line,info);
	}
	lines = null;
	return info;
};
ceramic_BitmapFontParser.convertXmlFontData = function(rawFontData) {
	var result_b = "";
	var xml = Xml.parse(rawFontData).firstElement();
	var el = xml.elements();
	while(el.hasNext()) {
		var el1 = el.next();
		if(el1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (el1.nodeType == null ? "null" : XmlType.toString(el1.nodeType)));
		}
		switch(el1.nodeName) {
		case "chars":case "pages":
			if(el1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (el1.nodeType == null ? "null" : XmlType.toString(el1.nodeType)));
			}
			if(el1.nodeName == "chars") {
				if(el1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (el1.nodeType == null ? "null" : XmlType.toString(el1.nodeType)));
				}
				result_b += Std.string(el1.nodeName);
				var attr = el1.attributes();
				while(attr.hasNext()) {
					var attr1 = attr.next();
					var value = el1.get(attr1);
					if(value != null) {
						result_b += " ";
						result_b += Std.string(attr1);
						result_b += "=";
						if(attr1 == "face" || attr1 == "char" || attr1 == "file" || value.indexOf(" ") != -1 || value.indexOf("\"") != -1 || value.indexOf("=") != -1) {
							result_b += Std.string(JSON.stringify(value));
						} else {
							result_b += Std.string(value);
						}
					}
				}
				result_b += "\n";
			}
			var subEl = el1.elements();
			while(subEl.hasNext()) {
				var subEl1 = subEl.next();
				if(subEl1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (subEl1.nodeType == null ? "null" : XmlType.toString(subEl1.nodeType)));
				}
				result_b += Std.string(subEl1.nodeName);
				var attr2 = subEl1.attributes();
				while(attr2.hasNext()) {
					var attr3 = attr2.next();
					var value1 = subEl1.get(attr3);
					if(value1 != null) {
						result_b += " ";
						result_b += Std.string(attr3);
						result_b += "=";
						if(attr3 == "face" || attr3 == "char" || attr3 == "file" || value1.indexOf(" ") != -1 || value1.indexOf("\"") != -1 || value1.indexOf("=") != -1) {
							result_b += Std.string(JSON.stringify(value1));
						} else {
							result_b += Std.string(value1);
						}
					}
				}
				result_b += "\n";
			}
			break;
		default:
			if(el1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (el1.nodeType == null ? "null" : XmlType.toString(el1.nodeType)));
			}
			result_b += Std.string(el1.nodeName);
			var attr4 = el1.attributes();
			while(attr4.hasNext()) {
				var attr5 = attr4.next();
				var value2 = el1.get(attr5);
				if(value2 != null) {
					result_b += " ";
					result_b += Std.string(attr5);
					result_b += "=";
					if(attr5 == "face" || attr5 == "char" || attr5 == "file" || value2.indexOf(" ") != -1 || value2.indexOf("\"") != -1 || value2.indexOf("=") != -1) {
						result_b += Std.string(JSON.stringify(value2));
					} else {
						result_b += Std.string(value2);
					}
				}
			}
			result_b += "\n";
		}
	}
	return result_b;
};
ceramic_BitmapFontParser.parseLine = function(line,info) {
	var items = new haxe_ds_StringMap();
	var firstToken = ceramic_BitmapFontParser.extractLineTokens(line,items);
	switch(firstToken) {
	case "char":
		var char = new ceramic_BitmapFontCharacter(Std.parseInt(items.h["id"]),parseFloat(items.h["x"]),parseFloat(items.h["y"]),parseFloat(items.h["width"]),parseFloat(items.h["height"]),parseFloat(items.h["xoffset"]),parseFloat(items.h["yoffset"]),parseFloat(items.h["xadvance"]),Std.parseInt(items.h["page"]));
		info.chars.set(char.id,char);
		break;
	case "chars":
		info.charCount = Std.parseInt(items.h["count"]);
		break;
	case "common":
		info.lineHeight = parseFloat(items.h["lineHeight"]);
		info.baseSize = parseFloat(items.h["base"]);
		break;
	case "distanceField":
		var fieldType = items.h["fieldType"];
		var distanceRange = Std.parseInt(items.h["distanceRange"]);
		info.distanceField = new ceramic_BitmapFontDistanceFieldData(fieldType,distanceRange);
		break;
	case "info":
		var s = items.h["face"];
		var len = s.length;
		if(HxOverrides.cca(s,0) == 34 && HxOverrides.cca(s,len - 1) == 34) {
			s = s.substring(1,len - 1);
		}
		info.face = s;
		info.pointSize = parseFloat(items.h["size"]);
		break;
	case "kerning":
		var first = Std.parseInt(items.h["first"]);
		var second = Std.parseInt(items.h["second"]);
		var amount = parseFloat(items.h["amount"]);
		var map = info.kernings.get(first);
		if(map == null) {
			map = new ceramic_IntFloatMap();
			info.kernings.set(first,map);
		}
		map.set(second,amount);
		break;
	case "page":
		var s = items.h["file"];
		var len = s.length;
		if(HxOverrides.cca(s,0) == 34 && HxOverrides.cca(s,len - 1) == 34) {
			s = s.substring(1,len - 1);
		}
		info.pages.push(new ceramic_BitmapFontDataPage(Std.parseInt(items.h["id"]),StringTools.trim(s)));
		break;
	default:
	}
};
ceramic_BitmapFontParser.extractLineTokens = function(line,map) {
	var i = 0;
	var len = line.length;
	var firstToken = null;
	var keyToken = null;
	var nextToken = null;
	var inQuotes = false;
	while(i < len) {
		var c = HxOverrides.cca(line,i);
		if(inQuotes) {
			if(c == 92) {
				c = HxOverrides.cca(line,i);
				++i;
			} else if(c == 34) {
				inQuotes = false;
			}
			if(nextToken == null) {
				throw haxe_Exception.thrown("Invalid bitmap font line: " + line);
			}
			nextToken.b += Std.string(line.charAt(i));
		} else if(c == 32) {
			if(nextToken != null) {
				if(firstToken == null) {
					firstToken = nextToken.b;
				} else if(keyToken == null) {
					keyToken = nextToken.b;
					map.h[keyToken] = null;
				} else {
					map.h[keyToken] = nextToken.b;
				}
				keyToken = null;
				nextToken = null;
			}
		} else if(keyToken == null && c == 61) {
			if(nextToken == null) {
				throw haxe_Exception.thrown("Invalid bitmap font line: " + line);
			}
			keyToken = nextToken.b;
			nextToken = null;
		} else {
			if(c == 34) {
				inQuotes = true;
			}
			if(nextToken == null) {
				nextToken = new StringBuf();
			}
			nextToken.b += Std.string(line.charAt(i));
		}
		++i;
	}
	if(nextToken != null) {
		if(firstToken == null) {
			firstToken = nextToken.b;
		} else if(keyToken == null) {
			keyToken = nextToken.b;
			map.h[keyToken] = null;
		} else {
			map.h[keyToken] = nextToken.b;
		}
		keyToken = null;
		nextToken = null;
	}
	return firstToken;
};
ceramic_BitmapFontParser.unquote = function(s) {
	var len = s.length;
	if(HxOverrides.cca(s,0) == 34 && HxOverrides.cca(s,len - 1) == 34) {
		s = s.substring(1,len - 1);
	}
	return s;
};
var ceramic_Collection = {};
ceramic_Collection._new = function() {
	return new ceramic_CollectionImpl();
};
ceramic_Collection.arrayAccess = function(this1,index) {
	return this1.getByIndex(index);
};
ceramic_Collection.randomElement = function(this1) {
	if(this1.combinedCollections != null) {
		if(ceramic_CollectionImpl._lastCheckedCombined != this1) {
			var _g = 0;
			var _g1 = this1.combinedCollections.length;
			while(_g < _g1) {
				var i = _g++;
				var collection = this1.combinedCollections[i];
				var collectionLastChange = this1.combinedCollectionLastChanges[i];
				if(collectionLastChange != collection.lastChange) {
					this1.entriesDirty = true;
					break;
				}
			}
			ceramic_CollectionImpl._lastCheckedCombined = this1;
		}
	}
	if(this1.entriesDirty) {
		this1.computeEntries();
	}
	var array = this1.entries;
	return array[Math.floor(Math.random() * 0.99999 * array.length)];
};
ceramic_Collection.randomElementExcept = function(this1,except,unsafe) {
	if(unsafe == null) {
		unsafe = false;
	}
	if(this1.combinedCollections != null) {
		if(ceramic_CollectionImpl._lastCheckedCombined != this1) {
			var _g = 0;
			var _g1 = this1.combinedCollections.length;
			while(_g < _g1) {
				var i = _g++;
				var collection = this1.combinedCollections[i];
				var collectionLastChange = this1.combinedCollectionLastChanges[i];
				if(collectionLastChange != collection.lastChange) {
					this1.entriesDirty = true;
					break;
				}
			}
			ceramic_CollectionImpl._lastCheckedCombined = this1;
		}
	}
	if(this1.entriesDirty) {
		this1.computeEntries();
	}
	return ceramic_Extensions.randomElementExcept(this1.entries,except,unsafe);
};
ceramic_Collection.randomElementMatchingValidator = function(this1,validator) {
	if(this1.combinedCollections != null) {
		if(ceramic_CollectionImpl._lastCheckedCombined != this1) {
			var _g = 0;
			var _g1 = this1.combinedCollections.length;
			while(_g < _g1) {
				var i = _g++;
				var collection = this1.combinedCollections[i];
				var collectionLastChange = this1.combinedCollectionLastChanges[i];
				if(collectionLastChange != collection.lastChange) {
					this1.entriesDirty = true;
					break;
				}
			}
			ceramic_CollectionImpl._lastCheckedCombined = this1;
		}
	}
	if(this1.entriesDirty) {
		this1.computeEntries();
	}
	return ceramic_Extensions.randomElementMatchingValidator(this1.entries,validator);
};
var ceramic_CollectionImpl = function() {
	this.combinedCollectionLastChanges = null;
	this.combinedCollections = null;
	this.filter = null;
	this.byId = null;
	this.entriesDirty = false;
	this.indexDirty = true;
	this.entries = [];
	this.lastChange = 0;
	this.internalId = ceramic_CollectionImpl._nextInternalId++;
};
$hxClasses["ceramic.CollectionImpl"] = ceramic_CollectionImpl;
ceramic_CollectionImpl.__name__ = "ceramic.CollectionImpl";
ceramic_CollectionImpl.__interfaces__ = [tracker_Events];
ceramic_CollectionImpl.prototype = {
	internalId: null
	,lastChange: null
	,entries: null
	,indexDirty: null
	,entriesDirty: null
	,byId: null
	,filter: null
	,combinedCollections: null
	,combinedCollectionLastChanges: null
	,get_length: function() {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return this.entries.length;
	}
	,pushAll: function(entries) {
		if(this.combinedCollections != null) {
			ceramic_App.app.logger.error("combinedCollections == null" + (" (" + "Cannot add entries to combined collections" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Collection.hx", lineNumber : 105, className : "ceramic.CollectionImpl", methodName : "pushAll"});
			throw haxe_Exception.thrown("combinedCollections == null" + (" (" + "Cannot add entries to combined collections" + ")"));
		}
		var _g = 0;
		while(_g < entries.length) {
			var entry = entries[_g];
			++_g;
			this.entries.push(entry);
		}
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,clear: function() {
		if(this.combinedCollections != null) {
			ceramic_App.app.logger.error("combinedCollections == null" + (" (" + "Cannot clear combined collections" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Collection.hx", lineNumber : 119, className : "ceramic.CollectionImpl", methodName : "clear"});
			throw haxe_Exception.thrown("combinedCollections == null" + (" (" + "Cannot clear combined collections" + ")"));
		}
		var len = this.entries.length;
		if(len > 0) {
			this.entries.splice(0,len);
		}
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,push: function(entry) {
		if(this.combinedCollections != null) {
			ceramic_App.app.logger.error("combinedCollections == null" + (" (" + "Cannot add entries to combined collections" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Collection.hx", lineNumber : 134, className : "ceramic.CollectionImpl", methodName : "push"});
			throw haxe_Exception.thrown("combinedCollections == null" + (" (" + "Cannot add entries to combined collections" + ")"));
		}
		this.entries.push(entry);
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,remove: function(entry) {
		if(this.combinedCollections != null) {
			ceramic_App.app.logger.error("combinedCollections == null" + (" (" + "Cannot remove entries from combined collections" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Collection.hx", lineNumber : 145, className : "ceramic.CollectionImpl", methodName : "remove"});
			throw haxe_Exception.thrown("combinedCollections == null" + (" (" + "Cannot remove entries from combined collections" + ")"));
		}
		HxOverrides.remove(this.entries,entry);
		this.indexDirty = true;
		this.lastChange = this.lastChange > 999999999 ? -999999999 : this.lastChange + 1;
		ceramic_CollectionImpl._lastCheckedCombined = null;
	}
	,synchronize: function() {
		if(this.entriesDirty) {
			this.computeEntries();
		}
		if(this.indexDirty) {
			this.computeIndex();
		}
	}
	,get: function(id) {
		if(id == null) {
			throw haxe_Exception.thrown("Cannot get a collection entry with a null id!");
		}
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		if(this.indexDirty) {
			this.computeIndex();
		}
		return this.byId.h[id];
	}
	,getByIndex: function(index) {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return this.entries[index];
	}
	,indexOfId: function(id) {
		var entry = this.get(id);
		if(entry == null) {
			return -1;
		}
		return this.indexOf(entry);
	}
	,indexOf: function(entry) {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return this.entries.indexOf(entry);
	}
	,iterator: function() {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
		if(this.entriesDirty) {
			this.computeEntries();
		}
		return new haxe_iterators_ArrayIterator(this.entries);
	}
	,checkCombined: function() {
		if(this.combinedCollections != null) {
			if(ceramic_CollectionImpl._lastCheckedCombined != this) {
				var _g = 0;
				var _g1 = this.combinedCollections.length;
				while(_g < _g1) {
					var i = _g++;
					var collection = this.combinedCollections[i];
					var collectionLastChange = this.combinedCollectionLastChanges[i];
					if(collectionLastChange != collection.lastChange) {
						this.entriesDirty = true;
						break;
					}
				}
				ceramic_CollectionImpl._lastCheckedCombined = this;
			}
		}
	}
	,computeIndex: function() {
		if(this.entriesDirty) {
			this.computeEntries();
		}
		this.byId = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(this.byId.h,entry.id)) {
				this.byId.h[entry.id] = entry;
			}
		}
		this.indexDirty = false;
	}
	,computeEntries: function() {
		if(this.combinedCollections == null) {
			ceramic_App.app.logger.error("combinedCollections != null" + (" (" + "Entries only need to be computed on combined collections" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Collection.hx", lineNumber : 262, className : "ceramic.CollectionImpl", methodName : "computeEntries"});
			throw haxe_Exception.thrown("combinedCollections != null" + (" (" + "Entries only need to be computed on combined collections" + ")"));
		}
		this.entries = [];
		var _g = 0;
		var _g1 = this.combinedCollections.length;
		while(_g < _g1) {
			var i = _g++;
			var collection = this.combinedCollections[i];
			if(collection.combinedCollections != null) {
				if(ceramic_CollectionImpl._lastCheckedCombined != collection) {
					var _g2 = 0;
					var _g3 = collection.combinedCollections.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var collection1 = collection.combinedCollections[i1];
						var collectionLastChange = collection.combinedCollectionLastChanges[i1];
						if(collectionLastChange != collection1.lastChange) {
							collection.entriesDirty = true;
							break;
						}
					}
					ceramic_CollectionImpl._lastCheckedCombined = collection;
				}
			}
			if(collection.entriesDirty) {
				collection.computeEntries();
			}
			var _g_current = 0;
			var _g_array = collection.entries;
			while(_g_current < _g_array.length) {
				var entry = _g_array[_g_current++];
				this.entries.push(entry);
			}
			this.combinedCollectionLastChanges[i] = collection.lastChange;
		}
		if(this.filter != null) {
			this.entries = this.filter(this.entries);
		}
		this.entriesDirty = false;
		this.indexDirty = true;
		if(ceramic_CollectionImpl._lastCheckedCombined != this) {
			ceramic_CollectionImpl._lastCheckedCombined = null;
		}
	}
	,__class__: ceramic_CollectionImpl
	,__properties__: {get_length:"get_length"}
};
var ceramic_CollectionEntry = function(id,name) {
	this.index = ceramic_CollectionEntry._nextIndex++;
	this.id = id != null ? id : "id" + ceramic_CollectionEntry._nextId++;
	this.name = name;
};
$hxClasses["ceramic.CollectionEntry"] = ceramic_CollectionEntry;
ceramic_CollectionEntry.__name__ = "ceramic.CollectionEntry";
ceramic_CollectionEntry.prototype = {
	id: null
	,name: null
	,index: null
	,setRawData: function(data) {
		var clazz = js_Boot.getClass(this);
		var classPath = clazz.__name__;
		var types = ceramic_FieldInfo.types(classPath);
		var h = types.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var type = types.h[key];
			if(Object.prototype.hasOwnProperty.call(data,key)) {
				var rawValue = Reflect.field(data,key);
				var value = null;
				if(this.setRawField(key,rawValue)) {
					continue;
				}
				var targetClass = clazz.__name__;
				if(ceramic_FieldMeta._hasMeta(clazz,targetClass,key,"skipEmpty",true)) {
					if(rawValue == null) {
						continue;
					}
					if(typeof(rawValue) == "string") {
						var rawValueStr = rawValue;
						if(rawValueStr.length == 0) {
							continue;
						}
					}
				}
				if(type == null) {
					var rawValue1 = StringTools.trim(("" + Std.string(rawValue)).toLowerCase());
					var resolvedEnum = $hxEnums[type];
					if(resolvedEnum != null) {
						var _g = 0;
						var _this = resolvedEnum.__constructs__;
						var result = new Array(_this.length);
						var _g1 = 0;
						var _g2 = _this.length;
						while(_g1 < _g2) {
							var i = _g1++;
							result[i] = _this[i]._hx_name;
						}
						var _g3 = result;
						while(_g < _g3.length) {
							var name = _g3[_g];
							++_g;
							if(name.toLowerCase() == rawValue1) {
								value = Type.createEnum(resolvedEnum,name);
								break;
							}
						}
					}
				} else {
					switch(type) {
					case "Bool":
						if(typeof(rawValue) == "boolean") {
							value = rawValue;
						} else {
							rawValue = StringTools.trim(("" + Std.string(rawValue)).toLowerCase());
							if(rawValue != "" && rawValue != "0" && rawValue != "false" && rawValue != "no") {
								value = true;
							} else {
								value = false;
							}
						}
						break;
					case "Float":
						if(typeof(rawValue) == "number" && ((rawValue | 0) === rawValue) || typeof(rawValue) == "number") {
							value = rawValue;
						} else {
							value = parseFloat(StringTools.replace("" + Std.string(rawValue),",","."));
							if(value == null || isNaN(value)) {
								value = 0.0;
							}
						}
						break;
					case "String":
						value = rawValue == null || rawValue == "null" ? null : "" + Std.string(rawValue);
						break;
					case "Int":case "ceramic.Color":
						if(typeof(rawValue) == "number" && ((rawValue | 0) === rawValue) || typeof(rawValue) == "number") {
							value = rawValue | 0;
						} else {
							value = Std.parseInt("" + Std.string(rawValue));
							if(value == null || isNaN(value)) {
								value = 0;
							}
						}
						break;
					default:
						var rawValue2 = StringTools.trim(("" + Std.string(rawValue)).toLowerCase());
						var resolvedEnum1 = $hxEnums[type];
						if(resolvedEnum1 != null) {
							var _g4 = 0;
							var _this1 = resolvedEnum1.__constructs__;
							var result1 = new Array(_this1.length);
							var _g5 = 0;
							var _g6 = _this1.length;
							while(_g5 < _g6) {
								var i1 = _g5++;
								result1[i1] = _this1[i1]._hx_name;
							}
							var _g7 = result1;
							while(_g4 < _g7.length) {
								var name1 = _g7[_g4];
								++_g4;
								if(name1.toLowerCase() == rawValue2) {
									value = Type.createEnum(resolvedEnum1,name1);
									break;
								}
							}
						}
					}
				}
				this[key] = value;
			}
		}
	}
	,setRawField: function(name,rawValue) {
		return false;
	}
	,__class__: ceramic_CollectionEntry
};
var ceramic_IntIntMap = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	this.size = 0;
	this.iterableKeysUsed = null;
	this.iterableKeys = null;
	this.intMap = new haxe_ds_IntMap();
	if(iterable) {
		this.iterableKeys = [];
		this.iterableKeysUsed = new ceramic_IntIntMap(16,0.5,false);
	}
};
$hxClasses["ceramic.IntIntMap"] = ceramic_IntIntMap;
ceramic_IntIntMap.__name__ = "ceramic.IntIntMap";
ceramic_IntIntMap.prototype = {
	intMap: null
	,iterableKeys: null
	,iterableKeysUsed: null
	,size: null
	,clear: function() {
		this.intMap.h = { };
		this.size = 0;
		if(this.iterableKeys != null) {
			this.iterableKeys = [];
			this.iterableKeysUsed = new ceramic_IntIntMap(16,0.5,false);
		}
	}
	,exists: function(key) {
		return this.intMap.h.hasOwnProperty(key | 0);
	}
	,set: function(key,value) {
		var tmp;
		if(this.iterableKeys != null) {
			var value1 = this.iterableKeysUsed.intMap.h[key | 0];
			tmp = (value1 != null ? value1 : 0) == 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.iterableKeysUsed.set(key,1);
			this.iterableKeys.push(key);
		}
		var k = key | 0;
		if(!this.intMap.h.hasOwnProperty(k)) {
			this.size++;
		}
		this.intMap.h[k] = value | 0;
		return value;
	}
	,get: function(key) {
		var value = this.intMap.h[key | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,remove: function(key) {
		var k = key | 0;
		var prev = 0;
		var tmp;
		if(this.iterableKeys != null) {
			var value = this.iterableKeysUsed.intMap.h[key | 0];
			tmp = (value != null ? value : 0) != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.iterableKeysUsed.set(key,0);
			this.iterableKeys.splice(this.iterableKeys.indexOf(key),1);
		}
		if(this.intMap.h.hasOwnProperty(k)) {
			prev = this.intMap.h[k];
			this.size--;
		}
		this.intMap.remove(k);
		return prev;
	}
	,getInline: function(key) {
		var value = this.intMap.h[key | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,existsInline: function(key) {
		return this.intMap.h.hasOwnProperty(key | 0);
	}
	,copy: function() {
		var map = new ceramic_IntIntMap();
		map.intMap = this.intMap.copy();
		map.size = this.size;
		map.iterableKeys = this.iterableKeys != null ? this.iterableKeys.slice() : null;
		map.iterableKeysUsed = this.iterableKeysUsed != null ? ceramic_IntBoolMap.copy(this.iterableKeysUsed) : null;
		return map;
	}
	,iterator: function() {
		return new ceramic_IntIntMapIterator(this);
	}
	,keys: function() {
		return new ceramic_IntIntMapKeyIterator(this);
	}
	,keyValueIterator: function() {
		return new ceramic_IntIntMapKeyValueIterator(this);
	}
	,__class__: ceramic_IntIntMap
};
var ceramic_Color = {};
ceramic_Color.__properties__ = {set_lightnessHSLuv:"set_lightnessHSLuv",get_lightnessHSLuv:"get_lightnessHSLuv",set_saturationHSLuv:"set_saturationHSLuv",get_saturationHSLuv:"get_saturationHSLuv",set_hueHSLuv:"set_hueHSLuv",get_hueHSLuv:"get_hueHSLuv",set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red"};
ceramic_Color.toAlphaColor = function(this1) {
	var value = (this1 | 0) + (-16777216);
	value &= 16777215;
	value |= -16777216;
	return value;
};
ceramic_Color.random = function(minSatutation,minBrightness) {
	if(minBrightness == null) {
		minBrightness = 0.5;
	}
	if(minSatutation == null) {
		minSatutation = 0.5;
	}
	var hue = Math.random() * 360;
	var saturation = Math.random() * (1.0 - minSatutation) + minSatutation;
	var brightness = Math.random() * (1.0 - minBrightness) + minBrightness;
	return ceramic_Color.fromHSB(hue,saturation,brightness);
};
ceramic_Color.fromInt = function(value) {
	var value1 = value;
	if(value1 == null) {
		value1 = 0;
	}
	return value1;
};
ceramic_Color.fromRGB = function(red,green,blue) {
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_Color.fromRGBFloat = function(red,green,blue) {
	var color = 0;
	var value = Math.round(red * 255);
	color &= 65535;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	color &= 16711935;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	color &= 16776960;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	return color;
};
ceramic_Color.fromCMYK = function(cyan,magenta,yellow,black) {
	var color = 0;
	var value = (1 - cyan) * (1 - black);
	var value1 = Math.round(value * 255);
	color &= 65535;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - magenta) * (1 - black);
	var value1 = Math.round(value * 255);
	color &= 16711935;
	color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - yellow) * (1 - black);
	var value1 = Math.round(value * 255);
	color &= 16776960;
	color |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return color;
};
ceramic_Color.fromHSB = function(hue,saturation,brightness) {
	var color = 0;
	var chroma = brightness * saturation;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return color;
};
ceramic_Color.fromHSL = function(hue,saturation,lightness) {
	var color = 0;
	var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
	var match = lightness - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return color;
};
ceramic_Color.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(StringTools.startsWith(str,"0x")) {
		var value = Std.parseInt(str.substring(0,8));
		if(value == null) {
			value = 0;
		}
		result = value;
	} else if(StringTools.startsWith(str,"#")) {
		if(str.length >= 9) {
			var hexColor = "0x" + str.substring(1,9);
			var alphaColor = Std.parseInt(hexColor);
			var red = alphaColor >> 16 & 255;
			var green = alphaColor >> 8 & 255;
			var blue = alphaColor & 255;
			var color = 0;
			color &= 65535;
			color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
			color &= 16711935;
			color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
			color &= 16776960;
			color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
			result = color;
		} else {
			var hexColor = "0x" + str.substring(1,7);
			var value = Std.parseInt(hexColor);
			if(value == null) {
				value = 0;
			}
			result = value;
		}
	} else {
		str = str.toUpperCase();
		var h = ceramic_Color.colorLookup.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(key == str) {
				var value = ceramic_Color.colorLookup.h[key];
				if(value == null) {
					value = 0;
				}
				result = value;
				break;
			}
		}
	}
	return result;
};
ceramic_Color.getHSBColorWheel = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(ceramic_Color.fromHSB(c,1.0,1.0));
	}
	return _g;
};
ceramic_Color.interpolate = function(color1,color2,factor) {
	if(factor == null) {
		factor = 0.5;
	}
	var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
	var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
	var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
	var color = 0;
	color &= 65535;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= 16711935;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= 16776960;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	return color;
};
ceramic_Color.gradient = function(color1,color2,steps,ease) {
	var output = [];
	if(ease == null) {
		ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = steps;
	while(_g < _g1) {
		var step = _g++;
		var factor = ease(step / (steps - 1));
		if(factor == null) {
			factor = 0.5;
		}
		var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
		var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
		var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
		var color = 0;
		color &= 65535;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= 16711935;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= 16776960;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		output[step] = color;
	}
	return output;
};
ceramic_Color.multiply = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var color = 0;
	var value = Math.round(red * 255);
	color &= 65535;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	color &= 16711935;
	color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	color &= 16776960;
	color |= value > 255 ? 255 : value < 0 ? 0 : value;
	return color;
};
ceramic_Color.add = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var blue = (lhs & 255) + (rhs & 255);
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_Color.subtract = function(lhs,rhs) {
	var red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var blue = (lhs & 255) - (rhs & 255);
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return color;
};
ceramic_Color.toHexString = function(this1,prefix) {
	if(prefix == null) {
		prefix = true;
	}
	return (prefix ? "0x" : "") + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
ceramic_Color.toWebString = function(this1) {
	var prefix = false;
	if(prefix == null) {
		prefix = true;
	}
	return "#" + ((prefix ? "0x" : "") + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
ceramic_Color.getColorInfo = function(this1) {
	var result = "0x" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2) + "\n";
	result += "red: " + (this1 >> 16 & 255) + " green: " + (this1 >> 8 & 255) + " blue: " + (this1 & 255) + "\n";
	result += "hue: " + ceramic_Color.roundDecimal(ceramic_Color.get_hue(this1),2) + " saturation: " + ceramic_Color.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " brightness: " + ceramic_Color.roundDecimal(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " lightness: " + ceramic_Color.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2,2);
	return result;
};
ceramic_Color.getDarkened = function(this1,factor) {
	if(factor == null) {
		factor = 0.2;
	}
	var lowerBound = factor < 0 ? 0 : factor;
	factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - factor);
	var hue = ceramic_Color.get_hue(output);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return output;
};
ceramic_Color.getLightened = function(this1,factor) {
	if(factor == null) {
		factor = 0.2;
	}
	var lowerBound = factor < 0 ? 0 : factor;
	factor = lowerBound > 1 ? 1 : lowerBound;
	var output = this1;
	var value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * factor;
	var hue = ceramic_Color.get_hue(output);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		output &= 65535;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		output &= 16711935;
		output |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		output &= 16776960;
		output |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return output;
};
ceramic_Color.getInverted = function(this1) {
	var lhs = 16777215;
	var red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var blue = (lhs & 255) - (this1 & 255);
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var output = color;
	return output;
};
ceramic_Color.setRGB = function(this1,red,green,blue) {
	this1 &= 65535;
	this1 |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	this1 &= 16711935;
	this1 |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	this1 &= 16776960;
	this1 |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	return this1;
};
ceramic_Color.setRGBFloat = function(this1,red,green,blue) {
	var value = Math.round(red * 255);
	this1 &= 65535;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	var value = Math.round(green * 255);
	this1 &= 16711935;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	var value = Math.round(blue * 255);
	this1 &= 16776960;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return this1;
};
ceramic_Color.setCMYK = function(this1,cyan,magenta,yellow,black) {
	var value = (1 - cyan) * (1 - black);
	var value1 = Math.round(value * 255);
	this1 &= 65535;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	var value = (1 - magenta) * (1 - black);
	var value1 = Math.round(value * 255);
	this1 &= 16711935;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	var value = (1 - yellow) * (1 - black);
	var value1 = Math.round(value * 255);
	this1 &= 16776960;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return this1;
};
ceramic_Color.setHSB = function(this1,hue,saturation,brightness) {
	var chroma = brightness * saturation;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return this1;
};
ceramic_Color.setHSL = function(this1,hue,saturation,lightness) {
	var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
	var match = lightness - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return this1;
};
ceramic_Color.setHSChromaMatch = function(this1,hue,saturation,chroma,match) {
	hue %= 360;
	var hueD = hue / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma += match;
	switch(hueD | 0) {
	case 0:
		var value = Math.round(chroma * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 1:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 2:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(chroma * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 3:
		var value = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 4:
		var value = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(chroma * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	case 5:
		var value = Math.round(chroma * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		var value = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		var value = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
		break;
	}
	return this1;
};
ceramic_Color._new = function(value) {
	if(value == null) {
		value = 0;
	}
	return value;
};
ceramic_Color.get_red = function(this1) {
	return this1 >> 16 & 255;
};
ceramic_Color.get_green = function(this1) {
	return this1 >> 8 & 255;
};
ceramic_Color.get_blue = function(this1) {
	return this1 & 255;
};
ceramic_Color.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
ceramic_Color.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
ceramic_Color.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
ceramic_Color.set_red = function(this1,value) {
	this1 &= 65535;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
	return value;
};
ceramic_Color.set_green = function(this1,value) {
	this1 &= 16711935;
	this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
	return value;
};
ceramic_Color.set_blue = function(this1,value) {
	this1 &= 16776960;
	this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	return value;
};
ceramic_Color.set_redFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 65535;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
	return value;
};
ceramic_Color.set_greenFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16711935;
	this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
	return value;
};
ceramic_Color.set_blueFloat = function(this1,value) {
	var value1 = Math.round(value * 255);
	this1 &= 16776960;
	this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
	return value;
};
ceramic_Color.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.set_cyan = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - value) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - magenta) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - yellow) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.set_magenta = function(this1,value) {
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - value) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - yellow) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.set_yellow = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - magenta) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - value) * (1 - black);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.set_black = function(this1,value) {
	var magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= 65535;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 16;
	var value1 = (1 - magenta) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= 16711935;
	this1 |= (value2 > 255 ? 255 : value2 < 0 ? 0 : value2) << 8;
	var value1 = (1 - yellow) * (1 - value);
	var value2 = Math.round(value1 * 255);
	this1 &= 16776960;
	this1 |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
	return value;
};
ceramic_Color.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
ceramic_Color.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
ceramic_Color.set_hue = function(this1,value) {
	var brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var chroma = brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = brightness - chroma;
	var hue = value;
	var chroma1 = chroma;
	hue %= 360;
	var hueD = hue / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.set_saturation = function(this1,value) {
	var hue = ceramic_Color.get_hue(this1);
	var brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var chroma = brightness * value;
	var match = brightness - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.set_brightness = function(this1,value) {
	var hue = ceramic_Color.get_hue(this1);
	var chroma = value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.set_lightness = function(this1,value) {
	var hue = ceramic_Color.get_hue(this1);
	var chroma = (1 - Math.abs(2 * value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = value - chroma / 2;
	var hue1 = hue;
	var chroma1 = chroma;
	hue1 %= 360;
	var hueD = hue1 / 60;
	var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
	chroma1 += match;
	switch(hueD | 0) {
	case 0:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 1:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(match * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 2:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 3:
		var value1 = Math.round(match * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(mid * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 4:
		var value1 = Math.round(mid * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(chroma1 * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	case 5:
		var value1 = Math.round(chroma1 * 255);
		this1 &= 65535;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 16;
		var value1 = Math.round(match * 255);
		this1 &= 16711935;
		this1 |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
		var value1 = Math.round(mid * 255);
		this1 &= 16776960;
		this1 |= value1 > 255 ? 255 : value1 < 0 ? 0 : value1;
		break;
	}
	return value;
};
ceramic_Color.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
ceramic_Color.boundChannel = function(this1,value) {
	if(value > 255) {
		return 255;
	} else if(value < 0) {
		return 0;
	} else {
		return value;
	}
};
ceramic_Color.roundDecimal = function(value,precision) {
	var mult = 1;
	var _g = 0;
	var _g1 = precision;
	while(_g < _g1) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(value * mult) / mult;
};
ceramic_Color.bound = function(value,min,max) {
	var lowerBound = min != null && value < min ? min : value;
	if(max != null && lowerBound > max) {
		return max;
	} else {
		return lowerBound;
	}
};
ceramic_Color.toString = function(this1) {
	if(this1 == -1) {
		return "NONE";
	} else {
		return "0x" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
	}
};
ceramic_Color.get_hueHSLuv = function(this1) {
	var key = this1;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_Color._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_Color._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_Color._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_Color._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_Color._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3];
};
ceramic_Color.set_hueHSLuv = function(this1,hueHSLuv) {
	var saturation = ceramic_Color.get_saturationHSLuv(this1);
	var lightness = ceramic_Color.get_lightnessHSLuv(this1);
	ceramic_Color._hsluvTuple[0] = hueHSLuv;
	ceramic_Color._hsluvTuple[1] = saturation * 100;
	ceramic_Color._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue = hueHSLuv;
		var chroma1 = chroma;
		hue %= 360;
		var hueD = hue / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return hueHSLuv;
};
ceramic_Color.get_saturationHSLuv = function(this1) {
	var key = this1;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_Color._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_Color._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_Color._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_Color._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_Color._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3 + 1];
};
ceramic_Color.set_saturationHSLuv = function(this1,saturationHSLuv) {
	var hue = ceramic_Color.get_hueHSLuv(this1);
	var lightness = ceramic_Color.get_lightnessHSLuv(this1);
	ceramic_Color._hsluvTuple[0] = hue;
	ceramic_Color._hsluvTuple[1] = saturationHSLuv * 100;
	ceramic_Color._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturationHSLuv;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return saturationHSLuv;
};
ceramic_Color.get_lightnessHSLuv = function(this1) {
	var key = this1;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_Color._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_Color._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_Color._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_Color._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_Color._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3 + 2];
};
ceramic_Color.set_lightnessHSLuv = function(this1,lightnessHSLuv) {
	var hue = ceramic_Color.get_hueHSLuv(this1);
	var saturation = ceramic_Color.get_saturationHSLuv(this1);
	ceramic_Color._hsluvTuple[0] = hue;
	ceramic_Color._hsluvTuple[1] = saturation * 100;
	ceramic_Color._hsluvTuple[2] = lightnessHSLuv * 100;
	if(lightnessHSLuv > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightnessHSLuv - 1)) * saturation;
		var match = lightnessHSLuv - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return lightnessHSLuv;
};
ceramic_Color._getOrCreateCachedHSLuvComponent = function(this1,index) {
	var key = this1;
	var value = ceramic_Color._hsluvCacheMap.intMap.h[key | 0];
	var entry = value != null ? value : 0;
	if(entry == 0) {
		entry = (ceramic_Color._hsluvCacheValues.length / 3 | 0) + 1;
		ceramic_Color._hsluvCacheMap.set(key,entry);
		var result = ceramic_Color._hsluvResult;
		if(result == null) {
			result = [0,0,0];
		}
		ceramic_Color._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
		ceramic_Color._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
		ceramic_Color._hsluvTuple[2] = (this1 & 255) / 255;
		hsluv_Hsluv.rgbToHsluv(ceramic_Color._hsluvTuple,result);
		result[1] *= 0.01;
		result[2] *= 0.01;
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[0]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[1]);
		ceramic_Color._hsluvCacheValues.push(ceramic_Color._hsluvResult[2]);
	}
	return ceramic_Color._hsluvCacheValues[(entry - 1) * 3 + index];
};
ceramic_Color.fromHSLuv = function(hue,saturation,lightness) {
	var color = 0;
	ceramic_Color._hsluvTuple[0] = hue;
	ceramic_Color._hsluvTuple[1] = saturation * 100;
	ceramic_Color._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		color &= 65535;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		color &= 16711935;
		color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		color &= 16776960;
		color |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return color;
};
ceramic_Color.setHSLuv = function(this1,hue,saturation,lightness) {
	ceramic_Color._hsluvTuple[0] = hue;
	ceramic_Color._hsluvTuple[1] = saturation * 100;
	ceramic_Color._hsluvTuple[2] = lightness * 100;
	if(lightness > 0.001) {
		hsluv_Hsluv.hsluvToRgb(ceramic_Color._hsluvTuple,ceramic_Color._hsluvResult);
		var v = ceramic_Color._hsluvResult[0];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 65535;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
		v = ceramic_Color._hsluvResult[1];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16711935;
		this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
		v = ceramic_Color._hsluvResult[2];
		if(v < 0) {
			v = 0;
		}
		var value = Math.round(v * 255);
		this1 &= 16776960;
		this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
	} else {
		var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
		var match = lightness - chroma / 2;
		var hue1 = hue;
		var chroma1 = chroma;
		hue1 %= 360;
		var hueD = hue1 / 60;
		var mid = chroma1 * (1 - Math.abs(hueD % 2 - 1)) + match;
		chroma1 += match;
		switch(hueD | 0) {
		case 0:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 1:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(match * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 2:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(chroma1 * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 3:
			var value = Math.round(match * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(mid * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 4:
			var value = Math.round(mid * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(chroma1 * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		case 5:
			var value = Math.round(chroma1 * 255);
			this1 &= 65535;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(match * 255);
			this1 &= 16711935;
			this1 |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(mid * 255);
			this1 &= 16776960;
			this1 |= value > 255 ? 255 : value < 0 ? 0 : value;
			break;
		}
	}
	return this1;
};
ceramic_Color.getHSLuv = function(this1,result) {
	if(result == null) {
		result = [0,0,0];
	}
	ceramic_Color._hsluvTuple[0] = (this1 >> 16 & 255) / 255;
	ceramic_Color._hsluvTuple[1] = (this1 >> 8 & 255) / 255;
	ceramic_Color._hsluvTuple[2] = (this1 & 255) / 255;
	hsluv_Hsluv.rgbToHsluv(ceramic_Color._hsluvTuple,result);
	result[1] *= 0.01;
	result[2] *= 0.01;
	return result;
};
var ceramic_Component = function() { };
$hxClasses["ceramic.Component"] = ceramic_Component;
ceramic_Component.__name__ = "ceramic.Component";
ceramic_Component.__isInterface__ = true;
ceramic_Component.prototype = {
	initializerName: null
	,setEntity: null
	,getEntity: null
	,bindAsComponent: null
	,__class__: ceramic_Component
};
var ceramic_ComputeFps = function(size) {
	if(size == null) {
		size = 10;
	}
	this.fps = 0;
	this.index = 0;
	this.size = size;
	this.frames = [];
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var i = _g++;
		this.frames.push(0);
	}
};
$hxClasses["ceramic.ComputeFps"] = ceramic_ComputeFps;
ceramic_ComputeFps.__name__ = "ceramic.ComputeFps";
ceramic_ComputeFps.prototype = {
	frames: null
	,index: null
	,size: null
	,fps: null
	,addFrame: function(delta) {
		this.frames[this.index] = delta;
		this.index = (this.index + 1) % this.size;
		var newFps = 0.0;
		var _g = 0;
		var _g1 = this.size;
		while(_g < _g1) {
			var i = _g++;
			newFps += this.frames[i];
		}
		if(newFps > 0) {
			newFps = this.size / newFps;
		} else {
			newFps = 0;
		}
		this.fps = Math.round(Math.min(999,newFps));
	}
	,__class__: ceramic_ComputeFps
};
var ceramic_ConvertField = function() { };
$hxClasses["ceramic.ConvertField"] = ceramic_ConvertField;
ceramic_ConvertField.__name__ = "ceramic.ConvertField";
ceramic_ConvertField.__isInterface__ = true;
ceramic_ConvertField.prototype = {
	basicToField: null
	,fieldToBasic: null
	,__class__: ceramic_ConvertField
};
var ceramic_ConvertArray = function() {
};
$hxClasses["ceramic.ConvertArray"] = ceramic_ConvertArray;
ceramic_ConvertArray.__name__ = "ceramic.ConvertArray";
ceramic_ConvertArray.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertArray.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = [];
		value = value.concat(basic);
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = [];
		basic = basic.concat(value);
		return basic;
	}
	,__class__: ceramic_ConvertArray
};
var ceramic_ConvertComponentMap = function() {
};
$hxClasses["ceramic.ConvertComponentMap"] = ceramic_ConvertComponentMap;
ceramic_ConvertComponentMap.__name__ = "ceramic.ConvertComponentMap";
ceramic_ConvertComponentMap.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertComponentMap.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(basic);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var initializerName = basic[name];
			ceramic_App.app.logger.error("Not using component initializers anymore. Need to implement event based solution!",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ConvertComponentMap.hx", lineNumber : 38, className : "ceramic.ConvertComponentMap", methodName : "basicToField"});
		}
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = { };
		var h = value.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			var component = value.h[name];
			if(component != null && component.initializerName != null) {
				basic[name] = component.initializerName;
			}
		}
		return basic;
	}
	,__class__: ceramic_ConvertComponentMap
};
var ceramic_ConvertFont = function() {
};
$hxClasses["ceramic.ConvertFont"] = ceramic_ConvertFont;
ceramic_ConvertFont.__name__ = "ceramic.ConvertFont";
ceramic_ConvertFont.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertFont.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic != null) {
			if(basic == ceramic_App.app.defaultFont.asset.name) {
				done(ceramic_App.app.defaultFont);
			} else {
				assets.ensureFont(basic,null,function(asset) {
					done(asset != null ? asset.get_font() : null);
				});
			}
		} else {
			done(null);
		}
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null || value.asset == null) {
			return null;
		} else {
			return value.asset.name;
		}
	}
	,__class__: ceramic_ConvertFont
};
var ceramic_ConvertFragmentData = function() {
};
$hxClasses["ceramic.ConvertFragmentData"] = ceramic_ConvertFragmentData;
ceramic_ConvertFragmentData.__name__ = "ceramic.ConvertFragmentData";
ceramic_ConvertFragmentData.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertFragmentData.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		done(basic);
	}
	,fieldToBasic: function(instance,field,value) {
		return value;
	}
	,__class__: ceramic_ConvertFragmentData
};
var ceramic_ConvertIntBoolMap = function() {
};
$hxClasses["ceramic.ConvertIntBoolMap"] = ceramic_ConvertIntBoolMap;
ceramic_ConvertIntBoolMap.__name__ = "ceramic.ConvertIntBoolMap";
ceramic_ConvertIntBoolMap.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertIntBoolMap.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = new ceramic_IntIntMap(16,0.5,false);
		var _g = 0;
		var _g1 = Reflect.fields(basic);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			value.set(Std.parseInt(key),Reflect.field(basic,key) ? 1 : 0);
		}
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = { };
		ceramic_App.app.logger.warning("ConvertIntBoolMap.fieldToBasic() not implemented!",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ConvertIntBoolMap.hx", lineNumber : 47, className : "ceramic.ConvertIntBoolMap", methodName : "fieldToBasic"});
		return basic;
	}
	,__class__: ceramic_ConvertIntBoolMap
};
var ceramic_ConvertMap = function() {
};
$hxClasses["ceramic.ConvertMap"] = ceramic_ConvertMap;
ceramic_ConvertMap.__name__ = "ceramic.ConvertMap";
ceramic_ConvertMap.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertMap.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic == null) {
			done(null);
			return;
		}
		var value = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(basic);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			value.h[key] = basic[key];
		}
		done(value);
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null) {
			return null;
		}
		var basic = { };
		var h = value.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			basic[key] = value.h[key];
		}
		return basic;
	}
	,__class__: ceramic_ConvertMap
};
var ceramic_ConvertTexture = function() {
};
$hxClasses["ceramic.ConvertTexture"] = ceramic_ConvertTexture;
ceramic_ConvertTexture.__name__ = "ceramic.ConvertTexture";
ceramic_ConvertTexture.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertTexture.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic != null) {
			assets.ensureImage(basic,null,function(asset) {
				done(asset != null ? asset.get_texture() : null);
			});
		} else {
			done(null);
		}
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null || value.asset == null) {
			return null;
		} else {
			return value.asset.name;
		}
	}
	,__class__: ceramic_ConvertTexture
};
var ceramic_ConvertTilemapData = function() {
};
$hxClasses["ceramic.ConvertTilemapData"] = ceramic_ConvertTilemapData;
ceramic_ConvertTilemapData.__name__ = "ceramic.ConvertTilemapData";
ceramic_ConvertTilemapData.__interfaces__ = [ceramic_ConvertField];
ceramic_ConvertTilemapData.prototype = {
	basicToField: function(instance,field,assets,basic,done) {
		if(basic != null) {
			ceramic_TilemapPlugin.ensureTilemap(assets,basic,null,function(asset) {
				done(asset != null ? asset.get_tilemapData() : null);
			});
		} else {
			done(null);
		}
	}
	,fieldToBasic: function(instance,field,value) {
		if(value == null || value.asset == null) {
			return null;
		} else {
			return value.asset.name;
		}
	}
	,__class__: ceramic_ConvertTilemapData
};
var ceramic_Csv = function() { };
$hxClasses["ceramic.Csv"] = ceramic_Csv;
ceramic_Csv.__name__ = "ceramic.Csv";
ceramic_Csv.parse = function(csv) {
	csv = StringTools.trim(csv);
	var sep = "";
	var i = 0;
	var c = "";
	var cc = "";
	var len = csv.length;
	var inString = false;
	var val = "";
	var keys = [];
	while(i < len) {
		c = csv.charAt(i);
		if(inString) {
			if(c == "\"") {
				cc = c + csv.charAt(i + 1);
				if(cc == "\"\"") {
					val += "\"";
					i += 2;
				} else {
					inString = false;
					++i;
				}
			} else {
				val += c;
				++i;
			}
		} else if(c == "\n") {
			++i;
			break;
		} else if(val == "" && c == "\"") {
			inString = true;
			++i;
		} else if(sep == "") {
			if(c == "," || c == ";") {
				sep = c;
				keys.push(StringTools.replace(val,"\r",""));
				val = "";
			} else {
				val += c;
			}
			++i;
		} else if(c == sep) {
			keys.push(StringTools.replace(val,"\r",""));
			val = "";
			++i;
		} else {
			val += c;
			++i;
		}
	}
	if(val != "") {
		keys.push(StringTools.replace(val,"\r",""));
	}
	inString = false;
	val = "";
	var entry = { };
	var entryHasFields = false;
	var result = [];
	var keyIndex = 0;
	var key = "";
	var tooManyColumnsAt = -1;
	while(i < len) {
		c = csv.charAt(i);
		if(inString) {
			if(c == "\"") {
				cc = c + csv.charAt(i + 1);
				if(cc == "\"\"") {
					val += "\"";
					i += 2;
				} else {
					inString = false;
					++i;
				}
			} else {
				val += c;
				++i;
			}
		} else if(c == "\n") {
			key = keys[keyIndex++];
			if(key != null) {
				entry[key] = StringTools.replace(val,"\r","");
				entryHasFields = true;
			} else if(tooManyColumnsAt == -1) {
				tooManyColumnsAt = result.length;
			}
			val = "";
			result.push(entry);
			entryHasFields = false;
			keyIndex = 0;
			entry = { };
			++i;
		} else if(val == "" && c == "\"") {
			inString = true;
			++i;
		} else if(c == sep) {
			key = keys[keyIndex++];
			if(key != null) {
				entry[key] = StringTools.replace(val,"\r","");
				entryHasFields = true;
			} else if(tooManyColumnsAt == -1) {
				tooManyColumnsAt = result.length;
			}
			val = "";
			++i;
		} else {
			val += c;
			++i;
		}
	}
	key = keys[keyIndex++];
	if(key != null) {
		entry[key] = StringTools.replace(val,"\r","");
		entryHasFields = true;
	} else if(tooManyColumnsAt == -1) {
		ceramic_Csv.warning(entry);
		tooManyColumnsAt = result.length;
	}
	val = "";
	if(entryHasFields) {
		result.push(entry);
	}
	if(tooManyColumnsAt >= 0) {
		ceramic_Csv.warning("Malformed CSV: too many columns at row #" + tooManyColumnsAt);
	}
	return result;
};
ceramic_Csv.stringify = function(items,fields) {
	if(fields == null) {
		fields = [];
		var usedFields_h = Object.create(null);
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var _g1 = 0;
			var _g2 = Reflect.fields(item);
			while(_g1 < _g2.length) {
				var field = _g2[_g1];
				++_g1;
				if(!Object.prototype.hasOwnProperty.call(usedFields_h,field)) {
					fields.push(field);
					usedFields_h[field] = true;
				}
			}
		}
	}
	var output_b = "";
	var n = 0;
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(n++ > 0) {
			output_b += ",";
		}
		if(field.length != 0) {
			output_b += "\"";
			var _g1 = 0;
			var _g2 = field.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var c = field.charAt(i);
				if(c == "\"") {
					output_b += "\"\"";
				} else {
					output_b += Std.string(c);
				}
			}
			output_b += "\"";
		}
	}
	var _g = 0;
	while(_g < items.length) {
		var item = items[_g];
		++_g;
		output_b += "\n";
		n = 0;
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			if(n++ > 0) {
				output_b += ",";
			}
			var value = Reflect.field(item,field);
			var input = value != null ? Std.string(value) : "";
			if(input.length != 0) {
				output_b += "\"";
				var _g2 = 0;
				var _g3 = input.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var c = input.charAt(i);
					if(c == "\"") {
						output_b += "\"\"";
					} else {
						output_b += Std.string(c);
					}
				}
				output_b += "\"";
			}
		}
	}
	return output_b;
};
ceramic_Csv.warning = function(str) {
	ceramic_App.app.logger.warning(str,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Csv.hx", lineNumber : 238, className : "ceramic.Csv", methodName : "warning"});
};
var ceramic_CustomAssetKind = function(kind,add,extensions,dir,types) {
	this.kind = kind;
	this.add = add;
	this.extensions = extensions;
	this.dir = dir;
	this.types = types;
};
$hxClasses["ceramic.CustomAssetKind"] = ceramic_CustomAssetKind;
ceramic_CustomAssetKind.__name__ = "ceramic.CustomAssetKind";
ceramic_CustomAssetKind.prototype = {
	kind: null
	,add: null
	,extensions: null
	,dir: null
	,types: null
	,__class__: ceramic_CustomAssetKind
};
var ceramic_DatabaseAsset = function(name,options) {
	this.unobservedDatabase = null;
	this.databaseAutoruns = null;
	ceramic_Asset.call(this,"database",name,options);
};
$hxClasses["ceramic.DatabaseAsset"] = ceramic_DatabaseAsset;
ceramic_DatabaseAsset.__name__ = "ceramic.DatabaseAsset";
ceramic_DatabaseAsset.__super__ = ceramic_Asset;
ceramic_DatabaseAsset.prototype = $extend(ceramic_Asset.prototype,{
	databaseAutoruns: null
	,get_database: function() {
		var value = this.unobservedDatabase;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.databaseAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.databaseAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_database: function(database) {
		var prevValue = this.unobservedDatabase;
		this.unobservedDatabase = database;
		if(prevValue == database) {
			return database;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitDatabaseChange(database,prevValue);
		var fieldAutoruns = this.databaseAutoruns;
		if(fieldAutoruns != null) {
			this.databaseAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return database;
	}
	,invalidateDatabase: function() {
		var value = this.unobservedDatabase;
		this.emitDatabaseChange(value,value);
		var fieldAutoruns = this.databaseAutoruns;
		if(fieldAutoruns != null) {
			this.databaseAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedDatabase: null
	,__cbOnDatabaseChange: null
	,__cbOnceDatabaseChange: null
	,__cbOnOwnerUnbindDatabaseChange: null
	,__cbOnceOwnerUnbindDatabaseChange: null
	,emitDatabaseChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnDatabaseChange != null) {
			len += this.__cbOnDatabaseChange.length;
		}
		if(this.__cbOnceDatabaseChange != null) {
			len += this.__cbOnceDatabaseChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnDatabaseChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDatabaseChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDatabaseChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDatabaseChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDatabaseChange[ii];
						this.__cbOnceDatabaseChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDatabaseChange[ii];
						this.__cbOnceOwnerUnbindDatabaseChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDatabaseChange[ii]);
						newCbOnceArray.push(this.__cbOnceDatabaseChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDatabaseChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceDatabaseChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDatabaseChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "databaseChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offDatabaseChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDatabaseChange == null) {
				this.__cbOnOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnOwnerUnbindDatabaseChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDatabaseChange == null) {
				this.__cbOnOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnOwnerUnbindDatabaseChange.push(null);
		}
		if(this.__cbOnDatabaseChange == null) {
			this.__cbOnDatabaseChange = [];
		}
		this.__cbOnDatabaseChange.push(handleCurrentPrevious);
	}
	,onceDatabaseChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "databaseChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offDatabaseChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDatabaseChange == null) {
				this.__cbOnceOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnceOwnerUnbindDatabaseChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDatabaseChange == null) {
				this.__cbOnceOwnerUnbindDatabaseChange = [];
			}
			this.__cbOnceOwnerUnbindDatabaseChange.push(null);
		}
		if(this.__cbOnceDatabaseChange == null) {
			this.__cbOnceDatabaseChange = [];
		}
		this.__cbOnceDatabaseChange.push(handleCurrentPrevious);
	}
	,offDatabaseChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnDatabaseChange != null) {
				index = this.__cbOnDatabaseChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnDatabaseChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDatabaseChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDatabaseChange.splice(index,1);
				}
			}
			if(this.__cbOnceDatabaseChange != null) {
				index = this.__cbOnceDatabaseChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceDatabaseChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDatabaseChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDatabaseChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDatabaseChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDatabaseChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDatabaseChange = null;
			}
			if(this.__cbOnceOwnerUnbindDatabaseChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDatabaseChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDatabaseChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDatabaseChange = null;
			}
			this.__cbOnDatabaseChange = null;
			this.__cbOnceDatabaseChange = null;
		}
	}
	,listensDatabaseChange: function() {
		if(!(this.__cbOnDatabaseChange != null && this.__cbOnDatabaseChange.length > 0)) {
			if(this.__cbOnceDatabaseChange != null) {
				return this.__cbOnceDatabaseChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load database asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\DatabaseAsset.hx", lineNumber : 21, className : "ceramic.DatabaseAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load database " + backendPath,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\DatabaseAsset.hx", lineNumber : 42, className : "ceramic.DatabaseAsset", methodName : "load"});
		ceramic_App.app.backend.texts.load(realPath,loadOptions,function(text) {
			if(text != null) {
				try {
					_gthis.set_database(ceramic_Csv.parse(text));
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to parse database at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\DatabaseAsset.hx", lineNumber : 50, className : "ceramic.DatabaseAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load database at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\DatabaseAsset.hx", lineNumber : 59, className : "ceramic.DatabaseAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload database (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\DatabaseAsset.hx", lineNumber : 82, className : "ceramic.DatabaseAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_database(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offDatabaseChange();
	}
	,__class__: ceramic_DatabaseAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_database:"set_database",get_database:"get_database"})
});
var ceramic_Easing = $hxEnums["ceramic.Easing"] = { __ename__:"ceramic.Easing",__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"ceramic.Easing",toString:$estr}
	,LINEAR: {_hx_name:"LINEAR",_hx_index:1,__enum__:"ceramic.Easing",toString:$estr}
	,BACK_EASE_IN: {_hx_name:"BACK_EASE_IN",_hx_index:2,__enum__:"ceramic.Easing",toString:$estr}
	,BACK_EASE_IN_OUT: {_hx_name:"BACK_EASE_IN_OUT",_hx_index:3,__enum__:"ceramic.Easing",toString:$estr}
	,BACK_EASE_OUT: {_hx_name:"BACK_EASE_OUT",_hx_index:4,__enum__:"ceramic.Easing",toString:$estr}
	,QUAD_EASE_IN: {_hx_name:"QUAD_EASE_IN",_hx_index:5,__enum__:"ceramic.Easing",toString:$estr}
	,QUAD_EASE_IN_OUT: {_hx_name:"QUAD_EASE_IN_OUT",_hx_index:6,__enum__:"ceramic.Easing",toString:$estr}
	,QUAD_EASE_OUT: {_hx_name:"QUAD_EASE_OUT",_hx_index:7,__enum__:"ceramic.Easing",toString:$estr}
	,CUBIC_EASE_IN: {_hx_name:"CUBIC_EASE_IN",_hx_index:8,__enum__:"ceramic.Easing",toString:$estr}
	,CUBIC_EASE_IN_OUT: {_hx_name:"CUBIC_EASE_IN_OUT",_hx_index:9,__enum__:"ceramic.Easing",toString:$estr}
	,CUBIC_EASE_OUT: {_hx_name:"CUBIC_EASE_OUT",_hx_index:10,__enum__:"ceramic.Easing",toString:$estr}
	,QUART_EASE_IN: {_hx_name:"QUART_EASE_IN",_hx_index:11,__enum__:"ceramic.Easing",toString:$estr}
	,QUART_EASE_IN_OUT: {_hx_name:"QUART_EASE_IN_OUT",_hx_index:12,__enum__:"ceramic.Easing",toString:$estr}
	,QUART_EASE_OUT: {_hx_name:"QUART_EASE_OUT",_hx_index:13,__enum__:"ceramic.Easing",toString:$estr}
	,QUINT_EASE_IN: {_hx_name:"QUINT_EASE_IN",_hx_index:14,__enum__:"ceramic.Easing",toString:$estr}
	,QUINT_EASE_IN_OUT: {_hx_name:"QUINT_EASE_IN_OUT",_hx_index:15,__enum__:"ceramic.Easing",toString:$estr}
	,QUINT_EASE_OUT: {_hx_name:"QUINT_EASE_OUT",_hx_index:16,__enum__:"ceramic.Easing",toString:$estr}
	,BOUNCE_EASE_IN: {_hx_name:"BOUNCE_EASE_IN",_hx_index:17,__enum__:"ceramic.Easing",toString:$estr}
	,BOUNCE_EASE_IN_OUT: {_hx_name:"BOUNCE_EASE_IN_OUT",_hx_index:18,__enum__:"ceramic.Easing",toString:$estr}
	,BOUNCE_EASE_OUT: {_hx_name:"BOUNCE_EASE_OUT",_hx_index:19,__enum__:"ceramic.Easing",toString:$estr}
	,ELASTIC_EASE_IN: {_hx_name:"ELASTIC_EASE_IN",_hx_index:20,__enum__:"ceramic.Easing",toString:$estr}
	,ELASTIC_EASE_IN_OUT: {_hx_name:"ELASTIC_EASE_IN_OUT",_hx_index:21,__enum__:"ceramic.Easing",toString:$estr}
	,ELASTIC_EASE_OUT: {_hx_name:"ELASTIC_EASE_OUT",_hx_index:22,__enum__:"ceramic.Easing",toString:$estr}
	,EXPO_EASE_IN: {_hx_name:"EXPO_EASE_IN",_hx_index:23,__enum__:"ceramic.Easing",toString:$estr}
	,EXPO_EASE_IN_OUT: {_hx_name:"EXPO_EASE_IN_OUT",_hx_index:24,__enum__:"ceramic.Easing",toString:$estr}
	,EXPO_EASE_OUT: {_hx_name:"EXPO_EASE_OUT",_hx_index:25,__enum__:"ceramic.Easing",toString:$estr}
	,SINE_EASE_IN: {_hx_name:"SINE_EASE_IN",_hx_index:26,__enum__:"ceramic.Easing",toString:$estr}
	,SINE_EASE_IN_OUT: {_hx_name:"SINE_EASE_IN_OUT",_hx_index:27,__enum__:"ceramic.Easing",toString:$estr}
	,SINE_EASE_OUT: {_hx_name:"SINE_EASE_OUT",_hx_index:28,__enum__:"ceramic.Easing",toString:$estr}
	,BEZIER: ($_=function(x1,y1,x2,y2) { return {_hx_index:29,x1:x1,y1:y1,x2:x2,y2:y2,__enum__:"ceramic.Easing",toString:$estr}; },$_._hx_name="BEZIER",$_.__params__ = ["x1","y1","x2","y2"],$_)
	,CUSTOM: ($_=function(easing) { return {_hx_index:30,easing:easing,__enum__:"ceramic.Easing",toString:$estr}; },$_._hx_name="CUSTOM",$_.__params__ = ["easing"],$_)
};
ceramic_Easing.__constructs__ = [ceramic_Easing.NONE,ceramic_Easing.LINEAR,ceramic_Easing.BACK_EASE_IN,ceramic_Easing.BACK_EASE_IN_OUT,ceramic_Easing.BACK_EASE_OUT,ceramic_Easing.QUAD_EASE_IN,ceramic_Easing.QUAD_EASE_IN_OUT,ceramic_Easing.QUAD_EASE_OUT,ceramic_Easing.CUBIC_EASE_IN,ceramic_Easing.CUBIC_EASE_IN_OUT,ceramic_Easing.CUBIC_EASE_OUT,ceramic_Easing.QUART_EASE_IN,ceramic_Easing.QUART_EASE_IN_OUT,ceramic_Easing.QUART_EASE_OUT,ceramic_Easing.QUINT_EASE_IN,ceramic_Easing.QUINT_EASE_IN_OUT,ceramic_Easing.QUINT_EASE_OUT,ceramic_Easing.BOUNCE_EASE_IN,ceramic_Easing.BOUNCE_EASE_IN_OUT,ceramic_Easing.BOUNCE_EASE_OUT,ceramic_Easing.ELASTIC_EASE_IN,ceramic_Easing.ELASTIC_EASE_IN_OUT,ceramic_Easing.ELASTIC_EASE_OUT,ceramic_Easing.EXPO_EASE_IN,ceramic_Easing.EXPO_EASE_IN_OUT,ceramic_Easing.EXPO_EASE_OUT,ceramic_Easing.SINE_EASE_IN,ceramic_Easing.SINE_EASE_IN_OUT,ceramic_Easing.SINE_EASE_OUT,ceramic_Easing.BEZIER,ceramic_Easing.CUSTOM];
var ceramic_EasingUtils = function() { };
$hxClasses["ceramic.EasingUtils"] = ceramic_EasingUtils;
ceramic_EasingUtils.__name__ = "ceramic.EasingUtils";
ceramic_EasingUtils.easingFromString = function(str) {
	return Type.createEnum(ceramic_Easing,str,ceramic_EasingUtils._emptyArray);
};
ceramic_EasingUtils.easingToString = function(easing) {
	return $hxEnums[easing.__enum__].__constructs__[easing._hx_index]._hx_name;
};
var ceramic_Extensions = function() { };
$hxClasses["ceramic.Extensions"] = ceramic_Extensions;
ceramic_Extensions.__name__ = "ceramic.Extensions";
ceramic_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
ceramic_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
ceramic_Extensions.setArrayLength = function(array,length) {
	if(array.length != length) {
		if(array.length > length) {
			array.splice(length,array.length - length);
		} else {
			var dArray = array;
			while(dArray.length < length) dArray.push(null);
		}
	}
};
ceramic_Extensions.randomElement = function(array) {
	return array[Math.floor(Math.random() * 0.99999 * array.length)];
};
ceramic_Extensions.randomElementExcept = function(array,except,unsafe) {
	if(unsafe == null) {
		unsafe = false;
	}
	if(unsafe) {
		var ret = null;
		do ret = array[Math.floor(Math.random() * 0.99999 * array.length)]; while(ret == except);
		return ret;
	} else {
		var array_ = [];
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			array_.push(item);
		}
		ceramic_Extensions.shuffle(array_);
		var _g = 0;
		while(_g < array_.length) {
			var item = array_[_g];
			++_g;
			if(item != except) {
				return item;
			}
		}
	}
	return null;
};
ceramic_Extensions.randomElementMatchingValidator = function(array,validator) {
	var array_ = [];
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		array_.push(item);
	}
	ceramic_Extensions.shuffle(array_);
	var _g = 0;
	while(_g < array_.length) {
		var item = array_[_g];
		++_g;
		if(validator(item)) {
			return item;
		}
	}
	return null;
};
ceramic_Extensions.shuffle = function(arr) {
	if(arr != null) {
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var j = Math.floor((arr.length - 1 + 1) * Math.random());
			var a = arr[i];
			var b = arr[j];
			arr[i] = b;
			arr[j] = a;
		}
	}
};
ceramic_Extensions.swapElements = function(arr,index0,index1) {
	var a = arr[index0];
	arr[index0] = arr[index1];
	arr[index1] = a;
};
ceramic_Extensions.removeNullElements = function(arr) {
	var i = 0;
	var gap = 0;
	var len = arr.length;
	while(i < len) {
		do {
			var item = arr[i];
			if(item == null) {
				++i;
				++gap;
			} else {
				break;
			}
		} while(i < len);
		if(gap != 0 && i < len) {
			var key = i - gap;
			arr[key] = arr[i];
		}
		++i;
	}
	ceramic_Extensions.setArrayLength(arr,len - gap);
};
ceramic_Extensions.setProperty = function(instance,field,value) {
	Reflect.setProperty(instance,field,value);
};
ceramic_Extensions.getProperty = function(instance,field) {
	return Reflect.getProperty(instance,field);
};
var ceramic_FieldInfo = function() { };
$hxClasses["ceramic.FieldInfo"] = ceramic_FieldInfo;
ceramic_FieldInfo.__name__ = "ceramic.FieldInfo";
ceramic_FieldInfo.types = function(targetClass,recursive) {
	if(recursive == null) {
		recursive = true;
	}
	var info = ceramic_FieldInfo.fieldInfoMap.h[targetClass];
	if(info == null) {
		info = new haxe_ds_StringMap();
		ceramic_FieldInfo.fieldInfoMap.h[targetClass] = info;
		var clazz = $hxClasses[targetClass];
		var firstTry = true;
		while(clazz != null) {
			var storedFieldInfo = Reflect.field(clazz,"_fieldInfo");
			if(!(storedFieldInfo != null || !firstTry)) {
				ceramic_App.app.logger.error("storedFieldInfo != null || !firstTry" + (" (" + ("Missing _fieldInfo on class " + targetClass) + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FieldInfo.hx", lineNumber : 29, className : "ceramic.FieldInfo", methodName : "types"});
				throw haxe_Exception.thrown("storedFieldInfo != null || !firstTry" + (" (" + ("Missing _fieldInfo on class " + targetClass) + ")"));
			}
			firstTry = false;
			if(storedFieldInfo != null) {
				var access = storedFieldInfo;
				var _g_access = access;
				var _g_keys = Reflect.fields(access);
				var _g_index = 0;
				while(_g_index < _g_keys.length) {
					var key = _g_keys[_g_index++];
					var _g_value = _g_access[key];
					var _g_key = key;
					var key1 = _g_key;
					var val = _g_value;
					if(!Object.prototype.hasOwnProperty.call(info.h,key1)) {
						info.h[key1] = val.type;
					}
				}
			}
			if(!recursive) {
				break;
			}
			clazz = clazz.__super__;
		}
	}
	return info;
};
ceramic_FieldInfo.typeOf = function(targetClass,field) {
	return ceramic_FieldInfo.types(targetClass).h[field];
};
var ceramic_FieldMeta = function() { };
$hxClasses["ceramic.FieldMeta"] = ceramic_FieldMeta;
ceramic_FieldMeta.__name__ = "ceramic.FieldMeta";
ceramic_FieldMeta._hasMeta = function(clazz,targetClass,field,meta,recursive) {
	var allMeta = ceramic_FieldMeta._getMeta(clazz,targetClass,field,recursive);
	if(allMeta != null) {
		return Object.prototype.hasOwnProperty.call(allMeta.h,meta);
	} else {
		return false;
	}
};
ceramic_FieldMeta._getMeta = function(clazz,targetClass,field,recursive) {
	var metaMapForClass = null;
	var metaMap = recursive ? ceramic_FieldMeta.metaMapRecursive : ceramic_FieldMeta.metaMap;
	if(Object.prototype.hasOwnProperty.call(metaMap.h,targetClass)) {
		metaMapForClass = metaMap.h[targetClass];
	} else {
		metaMapForClass = new haxe_ds_StringMap();
		while(clazz != null) {
			var info = haxe_rtti_Meta.getFields(clazz);
			if(info != null) {
				var _g = 0;
				var _g1 = Reflect.fields(info);
				while(_g < _g1.length) {
					var fieldName = _g1[_g];
					++_g;
					var computedMeta = metaMapForClass.h[fieldName];
					if(computedMeta == null) {
						computedMeta = new haxe_ds_StringMap();
						metaMapForClass.h[fieldName] = computedMeta;
					}
					var fieldMeta = Reflect.field(info,fieldName);
					if(fieldMeta != null) {
						var _g2 = 0;
						var _g3 = Reflect.fields(fieldMeta);
						while(_g2 < _g3.length) {
							var metaName = _g3[_g2];
							++_g2;
							if(!Object.prototype.hasOwnProperty.call(computedMeta.h,metaName)) {
								computedMeta.h[metaName] = Reflect.field(fieldMeta,metaName);
							}
						}
					}
				}
			}
			if(!recursive) {
				break;
			}
			clazz = clazz.__super__;
		}
		metaMap.h[targetClass] = metaMapForClass;
	}
	if(Object.prototype.hasOwnProperty.call(metaMapForClass.h,field)) {
		return metaMapForClass.h[field];
	} else {
		return null;
	}
};
var ceramic_Files = function() { };
$hxClasses["ceramic.Files"] = ceramic_Files;
ceramic_Files.__name__ = "ceramic.Files";
ceramic_Files.haveSameContent = function(filePath1,filePath2) {
	ceramic_App.app.logger.warning("haveSameContent() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 41, className : "ceramic.Files", methodName : "haveSameContent"});
	return false;
};
ceramic_Files.haveSameLastModified = function(filePath1,filePath2) {
	var file1Exists = ceramic_Files.exists(filePath1);
	var file2Exists = ceramic_Files.exists(filePath2);
	if(file1Exists != file2Exists) {
		return false;
	}
	if(!file1Exists && !file2Exists) {
		return false;
	}
	var time1 = ceramic_Files.getLastModified(filePath1);
	var time2 = ceramic_Files.getLastModified(filePath2);
	if(time1 == time2) {
		return time1 != -1;
	} else {
		return false;
	}
};
ceramic_Files.setToSameLastModified = function(srcFilePath,dstFilePath) {
	ceramic_App.app.logger.warning("setToSameLastModified() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 103, className : "ceramic.Files", methodName : "setToSameLastModified"});
};
ceramic_Files.getFlatDirectory = function(dir,excludeSystemFiles,subCall,recursive) {
	if(recursive == null) {
		recursive = true;
	}
	if(subCall == null) {
		subCall = false;
	}
	if(excludeSystemFiles == null) {
		excludeSystemFiles = true;
	}
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	var result = [];
	if(fs == null) {
		return result;
	}
	var list = fs.readdirSync(dir);
	var _g = 0;
	while(_g < list.length) {
		var name = list[_g];
		++_g;
		if(excludeSystemFiles && name == ".DS_Store") {
			continue;
		}
		var path = ceramic_Path.join([dir,name]);
		var stat = fs.lstatSync(path);
		var isDir = stat != null && stat.isDirectory();
		if(isDir) {
			if(recursive) {
				result = result.concat(ceramic_Files.getFlatDirectory(path,excludeSystemFiles,true));
			}
		} else {
			result.push(path);
		}
	}
	if(!subCall) {
		var prevResult = result;
		result = [];
		var prefix = ceramic_Path.normalize(dir);
		if(!StringTools.endsWith(prefix,"/")) {
			prefix += "/";
		}
		var _g = 0;
		while(_g < prevResult.length) {
			var item = prevResult[_g];
			++_g;
			result.push(HxOverrides.substr(item,prefix.length,null));
		}
	}
	return result;
};
ceramic_Files.getLastModified = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs != null) {
		var stat = fs.statSync(path);
		if(stat == null) {
			return -1;
		}
		return stat.mtime.getTime() / 1000.0;
	} else {
		return -1;
	}
};
ceramic_Files.removeEmptyDirectories = function(dir,excludeSystemFiles) {
	if(excludeSystemFiles == null) {
		excludeSystemFiles = true;
	}
	ceramic_App.app.logger.warning("removeEmptyDirectories() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 234, className : "ceramic.Files", methodName : "removeEmptyDirectories"});
};
ceramic_Files.isEmptyDirectory = function(dir,excludeSystemFiles) {
	if(excludeSystemFiles == null) {
		excludeSystemFiles = true;
	}
	ceramic_App.app.logger.warning("isEmptyDirectory() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 255, className : "ceramic.Files", methodName : "isEmptyDirectory"});
	return false;
};
ceramic_Files.deleteRecursive = function(toDelete) {
	ceramic_App.app.logger.warning("deleteRecursive() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 299, className : "ceramic.Files", methodName : "deleteRecursive"});
};
ceramic_Files.getRelativePath = function(absolutePath,relativeTo) {
	var isWindows = false;
	var fromParts = HxOverrides.substr(ceramic_Path.normalize(relativeTo),isWindows ? 3 : 1,null).split("/");
	var toParts = HxOverrides.substr(ceramic_Path.normalize(absolutePath),isWindows ? 3 : 1,null).split("/");
	var length = Math.min(fromParts.length,toParts.length);
	var samePartsLength = length;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		if(fromParts[i] != toParts[i]) {
			samePartsLength = i;
			break;
		}
	}
	var outputParts = [];
	var _g = samePartsLength;
	var _g1 = fromParts.length;
	while(_g < _g1) {
		var i = _g++;
		outputParts.push("..");
	}
	outputParts = outputParts.concat(toParts.slice(samePartsLength));
	var result = outputParts.join("/");
	if(StringTools.endsWith(absolutePath,"/") && !StringTools.endsWith(result,"/")) {
		result += "/";
	}
	if(!StringTools.startsWith(result,".")) {
		result = "./" + result;
	}
	return result;
};
ceramic_Files.copyFileWithIntermediateDirs = function(srcPath,dstPath) {
	ceramic_App.app.logger.warning("copyFileWithIntermediateDirs() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 355, className : "ceramic.Files", methodName : "copyFileWithIntermediateDirs"});
};
ceramic_Files.copyDirectory = function(srcDir,dstDir,removeExisting) {
	if(removeExisting == null) {
		removeExisting = false;
	}
	ceramic_App.app.logger.warning("copyDirectory() is not supported on this target",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 389, className : "ceramic.Files", methodName : "copyDirectory"});
};
ceramic_Files.deleteFile = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("deleteFile() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 406, className : "ceramic.Files", methodName : "deleteFile"});
		return;
	} else {
		fs.unlinkSync(path);
	}
};
ceramic_Files.getContent = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("getContent() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 432, className : "ceramic.Files", methodName : "getContent"});
		return null;
	} else {
		return fs.readFileSync(path,"utf8");
	}
};
ceramic_Files.getBytes = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("getBytes() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 459, className : "ceramic.Files", methodName : "getBytes"});
		return null;
	} else {
		var data = fs.readFileSync(path,"binary");
		if(data != null) {
			return new haxe_io_Bytes(new Uint8Array(data.buffer));
		} else {
			return null;
		}
	}
};
ceramic_Files.saveContent = function(path,content) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("saveContent() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 487, className : "ceramic.Files", methodName : "saveContent"});
	} else {
		fs.writeFileSync(path,content);
	}
};
ceramic_Files.saveBytes = function(path,bytes) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("saveBytes() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 512, className : "ceramic.Files", methodName : "saveBytes"});
	} else {
		var byteOffset = null;
		var len = null;
		var buffer = byteOffset == null ? new Uint8Array(bytes.b.bufferValue) : len == null ? new Uint8Array(bytes.b.bufferValue,byteOffset) : new Uint8Array(bytes.b.bufferValue,byteOffset,len);
		fs.writeFileSync(path,buffer,"binary");
	}
};
ceramic_Files.createDirectory = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("createDirectory() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 538, className : "ceramic.Files", methodName : "createDirectory"});
	} else {
		ceramic_Files.fsCreateDirectory(fs,path);
	}
};
ceramic_Files.fsCreateDirectory = function(fs,dir) {
	try {
		fs.mkdirSync(dir);
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		if(e.code == "ENOENT") {
			ceramic_Files.fsCreateDirectory(fs,ceramic_Path.directory(dir));
			fs.mkdirSync(dir);
		} else {
			var stat;
			try {
				stat = fs.statSync(dir);
			} catch( _g1 ) {
				throw e;
			}
			if(!stat.isDirectory()) {
				throw e;
			}
		}
	}
};
ceramic_Files.exists = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("exists() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 583, className : "ceramic.Files", methodName : "exists"});
		return false;
	} else {
		try {
			fs.accessSync(path);
			return true;
		} catch( _g ) {
			return false;
		}
	}
};
ceramic_Files.isDirectory = function(path) {
	var fs = ceramic_PlatformSpecific.nodeRequire("fs");
	if(fs == null) {
		ceramic_App.app.logger.warning("isDirectory() is not supported on this target without fs module",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Files.hx", lineNumber : 616, className : "ceramic.Files", methodName : "isDirectory"});
		return false;
	} else {
		try {
			var stat = fs.statSync(path);
			return stat.isDirectory();
		} catch( _g ) {
			return false;
		}
	}
};
var ceramic_Filter = function() {
	this.explicitRenderPendingResultCallbacks = null;
	this.explicitRenderState = 0;
	this.density = -1;
	this.unobservedRenderTexture = null;
	this.renderTextureAutoruns = null;
	this.textureTile = null;
	this.textureTilePacker = null;
	this.explicitRender = false;
	this.autoRender = true;
	this.antialiasing = 0;
	this.stencil = true;
	this.depthBuffer = true;
	this.textureFilter = ceramic_TextureFilter.LINEAR;
	this.enabled = true;
	this.hitVisual = null;
	this.textureId = null;
	this.observedDirty = false;
	ceramic_Layer.call(this);
	this.flags &= -17;
	this.content = new ceramic_Quad();
	var _this = this.content;
	_this.flags |= 16;
	this.content.color = 16777215;
	this.add(this.content);
	this.set_hitVisual(this);
	ceramic_App.app.screen.onTexturesDensityChange(this,$bind(this,this.handleTexturesDensityChange));
};
$hxClasses["ceramic.Filter"] = ceramic_Filter;
ceramic_Filter.__name__ = "ceramic.Filter";
ceramic_Filter.__interfaces__ = [tracker_Observable];
ceramic_Filter.__super__ = ceramic_Layer;
ceramic_Filter.prototype = $extend(ceramic_Layer.prototype,{
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,textureId: null
	,set_textureId: function(textureId) {
		this.textureId = textureId;
		if(this.get_renderTexture() != null) {
			this.get_renderTexture().id = textureId;
		}
		return textureId;
	}
	,content: null
	,hitVisual: null
	,set_hitVisual: function(hitVisual) {
		if(this.hitVisual == hitVisual) {
			return hitVisual;
		}
		if(this.hitVisual != null) {
			ceramic_App.app.screen.removeHitVisual(this.hitVisual);
		}
		this.hitVisual = hitVisual;
		if(this.hitVisual != null) {
			ceramic_App.app.screen.addHitVisual(this.hitVisual);
		}
		return hitVisual;
	}
	,enabled: null
	,set_enabled: function(enabled) {
		if(this.enabled == enabled) {
			return enabled;
		}
		this.enabled = enabled;
		var transparent = !enabled;
		this.flags = transparent ? this.flags | 16 : this.flags & -17;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return enabled;
	}
	,textureFilter: null
	,set_textureFilter: function(textureFilter) {
		if(this.textureFilter == textureFilter) {
			return textureFilter;
		}
		this.textureFilter = textureFilter;
		if(this.get_renderTexture() != null) {
			this.get_renderTexture().set_filter(textureFilter);
		}
		return textureFilter;
	}
	,depthBuffer: null
	,set_depthBuffer: function(depthBuffer) {
		if(this.depthBuffer == depthBuffer) {
			return depthBuffer;
		}
		this.depthBuffer = depthBuffer;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return depthBuffer;
	}
	,stencil: null
	,set_stencil: function(stencil) {
		if(this.stencil == stencil) {
			return stencil;
		}
		this.stencil = stencil;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return stencil;
	}
	,antialiasing: null
	,set_antialiasing: function(antialiasing) {
		if(this.antialiasing == antialiasing) {
			return antialiasing;
		}
		this.antialiasing = antialiasing;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return antialiasing;
	}
	,autoRender: null
	,set_autoRender: function(autoRender) {
		if(this.autoRender == autoRender) {
			return autoRender;
		}
		this.autoRender = autoRender;
		if(this.get_renderTexture() != null) {
			this.get_renderTexture().autoRender = autoRender;
		}
		return autoRender;
	}
	,explicitRender: null
	,set_explicitRender: function(explicitRender) {
		if(this.explicitRender == explicitRender) {
			return explicitRender;
		}
		this.explicitRender = explicitRender;
		this.content.set_active(!explicitRender);
		return explicitRender;
	}
	,textureTilePacker: null
	,set_textureTilePacker: function(textureTilePacker) {
		if(this.textureTilePacker == textureTilePacker) {
			return textureTilePacker;
		}
		if(this.textureTile != null && this.textureTilePacker != null) {
			this.textureTilePacker.releaseTile(this.textureTile);
			this.textureTile = null;
			this.set_tile(null);
			this.set_tile(null);
			this.content.set_renderTarget(null);
		}
		this.textureTilePacker = textureTilePacker;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return textureTilePacker;
	}
	,textureTile: null
	,renderTextureAutoruns: null
	,get_renderTexture: function() {
		var value = this.unobservedRenderTexture;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.renderTextureAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.renderTextureAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_renderTexture: function(renderTexture) {
		var prevValue = this.unobservedRenderTexture;
		this.unobservedRenderTexture = renderTexture;
		if(prevValue == renderTexture) {
			return renderTexture;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitRenderTextureChange(renderTexture,prevValue);
		var fieldAutoruns = this.renderTextureAutoruns;
		if(fieldAutoruns != null) {
			this.renderTextureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return renderTexture;
	}
	,invalidateRenderTexture: function() {
		var value = this.unobservedRenderTexture;
		this.emitRenderTextureChange(value,value);
		var fieldAutoruns = this.renderTextureAutoruns;
		if(fieldAutoruns != null) {
			this.renderTextureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedRenderTexture: null
	,__cbOnRenderTextureChange: null
	,__cbOnceRenderTextureChange: null
	,__cbOnOwnerUnbindRenderTextureChange: null
	,__cbOnceOwnerUnbindRenderTextureChange: null
	,emitRenderTextureChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnRenderTextureChange != null) {
			len += this.__cbOnRenderTextureChange.length;
		}
		if(this.__cbOnceRenderTextureChange != null) {
			len += this.__cbOnceRenderTextureChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnRenderTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnRenderTextureChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceRenderTextureChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceRenderTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceRenderTextureChange[ii];
						this.__cbOnceRenderTextureChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindRenderTextureChange[ii];
						this.__cbOnceOwnerUnbindRenderTextureChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindRenderTextureChange[ii]);
						newCbOnceArray.push(this.__cbOnceRenderTextureChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindRenderTextureChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceRenderTextureChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onRenderTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "renderTextureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRenderTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindRenderTextureChange == null) {
				this.__cbOnOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnOwnerUnbindRenderTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindRenderTextureChange == null) {
				this.__cbOnOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnOwnerUnbindRenderTextureChange.push(null);
		}
		if(this.__cbOnRenderTextureChange == null) {
			this.__cbOnRenderTextureChange = [];
		}
		this.__cbOnRenderTextureChange.push(handleCurrentPrevious);
	}
	,onceRenderTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "renderTextureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRenderTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindRenderTextureChange == null) {
				this.__cbOnceOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnceOwnerUnbindRenderTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindRenderTextureChange == null) {
				this.__cbOnceOwnerUnbindRenderTextureChange = [];
			}
			this.__cbOnceOwnerUnbindRenderTextureChange.push(null);
		}
		if(this.__cbOnceRenderTextureChange == null) {
			this.__cbOnceRenderTextureChange = [];
		}
		this.__cbOnceRenderTextureChange.push(handleCurrentPrevious);
	}
	,offRenderTextureChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnRenderTextureChange != null) {
				index = this.__cbOnRenderTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnRenderTextureChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindRenderTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindRenderTextureChange.splice(index,1);
				}
			}
			if(this.__cbOnceRenderTextureChange != null) {
				index = this.__cbOnceRenderTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceRenderTextureChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindRenderTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindRenderTextureChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindRenderTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindRenderTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindRenderTextureChange = null;
			}
			if(this.__cbOnceOwnerUnbindRenderTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindRenderTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindRenderTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindRenderTextureChange = null;
			}
			this.__cbOnRenderTextureChange = null;
			this.__cbOnceRenderTextureChange = null;
		}
	}
	,listensRenderTextureChange: function() {
		if(!(this.__cbOnRenderTextureChange != null && this.__cbOnRenderTextureChange.length > 0)) {
			if(this.__cbOnceRenderTextureChange != null) {
				return this.__cbOnceRenderTextureChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,density: null
	,set_density: function(density) {
		if(this.density == density) {
			return density;
		}
		this.density = density;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return density;
	}
	,explicitRenderState: null
	,explicitRenderPendingResultCallbacks: null
	,handleTexturesDensityChange: function(density,prevDensity) {
		if(density != prevDensity && this.density == -1) {
			this.updateRenderTextureAndContent(Math.ceil(this.get_width()),Math.ceil(this.get_height()),density,this.depthBuffer,this.stencil,this.antialiasing);
			this.contentDirty = false;
		}
	}
	,updateRenderTextureAndContent: function(filterWidth,filterHeight,density,depthBuffer,stencil,antialiasing) {
		if(this.enabled) {
			if(this.get_renderTexture() == null || (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture())) && (this.get_renderTexture().width != filterWidth || this.get_renderTexture().height != filterHeight || density != -1 && this.get_renderTexture().density != density || this.get_renderTexture().depth != depthBuffer || this.get_renderTexture().stencil != stencil || this.get_renderTexture().antialiasing != antialiasing) || this.textureTilePacker != null && !this.textureTilePacker.managesTexture(this.get_renderTexture()) || this.textureTile != null && (this.textureTile.frameWidth != filterWidth || this.textureTile.frameHeight != filterHeight)) {
				if(this.get_renderTexture() != null && (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture()))) {
					var texture = null;
					if(this._texture != texture) {
						this._set_texture(texture);
					}
					this.get_renderTexture().destroy();
					this.set_renderTexture(null);
				}
				if(this.textureTile != null && this.textureTilePacker != null) {
					this.textureTilePacker.releaseTile(this.textureTile);
					this.textureTile = null;
				}
				if(filterWidth > 0 && filterHeight > 0) {
					if(this.textureTilePacker != null) {
						this.set_renderTexture(this.textureTilePacker.texture);
						this.textureTile = this.textureTilePacker.allocTile(filterWidth,filterHeight);
						this.set_tile(this.textureTile);
					} else {
						this.set_renderTexture(new ceramic_RenderTexture(filterWidth,filterHeight,density,depthBuffer,stencil,antialiasing));
						this.get_renderTexture().id = this.textureId;
						this.get_renderTexture().set_filter(this.textureFilter);
						this.get_renderTexture().autoRender = this.autoRender;
						this.set_tile(null);
						var texture = this.get_renderTexture();
						if(this._texture != texture) {
							this._set_texture(texture);
						}
					}
				}
			}
		} else if(this.get_renderTexture() != null && (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture()))) {
			this.set_tile(null);
			var texture = null;
			if(this._texture != texture) {
				this._set_texture(texture);
			}
			this.get_renderTexture().destroy();
			this.set_renderTexture(null);
		}
		var _this = this.content;
		_this.set_width(filterWidth);
		_this.set_height(filterHeight);
		this.content.set_renderTarget(this.get_renderTexture());
		if(this.textureTile != null) {
			var _this = this.content;
			var y = this.textureTile.frameY;
			_this.set_x(this.textureTile.frameX);
			_this.set_y(y);
		} else {
			var _this = this.content;
			_this.set_x(0);
			_this.set_y(0);
		}
		if(this.content.contentDirty) {
			this.content.computeContent();
		}
	}
	,render: function(done) {
		var _gthis = this;
		if(!this.explicitRender) {
			ceramic_App.app.logger.warning("Explicit render is disabled on this filter. Ignoring render() call.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Filter.hx", lineNumber : 277, className : "ceramic.Filter", methodName : "render"});
			return;
		}
		if(this.explicitRenderState == 1) {
			if(done != null) {
				if(this.explicitRenderPendingResultCallbacks == null) {
					this.explicitRenderPendingResultCallbacks = [];
				}
				this.explicitRenderPendingResultCallbacks.push(done);
				done = null;
			}
			return;
		} else if(this.explicitRenderState == 2) {
			if(done != null) {
				if(this.explicitRenderPendingResultCallbacks == null) {
					this.explicitRenderPendingResultCallbacks = [];
				}
				this.explicitRenderPendingResultCallbacks.push(function() {
					_gthis.render(done);
					done = null;
				});
			}
			return;
		}
		this.explicitRenderState = 1;
		if(this.contentDirty) {
			this.computeContent();
		}
		if(this.get_renderTexture() == null) {
			this.explicitRenderState = 0;
			var callbacks = this.explicitRenderPendingResultCallbacks;
			this.explicitRenderPendingResultCallbacks = null;
			if(done != null) {
				done();
				done = null;
			}
			if(callbacks != null) {
				var _g = 0;
				var _g1 = callbacks.length;
				while(_g < _g1) {
					var i = _g++;
					var cb = callbacks[i];
					callbacks[i] = null;
					cb();
					cb = null;
				}
			}
			return;
		}
		this.content.set_active(true);
		ceramic_App.app.onceUpdate(null,function(_) {
			if(_gthis._lifecycleState < 0) {
				done = null;
				return;
			}
			_gthis.explicitRenderState = 2;
			if(_gthis.contentDirty) {
				_gthis.computeContent();
			}
			if(_gthis.get_renderTexture() == null) {
				_gthis.content.set_active(false);
				_gthis.explicitRenderState = 0;
				var callbacks = _gthis.explicitRenderPendingResultCallbacks;
				_gthis.explicitRenderPendingResultCallbacks = null;
				if(done != null) {
					done();
					done = null;
				}
				if(callbacks != null) {
					var _g = 0;
					var _g1 = callbacks.length;
					while(_g < _g1) {
						var i = _g++;
						var cb = callbacks[i];
						callbacks[i] = null;
						cb();
						cb = null;
					}
				}
				return;
			}
			_gthis.get_renderTexture().renderDirty = true;
			ceramic_App.app.onceFinishDraw(null,function() {
				if(_gthis._lifecycleState < 0) {
					done = null;
					return;
				}
				_gthis.content.set_active(false);
				_gthis.explicitRenderState = 0;
				var callbacks = _gthis.explicitRenderPendingResultCallbacks;
				_gthis.explicitRenderPendingResultCallbacks = null;
				if(done != null) {
					done();
					done = null;
				}
				if(callbacks != null) {
					var _g = 0;
					var _g1 = callbacks.length;
					while(_g < _g1) {
						var i = _g++;
						var cb = callbacks[i];
						callbacks[i] = null;
						cb();
						cb = null;
					}
				}
			});
		});
	}
	,visualInContentHits: function(visual,x,y) {
		var matchedHitVisual = ceramic_Screen.matchedHitVisual;
		ceramic_Screen.matchedHitVisual = null;
		if(this.hitVisual._hits(x,y,false)) {
			ceramic_Screen.matchedHitVisual = matchedHitVisual;
			if(visual.matrixDirty) {
				visual.computeMatrix();
			}
			var _this = ceramic_Filter._matrix;
			_this.a = visual.matA;
			_this.b = visual.matB;
			_this.c = visual.matC;
			_this.d = visual.matD;
			_this.tx = visual.matTX;
			_this.ty = visual.matTY;
			_this.changedDirty = true;
			var hv = this.hitVisual;
			do {
				if(hv.matrixDirty) {
					hv.computeMatrix();
				}
				var a1 = ceramic_Filter._matrix.a * hv.matA + ceramic_Filter._matrix.b * hv.matC;
				ceramic_Filter._matrix.b = ceramic_Filter._matrix.a * hv.matB + ceramic_Filter._matrix.b * hv.matD;
				ceramic_Filter._matrix.a = a1;
				var c1 = ceramic_Filter._matrix.c * hv.matA + ceramic_Filter._matrix.d * hv.matC;
				ceramic_Filter._matrix.d = ceramic_Filter._matrix.c * hv.matB + ceramic_Filter._matrix.d * hv.matD;
				ceramic_Filter._matrix.c = c1;
				var tx1 = ceramic_Filter._matrix.tx * hv.matA + ceramic_Filter._matrix.ty * hv.matC + hv.matTX;
				ceramic_Filter._matrix.ty = ceramic_Filter._matrix.tx * hv.matB + ceramic_Filter._matrix.ty * hv.matD + hv.matTY;
				ceramic_Filter._matrix.tx = tx1;
				if(hv.computedRenderTarget != null) {
					var didFindParentHitVisual = false;
					var parent = hv.parent;
					if(parent != null) {
						do {
							if(parent.asQuad != null && ((parent) instanceof ceramic_Filter)) {
								var filter = parent;
								if(filter.get_renderTexture() == hv.computedRenderTarget) {
									hv = filter.hitVisual;
									didFindParentHitVisual = true;
									break;
								}
							}
							parent = parent.parent;
						} while(parent != null);
					}
					if(!didFindParentHitVisual) {
						return false;
					}
				} else {
					hv = null;
				}
			} while(hv != null);
			var _this = ceramic_Filter._matrix;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				_this.a = _this.b = _this.c = _this.d = 0;
				_this.tx = -_this.tx;
				_this.ty = -_this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = _this.d * norm;
				_this.d = _this.a * norm;
				_this.a = a1;
				_this.b *= -norm;
				_this.c *= -norm;
				var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
				_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
				_this.tx = tx1;
			}
			_this.changedDirty = true;
			return visual.hitTest(x,y,ceramic_Filter._matrix);
		}
		ceramic_Screen.matchedHitVisual = matchedHitVisual;
		return false;
	}
	,set_width: function(width) {
		if(this.get_width() == width) {
			return width;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return ceramic_Layer.prototype.set_width.call(this,width);
	}
	,set_height: function(height) {
		if(this.get_height() == height) {
			return height;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return ceramic_Layer.prototype.set_height.call(this,height);
	}
	,computeContent: function() {
		this.updateRenderTextureAndContent(Math.ceil(this.get_width()),Math.ceil(this.get_height()),this.density,this.depthBuffer,this.stencil,this.antialiasing);
		this.contentDirty = false;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.set_hitVisual(null);
		var texture = null;
		if(this._texture != texture) {
			this._set_texture(texture);
		}
		if(this.get_renderTexture() != null && (this.textureTilePacker == null || !this.textureTilePacker.managesTexture(this.get_renderTexture()))) {
			this.get_renderTexture().destroy();
			this.set_renderTexture(null);
		}
		this.set_textureTilePacker(null);
		this.set_renderTexture(null);
		this.explicitRenderPendingResultCallbacks = null;
		this.content = null;
		this._lifecycleState = -1;
		ceramic_Layer.prototype.destroy.call(this);
	}
	,unbindEvents: function() {
		ceramic_Layer.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offRenderTextureChange();
	}
	,__class__: ceramic_Filter
	,__properties__: $extend(ceramic_Layer.prototype.__properties__,{set_density:"set_density",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture",set_textureTilePacker:"set_textureTilePacker",set_explicitRender:"set_explicitRender",set_autoRender:"set_autoRender",set_antialiasing:"set_antialiasing",set_stencil:"set_stencil",set_depthBuffer:"set_depthBuffer",set_textureFilter:"set_textureFilter",set_enabled:"set_enabled",set_hitVisual:"set_hitVisual",set_textureId:"set_textureId"})
});
var ceramic_Flags = {};
ceramic_Flags._new = function() {
	return 0;
};
ceramic_Flags.toInt = function(this1) {
	return this1;
};
ceramic_Flags.fromInt = function(value) {
	return value;
};
ceramic_Flags.bool = function(this1,bit) {
	var mask = 1 << bit;
	return (this1 & mask) == mask;
};
ceramic_Flags.setBool = function(this1,bit,bool) {
	if(bool) {
		this1 |= 1 << bit;
	} else {
		this1 &= ~(1 << bit);
	}
	return bool;
};
ceramic_Flags.getBool = function(flags,bit) {
	var mask = 1 << bit;
	return (flags & mask) == mask;
};
ceramic_Flags.setBoolAndGetFlags = function(flags,bit,bool) {
	flags = bool ? flags | 1 << bit : flags & ~(1 << bit);
	return flags;
};
ceramic_Flags._fromValues = function(flag0,flag1,flag2,flag3,flag4,flag5,flag6,flag7) {
	var flags = 0;
	if(flag0) {
		flags = flag0 ? flags | 1 : flags & -2;
	}
	if(flag1) {
		flags = flag1 ? flags | 2 : flags & -3;
	}
	if(flag2) {
		flags = flag2 ? flags | 4 : flags & -5;
	}
	if(flag3) {
		flags = flag3 ? flags | 8 : flags & -9;
	}
	if(flag4) {
		flags = flag4 ? flags | 16 : flags & -17;
	}
	if(flag5) {
		flags = flag5 ? flags | 32 : flags & -33;
	}
	if(flag6) {
		flags = flag6 ? flags | 64 : flags & -65;
	}
	if(flag7) {
		flags = flag7 ? flags | 128 : flags & -129;
	}
	return flags;
};
var ceramic_FontAsset = function(name,options) {
	this.unobservedFont = null;
	this.fontAutoruns = null;
	this.pages = null;
	this.fontData = null;
	ceramic_Asset.call(this,"font",name,options);
	this.set_handleTexturesDensityChange(true);
	this.assets = new ceramic_Assets();
};
$hxClasses["ceramic.FontAsset"] = ceramic_FontAsset;
ceramic_FontAsset.__name__ = "ceramic.FontAsset";
ceramic_FontAsset.__super__ = ceramic_Asset;
ceramic_FontAsset.prototype = $extend(ceramic_Asset.prototype,{
	__cbOnReplaceFont: null
	,__cbOnceReplaceFont: null
	,__cbOnOwnerUnbindReplaceFont: null
	,__cbOnceOwnerUnbindReplaceFont: null
	,emitReplaceFont: function(newFont,prevFont) {
		var len = 0;
		if(this.__cbOnReplaceFont != null) {
			len += this.__cbOnReplaceFont.length;
		}
		if(this.__cbOnceReplaceFont != null) {
			len += this.__cbOnceReplaceFont.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceFont.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReplaceFont[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReplaceFont != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReplaceFont.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReplaceFont[ii];
						this.__cbOnceReplaceFont[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReplaceFont[ii];
						this.__cbOnceOwnerUnbindReplaceFont[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReplaceFont[ii]);
						newCbOnceArray.push(this.__cbOnceReplaceFont[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReplaceFont = newCbOnceOwnerUnbindArray;
				this.__cbOnceReplaceFont = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newFont,prevFont);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceFont: function(owner,handleNewFontPrevFont) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceFont" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFontPrevFont != null) {
					_gthis.offReplaceFont(handleNewFontPrevFont);
					handleNewFontPrevFont = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceFont == null) {
				this.__cbOnOwnerUnbindReplaceFont = [];
			}
			this.__cbOnOwnerUnbindReplaceFont.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFontPrevFont = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceFont == null) {
				this.__cbOnOwnerUnbindReplaceFont = [];
			}
			this.__cbOnOwnerUnbindReplaceFont.push(null);
		}
		if(this.__cbOnReplaceFont == null) {
			this.__cbOnReplaceFont = [];
		}
		this.__cbOnReplaceFont.push(handleNewFontPrevFont);
	}
	,onceReplaceFont: function(owner,handleNewFontPrevFont) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceFont" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewFontPrevFont != null) {
					_gthis.offReplaceFont(handleNewFontPrevFont);
					handleNewFontPrevFont = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceFont == null) {
				this.__cbOnceOwnerUnbindReplaceFont = [];
			}
			this.__cbOnceOwnerUnbindReplaceFont.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewFontPrevFont = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceFont == null) {
				this.__cbOnceOwnerUnbindReplaceFont = [];
			}
			this.__cbOnceOwnerUnbindReplaceFont.push(null);
		}
		if(this.__cbOnceReplaceFont == null) {
			this.__cbOnceReplaceFont = [];
		}
		this.__cbOnceReplaceFont.push(handleNewFontPrevFont);
	}
	,offReplaceFont: function(handleNewFontPrevFont) {
		if(handleNewFontPrevFont != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceFont != null) {
				index = this.__cbOnReplaceFont.indexOf(handleNewFontPrevFont);
				if(index != -1) {
					this.__cbOnReplaceFont.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceFont[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceFont.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceFont != null) {
				index = this.__cbOnceReplaceFont.indexOf(handleNewFontPrevFont);
				if(index != -1) {
					this.__cbOnceReplaceFont.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceFont[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceFont.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceFont.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceFont[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceFont = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceFont != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceFont.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceFont[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceFont = null;
			}
			this.__cbOnReplaceFont = null;
			this.__cbOnceReplaceFont = null;
		}
	}
	,listensReplaceFont: function() {
		if(!(this.__cbOnReplaceFont != null && this.__cbOnReplaceFont.length > 0)) {
			if(this.__cbOnceReplaceFont != null) {
				return this.__cbOnceReplaceFont.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,fontData: null
	,pages: null
	,fontAutoruns: null
	,get_font: function() {
		var value = this.unobservedFont;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.fontAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.fontAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_font: function(font) {
		var prevValue = this.unobservedFont;
		this.unobservedFont = font;
		if(prevValue == font) {
			return font;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFontChange(font,prevValue);
		var fieldAutoruns = this.fontAutoruns;
		if(fieldAutoruns != null) {
			this.fontAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return font;
	}
	,invalidateFont: function() {
		var value = this.unobservedFont;
		this.emitFontChange(value,value);
		var fieldAutoruns = this.fontAutoruns;
		if(fieldAutoruns != null) {
			this.fontAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedFont: null
	,__cbOnFontChange: null
	,__cbOnceFontChange: null
	,__cbOnOwnerUnbindFontChange: null
	,__cbOnceOwnerUnbindFontChange: null
	,emitFontChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFontChange != null) {
			len += this.__cbOnFontChange.length;
		}
		if(this.__cbOnceFontChange != null) {
			len += this.__cbOnceFontChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFontChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFontChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFontChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFontChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFontChange[ii];
						this.__cbOnceFontChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFontChange[ii];
						this.__cbOnceOwnerUnbindFontChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFontChange[ii]);
						newCbOnceArray.push(this.__cbOnceFontChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFontChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFontChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFontChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fontChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFontChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFontChange == null) {
				this.__cbOnOwnerUnbindFontChange = [];
			}
			this.__cbOnOwnerUnbindFontChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFontChange == null) {
				this.__cbOnOwnerUnbindFontChange = [];
			}
			this.__cbOnOwnerUnbindFontChange.push(null);
		}
		if(this.__cbOnFontChange == null) {
			this.__cbOnFontChange = [];
		}
		this.__cbOnFontChange.push(handleCurrentPrevious);
	}
	,onceFontChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fontChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFontChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFontChange == null) {
				this.__cbOnceOwnerUnbindFontChange = [];
			}
			this.__cbOnceOwnerUnbindFontChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFontChange == null) {
				this.__cbOnceOwnerUnbindFontChange = [];
			}
			this.__cbOnceOwnerUnbindFontChange.push(null);
		}
		if(this.__cbOnceFontChange == null) {
			this.__cbOnceFontChange = [];
		}
		this.__cbOnceFontChange.push(handleCurrentPrevious);
	}
	,offFontChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFontChange != null) {
				index = this.__cbOnFontChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFontChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFontChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFontChange.splice(index,1);
				}
			}
			if(this.__cbOnceFontChange != null) {
				index = this.__cbOnceFontChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFontChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFontChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFontChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFontChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFontChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFontChange = null;
			}
			if(this.__cbOnceOwnerUnbindFontChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFontChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFontChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFontChange = null;
			}
			this.__cbOnFontChange = null;
			this.__cbOnceFontChange = null;
		}
	}
	,listensFontChange: function() {
		if(!(this.__cbOnFontChange != null && this.__cbOnFontChange.length > 0)) {
			if(this.__cbOnceFontChange != null) {
				return this.__cbOnceFontChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		if(this.owner != null) {
			this.assets.inheritRuntimeAssetsFromAssets(this.owner);
			this.assets.loadMethod = this.owner.loadMethod;
			this.assets.scheduleMethod = this.owner.scheduleMethod;
			this.assets.delayBetweenXAssets = this.owner.delayBetweenXAssets;
		}
		var toDestroy = [];
		var asset = this.assets.iterator();
		while(asset.hasNext()) {
			var asset1 = asset.next();
			toDestroy.push(asset1);
		}
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load font asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 50, className : "ceramic.FontAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		ceramic_App.app.logger.info("Load font " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 56, className : "ceramic.FontAsset", methodName : "load"});
		this.assets.runtimeAssets = this.runtimeAssets;
		var asset = new ceramic_TextAsset(this.name);
		asset.set_handleTexturesDensityChange(false);
		asset.set_path(this.path);
		this.assets.addAsset(asset);
		this.assets.onceComplete(this,function(success) {
			var text = asset.get_text();
			var relativeFontPath = ceramic_Path.directory(_gthis.path);
			if(relativeFontPath == "") {
				relativeFontPath = ".";
			}
			if(text != null) {
				try {
					_gthis.fontData = ceramic_BitmapFontParser.parse(text);
					_gthis.fontData.path = relativeFontPath;
					var pages = new haxe_ds_StringMap();
					var assetList = [];
					var _g = 0;
					var _g1 = _gthis.fontData.pages;
					while(_g < _g1.length) {
						var page = _g1[_g];
						++_g;
						var pageFile = page.file;
						if(relativeFontPath != "") {
							pageFile = ceramic_Path.join([relativeFontPath,pageFile]);
						}
						var pathInfo = ceramic_Assets.decodePath(pageFile);
						var asset1 = new ceramic_ImageAsset(pathInfo.name);
						asset1.set_handleTexturesDensityChange(false);
						asset1.set_path(pathInfo.path);
						_gthis.assets.addAsset(asset1);
						assetList.push(asset1);
					}
					_gthis.assets.onceComplete(_gthis,function(success) {
						if(success) {
							var _g = 0;
							while(_g < assetList.length) {
								var asset = assetList[_g];
								++_g;
								var key = asset.path;
								var value = asset.get_texture();
								pages.h[key] = value;
							}
							var prevFont = _gthis.get_font();
							var newFont = new ceramic_BitmapFont(_gthis.fontData,pages);
							newFont.id = "font:" + _gthis.path;
							newFont.asset = _gthis;
							_gthis.set_font(newFont);
							if(prevFont != null) {
								_gthis.emitReplaceFont(_gthis.get_font(),prevFont);
								if(prevFont == ceramic_App.app.defaultFont) {
									ceramic_App.app.defaultFont = _gthis.get_font();
								}
								var _g = 0;
								var _g1 = [].concat(ceramic_App.app.visuals);
								while(_g < _g1.length) {
									var visual = _g1[_g];
									++_g;
									if(visual._lifecycleState >= 0 && ((visual) instanceof ceramic_Text)) {
										var text = visual;
										if(text.font == prevFont) {
											text.set_font(_gthis.get_font());
										}
									}
								}
								prevFont.asset = null;
								prevFont.destroy();
							}
							var _g = 0;
							while(_g < toDestroy.length) {
								var asset = toDestroy[_g];
								++_g;
								if(((asset) instanceof ceramic_ImageAsset)) {
									var imageAsset = asset;
									if(assetList.indexOf(imageAsset) == -1) {
										asset.destroy();
									}
								} else {
									asset.destroy();
								}
							}
							_gthis.set_status(ceramic_AssetStatus.READY);
							_gthis.emitComplete(true);
							if(_gthis.handleTexturesDensityChange) {
								_gthis.checkTexturesDensity();
							}
						} else {
							_gthis.set_status(ceramic_AssetStatus.BROKEN);
							ceramic_App.app.logger.error("Failed to load textures for font at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 171, className : "ceramic.FontAsset", methodName : "load"});
							_gthis.emitComplete(false);
						}
					});
					_gthis.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 177, className : "ceramic.FontAsset", methodName : "load"});
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to decode font data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 181, className : "ceramic.FontAsset", methodName : "load"});
					_gthis.emitComplete(false);
				}
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load font data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 187, className : "ceramic.FontAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
		this.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 192, className : "ceramic.FontAsset", methodName : "load"});
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.checkTexturesDensity();
		}
	}
	,checkTexturesDensity: function() {
		if(this.owner == null || !this.owner.reloadOnTextureDensityChange) {
			return;
		}
		var prevPath = this.path;
		this.computePath();
		if(prevPath != this.path) {
			ceramic_App.app.logger.info("Reload font (" + prevPath + " -> " + this.path + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 216, className : "ceramic.FontAsset", methodName : "checkTexturesDensity"});
			this.load();
		}
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload font (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FontAsset.hx", lineNumber : 237, className : "ceramic.FontAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_font() != null) {
			this.get_font().destroy();
			this.set_font(null);
		}
		if(this.pages != null) {
			var h = this.pages.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				var texture = this.pages.h[key];
				texture.destroy();
			}
			this.pages = null;
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceFont();
		this.offFontChange();
	}
	,__class__: ceramic_FontAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_font:"set_font",get_font:"get_font"})
});
var ceramic_Value = function(value) {
	if(value != null) {
		this.value = value;
	}
};
$hxClasses["ceramic.Value"] = ceramic_Value;
ceramic_Value.__name__ = "ceramic.Value";
ceramic_Value.prototype = {
	value: null
	,__class__: ceramic_Value
};
var ceramic_Fragment = function(assets,editedItems) {
	if(editedItems == null) {
		editedItems = false;
	}
	this.fragmentComponents = null;
	this.timeline = null;
	this.pendingLoads = 0;
	this.floatD = 0.0;
	this.floatC = 0.0;
	this.floatB = 0.0;
	this.floatA = 0.0;
	this.autoUpdateTimeline = true;
	this.resizable = false;
	this.fragmentData = null;
	this.fps = 30;
	this.assets = null;
	this.editedItems = false;
	ceramic_Layer.call(this);
	this.editedItems = editedItems;
	this.assets = assets;
	this.entities = [];
	this.items = [];
};
$hxClasses["ceramic.Fragment"] = ceramic_Fragment;
ceramic_Fragment.__name__ = "ceramic.Fragment";
ceramic_Fragment.cacheData = function(fragmentData) {
	ceramic_Fragment.cachedFragmentData.h[fragmentData.id] = fragmentData;
};
ceramic_Fragment.getData = function(fragmentId) {
	return ceramic_Fragment.cachedFragmentData.h[fragmentId];
};
ceramic_Fragment.__super__ = ceramic_Layer;
ceramic_Fragment.prototype = $extend(ceramic_Layer.prototype,{
	__cbOnFloatAChange: null
	,__cbOnceFloatAChange: null
	,__cbOnOwnerUnbindFloatAChange: null
	,__cbOnceOwnerUnbindFloatAChange: null
	,emitFloatAChange: function(floatA,prevFloatA) {
		var len = 0;
		if(this.__cbOnFloatAChange != null) {
			len += this.__cbOnFloatAChange.length;
		}
		if(this.__cbOnceFloatAChange != null) {
			len += this.__cbOnceFloatAChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatAChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFloatAChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFloatAChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFloatAChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFloatAChange[ii];
						this.__cbOnceFloatAChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFloatAChange[ii];
						this.__cbOnceOwnerUnbindFloatAChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFloatAChange[ii]);
						newCbOnceArray.push(this.__cbOnceFloatAChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFloatAChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFloatAChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatA,prevFloatA);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatAChange: function(owner,handleFloatAPrevFloatA) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatAChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatAPrevFloatA != null) {
					_gthis.offFloatAChange(handleFloatAPrevFloatA);
					handleFloatAPrevFloatA = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatAChange == null) {
				this.__cbOnOwnerUnbindFloatAChange = [];
			}
			this.__cbOnOwnerUnbindFloatAChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatAPrevFloatA = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatAChange == null) {
				this.__cbOnOwnerUnbindFloatAChange = [];
			}
			this.__cbOnOwnerUnbindFloatAChange.push(null);
		}
		if(this.__cbOnFloatAChange == null) {
			this.__cbOnFloatAChange = [];
		}
		this.__cbOnFloatAChange.push(handleFloatAPrevFloatA);
	}
	,onceFloatAChange: function(owner,handleFloatAPrevFloatA) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatAChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatAPrevFloatA != null) {
					_gthis.offFloatAChange(handleFloatAPrevFloatA);
					handleFloatAPrevFloatA = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatAChange == null) {
				this.__cbOnceOwnerUnbindFloatAChange = [];
			}
			this.__cbOnceOwnerUnbindFloatAChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatAPrevFloatA = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatAChange == null) {
				this.__cbOnceOwnerUnbindFloatAChange = [];
			}
			this.__cbOnceOwnerUnbindFloatAChange.push(null);
		}
		if(this.__cbOnceFloatAChange == null) {
			this.__cbOnceFloatAChange = [];
		}
		this.__cbOnceFloatAChange.push(handleFloatAPrevFloatA);
	}
	,offFloatAChange: function(handleFloatAPrevFloatA) {
		if(handleFloatAPrevFloatA != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatAChange != null) {
				index = this.__cbOnFloatAChange.indexOf(handleFloatAPrevFloatA);
				if(index != -1) {
					this.__cbOnFloatAChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatAChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatAChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatAChange != null) {
				index = this.__cbOnceFloatAChange.indexOf(handleFloatAPrevFloatA);
				if(index != -1) {
					this.__cbOnceFloatAChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatAChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatAChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatAChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatAChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatAChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatAChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatAChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatAChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatAChange = null;
			}
			this.__cbOnFloatAChange = null;
			this.__cbOnceFloatAChange = null;
		}
	}
	,listensFloatAChange: function() {
		if(!(this.__cbOnFloatAChange != null && this.__cbOnFloatAChange.length > 0)) {
			if(this.__cbOnceFloatAChange != null) {
				return this.__cbOnceFloatAChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFloatBChange: null
	,__cbOnceFloatBChange: null
	,__cbOnOwnerUnbindFloatBChange: null
	,__cbOnceOwnerUnbindFloatBChange: null
	,emitFloatBChange: function(floatB,prevFloatB) {
		var len = 0;
		if(this.__cbOnFloatBChange != null) {
			len += this.__cbOnFloatBChange.length;
		}
		if(this.__cbOnceFloatBChange != null) {
			len += this.__cbOnceFloatBChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatBChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFloatBChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFloatBChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFloatBChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFloatBChange[ii];
						this.__cbOnceFloatBChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFloatBChange[ii];
						this.__cbOnceOwnerUnbindFloatBChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFloatBChange[ii]);
						newCbOnceArray.push(this.__cbOnceFloatBChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFloatBChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFloatBChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatB,prevFloatB);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatBChange: function(owner,handleFloatBPrevFloatB) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatBChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatBPrevFloatB != null) {
					_gthis.offFloatBChange(handleFloatBPrevFloatB);
					handleFloatBPrevFloatB = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatBChange == null) {
				this.__cbOnOwnerUnbindFloatBChange = [];
			}
			this.__cbOnOwnerUnbindFloatBChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatBPrevFloatB = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatBChange == null) {
				this.__cbOnOwnerUnbindFloatBChange = [];
			}
			this.__cbOnOwnerUnbindFloatBChange.push(null);
		}
		if(this.__cbOnFloatBChange == null) {
			this.__cbOnFloatBChange = [];
		}
		this.__cbOnFloatBChange.push(handleFloatBPrevFloatB);
	}
	,onceFloatBChange: function(owner,handleFloatBPrevFloatB) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatBChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatBPrevFloatB != null) {
					_gthis.offFloatBChange(handleFloatBPrevFloatB);
					handleFloatBPrevFloatB = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatBChange == null) {
				this.__cbOnceOwnerUnbindFloatBChange = [];
			}
			this.__cbOnceOwnerUnbindFloatBChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatBPrevFloatB = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatBChange == null) {
				this.__cbOnceOwnerUnbindFloatBChange = [];
			}
			this.__cbOnceOwnerUnbindFloatBChange.push(null);
		}
		if(this.__cbOnceFloatBChange == null) {
			this.__cbOnceFloatBChange = [];
		}
		this.__cbOnceFloatBChange.push(handleFloatBPrevFloatB);
	}
	,offFloatBChange: function(handleFloatBPrevFloatB) {
		if(handleFloatBPrevFloatB != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatBChange != null) {
				index = this.__cbOnFloatBChange.indexOf(handleFloatBPrevFloatB);
				if(index != -1) {
					this.__cbOnFloatBChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatBChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatBChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatBChange != null) {
				index = this.__cbOnceFloatBChange.indexOf(handleFloatBPrevFloatB);
				if(index != -1) {
					this.__cbOnceFloatBChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatBChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatBChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatBChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatBChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatBChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatBChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatBChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatBChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatBChange = null;
			}
			this.__cbOnFloatBChange = null;
			this.__cbOnceFloatBChange = null;
		}
	}
	,listensFloatBChange: function() {
		if(!(this.__cbOnFloatBChange != null && this.__cbOnFloatBChange.length > 0)) {
			if(this.__cbOnceFloatBChange != null) {
				return this.__cbOnceFloatBChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFloatCChange: null
	,__cbOnceFloatCChange: null
	,__cbOnOwnerUnbindFloatCChange: null
	,__cbOnceOwnerUnbindFloatCChange: null
	,emitFloatCChange: function(floatC,prevFloatC) {
		var len = 0;
		if(this.__cbOnFloatCChange != null) {
			len += this.__cbOnFloatCChange.length;
		}
		if(this.__cbOnceFloatCChange != null) {
			len += this.__cbOnceFloatCChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatCChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFloatCChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFloatCChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFloatCChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFloatCChange[ii];
						this.__cbOnceFloatCChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFloatCChange[ii];
						this.__cbOnceOwnerUnbindFloatCChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFloatCChange[ii]);
						newCbOnceArray.push(this.__cbOnceFloatCChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFloatCChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFloatCChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatC,prevFloatC);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatCChange: function(owner,handleFloatCPrevFloatC) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatCChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatCPrevFloatC != null) {
					_gthis.offFloatCChange(handleFloatCPrevFloatC);
					handleFloatCPrevFloatC = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatCChange == null) {
				this.__cbOnOwnerUnbindFloatCChange = [];
			}
			this.__cbOnOwnerUnbindFloatCChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatCPrevFloatC = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatCChange == null) {
				this.__cbOnOwnerUnbindFloatCChange = [];
			}
			this.__cbOnOwnerUnbindFloatCChange.push(null);
		}
		if(this.__cbOnFloatCChange == null) {
			this.__cbOnFloatCChange = [];
		}
		this.__cbOnFloatCChange.push(handleFloatCPrevFloatC);
	}
	,onceFloatCChange: function(owner,handleFloatCPrevFloatC) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatCChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatCPrevFloatC != null) {
					_gthis.offFloatCChange(handleFloatCPrevFloatC);
					handleFloatCPrevFloatC = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatCChange == null) {
				this.__cbOnceOwnerUnbindFloatCChange = [];
			}
			this.__cbOnceOwnerUnbindFloatCChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatCPrevFloatC = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatCChange == null) {
				this.__cbOnceOwnerUnbindFloatCChange = [];
			}
			this.__cbOnceOwnerUnbindFloatCChange.push(null);
		}
		if(this.__cbOnceFloatCChange == null) {
			this.__cbOnceFloatCChange = [];
		}
		this.__cbOnceFloatCChange.push(handleFloatCPrevFloatC);
	}
	,offFloatCChange: function(handleFloatCPrevFloatC) {
		if(handleFloatCPrevFloatC != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatCChange != null) {
				index = this.__cbOnFloatCChange.indexOf(handleFloatCPrevFloatC);
				if(index != -1) {
					this.__cbOnFloatCChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatCChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatCChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatCChange != null) {
				index = this.__cbOnceFloatCChange.indexOf(handleFloatCPrevFloatC);
				if(index != -1) {
					this.__cbOnceFloatCChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatCChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatCChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatCChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatCChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatCChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatCChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatCChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatCChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatCChange = null;
			}
			this.__cbOnFloatCChange = null;
			this.__cbOnceFloatCChange = null;
		}
	}
	,listensFloatCChange: function() {
		if(!(this.__cbOnFloatCChange != null && this.__cbOnFloatCChange.length > 0)) {
			if(this.__cbOnceFloatCChange != null) {
				return this.__cbOnceFloatCChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFloatDChange: null
	,__cbOnceFloatDChange: null
	,__cbOnOwnerUnbindFloatDChange: null
	,__cbOnceOwnerUnbindFloatDChange: null
	,emitFloatDChange: function(floatD,prevFloatD) {
		var len = 0;
		if(this.__cbOnFloatDChange != null) {
			len += this.__cbOnFloatDChange.length;
		}
		if(this.__cbOnceFloatDChange != null) {
			len += this.__cbOnceFloatDChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFloatDChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFloatDChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFloatDChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFloatDChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFloatDChange[ii];
						this.__cbOnceFloatDChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFloatDChange[ii];
						this.__cbOnceOwnerUnbindFloatDChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFloatDChange[ii]);
						newCbOnceArray.push(this.__cbOnceFloatDChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFloatDChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFloatDChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(floatD,prevFloatD);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFloatDChange: function(owner,handleFloatDPrevFloatD) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatDChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatDPrevFloatD != null) {
					_gthis.offFloatDChange(handleFloatDPrevFloatD);
					handleFloatDPrevFloatD = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFloatDChange == null) {
				this.__cbOnOwnerUnbindFloatDChange = [];
			}
			this.__cbOnOwnerUnbindFloatDChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatDPrevFloatD = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFloatDChange == null) {
				this.__cbOnOwnerUnbindFloatDChange = [];
			}
			this.__cbOnOwnerUnbindFloatDChange.push(null);
		}
		if(this.__cbOnFloatDChange == null) {
			this.__cbOnFloatDChange = [];
		}
		this.__cbOnFloatDChange.push(handleFloatDPrevFloatD);
	}
	,onceFloatDChange: function(owner,handleFloatDPrevFloatD) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "floatDChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleFloatDPrevFloatD != null) {
					_gthis.offFloatDChange(handleFloatDPrevFloatD);
					handleFloatDPrevFloatD = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFloatDChange == null) {
				this.__cbOnceOwnerUnbindFloatDChange = [];
			}
			this.__cbOnceOwnerUnbindFloatDChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleFloatDPrevFloatD = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFloatDChange == null) {
				this.__cbOnceOwnerUnbindFloatDChange = [];
			}
			this.__cbOnceOwnerUnbindFloatDChange.push(null);
		}
		if(this.__cbOnceFloatDChange == null) {
			this.__cbOnceFloatDChange = [];
		}
		this.__cbOnceFloatDChange.push(handleFloatDPrevFloatD);
	}
	,offFloatDChange: function(handleFloatDPrevFloatD) {
		if(handleFloatDPrevFloatD != null) {
			var index;
			var unbind;
			if(this.__cbOnFloatDChange != null) {
				index = this.__cbOnFloatDChange.indexOf(handleFloatDPrevFloatD);
				if(index != -1) {
					this.__cbOnFloatDChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFloatDChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFloatDChange.splice(index,1);
				}
			}
			if(this.__cbOnceFloatDChange != null) {
				index = this.__cbOnceFloatDChange.indexOf(handleFloatDPrevFloatD);
				if(index != -1) {
					this.__cbOnceFloatDChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFloatDChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFloatDChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFloatDChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFloatDChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFloatDChange = null;
			}
			if(this.__cbOnceOwnerUnbindFloatDChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFloatDChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFloatDChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFloatDChange = null;
			}
			this.__cbOnFloatDChange = null;
			this.__cbOnceFloatDChange = null;
		}
	}
	,listensFloatDChange: function() {
		if(!(this.__cbOnFloatDChange != null && this.__cbOnFloatDChange.length > 0)) {
			if(this.__cbOnceFloatDChange != null) {
				return this.__cbOnceFloatDChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnLocation: null
	,__cbOnceLocation: null
	,__cbOnOwnerUnbindLocation: null
	,__cbOnceOwnerUnbindLocation: null
	,emitLocation: function(location) {
		var len = 0;
		if(this.__cbOnLocation != null) {
			len += this.__cbOnLocation.length;
		}
		if(this.__cbOnceLocation != null) {
			len += this.__cbOnceLocation.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnLocation.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnLocation[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceLocation != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceLocation.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceLocation[ii];
						this.__cbOnceLocation[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindLocation[ii];
						this.__cbOnceOwnerUnbindLocation[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindLocation[ii]);
						newCbOnceArray.push(this.__cbOnceLocation[ii]);
					}
				}
				this.__cbOnceOwnerUnbindLocation = newCbOnceOwnerUnbindArray;
				this.__cbOnceLocation = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(location);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onLocation: function(owner,handleLocation) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "location" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLocation != null) {
					_gthis.offLocation(handleLocation);
					handleLocation = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindLocation == null) {
				this.__cbOnOwnerUnbindLocation = [];
			}
			this.__cbOnOwnerUnbindLocation.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLocation = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindLocation == null) {
				this.__cbOnOwnerUnbindLocation = [];
			}
			this.__cbOnOwnerUnbindLocation.push(null);
		}
		if(this.__cbOnLocation == null) {
			this.__cbOnLocation = [];
		}
		this.__cbOnLocation.push(handleLocation);
	}
	,onceLocation: function(owner,handleLocation) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "location" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleLocation != null) {
					_gthis.offLocation(handleLocation);
					handleLocation = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindLocation == null) {
				this.__cbOnceOwnerUnbindLocation = [];
			}
			this.__cbOnceOwnerUnbindLocation.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleLocation = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindLocation == null) {
				this.__cbOnceOwnerUnbindLocation = [];
			}
			this.__cbOnceOwnerUnbindLocation.push(null);
		}
		if(this.__cbOnceLocation == null) {
			this.__cbOnceLocation = [];
		}
		this.__cbOnceLocation.push(handleLocation);
	}
	,offLocation: function(handleLocation) {
		if(handleLocation != null) {
			var index;
			var unbind;
			if(this.__cbOnLocation != null) {
				index = this.__cbOnLocation.indexOf(handleLocation);
				if(index != -1) {
					this.__cbOnLocation.splice(index,1);
					unbind = this.__cbOnOwnerUnbindLocation[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindLocation.splice(index,1);
				}
			}
			if(this.__cbOnceLocation != null) {
				index = this.__cbOnceLocation.indexOf(handleLocation);
				if(index != -1) {
					this.__cbOnceLocation.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindLocation[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindLocation.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindLocation.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindLocation[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindLocation = null;
			}
			if(this.__cbOnceOwnerUnbindLocation != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindLocation.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindLocation[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindLocation = null;
			}
			this.__cbOnLocation = null;
			this.__cbOnceLocation = null;
		}
	}
	,listensLocation: function() {
		if(!(this.__cbOnLocation != null && this.__cbOnLocation.length > 0)) {
			if(this.__cbOnceLocation != null) {
				return this.__cbOnceLocation.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,editedItems: null
	,assets: null
	,entities: null
	,items: null
	,tracks: null
	,fps: null
	,fragmentData: null
	,resizable: null
	,autoUpdateTimeline: null
	,set_autoUpdateTimeline: function(autoUpdateTimeline) {
		if(this.autoUpdateTimeline != autoUpdateTimeline) {
			this.autoUpdateTimeline = autoUpdateTimeline;
			if(this.timeline != null) {
				this.timeline.set_autoUpdate(autoUpdateTimeline);
			}
		}
		return autoUpdateTimeline;
	}
	,floatA: null
	,set_floatA: function(floatA) {
		if(this.floatA != floatA) {
			var prevFloatA = this.floatA;
			this.floatA = floatA;
			this.emitFloatAChange(floatA,prevFloatA);
		}
		return floatA;
	}
	,floatB: null
	,set_floatB: function(floatB) {
		if(this.floatB != floatB) {
			var prevFloatA = this.floatB;
			this.floatB = floatB;
			this.emitFloatBChange(floatB,prevFloatA);
		}
		return floatB;
	}
	,floatC: null
	,set_floatC: function(floatC) {
		if(this.floatC != floatC) {
			var prevFloatC = this.floatC;
			this.floatC = floatC;
			this.emitFloatCChange(floatC,prevFloatC);
		}
		return floatC;
	}
	,floatD: null
	,set_floatD: function(floatD) {
		if(this.floatD != floatD) {
			var prevFloatD = this.floatD;
			this.floatD = floatD;
			this.emitFloatDChange(floatD,prevFloatD);
		}
		return floatD;
	}
	,pendingLoads: null
	,timeline: null
	,__cbOnReady: null
	,__cbOnceReady: null
	,__cbOnOwnerUnbindReady: null
	,__cbOnceOwnerUnbindReady: null
	,emitReady: function() {
		var len = 0;
		if(this.__cbOnReady != null) {
			len += this.__cbOnReady.length;
		}
		if(this.__cbOnceReady != null) {
			len += this.__cbOnceReady.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnReady.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReady[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReady != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReady.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReady[ii];
						this.__cbOnceReady[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReady[ii];
						this.__cbOnceOwnerUnbindReady[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReady[ii]);
						newCbOnceArray.push(this.__cbOnceReady[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReady = newCbOnceOwnerUnbindArray;
				this.__cbOnceReady = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReady == null) {
				this.__cbOnOwnerUnbindReady = [];
			}
			this.__cbOnOwnerUnbindReady.push(null);
		}
		if(this.__cbOnReady == null) {
			this.__cbOnReady = [];
		}
		this.__cbOnReady.push(handle);
	}
	,onceReady: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "ready" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReady(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReady == null) {
				this.__cbOnceOwnerUnbindReady = [];
			}
			this.__cbOnceOwnerUnbindReady.push(null);
		}
		if(this.__cbOnceReady == null) {
			this.__cbOnceReady = [];
		}
		this.__cbOnceReady.push(handle);
	}
	,offReady: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReady != null) {
				index = this.__cbOnReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnReady.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReady.splice(index,1);
				}
			}
			if(this.__cbOnceReady != null) {
				index = this.__cbOnceReady.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReady.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReady[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReady.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReady = null;
			}
			if(this.__cbOnceOwnerUnbindReady != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReady.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReady[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReady = null;
			}
			this.__cbOnReady = null;
			this.__cbOnceReady = null;
		}
	}
	,listensReady: function() {
		if(!(this.__cbOnReady != null && this.__cbOnReady.length > 0)) {
			if(this.__cbOnceReady != null) {
				return this.__cbOnceReady.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_fragmentData: function(fragmentData) {
		var _gthis = this;
		this.pendingLoads++;
		this.fragmentData = fragmentData;
		var usedIds_h = Object.create(null);
		if(fragmentData != null) {
			this.set_width(fragmentData.width);
			this.set_height(fragmentData.height);
			if(fragmentData.color != null) {
				this.color = fragmentData.color;
			} else {
				this.color = 0;
			}
			if(fragmentData.transparent != null) {
				var transparent = fragmentData.transparent;
				this.flags = transparent ? this.flags | 16 : this.flags & -17;
			} else {
				this.flags |= 16;
			}
			if(fragmentData.items != null) {
				var _g = 0;
				var _g1 = fragmentData.items;
				while(_g < _g1.length) {
					var item = _g1[_g];
					++_g;
					this.putItem(item);
					usedIds_h[item.id] = true;
				}
			}
		}
		if(fragmentData == null || Object.prototype.hasOwnProperty.call(fragmentData,"items")) {
			var toRemove = null;
			var _g = 0;
			var _g1 = this.entities;
			while(_g < _g1.length) {
				var entity = _g1[_g];
				++_g;
				if(!Object.prototype.hasOwnProperty.call(usedIds_h,entity.id)) {
					if(toRemove == null) {
						toRemove = [];
					}
					toRemove.push(entity.id);
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var id = toRemove[_g];
					++_g;
					this.removeItem(id);
				}
			}
		}
		if(fragmentData != null) {
			this.pendingLoads++;
			var converter = ceramic_App.app.converters.h["ceramic.ReadOnlyMap<String,ceramic.Component>"];
			converter.basicToField(this,"components",this.assets,fragmentData.components,function(value) {
				if(_gthis._lifecycleState < 0) {
					return;
				}
				_gthis.pendingLoads--;
				_gthis.onceReady(_gthis,function() {
					_gthis.set_fragmentComponents(value);
				});
				if(_gthis.pendingLoads == 0) {
					_gthis.emitReady();
				}
			});
		}
		if(fragmentData != null && fragmentData.fps != null) {
			this.set_fps(fragmentData.fps);
		}
		var usedTrackIds = null;
		if(fragmentData != null && fragmentData.tracks != null) {
			var _g = 0;
			var _g1 = fragmentData.tracks;
			while(_g < _g1.length) {
				var track = _g1[_g];
				++_g;
				if(usedTrackIds == null) {
					usedTrackIds = new haxe_ds_StringMap();
				}
				usedTrackIds.h[track.entity + "#" + track.field] = true;
				this.putTrack(null,track);
			}
			if(this.timeline != null && this.timeline.tracks.length > 0) {
				var _g = 0;
				var _g1 = [].concat(this.timeline.tracks);
				while(_g < _g1.length) {
					var existingTrack = _g1[_g];
					++_g;
					if(usedTrackIds == null || !Object.prototype.hasOwnProperty.call(usedTrackIds.h,existingTrack.id)) {
						var parts = existingTrack.id.split("#");
						if(parts.length == 2) {
							this.removeTrack(parts[0],parts[1]);
						} else {
							ceramic_App.app.logger.warning("Cannot remove track with unhandled id: " + existingTrack.id,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 312, className : "ceramic.Fragment", methodName : "set_fragmentData"});
						}
					}
				}
			}
		}
		var usedLabels = null;
		if(fragmentData != null && fragmentData.labels != null) {
			var rawLabels = fragmentData.labels;
			var _g = 0;
			var _g1 = Reflect.fields(rawLabels);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(usedLabels == null) {
					usedLabels = new haxe_ds_StringMap();
				}
				usedLabels.h[name] = true;
				var index = rawLabels[name];
				this.putLabel(index,name);
			}
			if(this.timeline != null && this.timeline.labels != null) {
				var _g = 0;
				var _g1 = [].concat(this.timeline.labels);
				while(_g < _g1.length) {
					var existingLabel = _g1[_g];
					++_g;
					if(usedLabels == null || !Object.prototype.hasOwnProperty.call(usedLabels.h,existingLabel)) {
						this.timeline.removeLabel(existingLabel);
					}
				}
			}
		}
		this.pendingLoads--;
		if(this.pendingLoads == 0) {
			this.emitReady();
		}
		return fragmentData;
	}
	,set_fps: function(fps) {
		if(this.fps != fps) {
			this.fps = fps;
			if(this.timeline != null) {
				this.timeline.fps = fps;
			}
			if(this.tracks != null) {
				var _g = 0;
				var _g1 = this.tracks;
				while(_g < _g1.length) {
					var track = _g1[_g];
					++_g;
					this.putTrack(null,track);
				}
			}
		}
		return fps;
	}
	,putItem: function(item) {
		var existing = this.get(item.id);
		var existingWasVisual = false;
		if(existing != null) {
			existingWasVisual = ((existing) instanceof ceramic_Visual);
			var c = js_Boot.getClass(existing);
			if(item.entity != c.__name__) {
				this.removeItem(item.id);
				existing = null;
			}
		} else {
			this.items.push(item);
		}
		var name = item.entity;
		var entityClass = $hxClasses[name];
		var instance = existing != null ? existing : null;
		var isFragment = item.entity == "ceramic.Fragment";
		if(instance == null) {
			var newArgs = [];
			if(isFragment) {
				newArgs.push(this.assets);
				newArgs.push(false);
			}
			instance = Type.createInstance(entityClass,newArgs);
		}
		if(instance == null) {
			throw haxe_Exception.thrown("Failed to create instance of " + item.entity);
		}
		instance.id = item.id;
		if(isFragment) {
			var frag = instance;
			frag.set_depthRange(1);
		}
		if(instance.get_data().name == null && item.name != null) {
			instance.get_data().name = item.name;
		}
		if(item.data != null && instance.get_data() != null) {
			var _g = 0;
			var _g1 = Reflect.fields(item.data);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				instance.get_data()[key] = Reflect.field(item.data,key);
			}
		}
		if(item.props != null) {
			var orderedProps = Reflect.fields(item.props);
			haxe_ds_ArraySort.sort(orderedProps,function(a,b) {
				var nA = 0;
				var nB = 0;
				return nA - nB;
			});
			var _g = 0;
			while(_g < orderedProps.length) {
				var field = orderedProps[_g];
				++_g;
				var fieldType = ceramic_FieldInfo.typeOf(item.entity,field);
				var value = Reflect.field(item.props,field);
				var converter = fieldType != null ? ceramic_App.app.converters.h[fieldType] : null;
				if(converter != null) {
					this.putItemField(isFragment,item,instance,field,value,converter);
				} else {
					if(!Object.prototype.hasOwnProperty.call(ceramic_Fragment.basicTypes.h,fieldType)) {
						var resolvedEnum = $hxEnums[fieldType];
						if(resolvedEnum != null) {
							var _g1 = 0;
							var _this = resolvedEnum.__constructs__;
							var result = new Array(_this.length);
							var _g2 = 0;
							var _g3 = _this.length;
							while(_g2 < _g3) {
								var i = _g2++;
								result[i] = _this[i]._hx_name;
							}
							var _g4 = result;
							while(_g1 < _g4.length) {
								var name = _g4[_g1];
								++_g1;
								if(name.toLowerCase() == value.toLowerCase()) {
									value = Type.createEnum(resolvedEnum,name);
									break;
								}
							}
						}
					}
					Reflect.setProperty(instance,field,value);
				}
			}
			var fieldType = ceramic_FieldInfo.typeOf(item.entity,"components");
			var value = item.components;
			var converter = fieldType != null ? ceramic_App.app.converters.h[fieldType] : null;
			if(converter != null) {
				this.putItemField(isFragment,item,instance,"components",value,converter);
			} else {
				ceramic_App.app.logger.warning("No converter found for field: components (type: " + fieldType + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 472, className : "ceramic.Fragment", methodName : "putItem"});
			}
		}
		if(existing == null) {
			if(ceramic_FieldInfo.typeOf(item.entity,"assets") == "ceramic.Assets") {
				Reflect.setProperty(instance,"assets",this.assets);
			}
			this.entities.push(instance);
		}
		var isVisual = ((instance) instanceof ceramic_Visual);
		if(isVisual && !existingWasVisual) {
			this.add(instance);
		}
		if(existing == null) {
			this.putTracksForItem(item.id);
		}
		return instance;
	}
	,putItemField: function(isFragment,item,instance,field,value,converter) {
		var _gthis = this;
		this.pendingLoads++;
		converter.basicToField(instance,field,this.assets,value,function(value) {
			_gthis.pendingLoads--;
			if(_gthis._lifecycleState < 0) {
				return;
			}
			if(instance._lifecycleState >= 0) {
				if(isFragment && field == "fragmentData") {
					var fragment = instance;
					_gthis.pendingLoads++;
					fragment.onceReady(_gthis,function() {
						_gthis.pendingLoads--;
						if(_gthis._lifecycleState < 0) {
							return;
						}
						if(_gthis.pendingLoads == 0) {
							_gthis.emitReady();
						}
					});
					fragment.set_fragmentData(value);
				} else if(field != "components") {
					Reflect.setProperty(instance,field,value);
				} else {
					_gthis.onceReady(_gthis,function() {
						var map = null;
						if(value != null) {
							map = value;
							if(map != null) {
								var h = map.h;
								var k_h = h;
								var k_keys = Object.keys(h);
								var k_length = k_keys.length;
								var k_current = 0;
								while(k_current < k_length) {
									var k = k_keys[k_current++];
									var c = map.h[k];
									if(c != null) {
										instance.component(k,c);
									}
								}
							}
						}
					});
				}
			}
			if(_gthis.pendingLoads == 0) {
				_gthis.emitReady();
			}
		});
	}
	,get: function(itemId) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.id == itemId) {
				return entity;
			}
		}
		return null;
	}
	,getItemInstanceByName: function(name) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.get_data().name == name) {
				return entity;
			}
		}
		return null;
	}
	,getItem: function(itemId) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.id == itemId) {
				return item;
			}
		}
		return null;
	}
	,getItemByName: function(name) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.name == name) {
				return item;
			}
		}
		return null;
	}
	,typeOfItem: function(itemId) {
		var item = this.getItem(itemId);
		if(item != null) {
			return item.entity;
		} else {
			ceramic_App.app.logger.warning("Failed to resolve entity type for item " + itemId,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 685, className : "ceramic.Fragment", methodName : "typeOfItem"});
			return null;
		}
	}
	,removeItem: function(itemId) {
		var _g = 0;
		var _g1 = this.entities;
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			if(entity.id == itemId) {
				HxOverrides.remove(this.entities,entity);
				entity.destroy();
				break;
			}
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.id == itemId) {
				HxOverrides.remove(this.items,item);
				break;
			}
		}
	}
	,removeAllItems: function() {
		var _g = 0;
		var _g1 = [].concat(this.entities);
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			HxOverrides.remove(this.entities,entity);
			entity.destroy();
		}
		var _g = 0;
		var _g1 = [].concat(this.items);
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			HxOverrides.remove(this.items,item);
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Layer.prototype.destroy.call(this);
		if(this.timeline != null) {
			this.timeline.destroy();
			this.timeline = null;
		}
		this.removeAllItems();
	}
	,set_components: function(components) {
		if(this._components == components) {
			return components;
		}
		if(this._components != null) {
			var h = this._components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(components == null || !Object.prototype.hasOwnProperty.call(components.h,name)) {
					if(this.fragmentComponents == null || !Object.prototype.hasOwnProperty.call(this.fragmentComponents.h,name)) {
						this.removeComponent(name);
					}
				}
			}
		}
		if(components != null) {
			var h = components.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				var newComponent = components.h[name];
				if(this._components != null) {
					var existing = this._components.h[name];
					if(existing != null) {
						if(existing != newComponent) {
							this.removeComponent(name);
							this.component(name,newComponent);
						}
					} else {
						this.component(name,newComponent);
					}
				} else {
					this.component(name,newComponent);
				}
			}
		}
		this._components = components;
		return components;
	}
	,fragmentComponents: null
	,set_fragmentComponents: function(fragmentComponents) {
		if(this.fragmentComponents == fragmentComponents) {
			return fragmentComponents;
		}
		if(this.fragmentComponents != null) {
			var h = this.fragmentComponents.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				if(fragmentComponents == null || !Object.prototype.hasOwnProperty.call(fragmentComponents.h,name)) {
					this.removeComponent(name);
				}
			}
		}
		if(fragmentComponents != null) {
			var h = fragmentComponents.h;
			var name_h = h;
			var name_keys = Object.keys(h);
			var name_length = name_keys.length;
			var name_current = 0;
			while(name_current < name_length) {
				var name = name_keys[name_current++];
				var newComponent = fragmentComponents.h[name];
				if(this.fragmentComponents != null) {
					var existing = this.fragmentComponents.h[name];
					if(existing != null) {
						if(existing != newComponent) {
							this.removeComponent(name);
							this.component(name,newComponent);
						}
					} else {
						this.component(name,newComponent);
					}
				} else {
					this.component(name,newComponent);
				}
			}
		}
		this.fragmentComponents = fragmentComponents;
		return fragmentComponents;
	}
	,isManagedComponent: function() {
	}
	,putTrack: function(entityType,track) {
		var existingIndexes = null;
		var existing = this.getTrack(track.entity,track.field);
		if(existing == null) {
			if(this.tracks == null) {
				this.tracks = [];
			}
			this.tracks.push(track);
		} else {
			existingIndexes = new haxe_ds_IntMap();
			var _g = 0;
			var _g1 = existing.keyframes;
			while(_g < _g1.length) {
				var keyframe = _g1[_g];
				++_g;
				existingIndexes.h[keyframe.index] = true;
			}
			var indexOfTrack = this.tracks.indexOf(existing);
			this.tracks[indexOfTrack] = track;
		}
		var entityId = track.entity;
		var entity = this.get(entityId);
		if(track.keyframes != null && track.keyframes.length > 0) {
			this.createTimelineIfNeeded();
			var field = track.field;
			var trackId = entityId + "#" + field;
			var trackOptions = track.options;
			if(entityType == null) {
				entityType = this.typeOfItem(track.entity);
			}
			if(entityType == null) {
				ceramic_App.app.logger.warning("Cannot update timeline track " + trackId + ": failed to resolve entity type",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 1011, className : "ceramic.Fragment", methodName : "putTrack"});
				return;
			}
			var entityInfo = ceramic_FieldInfo.types(entityType);
			var entityFieldType = entityInfo != null ? entityInfo.h[field] : null;
			if(entityFieldType == null) {
				ceramic_App.app.logger.warning("Cannot update timeline track " + trackId + ": failed to resolve info for " + field + " of entity type " + entityType,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 1017, className : "ceramic.Fragment", methodName : "putTrack"});
				return;
			}
			var timelineTrack = this.timeline.get(trackId);
			if(timelineTrack == null) {
				if(entity == null) {
					ceramic_App.app.logger.warning("Failed to create timeline track " + trackId + " because there is no entity with id " + track.entity,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 1025, className : "ceramic.Fragment", methodName : "putTrack"});
					return;
				}
				ceramic_Fragment._trackResult.value = null;
				ceramic_App.app.timelines.emitCreateTrack(entityFieldType,trackOptions,ceramic_Fragment._trackResult);
				timelineTrack = ceramic_Fragment._trackResult.value;
				if(timelineTrack == null) {
					ceramic_App.app.logger.warning("Failed to create timeline track " + trackId + " for " + field + " of entity type " + entityType,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 1033, className : "ceramic.Fragment", methodName : "putTrack"});
					return;
				}
				entity.onDestroy(timelineTrack,function(_) {
					timelineTrack.destroy();
				});
				timelineTrack.id = trackId;
				ceramic_App.app.timelines.emitBindTrack(entityFieldType,trackOptions,timelineTrack,entity,field);
				this.timeline.add(timelineTrack);
			}
			timelineTrack.loop = track.loop;
			if(ceramic_Fragment._usedKeyframes.length > 0) {
				var _g = 0;
				var _g1 = ceramic_Fragment._usedKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					ceramic_Fragment._usedKeyframes[i] = null;
				}
				ceramic_Extensions.setArrayLength(ceramic_Fragment._usedKeyframes,0);
			}
			var prevIndex = -1;
			var isSorted = true;
			var _g = 0;
			var _g1 = track.keyframes;
			while(_g < _g1.length) {
				var keyframe = _g1[_g];
				++_g;
				var index = keyframe.index;
				if(index < prevIndex) {
					isSorted = false;
				}
				prevIndex = index;
				var existing = timelineTrack.findKeyframeAtIndex(index);
				ceramic_Fragment._keyframeResult.value = null;
				ceramic_App.app.timelines.emitCreateKeyframe(entityFieldType,trackOptions,keyframe.value,index,ceramic_EasingUtils.easingFromString(keyframe.easing),existing,ceramic_Fragment._keyframeResult);
				var timelineKeyframe = ceramic_Fragment._keyframeResult.value;
				if(timelineKeyframe != null) {
					ceramic_Fragment._usedKeyframes.push(timelineKeyframe);
					if(existing != null) {
						if(existing != timelineKeyframe) {
							timelineTrack.remove(existing);
							timelineTrack.add(timelineKeyframe);
						}
					} else {
						timelineTrack.add(timelineKeyframe);
					}
				} else {
					ceramic_App.app.logger.warning("Failed to create or update keyframe #" + Std.string($bind(this,this.frame)) + " of track " + trackId + " for field " + field + " of entity type " + entityType,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 1090, className : "ceramic.Fragment", methodName : "putTrack"});
					return;
				}
			}
			var toRemove = null;
			var timelineKeyframes = timelineTrack.keyframes;
			if(isSorted) {
				var usedIndex = 0;
				var _g = 0;
				var _g1 = timelineKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					var timelineKeyframe = timelineKeyframes[i];
					if(ceramic_Fragment._usedKeyframes[usedIndex] == timelineKeyframe) {
						++usedIndex;
					} else {
						if(toRemove == null) {
							toRemove = [];
						}
						toRemove.push(timelineKeyframe);
					}
				}
			} else {
				ceramic_App.app.logger.warning("Input keyframe array should be sorted by time in ascending order!",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Fragment.hx", lineNumber : 1120, className : "ceramic.Fragment", methodName : "putTrack"});
				var _g = 0;
				var _g1 = timelineKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					var timelineKeyframe = timelineKeyframes[i];
					if(ceramic_Fragment._usedKeyframes.indexOf(timelineKeyframe) == -1) {
						if(toRemove == null) {
							toRemove = [];
						}
						toRemove.push(timelineKeyframe);
					}
				}
			}
			if(toRemove != null) {
				var _g = 0;
				while(_g < toRemove.length) {
					var timelineKeyframe = toRemove[_g];
					++_g;
					timelineTrack.remove(timelineKeyframe);
				}
				toRemove = null;
			}
			if(ceramic_Fragment._usedKeyframes.length > 0) {
				var _g = 0;
				var _g1 = ceramic_Fragment._usedKeyframes.length;
				while(_g < _g1) {
					var i = _g++;
					ceramic_Fragment._usedKeyframes[i] = null;
				}
				ceramic_Extensions.setArrayLength(ceramic_Fragment._usedKeyframes,0);
			}
			timelineTrack.apply();
		}
	}
	,putTracksForItem: function(itemId) {
		if(this.tracks != null) {
			var _g = 0;
			var _g1 = this.tracks.length;
			while(_g < _g1) {
				var i = _g++;
				var track = this.tracks[i];
				if(track.entity == itemId) {
					this.putTrack(null,track);
				}
			}
		}
	}
	,getTrack: function(entity,field) {
		if(this.tracks != null) {
			var _g = 0;
			var _g1 = this.tracks;
			while(_g < _g1.length) {
				var track = _g1[_g];
				++_g;
				if(track.entity == entity && track.field == field) {
					return track;
				}
			}
		}
		return null;
	}
	,removeTrack: function(entity,field) {
		if(this.tracks != null) {
			var index = -1;
			var _g = 0;
			var _g1 = this.tracks.length;
			while(_g < _g1) {
				var i = _g++;
				var track = this.tracks[i];
				if(track.entity == entity && track.field == field) {
					index = i;
					break;
				}
			}
			if(index != -1) {
				this.tracks.splice(index,1);
				if(this.timeline != null) {
					var trackId = entity + "#" + field;
					var timelineTrack = this.timeline.get(trackId);
					if(timelineTrack != null) {
						this.timeline.remove(timelineTrack);
						timelineTrack.destroy();
					}
				}
			}
		}
	}
	,createTimelineIfNeeded: function() {
		if(this.timeline == null) {
			this.timeline = new ceramic_Timeline();
			this.timeline.fps = this.fps;
			this.timeline.set_autoUpdate(this.autoUpdateTimeline);
		}
	}
	,putLabel: function(index,name) {
		this.createTimelineIfNeeded();
		this.timeline.setLabel(index,name);
	}
	,indexOfLabel: function(name) {
		if(this.timeline != null) {
			return this.timeline.indexOfLabel(name);
		}
		return -1;
	}
	,labelAtIndex: function(index) {
		if(this.timeline != null) {
			return this.timeline.labelAtIndex(index);
		}
		return null;
	}
	,removeLabel: function(name) {
		if(this.timeline != null) {
			this.timeline.removeLabel(name);
		}
	}
	,removeLabelAtIndex: function(index) {
		if(this.timeline != null) {
			this.timeline.removeLabelAtIndex(index);
		}
	}
	,get_paused: function() {
		if(this.timeline != null) {
			return this.timeline.paused;
		} else {
			return false;
		}
	}
	,set_paused: function(paused) {
		var prevPaused = this.timeline != null && this.timeline.paused;
		if(prevPaused != paused) {
			this.createTimelineIfNeeded();
			this.timeline.set_paused(paused);
		}
		return paused;
	}
	,unbindEvents: function() {
		ceramic_Layer.prototype.unbindEvents.call(this);
		this.offFloatAChange();
		this.offFloatBChange();
		this.offFloatCChange();
		this.offFloatDChange();
		this.offLocation();
		this.offReady();
	}
	,__class__: ceramic_Fragment
	,__properties__: $extend(ceramic_Layer.prototype.__properties__,{set_paused:"set_paused",get_paused:"get_paused",set_fragmentComponents:"set_fragmentComponents",set_floatD:"set_floatD",set_floatC:"set_floatC",set_floatB:"set_floatB",set_floatA:"set_floatA",set_autoUpdateTimeline:"set_autoUpdateTimeline",set_fragmentData:"set_fragmentData",set_fps:"set_fps"})
});
var ceramic_FragmentsAsset = function(name,options) {
	this.unobservedFragments = null;
	this.fragmentsAutoruns = null;
	ceramic_Asset.call(this,"fragments",name,options);
};
$hxClasses["ceramic.FragmentsAsset"] = ceramic_FragmentsAsset;
ceramic_FragmentsAsset.__name__ = "ceramic.FragmentsAsset";
ceramic_FragmentsAsset.__super__ = ceramic_Asset;
ceramic_FragmentsAsset.prototype = $extend(ceramic_Asset.prototype,{
	fragmentsAutoruns: null
	,get_fragments: function() {
		var value = this.unobservedFragments;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.fragmentsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.fragmentsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_fragments: function(fragments) {
		var prevValue = this.unobservedFragments;
		this.unobservedFragments = fragments;
		if(prevValue == fragments) {
			return fragments;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFragmentsChange(fragments,prevValue);
		var fieldAutoruns = this.fragmentsAutoruns;
		if(fieldAutoruns != null) {
			this.fragmentsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return fragments;
	}
	,invalidateFragments: function() {
		var value = this.unobservedFragments;
		this.emitFragmentsChange(value,value);
		var fieldAutoruns = this.fragmentsAutoruns;
		if(fieldAutoruns != null) {
			this.fragmentsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedFragments: null
	,__cbOnFragmentsChange: null
	,__cbOnceFragmentsChange: null
	,__cbOnOwnerUnbindFragmentsChange: null
	,__cbOnceOwnerUnbindFragmentsChange: null
	,emitFragmentsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFragmentsChange != null) {
			len += this.__cbOnFragmentsChange.length;
		}
		if(this.__cbOnceFragmentsChange != null) {
			len += this.__cbOnceFragmentsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFragmentsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFragmentsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFragmentsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFragmentsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFragmentsChange[ii];
						this.__cbOnceFragmentsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFragmentsChange[ii];
						this.__cbOnceOwnerUnbindFragmentsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFragmentsChange[ii]);
						newCbOnceArray.push(this.__cbOnceFragmentsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFragmentsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFragmentsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFragmentsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fragmentsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFragmentsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFragmentsChange == null) {
				this.__cbOnOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnOwnerUnbindFragmentsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFragmentsChange == null) {
				this.__cbOnOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnOwnerUnbindFragmentsChange.push(null);
		}
		if(this.__cbOnFragmentsChange == null) {
			this.__cbOnFragmentsChange = [];
		}
		this.__cbOnFragmentsChange.push(handleCurrentPrevious);
	}
	,onceFragmentsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fragmentsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFragmentsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFragmentsChange == null) {
				this.__cbOnceOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnceOwnerUnbindFragmentsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFragmentsChange == null) {
				this.__cbOnceOwnerUnbindFragmentsChange = [];
			}
			this.__cbOnceOwnerUnbindFragmentsChange.push(null);
		}
		if(this.__cbOnceFragmentsChange == null) {
			this.__cbOnceFragmentsChange = [];
		}
		this.__cbOnceFragmentsChange.push(handleCurrentPrevious);
	}
	,offFragmentsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFragmentsChange != null) {
				index = this.__cbOnFragmentsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFragmentsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFragmentsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFragmentsChange.splice(index,1);
				}
			}
			if(this.__cbOnceFragmentsChange != null) {
				index = this.__cbOnceFragmentsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFragmentsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFragmentsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFragmentsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFragmentsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFragmentsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFragmentsChange = null;
			}
			if(this.__cbOnceOwnerUnbindFragmentsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFragmentsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFragmentsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFragmentsChange = null;
			}
			this.__cbOnFragmentsChange = null;
			this.__cbOnceFragmentsChange = null;
		}
	}
	,listensFragmentsChange: function() {
		if(!(this.__cbOnFragmentsChange != null && this.__cbOnFragmentsChange.length > 0)) {
			if(this.__cbOnceFragmentsChange != null) {
				return this.__cbOnceFragmentsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load fragments asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FragmentsAsset.hx", lineNumber : 22, className : "ceramic.FragmentsAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		ceramic_App.app.logger.info("Load fragments " + backendPath,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FragmentsAsset.hx", lineNumber : 43, className : "ceramic.FragmentsAsset", methodName : "load"});
		ceramic_App.app.backend.texts.load(realPath,loadOptions,function(text) {
			if(text != null) {
				try {
					_gthis.set_fragments(JSON.parse(text));
				} catch( _g ) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to parse fragments at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FragmentsAsset.hx", lineNumber : 51, className : "ceramic.FragmentsAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load fragments at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FragmentsAsset.hx", lineNumber : 60, className : "ceramic.FragmentsAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload fragments (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\FragmentsAsset.hx", lineNumber : 83, className : "ceramic.FragmentsAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_fragments(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offFragmentsChange();
	}
	,__class__: ceramic_FragmentsAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_fragments:"set_fragments",get_fragments:"get_fragments"})
});
var ceramic_GamepadAxis = {};
ceramic_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "LEFT_TRIGGER";
	case 5:
		return "RIGHT_TRIGGER";
	default:
		return "" + this1;
	}
};
var ceramic_GamepadButton = {};
ceramic_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "L1";
	case 5:
		return "R1";
	case 6:
		return "L2";
	case 7:
		return "R2";
	case 8:
		return "SELECT";
	case 9:
		return "START";
	case 10:
		return "L3";
	case 11:
		return "R3";
	case 12:
		return "DPAD_UP";
	case 13:
		return "DPAD_DOWN";
	case 14:
		return "DPAD_LEFT";
	case 15:
		return "DPAD_RIGHT";
	default:
		return "" + this1;
	}
};
var ceramic_GeometryUtils = function() { };
$hxClasses["ceramic.GeometryUtils"] = ceramic_GeometryUtils;
ceramic_GeometryUtils.__name__ = "ceramic.GeometryUtils";
ceramic_GeometryUtils.pointInTriangle = function(x,y,ax,ay,bx,by,cx,cy) {
	var d1 = (x - bx) * (ay - by) - (ax - bx) * (y - by);
	var d2 = (x - cx) * (by - cy) - (bx - cx) * (y - cy);
	var d3 = (x - ax) * (cy - ay) - (cx - ax) * (y - ay);
	var hasNeg = d1 < 0 || d2 < 0 || d3 < 0;
	var hasPos = d1 > 0 || d2 > 0 || d3 > 0;
	return !(hasNeg && hasPos);
};
ceramic_GeometryUtils.pointInRectangle = function(x,y,rectX,rectY,rectWidth,rectHeight) {
	if(x < rectX) {
		return false;
	}
	if(y < rectY) {
		return false;
	}
	if(x >= rectX + rectWidth) {
		return false;
	}
	if(y >= rectY + rectHeight) {
		return false;
	}
	return true;
};
ceramic_GeometryUtils.pointInCircle = function(x,y,cx,cy,radius) {
	return (x - cx) * (x - cx) + (y - cy) * (y - cy) <= radius * radius;
};
ceramic_GeometryUtils.distance = function(x1,y1,x2,y2) {
	var dx = x2 - x1;
	var dy = y2 - y1;
	return Math.sqrt(dx * dx + dy * dy);
};
ceramic_GeometryUtils.squareDistance = function(x1,y1,x2,y2) {
	var dx = x2 - x1;
	var dy = y2 - y1;
	return dx * dx + dy * dy;
};
ceramic_GeometryUtils.angleTo = function(x0,y0,x1,y1) {
	var result = Math.atan2(y1 - y0,x1 - x0) * 57.29577951308232 + 90;
	if(result < 0) {
		result += 360.0;
	} else if(result >= 360.0) {
		result -= 360.0;
	}
	return result;
};
ceramic_GeometryUtils.angleDelta = function(angle0,angle1) {
	var deg = angle0;
	while(deg < 0) deg += 360;
	while(deg >= 360) deg -= 360;
	angle0 = deg;
	var deg = angle1;
	while(deg < 0) deg += 360;
	while(deg >= 360) deg -= 360;
	angle1 = deg;
	var delta = angle1 - angle0;
	if(delta > 180) {
		angle1 -= 360;
	} else if(delta < -180) {
		angle1 += 360;
	}
	return angle1 - angle0;
};
ceramic_GeometryUtils.clampDegrees = function(deg) {
	while(deg < 0) deg += 360;
	while(deg >= 360) deg -= 360;
	return deg;
};
ceramic_GeometryUtils.angleDirection = function(angle,result) {
	var phi = (angle - 90) * 0.017453292519943295;
	result.x = Math.cos(phi);
	result.y = Math.sin(phi);
	return result;
};
var ceramic_GlyphQuad = function() {
	this.glyphAdvance = -1;
	this.glyphY = -1;
	this.glyphX = -1;
	this.code = -1;
	this.line = -1;
	this.posInLine = -1;
	this.index = -1;
	this.glyph = null;
	this.char = null;
	ceramic_Quad.call(this);
};
$hxClasses["ceramic.GlyphQuad"] = ceramic_GlyphQuad;
ceramic_GlyphQuad.__name__ = "ceramic.GlyphQuad";
ceramic_GlyphQuad.__super__ = ceramic_Quad;
ceramic_GlyphQuad.prototype = $extend(ceramic_Quad.prototype,{
	__cbOnClear: null
	,__cbOnceClear: null
	,__cbOnOwnerUnbindClear: null
	,__cbOnceOwnerUnbindClear: null
	,emitClear: function(quad) {
		var len = 0;
		if(this.__cbOnClear != null) {
			len += this.__cbOnClear.length;
		}
		if(this.__cbOnceClear != null) {
			len += this.__cbOnceClear.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnClear.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnClear[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceClear != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceClear.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceClear[ii];
						this.__cbOnceClear[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindClear[ii];
						this.__cbOnceOwnerUnbindClear[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindClear[ii]);
						newCbOnceArray.push(this.__cbOnceClear[ii]);
					}
				}
				this.__cbOnceOwnerUnbindClear = newCbOnceOwnerUnbindArray;
				this.__cbOnceClear = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(quad);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onClear: function(owner,handleQuad) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "clear" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleQuad != null) {
					_gthis.offClear(handleQuad);
					handleQuad = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindClear == null) {
				this.__cbOnOwnerUnbindClear = [];
			}
			this.__cbOnOwnerUnbindClear.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleQuad = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindClear == null) {
				this.__cbOnOwnerUnbindClear = [];
			}
			this.__cbOnOwnerUnbindClear.push(null);
		}
		if(this.__cbOnClear == null) {
			this.__cbOnClear = [];
		}
		this.__cbOnClear.push(handleQuad);
	}
	,onceClear: function(owner,handleQuad) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "clear" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleQuad != null) {
					_gthis.offClear(handleQuad);
					handleQuad = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindClear == null) {
				this.__cbOnceOwnerUnbindClear = [];
			}
			this.__cbOnceOwnerUnbindClear.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleQuad = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindClear == null) {
				this.__cbOnceOwnerUnbindClear = [];
			}
			this.__cbOnceOwnerUnbindClear.push(null);
		}
		if(this.__cbOnceClear == null) {
			this.__cbOnceClear = [];
		}
		this.__cbOnceClear.push(handleQuad);
	}
	,offClear: function(handleQuad) {
		if(handleQuad != null) {
			var index;
			var unbind;
			if(this.__cbOnClear != null) {
				index = this.__cbOnClear.indexOf(handleQuad);
				if(index != -1) {
					this.__cbOnClear.splice(index,1);
					unbind = this.__cbOnOwnerUnbindClear[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindClear.splice(index,1);
				}
			}
			if(this.__cbOnceClear != null) {
				index = this.__cbOnceClear.indexOf(handleQuad);
				if(index != -1) {
					this.__cbOnceClear.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindClear[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindClear.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindClear.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindClear[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindClear = null;
			}
			if(this.__cbOnceOwnerUnbindClear != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindClear.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindClear[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindClear = null;
			}
			this.__cbOnClear = null;
			this.__cbOnceClear = null;
		}
	}
	,listensClear: function() {
		if(!(this.__cbOnClear != null && this.__cbOnClear.length > 0)) {
			if(this.__cbOnceClear != null) {
				return this.__cbOnceClear.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,char: null
	,glyph: null
	,index: null
	,posInLine: null
	,line: null
	,code: null
	,glyphX: null
	,glyphY: null
	,glyphAdvance: null
	,toString: function() {
		return "GlyphQuad(c=" + this.char + ",i=" + this.index + ",l=" + this.line + ",x=" + this.glyphX + ",y=" + this.glyphY + ")";
	}
	,clear: function() {
		this.emitClear(this);
		ceramic_Quad.prototype.clear.call(this);
	}
	,unbindEvents: function() {
		ceramic_Quad.prototype.unbindEvents.call(this);
		this.offClear();
	}
	,__class__: ceramic_GlyphQuad
});
var ceramic_Group = function(id) {
	this.items = [];
	ceramic_Entity.call(this);
	if(id != null) {
		this.id = id;
	}
	ceramic_App.app.groups.push(this);
};
$hxClasses["ceramic.Group"] = ceramic_Group;
ceramic_Group.__name__ = "ceramic.Group";
ceramic_Group.__super__ = ceramic_Entity;
ceramic_Group.prototype = $extend(ceramic_Entity.prototype,{
	items: null
	,add: function(item) {
		var items = this.items;
		var index = items.indexOf(item);
		if(index != -1) {
			ceramic_App.app.logger.warning("Cannot add item " + Std.string(item) + " to group, already inside group",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Group.hx", lineNumber : 42, className : "ceramic.Group", methodName : "add"});
		} else {
			items.push(item);
			item.onDestroy(this,$bind(this,this.itemDestroyed));
		}
	}
	,remove: function(item) {
		var items = this.items;
		var index = items.indexOf(item);
		if(index != -1) {
			items.splice(index,1);
			item.offDestroy($bind(this,this.itemDestroyed));
		} else {
			ceramic_App.app.logger.warning("Cannot remove item " + Std.string(item) + " from group, index is -1",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Group.hx", lineNumber : 61, className : "ceramic.Group", methodName : "remove"});
		}
	}
	,contains: function(item) {
		return this.items.indexOf(item) != -1;
	}
	,itemDestroyed: function(item) {
		this.remove(item);
	}
	,clear: function() {
		var items = this.items;
		if(items.length > 0) {
			var len = items.length;
			var pool = ceramic_ArrayPool.pool(len);
			var tmp = pool.get();
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				tmp.vector[i] = items[i];
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var item = tmp.vector[i];
				item.offDestroy($bind(this,this.itemDestroyed));
				item.destroy();
			}
			ceramic_Extensions.setArrayLength(items,0);
			pool.release(tmp);
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		HxOverrides.remove(ceramic_App.app.groups,this);
		this.clear();
	}
	,__class__: ceramic_Group
});
var ceramic_HashedString = function() { };
$hxClasses["ceramic.HashedString"] = ceramic_HashedString;
ceramic_HashedString.__name__ = "ceramic.HashedString";
ceramic_HashedString.encode = function(str) {
	var hash = haxe_crypto_Md5.encode(str);
	var len = str.length;
	return hash + "" + len + ";" + str;
};
ceramic_HashedString.append = function(encoded,str) {
	return encoded + ceramic_HashedString.encode(str);
};
ceramic_HashedString.decode = function(encoded) {
	ceramic_HashedString._lastDecodeIncomplete = false;
	var i = 0;
	var len = encoded.length;
	var result = null;
	while(i < len) {
		var hash = encoded.substring(i,i + 32);
		var n = i += 32;
		while(n < len && HxOverrides.cca(encoded,n) != 59) ++n;
		var sectionLen = Std.parseInt(encoded.substring(i,n));
		if(sectionLen == null || sectionLen <= 0) {
			ceramic_App.app.logger.warning("Failed to parse all encoded string: invalid section length",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\HashedString.hx", lineNumber : 63, className : "ceramic.HashedString", methodName : "decode"});
			ceramic_HashedString._lastDecodeIncomplete = true;
			break;
		}
		i = n + 1;
		var section = encoded.substring(i,i + sectionLen);
		if(section == null) {
			ceramic_App.app.logger.warning("Failed to parse all encoded string: null section",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\HashedString.hx", lineNumber : 72, className : "ceramic.HashedString", methodName : "decode"});
			ceramic_HashedString._lastDecodeIncomplete = true;
			break;
		}
		if(haxe_crypto_Md5.encode(section) != hash) {
			ceramic_App.app.logger.warning("Failed to parse all encoded string: section hash mismatch",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\HashedString.hx", lineNumber : 77, className : "ceramic.HashedString", methodName : "decode"});
			ceramic_HashedString._lastDecodeIncomplete = true;
			break;
		}
		i += sectionLen;
		if(result == null) {
			result = new StringBuf();
		}
		result.b += section == null ? "null" : "" + section;
	}
	if(result != null) {
		return result.b;
	} else {
		ceramic_App.app.logger.error("Invalid encoded string",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\HashedString.hx", lineNumber : 95, className : "ceramic.HashedString", methodName : "decode"});
		ceramic_HashedString._lastDecodeIncomplete = true;
		return null;
	}
};
ceramic_HashedString.prototype = {
	isLastDecodeIncomplete: function() {
		return ceramic_HashedString._lastDecodeIncomplete;
	}
	,__class__: ceramic_HashedString
};
var ceramic_ImageAsset = function(name,options) {
	this.reloadBecauseOfDensityChange = false;
	this.defaultImageOptions = null;
	this.unobservedTexture = null;
	this.textureAutoruns = null;
	ceramic_Asset.call(this,"image",name,options);
	this.set_handleTexturesDensityChange(true);
};
$hxClasses["ceramic.ImageAsset"] = ceramic_ImageAsset;
ceramic_ImageAsset.__name__ = "ceramic.ImageAsset";
ceramic_ImageAsset.__super__ = ceramic_Asset;
ceramic_ImageAsset.prototype = $extend(ceramic_Asset.prototype,{
	__cbOnReplaceTexture: null
	,__cbOnceReplaceTexture: null
	,__cbOnOwnerUnbindReplaceTexture: null
	,__cbOnceOwnerUnbindReplaceTexture: null
	,emitReplaceTexture: function(newTexture,prevTexture) {
		var len = 0;
		if(this.__cbOnReplaceTexture != null) {
			len += this.__cbOnReplaceTexture.length;
		}
		if(this.__cbOnceReplaceTexture != null) {
			len += this.__cbOnceReplaceTexture.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceTexture.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReplaceTexture[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReplaceTexture != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReplaceTexture.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReplaceTexture[ii];
						this.__cbOnceReplaceTexture[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReplaceTexture[ii];
						this.__cbOnceOwnerUnbindReplaceTexture[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReplaceTexture[ii]);
						newCbOnceArray.push(this.__cbOnceReplaceTexture[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReplaceTexture = newCbOnceOwnerUnbindArray;
				this.__cbOnceReplaceTexture = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newTexture,prevTexture);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceTexture: function(owner,handleNewTexturePrevTexture) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceTexture" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewTexturePrevTexture != null) {
					_gthis.offReplaceTexture(handleNewTexturePrevTexture);
					handleNewTexturePrevTexture = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceTexture == null) {
				this.__cbOnOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnOwnerUnbindReplaceTexture.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewTexturePrevTexture = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceTexture == null) {
				this.__cbOnOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnOwnerUnbindReplaceTexture.push(null);
		}
		if(this.__cbOnReplaceTexture == null) {
			this.__cbOnReplaceTexture = [];
		}
		this.__cbOnReplaceTexture.push(handleNewTexturePrevTexture);
	}
	,onceReplaceTexture: function(owner,handleNewTexturePrevTexture) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceTexture" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewTexturePrevTexture != null) {
					_gthis.offReplaceTexture(handleNewTexturePrevTexture);
					handleNewTexturePrevTexture = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceTexture == null) {
				this.__cbOnceOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnceOwnerUnbindReplaceTexture.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewTexturePrevTexture = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceTexture == null) {
				this.__cbOnceOwnerUnbindReplaceTexture = [];
			}
			this.__cbOnceOwnerUnbindReplaceTexture.push(null);
		}
		if(this.__cbOnceReplaceTexture == null) {
			this.__cbOnceReplaceTexture = [];
		}
		this.__cbOnceReplaceTexture.push(handleNewTexturePrevTexture);
	}
	,offReplaceTexture: function(handleNewTexturePrevTexture) {
		if(handleNewTexturePrevTexture != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceTexture != null) {
				index = this.__cbOnReplaceTexture.indexOf(handleNewTexturePrevTexture);
				if(index != -1) {
					this.__cbOnReplaceTexture.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceTexture[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceTexture.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceTexture != null) {
				index = this.__cbOnceReplaceTexture.indexOf(handleNewTexturePrevTexture);
				if(index != -1) {
					this.__cbOnceReplaceTexture.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceTexture[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceTexture.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceTexture.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceTexture[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceTexture = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceTexture != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceTexture.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceTexture[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceTexture = null;
			}
			this.__cbOnReplaceTexture = null;
			this.__cbOnceReplaceTexture = null;
		}
	}
	,listensReplaceTexture: function() {
		if(!(this.__cbOnReplaceTexture != null && this.__cbOnReplaceTexture.length > 0)) {
			if(this.__cbOnceReplaceTexture != null) {
				return this.__cbOnceReplaceTexture.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,textureAutoruns: null
	,get_texture: function() {
		var value = this.unobservedTexture;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.textureAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.textureAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_texture: function(texture) {
		var prevValue = this.unobservedTexture;
		this.unobservedTexture = texture;
		if(prevValue == texture) {
			return texture;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTextureChange(texture,prevValue);
		var fieldAutoruns = this.textureAutoruns;
		if(fieldAutoruns != null) {
			this.textureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return texture;
	}
	,invalidateTexture: function() {
		var value = this.unobservedTexture;
		this.emitTextureChange(value,value);
		var fieldAutoruns = this.textureAutoruns;
		if(fieldAutoruns != null) {
			this.textureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTexture: null
	,__cbOnTextureChange: null
	,__cbOnceTextureChange: null
	,__cbOnOwnerUnbindTextureChange: null
	,__cbOnceOwnerUnbindTextureChange: null
	,emitTextureChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTextureChange != null) {
			len += this.__cbOnTextureChange.length;
		}
		if(this.__cbOnceTextureChange != null) {
			len += this.__cbOnceTextureChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTextureChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTextureChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTextureChange[ii];
						this.__cbOnceTextureChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTextureChange[ii];
						this.__cbOnceOwnerUnbindTextureChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTextureChange[ii]);
						newCbOnceArray.push(this.__cbOnceTextureChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTextureChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTextureChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTextureChange == null) {
				this.__cbOnOwnerUnbindTextureChange = [];
			}
			this.__cbOnOwnerUnbindTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTextureChange == null) {
				this.__cbOnOwnerUnbindTextureChange = [];
			}
			this.__cbOnOwnerUnbindTextureChange.push(null);
		}
		if(this.__cbOnTextureChange == null) {
			this.__cbOnTextureChange = [];
		}
		this.__cbOnTextureChange.push(handleCurrentPrevious);
	}
	,onceTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTextureChange == null) {
				this.__cbOnceOwnerUnbindTextureChange = [];
			}
			this.__cbOnceOwnerUnbindTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTextureChange == null) {
				this.__cbOnceOwnerUnbindTextureChange = [];
			}
			this.__cbOnceOwnerUnbindTextureChange.push(null);
		}
		if(this.__cbOnceTextureChange == null) {
			this.__cbOnceTextureChange = [];
		}
		this.__cbOnceTextureChange.push(handleCurrentPrevious);
	}
	,offTextureChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTextureChange != null) {
				index = this.__cbOnTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTextureChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTextureChange.splice(index,1);
				}
			}
			if(this.__cbOnceTextureChange != null) {
				index = this.__cbOnceTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTextureChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTextureChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTextureChange = null;
			}
			if(this.__cbOnceOwnerUnbindTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTextureChange = null;
			}
			this.__cbOnTextureChange = null;
			this.__cbOnceTextureChange = null;
		}
	}
	,listensTextureChange: function() {
		if(!(this.__cbOnTextureChange != null && this.__cbOnTextureChange.length > 0)) {
			if(this.__cbOnceTextureChange != null) {
				return this.__cbOnceTextureChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,defaultImageOptions: null
	,reloadBecauseOfDensityChange: null
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		var reloadBecauseOfDensityChange = this.reloadBecauseOfDensityChange;
		this.reloadBecauseOfDensityChange = false;
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load image asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ImageAsset.hx", lineNumber : 57, className : "ceramic.ImageAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		if(this.defaultImageOptions != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.defaultImageOptions);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.defaultImageOptions,key);
			}
		}
		if(this.options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.options);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.options,key);
			}
		}
		this.loadTexture(this.path,loadOptions,function(newTexture,backendPath) {
			if(newTexture != null) {
				var prevTexture = _gthis.get_texture();
				newTexture.id = "texture:" + backendPath;
				_gthis.set_texture(newTexture);
				_gthis.get_texture().asset = _gthis;
				if(prevTexture != null) {
					_gthis.get_texture().set_filter(prevTexture.filter);
					_gthis.emitReplaceTexture(_gthis.get_texture(),prevTexture);
					var _g = 0;
					var _g1 = [].concat(ceramic_App.app.visuals);
					while(_g < _g1.length) {
						var visual = _g1[_g];
						++_g;
						if(visual._lifecycleState >= 0) {
							if(visual.asQuad != null) {
								var quad = visual.asQuad;
								if(quad._texture == prevTexture) {
									var frameX = quad.frameX;
									var frameY = quad.frameY;
									var frameWidth = quad.frameWidth;
									var frameHeight = quad.frameHeight;
									var texture = _gthis.get_texture();
									if(quad._texture != texture) {
										quad._set_texture(texture);
									}
									if(reloadBecauseOfDensityChange || frameX != 0 || frameY != 0 || frameWidth != prevTexture.width || frameHeight != prevTexture.height) {
										quad.frameX = frameX;
										quad.frameY = frameY;
										if(quad.frameWidth != frameWidth) {
											quad.frameWidth = frameWidth;
											if(frameWidth != -1) {
												quad.set_width(frameWidth);
											}
										}
										if(quad.frameHeight != frameHeight) {
											quad.frameHeight = frameHeight;
											if(frameHeight != -1) {
												quad.set_height(frameHeight);
											}
										}
									}
								}
							} else if(visual.asMesh != null) {
								var mesh = visual.asMesh;
								if(mesh.texture == prevTexture) {
									mesh.set_texture(_gthis.get_texture());
								}
							}
						}
					}
					prevTexture.asset = null;
					prevTexture.destroy();
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
				if(_gthis.handleTexturesDensityChange) {
					_gthis.checkTexturesDensity();
				}
			} else {
				ceramic_App.app.logger.warning("Failed to decode texture",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ImageAsset.hx", lineNumber : 155, className : "ceramic.ImageAsset", methodName : "load"});
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				_gthis.emitComplete(false);
			}
		});
	}
	,loadTexture: function(path,loadOptions,callback) {
		var _gthis = this;
		var backendPath = path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load image " + backendPath + " (density=" + this.density + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ImageAsset.hx", lineNumber : 175, className : "ceramic.ImageAsset", methodName : "loadTexture"});
		ceramic_App.app.backend.textures.load(realPath,loadOptions,function(image) {
			if(image != null) {
				var newTexture = new ceramic_Texture(image,_gthis.density);
				callback(newTexture,backendPath);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load texture at path: " + path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ImageAsset.hx", lineNumber : 234, className : "ceramic.ImageAsset", methodName : "loadTexture"});
				_gthis.emitComplete(false);
			}
		});
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.checkTexturesDensity();
		}
	}
	,checkTexturesDensity: function() {
		if(this.owner == null || !this.owner.reloadOnTextureDensityChange) {
			return;
		}
		var prevPath = this.path;
		this.computePath();
		if(prevPath != this.path) {
			ceramic_App.app.logger.info("Reload texture (" + prevPath + " -> " + this.path + ")",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ImageAsset.hx", lineNumber : 266, className : "ceramic.ImageAsset", methodName : "checkTexturesDensity"});
			this.reloadBecauseOfDensityChange = true;
			this.load();
		}
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload texture (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ImageAsset.hx", lineNumber : 288, className : "ceramic.ImageAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_texture() != null) {
			this.get_texture().destroy();
			this.set_texture(null);
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceTexture();
		this.offTextureChange();
	}
	,__class__: ceramic_ImageAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture"})
});
var ceramic_Immediate = function() {
	this.immediateCallbacksLen = 0;
	this.immediateCallbacksCapacity = 0;
	this.immediateCallbacks = [];
};
$hxClasses["ceramic.Immediate"] = ceramic_Immediate;
ceramic_Immediate.__name__ = "ceramic.Immediate";
ceramic_Immediate.prototype = {
	immediateCallbacks: null
	,immediateCallbacksCapacity: null
	,immediateCallbacksLen: null
	,push: function(handleImmediate) {
		if(handleImmediate == null) {
			throw haxe_Exception.thrown("Immediate callback should not be null!");
		}
		if(this.immediateCallbacksLen < this.immediateCallbacksCapacity) {
			this.immediateCallbacks[this.immediateCallbacksLen] = handleImmediate;
			this.immediateCallbacksLen++;
		} else {
			this.immediateCallbacks[this.immediateCallbacksLen++] = handleImmediate;
			this.immediateCallbacksCapacity++;
		}
	}
	,flush: function() {
		var didFlush = false;
		while(this.immediateCallbacksLen > 0) {
			didFlush = true;
			var pool = ceramic_ArrayPool.pool(this.immediateCallbacksLen);
			var callbacks = pool.get();
			var len = this.immediateCallbacksLen;
			this.immediateCallbacksLen = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				callbacks.vector[i] = this.immediateCallbacks[i];
				this.immediateCallbacks[i] = null;
			}
			var _g2 = 0;
			var _g3 = len;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var cb = callbacks.vector[i1];
				cb();
			}
			pool.release(callbacks);
		}
		return didFlush;
	}
	,__class__: ceramic_Immediate
};
var ceramic_InitSettings = function(settings) {
	this.settings = settings;
};
$hxClasses["ceramic.InitSettings"] = ceramic_InitSettings;
ceramic_InitSettings.__name__ = "ceramic.InitSettings";
ceramic_InitSettings.prototype = {
	settings: null
	,get_targetWidth: function() {
		return this.settings.get_targetWidth();
	}
	,set_targetWidth: function(targetWidth) {
		return this.settings.set_targetWidth(targetWidth);
	}
	,get_targetHeight: function() {
		return this.settings.get_targetHeight();
	}
	,set_targetHeight: function(targetHeight) {
		return this.settings.set_targetHeight(targetHeight);
	}
	,targetSize: function(targetWidth,targetHeight) {
		this.settings.set_targetWidth(targetWidth);
		this.settings.set_targetHeight(targetHeight);
	}
	,get_windowWidth: function() {
		return this.settings.get_windowWidth();
	}
	,set_windowWidth: function(windowWidth) {
		return this.settings.set_windowWidth(windowWidth);
	}
	,get_windowHeight: function() {
		return this.settings.get_windowHeight();
	}
	,set_windowHeight: function(windowHeight) {
		return this.settings.set_windowHeight(windowHeight);
	}
	,windowSize: function(windowWidth,windowHeight) {
		this.settings.set_windowWidth(windowWidth);
		this.settings.set_windowHeight(windowHeight);
	}
	,get_targetDensity: function() {
		return this.settings.get_targetDensity();
	}
	,set_targetDensity: function(targetDensity) {
		return this.settings.set_targetDensity(targetDensity);
	}
	,get_background: function() {
		return this.settings.get_background();
	}
	,set_background: function(background) {
		return this.settings.set_background(background);
	}
	,get_scaling: function() {
		return this.settings.get_scaling();
	}
	,set_scaling: function(scaling) {
		return this.settings.set_scaling(scaling);
	}
	,get_title: function() {
		return this.settings.get_title();
	}
	,set_title: function(title) {
		return this.settings.set_title(title);
	}
	,get_fullscreen: function() {
		return this.settings.get_fullscreen();
	}
	,set_fullscreen: function(fullscreen) {
		return this.settings.set_fullscreen(fullscreen);
	}
	,get_targetFps: function() {
		return this.settings.get_targetFps();
	}
	,set_targetFps: function(targetFps) {
		return this.settings.set_targetFps(targetFps);
	}
	,get_maxDelta: function() {
		return this.settings.get_maxDelta();
	}
	,set_maxDelta: function(maxDelta) {
		return this.settings.set_maxDelta(maxDelta);
	}
	,get_overrideDelta: function() {
		return this.settings.get_overrideDelta();
	}
	,set_overrideDelta: function(overrideDelta) {
		return this.settings.set_overrideDelta(overrideDelta);
	}
	,get_preventDefaultMouseWheel: function() {
		return this.settings.get_preventDefaultMouseWheel();
	}
	,set_preventDefaultMouseWheel: function(preventDefaultMouseWheel) {
		return this.settings.set_preventDefaultMouseWheel(preventDefaultMouseWheel);
	}
	,get_preventDefaultTouches: function() {
		return this.settings.get_preventDefaultTouches();
	}
	,set_preventDefaultTouches: function(preventDefaultTouches) {
		return this.settings.set_preventDefaultTouches(preventDefaultTouches);
	}
	,get_orientation: function() {
		return this.settings.orientation;
	}
	,set_orientation: function(orientation) {
		return this.settings.orientation = orientation;
	}
	,get_antialiasing: function() {
		return this.settings.antialiasing;
	}
	,set_antialiasing: function(antialiasing) {
		return this.settings.antialiasing = antialiasing;
	}
	,get_collections: function() {
		return this.settings.collections;
	}
	,set_collections: function(collections) {
		return this.settings.collections = collections;
	}
	,get_appInfo: function() {
		return this.settings.appInfo;
	}
	,set_appInfo: function(appInfo) {
		return this.settings.appInfo = appInfo;
	}
	,get_resizable: function() {
		return this.settings.resizable;
	}
	,set_resizable: function(resizable) {
		return this.settings.resizable = resizable;
	}
	,get_assetsPath: function() {
		return this.settings.assetsPath;
	}
	,set_assetsPath: function(assetsPath) {
		return this.settings.assetsPath = assetsPath;
	}
	,get_backend: function() {
		return this.settings.backend;
	}
	,set_backend: function(backend) {
		return this.settings.backend = backend;
	}
	,get_defaultFont: function() {
		return this.settings.defaultFont;
	}
	,set_defaultFont: function(defaultFont) {
		return this.settings.defaultFont = defaultFont;
	}
	,get_defaultShader: function() {
		return this.settings.defaultShader;
	}
	,set_defaultShader: function(defaultShader) {
		return this.settings.defaultShader = defaultShader;
	}
	,__class__: ceramic_InitSettings
	,__properties__: {set_defaultShader:"set_defaultShader",get_defaultShader:"get_defaultShader",set_defaultFont:"set_defaultFont",get_defaultFont:"get_defaultFont",set_backend:"set_backend",get_backend:"get_backend",set_assetsPath:"set_assetsPath",get_assetsPath:"get_assetsPath",set_resizable:"set_resizable",get_resizable:"get_resizable",set_appInfo:"set_appInfo",get_appInfo:"get_appInfo",set_collections:"set_collections",get_collections:"get_collections",set_antialiasing:"set_antialiasing",get_antialiasing:"get_antialiasing",set_orientation:"set_orientation",get_orientation:"get_orientation",set_preventDefaultTouches:"set_preventDefaultTouches",get_preventDefaultTouches:"get_preventDefaultTouches",set_preventDefaultMouseWheel:"set_preventDefaultMouseWheel",get_preventDefaultMouseWheel:"get_preventDefaultMouseWheel",set_overrideDelta:"set_overrideDelta",get_overrideDelta:"get_overrideDelta",set_maxDelta:"set_maxDelta",get_maxDelta:"get_maxDelta",set_targetFps:"set_targetFps",get_targetFps:"get_targetFps",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_title:"set_title",get_title:"get_title",set_scaling:"set_scaling",get_scaling:"get_scaling",set_background:"set_background",get_background:"get_background",set_targetDensity:"set_targetDensity",get_targetDensity:"get_targetDensity",set_windowHeight:"set_windowHeight",get_windowHeight:"get_windowHeight",set_windowWidth:"set_windowWidth",get_windowWidth:"get_windowWidth",set_targetHeight:"set_targetHeight",get_targetHeight:"get_targetHeight",set_targetWidth:"set_targetWidth",get_targetWidth:"get_targetWidth"}
};
var ceramic_Input = function() {
	this.activeGamepads = [];
	this.gamepadNames = new ceramic_IntMap();
	this.gamepadGyroKeys = [];
	this.gamepadGyroDeltas = new ceramic_IntMap();
	this.gamepadAxisValues = new ceramic_IntFloatMap(16,0.5,false);
	this.pressedGamepadButtons = new ceramic_IntIntMap(16,0.5,false);
	this.pressedKeyCodes = new ceramic_IntIntMap(16,0.5,false);
	this.pressedScanCodes = new ceramic_IntIntMap(16,0.5,false);
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Input"] = ceramic_Input;
ceramic_Input.__name__ = "ceramic.Input";
ceramic_Input.__super__ = ceramic_Entity;
ceramic_Input.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnKeyDown: null
	,__cbOnceKeyDown: null
	,__cbOnOwnerUnbindKeyDown: null
	,__cbOnceOwnerUnbindKeyDown: null
	,emitKeyDown: function(key) {
		this.willEmitKeyDown(key);
		var len = 0;
		if(this.__cbOnKeyDown != null) {
			len += this.__cbOnKeyDown.length;
		}
		if(this.__cbOnceKeyDown != null) {
			len += this.__cbOnceKeyDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnKeyDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceKeyDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceKeyDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceKeyDown[ii];
						this.__cbOnceKeyDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindKeyDown[ii];
						this.__cbOnceOwnerUnbindKeyDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindKeyDown[ii]);
						newCbOnceArray.push(this.__cbOnceKeyDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindKeyDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceKeyDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyDown == null) {
				this.__cbOnOwnerUnbindKeyDown = [];
			}
			this.__cbOnOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnKeyDown == null) {
			this.__cbOnKeyDown = [];
		}
		this.__cbOnKeyDown.push(handleKey);
	}
	,onceKeyDown: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyDown(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyDown == null) {
				this.__cbOnceOwnerUnbindKeyDown = [];
			}
			this.__cbOnceOwnerUnbindKeyDown.push(null);
		}
		if(this.__cbOnceKeyDown == null) {
			this.__cbOnceKeyDown = [];
		}
		this.__cbOnceKeyDown.push(handleKey);
	}
	,offKeyDown: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyDown != null) {
				index = this.__cbOnKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyDown.splice(index,1);
				}
			}
			if(this.__cbOnceKeyDown != null) {
				index = this.__cbOnceKeyDown.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyDown = null;
			}
			if(this.__cbOnceOwnerUnbindKeyDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyDown = null;
			}
			this.__cbOnKeyDown = null;
			this.__cbOnceKeyDown = null;
		}
	}
	,listensKeyDown: function() {
		if(!(this.__cbOnKeyDown != null && this.__cbOnKeyDown.length > 0)) {
			if(this.__cbOnceKeyDown != null) {
				return this.__cbOnceKeyDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnKeyUp: null
	,__cbOnceKeyUp: null
	,__cbOnOwnerUnbindKeyUp: null
	,__cbOnceOwnerUnbindKeyUp: null
	,emitKeyUp: function(key) {
		this.willEmitKeyUp(key);
		var len = 0;
		if(this.__cbOnKeyUp != null) {
			len += this.__cbOnKeyUp.length;
		}
		if(this.__cbOnceKeyUp != null) {
			len += this.__cbOnceKeyUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnKeyUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceKeyUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceKeyUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceKeyUp[ii];
						this.__cbOnceKeyUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindKeyUp[ii];
						this.__cbOnceOwnerUnbindKeyUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindKeyUp[ii]);
						newCbOnceArray.push(this.__cbOnceKeyUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindKeyUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceKeyUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(key);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindKeyUp == null) {
				this.__cbOnOwnerUnbindKeyUp = [];
			}
			this.__cbOnOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnKeyUp == null) {
			this.__cbOnKeyUp = [];
		}
		this.__cbOnKeyUp.push(handleKey);
	}
	,onceKeyUp: function(owner,handleKey) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "keyUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleKey != null) {
					_gthis.offKeyUp(handleKey);
					handleKey = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleKey = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindKeyUp == null) {
				this.__cbOnceOwnerUnbindKeyUp = [];
			}
			this.__cbOnceOwnerUnbindKeyUp.push(null);
		}
		if(this.__cbOnceKeyUp == null) {
			this.__cbOnceKeyUp = [];
		}
		this.__cbOnceKeyUp.push(handleKey);
	}
	,offKeyUp: function(handleKey) {
		if(handleKey != null) {
			var index;
			var unbind;
			if(this.__cbOnKeyUp != null) {
				index = this.__cbOnKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnKeyUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindKeyUp.splice(index,1);
				}
			}
			if(this.__cbOnceKeyUp != null) {
				index = this.__cbOnceKeyUp.indexOf(handleKey);
				if(index != -1) {
					this.__cbOnceKeyUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindKeyUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindKeyUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindKeyUp = null;
			}
			if(this.__cbOnceOwnerUnbindKeyUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindKeyUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindKeyUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindKeyUp = null;
			}
			this.__cbOnKeyUp = null;
			this.__cbOnceKeyUp = null;
		}
	}
	,listensKeyUp: function() {
		if(!(this.__cbOnKeyUp != null && this.__cbOnKeyUp.length > 0)) {
			if(this.__cbOnceKeyUp != null) {
				return this.__cbOnceKeyUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadAxis: null
	,__cbOnceGamepadAxis: null
	,__cbOnOwnerUnbindGamepadAxis: null
	,__cbOnceOwnerUnbindGamepadAxis: null
	,emitGamepadAxis: function(gamepadId,axis,value) {
		var key = gamepadId * 32 + axis;
		this.gamepadAxisValues.set(key,value);
		var len = 0;
		if(this.__cbOnGamepadAxis != null) {
			len += this.__cbOnGamepadAxis.length;
		}
		if(this.__cbOnceGamepadAxis != null) {
			len += this.__cbOnceGamepadAxis.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadAxis[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadAxis.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadAxis[ii];
						this.__cbOnceGamepadAxis[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadAxis[ii];
						this.__cbOnceOwnerUnbindGamepadAxis[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadAxis[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadAxis[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadAxis = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadAxis = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,axis,value);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadAxis: function(owner,handleGamepadIdAxisValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisValue);
					handleGamepadIdAxisValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisValue = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis == null) {
				this.__cbOnOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnGamepadAxis == null) {
			this.__cbOnGamepadAxis = [];
		}
		this.__cbOnGamepadAxis.push(handleGamepadIdAxisValue);
	}
	,onceGamepadAxis: function(owner,handleGamepadIdAxisValue) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadAxis" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdAxisValue != null) {
					_gthis.offGamepadAxis(handleGamepadIdAxisValue);
					handleGamepadIdAxisValue = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdAxisValue = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadAxis == null) {
				this.__cbOnceOwnerUnbindGamepadAxis = [];
			}
			this.__cbOnceOwnerUnbindGamepadAxis.push(null);
		}
		if(this.__cbOnceGamepadAxis == null) {
			this.__cbOnceGamepadAxis = [];
		}
		this.__cbOnceGamepadAxis.push(handleGamepadIdAxisValue);
	}
	,offGamepadAxis: function(handleGamepadIdAxisValue) {
		if(handleGamepadIdAxisValue != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadAxis != null) {
				index = this.__cbOnGamepadAxis.indexOf(handleGamepadIdAxisValue);
				if(index != -1) {
					this.__cbOnGamepadAxis.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadAxis != null) {
				index = this.__cbOnceGamepadAxis.indexOf(handleGamepadIdAxisValue);
				if(index != -1) {
					this.__cbOnceGamepadAxis.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadAxis[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadAxis.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadAxis = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadAxis != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadAxis.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadAxis[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadAxis = null;
			}
			this.__cbOnGamepadAxis = null;
			this.__cbOnceGamepadAxis = null;
		}
	}
	,listensGamepadAxis: function() {
		if(!(this.__cbOnGamepadAxis != null && this.__cbOnGamepadAxis.length > 0)) {
			if(this.__cbOnceGamepadAxis != null) {
				return this.__cbOnceGamepadAxis.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadDown: null
	,__cbOnceGamepadDown: null
	,__cbOnOwnerUnbindGamepadDown: null
	,__cbOnceOwnerUnbindGamepadDown: null
	,emitGamepadDown: function(gamepadId,button) {
		this.willEmitGamepadDown(gamepadId,button);
		var len = 0;
		if(this.__cbOnGamepadDown != null) {
			len += this.__cbOnGamepadDown.length;
		}
		if(this.__cbOnceGamepadDown != null) {
			len += this.__cbOnceGamepadDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadDown[ii];
						this.__cbOnceGamepadDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadDown[ii];
						this.__cbOnceOwnerUnbindGamepadDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadDown[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,button);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDown: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadDown(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown == null) {
				this.__cbOnOwnerUnbindGamepadDown = [];
			}
			this.__cbOnOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnGamepadDown == null) {
			this.__cbOnGamepadDown = [];
		}
		this.__cbOnGamepadDown.push(handleGamepadIdButton);
	}
	,onceGamepadDown: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadDown(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDown == null) {
				this.__cbOnceOwnerUnbindGamepadDown = [];
			}
			this.__cbOnceOwnerUnbindGamepadDown.push(null);
		}
		if(this.__cbOnceGamepadDown == null) {
			this.__cbOnceGamepadDown = [];
		}
		this.__cbOnceGamepadDown.push(handleGamepadIdButton);
	}
	,offGamepadDown: function(handleGamepadIdButton) {
		if(handleGamepadIdButton != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDown != null) {
				index = this.__cbOnGamepadDown.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnGamepadDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDown.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDown != null) {
				index = this.__cbOnceGamepadDown.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnceGamepadDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDown = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDown = null;
			}
			this.__cbOnGamepadDown = null;
			this.__cbOnceGamepadDown = null;
		}
	}
	,listensGamepadDown: function() {
		if(!(this.__cbOnGamepadDown != null && this.__cbOnGamepadDown.length > 0)) {
			if(this.__cbOnceGamepadDown != null) {
				return this.__cbOnceGamepadDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadUp: null
	,__cbOnceGamepadUp: null
	,__cbOnOwnerUnbindGamepadUp: null
	,__cbOnceOwnerUnbindGamepadUp: null
	,emitGamepadUp: function(gamepadId,button) {
		this.willEmitGamepadUp(gamepadId,button);
		var len = 0;
		if(this.__cbOnGamepadUp != null) {
			len += this.__cbOnGamepadUp.length;
		}
		if(this.__cbOnceGamepadUp != null) {
			len += this.__cbOnceGamepadUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadUp[ii];
						this.__cbOnceGamepadUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadUp[ii];
						this.__cbOnceOwnerUnbindGamepadUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadUp[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,button);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadUp: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadUp(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp == null) {
				this.__cbOnOwnerUnbindGamepadUp = [];
			}
			this.__cbOnOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnGamepadUp == null) {
			this.__cbOnGamepadUp = [];
		}
		this.__cbOnGamepadUp.push(handleGamepadIdButton);
	}
	,onceGamepadUp: function(owner,handleGamepadIdButton) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdButton != null) {
					_gthis.offGamepadUp(handleGamepadIdButton);
					handleGamepadIdButton = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdButton = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadUp == null) {
				this.__cbOnceOwnerUnbindGamepadUp = [];
			}
			this.__cbOnceOwnerUnbindGamepadUp.push(null);
		}
		if(this.__cbOnceGamepadUp == null) {
			this.__cbOnceGamepadUp = [];
		}
		this.__cbOnceGamepadUp.push(handleGamepadIdButton);
	}
	,offGamepadUp: function(handleGamepadIdButton) {
		if(handleGamepadIdButton != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadUp != null) {
				index = this.__cbOnGamepadUp.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnGamepadUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadUp.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadUp != null) {
				index = this.__cbOnceGamepadUp.indexOf(handleGamepadIdButton);
				if(index != -1) {
					this.__cbOnceGamepadUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadUp = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadUp = null;
			}
			this.__cbOnGamepadUp = null;
			this.__cbOnceGamepadUp = null;
		}
	}
	,listensGamepadUp: function() {
		if(!(this.__cbOnGamepadUp != null && this.__cbOnGamepadUp.length > 0)) {
			if(this.__cbOnceGamepadUp != null) {
				return this.__cbOnceGamepadUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadGyro: null
	,__cbOnceGamepadGyro: null
	,__cbOnOwnerUnbindGamepadGyro: null
	,__cbOnceOwnerUnbindGamepadGyro: null
	,emitGamepadGyro: function(gamepadId,dx,dy,dz) {
		this.willEmitGamepadGyro(gamepadId,dx,dy,dz);
		var len = 0;
		if(this.__cbOnGamepadGyro != null) {
			len += this.__cbOnGamepadGyro.length;
		}
		if(this.__cbOnceGamepadGyro != null) {
			len += this.__cbOnceGamepadGyro.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadGyro != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadGyro.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadGyro[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadGyro != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadGyro.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadGyro[ii];
						this.__cbOnceGamepadGyro[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadGyro[ii];
						this.__cbOnceOwnerUnbindGamepadGyro[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadGyro[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadGyro[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadGyro = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadGyro = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,dx,dy,dz);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadGyro: function(owner,handleGamepadIdDxDyDz) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadGyro" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdDxDyDz != null) {
					_gthis.offGamepadGyro(handleGamepadIdDxDyDz);
					handleGamepadIdDxDyDz = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadGyro == null) {
				this.__cbOnOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnOwnerUnbindGamepadGyro.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdDxDyDz = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadGyro == null) {
				this.__cbOnOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnOwnerUnbindGamepadGyro.push(null);
		}
		if(this.__cbOnGamepadGyro == null) {
			this.__cbOnGamepadGyro = [];
		}
		this.__cbOnGamepadGyro.push(handleGamepadIdDxDyDz);
	}
	,onceGamepadGyro: function(owner,handleGamepadIdDxDyDz) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadGyro" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdDxDyDz != null) {
					_gthis.offGamepadGyro(handleGamepadIdDxDyDz);
					handleGamepadIdDxDyDz = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadGyro == null) {
				this.__cbOnceOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnceOwnerUnbindGamepadGyro.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdDxDyDz = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadGyro == null) {
				this.__cbOnceOwnerUnbindGamepadGyro = [];
			}
			this.__cbOnceOwnerUnbindGamepadGyro.push(null);
		}
		if(this.__cbOnceGamepadGyro == null) {
			this.__cbOnceGamepadGyro = [];
		}
		this.__cbOnceGamepadGyro.push(handleGamepadIdDxDyDz);
	}
	,offGamepadGyro: function(handleGamepadIdDxDyDz) {
		if(handleGamepadIdDxDyDz != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadGyro != null) {
				index = this.__cbOnGamepadGyro.indexOf(handleGamepadIdDxDyDz);
				if(index != -1) {
					this.__cbOnGamepadGyro.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadGyro[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadGyro.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadGyro != null) {
				index = this.__cbOnceGamepadGyro.indexOf(handleGamepadIdDxDyDz);
				if(index != -1) {
					this.__cbOnceGamepadGyro.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadGyro[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadGyro.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadGyro != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadGyro.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadGyro[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadGyro = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadGyro != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadGyro.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadGyro[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadGyro = null;
			}
			this.__cbOnGamepadGyro = null;
			this.__cbOnceGamepadGyro = null;
		}
	}
	,listensGamepadGyro: function() {
		if(!(this.__cbOnGamepadGyro != null && this.__cbOnGamepadGyro.length > 0)) {
			if(this.__cbOnceGamepadGyro != null) {
				return this.__cbOnceGamepadGyro.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadEnable: null
	,__cbOnceGamepadEnable: null
	,__cbOnOwnerUnbindGamepadEnable: null
	,__cbOnceOwnerUnbindGamepadEnable: null
	,emitGamepadEnable: function(gamepadId,name) {
		this.willEmitGamepadEnable(gamepadId,name);
		var len = 0;
		if(this.__cbOnGamepadEnable != null) {
			len += this.__cbOnGamepadEnable.length;
		}
		if(this.__cbOnceGamepadEnable != null) {
			len += this.__cbOnceGamepadEnable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadEnable[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadEnable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadEnable[ii];
						this.__cbOnceGamepadEnable[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadEnable[ii];
						this.__cbOnceOwnerUnbindGamepadEnable[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadEnable[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadEnable[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadEnable = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadEnable = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable == null) {
				this.__cbOnOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnGamepadEnable == null) {
			this.__cbOnGamepadEnable = [];
		}
		this.__cbOnGamepadEnable.push(handleGamepadIdName);
	}
	,onceGamepadEnable: function(owner,handleGamepadIdName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadEnable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadIdName != null) {
					_gthis.offGamepadEnable(handleGamepadIdName);
					handleGamepadIdName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadIdName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadEnable == null) {
				this.__cbOnceOwnerUnbindGamepadEnable = [];
			}
			this.__cbOnceOwnerUnbindGamepadEnable.push(null);
		}
		if(this.__cbOnceGamepadEnable == null) {
			this.__cbOnceGamepadEnable = [];
		}
		this.__cbOnceGamepadEnable.push(handleGamepadIdName);
	}
	,offGamepadEnable: function(handleGamepadIdName) {
		if(handleGamepadIdName != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadEnable != null) {
				index = this.__cbOnGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnGamepadEnable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadEnable != null) {
				index = this.__cbOnceGamepadEnable.indexOf(handleGamepadIdName);
				if(index != -1) {
					this.__cbOnceGamepadEnable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadEnable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadEnable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadEnable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadEnable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadEnable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadEnable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadEnable = null;
			}
			this.__cbOnGamepadEnable = null;
			this.__cbOnceGamepadEnable = null;
		}
	}
	,listensGamepadEnable: function() {
		if(!(this.__cbOnGamepadEnable != null && this.__cbOnGamepadEnable.length > 0)) {
			if(this.__cbOnceGamepadEnable != null) {
				return this.__cbOnceGamepadEnable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnGamepadDisable: null
	,__cbOnceGamepadDisable: null
	,__cbOnOwnerUnbindGamepadDisable: null
	,__cbOnceOwnerUnbindGamepadDisable: null
	,emitGamepadDisable: function(gamepadId) {
		this.willEmitGamepadDisable(gamepadId);
		var len = 0;
		if(this.__cbOnGamepadDisable != null) {
			len += this.__cbOnGamepadDisable.length;
		}
		if(this.__cbOnceGamepadDisable != null) {
			len += this.__cbOnceGamepadDisable.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGamepadDisable[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGamepadDisable.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGamepadDisable[ii];
						this.__cbOnceGamepadDisable[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGamepadDisable[ii];
						this.__cbOnceOwnerUnbindGamepadDisable[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGamepadDisable[ii]);
						newCbOnceArray.push(this.__cbOnceGamepadDisable[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGamepadDisable = newCbOnceOwnerUnbindArray;
				this.__cbOnceGamepadDisable = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(gamepadId);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable == null) {
				this.__cbOnOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnGamepadDisable == null) {
			this.__cbOnGamepadDisable = [];
		}
		this.__cbOnGamepadDisable.push(handleGamepadId);
	}
	,onceGamepadDisable: function(owner,handleGamepadId) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gamepadDisable" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleGamepadId != null) {
					_gthis.offGamepadDisable(handleGamepadId);
					handleGamepadId = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleGamepadId = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGamepadDisable == null) {
				this.__cbOnceOwnerUnbindGamepadDisable = [];
			}
			this.__cbOnceOwnerUnbindGamepadDisable.push(null);
		}
		if(this.__cbOnceGamepadDisable == null) {
			this.__cbOnceGamepadDisable = [];
		}
		this.__cbOnceGamepadDisable.push(handleGamepadId);
	}
	,offGamepadDisable: function(handleGamepadId) {
		if(handleGamepadId != null) {
			var index;
			var unbind;
			if(this.__cbOnGamepadDisable != null) {
				index = this.__cbOnGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnGamepadDisable.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
			if(this.__cbOnceGamepadDisable != null) {
				index = this.__cbOnceGamepadDisable.indexOf(handleGamepadId);
				if(index != -1) {
					this.__cbOnceGamepadDisable.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGamepadDisable[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGamepadDisable.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGamepadDisable = null;
			}
			if(this.__cbOnceOwnerUnbindGamepadDisable != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGamepadDisable.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGamepadDisable[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGamepadDisable = null;
			}
			this.__cbOnGamepadDisable = null;
			this.__cbOnceGamepadDisable = null;
		}
	}
	,listensGamepadDisable: function() {
		if(!(this.__cbOnGamepadDisable != null && this.__cbOnGamepadDisable.length > 0)) {
			if(this.__cbOnceGamepadDisable != null) {
				return this.__cbOnceGamepadDisable.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,pressedScanCodes: null
	,pressedKeyCodes: null
	,pressedGamepadButtons: null
	,gamepadAxisValues: null
	,gamepadGyroDeltas: null
	,gamepadGyroKeys: null
	,gamepadNames: null
	,activeGamepads: null
	,resetDeltas: function() {
		while(this.gamepadGyroKeys.length > 0) {
			var key = this.gamepadGyroKeys.pop();
			var deltas = this.gamepadGyroDeltas.get(key);
			if(deltas != null) {
				deltas[0] = 0;
				deltas[1] = 0;
				deltas[2] = 0;
			}
		}
	}
	,willEmitKeyDown: function(key) {
		var _gthis = this;
		var value = this.pressedScanCodes.intMap.h[key.scanCode | 0];
		var prevScan = value != null ? value : 0;
		var value = this.pressedKeyCodes.intMap.h[key.keyCode | 0];
		var prevKey = value != null ? value : 0;
		if(prevScan == -1) {
			prevScan = 0;
			prevKey = 0;
		}
		this.pressedScanCodes.set(key.scanCode,prevScan + 1);
		this.pressedKeyCodes.set(key.keyCode,prevKey + 1);
		if(prevScan == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedScanCodes.intMap.h[key.scanCode | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedScanCodes.set(key.scanCode,2);
				}
				var value = _gthis.pressedKeyCodes.intMap.h[key.keyCode | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedKeyCodes.set(key.keyCode,2);
				}
			});
		}
	}
	,willEmitKeyUp: function(key) {
		var _gthis = this;
		var value = this.pressedScanCodes.intMap.h[key.scanCode | 0];
		var prevScan = value != null ? value : 0;
		if(prevScan != 0) {
			this.pressedScanCodes.set(key.scanCode,-1);
			this.pressedKeyCodes.set(key.keyCode,-1);
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedScanCodes.intMap.h[key.scanCode | 0];
				if((value != null ? value : 0) == -1) {
					_gthis.pressedScanCodes.set(key.scanCode,0);
				}
				var value = _gthis.pressedKeyCodes.intMap.h[key.keyCode | 0];
				if((value != null ? value : 0) == -1) {
					_gthis.pressedKeyCodes.set(key.keyCode,0);
				}
			});
		}
	}
	,_keyPressed: function(keyCode) {
		var value = this.pressedKeyCodes.intMap.h[keyCode | 0];
		return (value != null ? value : 0) > 0;
	}
	,_keyJustPressed: function(keyCode) {
		var value = this.pressedKeyCodes.intMap.h[keyCode | 0];
		return (value != null ? value : 0) == 1;
	}
	,_keyJustReleased: function(keyCode) {
		var value = this.pressedKeyCodes.intMap.h[keyCode | 0];
		return (value != null ? value : 0) == -1;
	}
	,_scanPressed: function(scanCode) {
		var value = this.pressedScanCodes.intMap.h[scanCode | 0];
		return (value != null ? value : 0) > 0;
	}
	,_scanJustPressed: function(scanCode) {
		var value = this.pressedScanCodes.intMap.h[scanCode | 0];
		return (value != null ? value : 0) == 1;
	}
	,_scanJustReleased: function(scanCode) {
		var value = this.pressedScanCodes.intMap.h[scanCode | 0];
		return (value != null ? value : 0) == -1;
	}
	,willEmitGamepadEnable: function(gamepadId,name) {
		var key = gamepadId * 32;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var k = key + i;
			this.pressedGamepadButtons.set(k,0);
			this.gamepadAxisValues.set(k,0.0);
		}
		if(this.activeGamepads.indexOf(gamepadId) == -1) {
			this.activeGamepads.push(gamepadId);
		}
		this.gamepadNames.set(gamepadId,name);
	}
	,willEmitGamepadDisable: function(gamepadId) {
		var key = gamepadId * 32;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var k = key + i;
			var value = this.pressedGamepadButtons.intMap.h[k | 0];
			var pressed = value != null ? value : 0;
			if(pressed > 0) {
				this.emitGamepadUp(gamepadId,i);
			}
			var value1 = this.gamepadAxisValues.intMap.h[k | 0];
			var axis = value1 != null ? value1 : 0;
			if(axis != 0) {
				this.emitGamepadAxis(gamepadId,i,axis);
			}
		}
		var index = this.activeGamepads.indexOf(gamepadId);
		if(index != -1) {
			this.activeGamepads.splice(index,1);
		}
		this.gamepadNames.remove(gamepadId);
	}
	,willEmitGamepadDown: function(gamepadId,button) {
		var _gthis = this;
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.intMap.h[key | 0];
		var prevValue = value != null ? value : 0;
		if(prevValue == -1) {
			prevValue = 0;
		}
		this.pressedGamepadButtons.set(key,prevValue + 1);
		if(prevValue == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedGamepadButtons.intMap.h[key | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedGamepadButtons.set(key,2);
				}
			});
		}
	}
	,willEmitGamepadUp: function(gamepadId,button) {
		var _gthis = this;
		var key = gamepadId * 32 + button;
		this.pressedGamepadButtons.set(key,-1);
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedGamepadButtons.intMap.h[key | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedGamepadButtons.set(key,0);
			}
		});
	}
	,willEmitGamepadGyro: function(gamepadId,dx,dy,dz) {
		var key = gamepadId;
		var deltas = this.gamepadGyroDeltas.get(key);
		if(deltas == null) {
			deltas = [0,0,0];
			this.gamepadGyroDeltas.set(key,deltas);
		}
		if(this.gamepadGyroKeys.indexOf(key) == -1) {
			this.gamepadGyroKeys.push(key);
		}
		deltas[0] += dx;
		deltas[1] += dy;
		deltas[2] += dz;
	}
	,_gamepadPressed: function(gamepadId,button) {
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.intMap.h[key | 0];
		return (value != null ? value : 0) > 0;
	}
	,_gamepadJustPressed: function(gamepadId,button) {
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.intMap.h[key | 0];
		return (value != null ? value : 0) == 1;
	}
	,_gamepadJustReleased: function(gamepadId,button) {
		var key = gamepadId * 32 + button;
		var value = this.pressedGamepadButtons.intMap.h[key | 0];
		return (value != null ? value : 0) == -1;
	}
	,willEmitGamepadAxis: function(gamepadId,axis,value) {
		var key = gamepadId * 32 + axis;
		this.gamepadAxisValues.set(key,value);
	}
	,gamepadAxisValue: function(gamepadId,axis) {
		var key = gamepadId * 32 + axis;
		var value = this.gamepadAxisValues.intMap.h[key | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,gamepadGyroDeltaX: function(gamepadId) {
		var key = gamepadId;
		var deltas = this.gamepadGyroDeltas.get(key);
		if(deltas != null) {
			return deltas[0];
		}
		return 0;
	}
	,gamepadGyroDeltaY: function(gamepadId) {
		var key = gamepadId;
		var deltas = this.gamepadGyroDeltas.get(key);
		if(deltas != null) {
			return deltas[1];
		}
		return 0;
	}
	,gamepadGyroDeltaZ: function(gamepadId) {
		var key = gamepadId;
		var deltas = this.gamepadGyroDeltas.get(key);
		if(deltas != null) {
			return deltas[2];
		}
		return 0;
	}
	,startGamepadRumble: function(gamepadId,duration,lowFrequency,highFrequency) {
		ceramic_App.app.backend.input.startGamepadRumble(gamepadId,lowFrequency,highFrequency,duration);
	}
	,stopGamepadRumble: function(gamepadId) {
		ceramic_App.app.backend.input.stopGamepadRumble(gamepadId);
	}
	,gamepadName: function(gamepadId) {
		return this.gamepadNames.get(gamepadId);
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offKeyDown();
		this.offKeyUp();
		this.offGamepadAxis();
		this.offGamepadDown();
		this.offGamepadUp();
		this.offGamepadGyro();
		this.offGamepadEnable();
		this.offGamepadDisable();
	}
	,__class__: ceramic_Input
});
var ceramic_IntBoolMap = {};
ceramic_IntBoolMap.__properties__ = {get_iterableKeys:"get_iterableKeys",get_size:"get_size"};
ceramic_IntBoolMap.get_size = function(this1) {
	return this1.size;
};
ceramic_IntBoolMap.get_iterableKeys = function(this1) {
	return this1.iterableKeys;
};
ceramic_IntBoolMap._asIntBoolMap = function(this1) {
	return this1;
};
ceramic_IntBoolMap._new = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	return new ceramic_IntIntMap(size,fillFactor,iterable);
};
ceramic_IntBoolMap.exists = function(this1,key) {
	return this1.intMap.h.hasOwnProperty(key | 0);
};
ceramic_IntBoolMap.existsInline = function(this1,key) {
	return this1.intMap.h.hasOwnProperty(key | 0);
};
ceramic_IntBoolMap.get = function(this1,key) {
	var value = this1.intMap.h[key | 0];
	return (value != null ? value : 0) != 0;
};
ceramic_IntBoolMap.getInline = function(this1,key) {
	var value = this1.intMap.h[key | 0];
	return (value != null ? value : 0) != 0;
};
ceramic_IntBoolMap.set = function(this1,key,value) {
	this1.set(key,value ? 1 : 0);
};
ceramic_IntBoolMap.remove = function(this1,key) {
	return this1.remove(key) != 0;
};
ceramic_IntBoolMap.clear = function(this1) {
	this1.clear();
};
ceramic_IntBoolMap.copy = function(this1) {
	var map = new ceramic_IntIntMap();
	map.intMap = this1.intMap.copy();
	map.size = this1.size;
	map.iterableKeys = this1.iterableKeys != null ? this1.iterableKeys.slice() : null;
	map.iterableKeysUsed = this1.iterableKeysUsed != null ? ceramic_IntBoolMap.copy(this1.iterableKeysUsed) : null;
	return map;
};
ceramic_IntBoolMap.iterator = function(this1) {
	return new ceramic_IntBoolMapIterator(this1);
};
ceramic_IntBoolMap.keys = function(this1) {
	return new ceramic_IntBoolMapKeyIterator(this1);
};
ceramic_IntBoolMap.keyValueIterator = function(this1) {
	return new ceramic_IntBoolMapKeyValueIterator(this1);
};
var ceramic_IntBoolMapIterator = function(intBoolMap) {
	this.intBoolMap = intBoolMap;
	this.i = 0;
	var iterableKeys = this.intBoolMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntBoolMapIterator"] = ceramic_IntBoolMapIterator;
ceramic_IntBoolMapIterator.__name__ = "ceramic.IntBoolMapIterator";
ceramic_IntBoolMapIterator.prototype = {
	intBoolMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intBoolMap.iterableKeys[n];
		var value = this.intBoolMap.intMap.h[k | 0];
		return (value != null ? value : 0) != 0;
	}
	,__class__: ceramic_IntBoolMapIterator
};
var ceramic_IntBoolMapKeyIterator = function(intBoolMap) {
	this.i = 0;
	this.iterableKeys = intBoolMap.iterableKeys;
	this.len = this.iterableKeys != null ? this.iterableKeys.length : -1;
};
$hxClasses["ceramic.IntBoolMapKeyIterator"] = ceramic_IntBoolMapKeyIterator;
ceramic_IntBoolMapKeyIterator.__name__ = "ceramic.IntBoolMapKeyIterator";
ceramic_IntBoolMapKeyIterator.prototype = {
	iterableKeys: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		return this.iterableKeys[n];
	}
	,__class__: ceramic_IntBoolMapKeyIterator
};
var ceramic_IntBoolMapKeyValueIterator = function(intBoolMap) {
	this.intBoolMap = intBoolMap;
	this.i = 0;
	var iterableKeys = this.intBoolMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntBoolMapKeyValueIterator"] = ceramic_IntBoolMapKeyValueIterator;
ceramic_IntBoolMapKeyValueIterator.__name__ = "ceramic.IntBoolMapKeyValueIterator";
ceramic_IntBoolMapKeyValueIterator.prototype = {
	intBoolMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intBoolMap.iterableKeys[n];
		var value = this.intBoolMap.intMap.h[k | 0];
		return { key : k, value : (value != null ? value : 0) != 0};
	}
	,__class__: ceramic_IntBoolMapKeyValueIterator
};
var ceramic_IntFloatMap = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	this.size = 0;
	this.iterableKeysUsed = null;
	this.iterableKeys = null;
	this.intMap = new haxe_ds_IntMap();
	if(iterable) {
		this.iterableKeys = [];
		this.iterableKeysUsed = new ceramic_IntIntMap(16,0.5,false);
	}
};
$hxClasses["ceramic.IntFloatMap"] = ceramic_IntFloatMap;
ceramic_IntFloatMap.__name__ = "ceramic.IntFloatMap";
ceramic_IntFloatMap.prototype = {
	intMap: null
	,iterableKeys: null
	,iterableKeysUsed: null
	,size: null
	,clear: function() {
		this.intMap.h = { };
		this.size = 0;
		if(this.iterableKeys != null) {
			this.iterableKeys = [];
			this.iterableKeysUsed = new ceramic_IntIntMap(16,0.5,false);
		}
	}
	,exists: function(key) {
		return this.intMap.h.hasOwnProperty(key | 0);
	}
	,set: function(key,value) {
		var tmp;
		if(this.iterableKeys != null) {
			var value1 = this.iterableKeysUsed.intMap.h[key | 0];
			tmp = (value1 != null ? value1 : 0) == 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.iterableKeysUsed.set(key,1);
			this.iterableKeys.push(key);
		}
		var k = key | 0;
		if(!this.intMap.h.hasOwnProperty(k)) {
			this.size++;
		}
		this.intMap.h[k] = value;
		return value;
	}
	,get: function(key) {
		var value = this.intMap.h[key | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,remove: function(key) {
		var k = key | 0;
		var prev = 0;
		var tmp;
		if(this.iterableKeys != null) {
			var value = this.iterableKeysUsed.intMap.h[key | 0];
			tmp = (value != null ? value : 0) != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.iterableKeysUsed.set(key,0);
			this.iterableKeys.splice(this.iterableKeys.indexOf(key),1);
		}
		if(this.intMap.h.hasOwnProperty(k)) {
			prev = this.intMap.h[k];
			this.size--;
		}
		this.intMap.remove(k);
		return prev;
	}
	,getInline: function(key) {
		var value = this.intMap.h[key | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,existsInline: function(key) {
		return this.intMap.h.hasOwnProperty(key | 0);
	}
	,copy: function() {
		var map = new ceramic_IntFloatMap();
		map.intMap = this.intMap.copy();
		map.size = this.size;
		map.iterableKeys = this.iterableKeys != null ? this.iterableKeys.slice() : null;
		map.iterableKeysUsed = this.iterableKeysUsed != null ? ceramic_IntBoolMap.copy(this.iterableKeysUsed) : null;
		return map;
	}
	,iterator: function() {
		return new ceramic_IntFloatMapIterator(this);
	}
	,keys: function() {
		return new ceramic_IntFloatMapKeyIterator(this);
	}
	,keyValueIterator: function() {
		return new ceramic_IntFloatMapKeyValueIterator(this);
	}
	,__class__: ceramic_IntFloatMap
};
var ceramic_IntFloatMapIterator = function(intFloatMap) {
	this.intFloatMap = intFloatMap;
	this.i = 0;
	var iterableKeys = this.intFloatMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntFloatMapIterator"] = ceramic_IntFloatMapIterator;
ceramic_IntFloatMapIterator.__name__ = "ceramic.IntFloatMapIterator";
ceramic_IntFloatMapIterator.prototype = {
	intFloatMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intFloatMap.iterableKeys[n];
		var value = this.intFloatMap.intMap.h[k | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,__class__: ceramic_IntFloatMapIterator
};
var ceramic_IntFloatMapKeyIterator = function(intFloatMap) {
	this.i = 0;
	this.iterableKeys = intFloatMap.iterableKeys;
	this.len = this.iterableKeys != null ? this.iterableKeys.length : -1;
};
$hxClasses["ceramic.IntFloatMapKeyIterator"] = ceramic_IntFloatMapKeyIterator;
ceramic_IntFloatMapKeyIterator.__name__ = "ceramic.IntFloatMapKeyIterator";
ceramic_IntFloatMapKeyIterator.prototype = {
	iterableKeys: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		return this.iterableKeys[n];
	}
	,__class__: ceramic_IntFloatMapKeyIterator
};
var ceramic_IntFloatMapKeyValueIterator = function(intFloatMap) {
	this.intFloatMap = intFloatMap;
	this.i = 0;
	var iterableKeys = this.intFloatMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntFloatMapKeyValueIterator"] = ceramic_IntFloatMapKeyValueIterator;
ceramic_IntFloatMapKeyValueIterator.__name__ = "ceramic.IntFloatMapKeyValueIterator";
ceramic_IntFloatMapKeyValueIterator.prototype = {
	intFloatMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intFloatMap.iterableKeys[n];
		var value = this.intFloatMap.intMap.h[k | 0];
		return { key : k, value : value != null ? value : 0};
	}
	,__class__: ceramic_IntFloatMapKeyValueIterator
};
var ceramic_IntIntMapIterator = function(intIntMap) {
	this.intIntMap = intIntMap;
	this.i = 0;
	var iterableKeys = this.intIntMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntIntMapIterator"] = ceramic_IntIntMapIterator;
ceramic_IntIntMapIterator.__name__ = "ceramic.IntIntMapIterator";
ceramic_IntIntMapIterator.prototype = {
	intIntMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intIntMap.iterableKeys[n];
		var value = this.intIntMap.intMap.h[k | 0];
		if(value != null) {
			return value;
		} else {
			return 0;
		}
	}
	,__class__: ceramic_IntIntMapIterator
};
var ceramic_IntIntMapKeyIterator = function(intIntMap) {
	this.i = 0;
	this.iterableKeys = intIntMap.iterableKeys;
	this.len = this.iterableKeys != null ? this.iterableKeys.length : -1;
};
$hxClasses["ceramic.IntIntMapKeyIterator"] = ceramic_IntIntMapKeyIterator;
ceramic_IntIntMapKeyIterator.__name__ = "ceramic.IntIntMapKeyIterator";
ceramic_IntIntMapKeyIterator.prototype = {
	iterableKeys: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		return this.iterableKeys[n];
	}
	,__class__: ceramic_IntIntMapKeyIterator
};
var ceramic_IntIntMapKeyValueIterator = function(intIntMap) {
	this.intIntMap = intIntMap;
	this.i = 0;
	var iterableKeys = this.intIntMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntIntMapKeyValueIterator"] = ceramic_IntIntMapKeyValueIterator;
ceramic_IntIntMapKeyValueIterator.__name__ = "ceramic.IntIntMapKeyValueIterator";
ceramic_IntIntMapKeyValueIterator.prototype = {
	intIntMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intIntMap.iterableKeys[n];
		var value = this.intIntMap.intMap.h[k | 0];
		return { key : k, value : value != null ? value : 0};
	}
	,__class__: ceramic_IntIntMapKeyValueIterator
};
var ceramic_IntMap = function(size,fillFactor,iterable) {
	if(iterable == null) {
		iterable = false;
	}
	if(fillFactor == null) {
		fillFactor = 0.5;
	}
	if(size == null) {
		size = 16;
	}
	this.iterableKeys = null;
	this.nextFreeIndex = 0;
	this.initialSize = size;
	this.initialFillFactor = fillFactor;
	this._keys = new ceramic_IntIntMap(size,fillFactor);
	this.values = new Array(size);
	if(iterable) {
		this.iterableKeys = [];
	}
};
$hxClasses["ceramic.IntMap"] = ceramic_IntMap;
ceramic_IntMap.__name__ = "ceramic.IntMap";
ceramic_IntMap.prototype = {
	_keys: null
	,nextFreeIndex: null
	,initialSize: null
	,initialFillFactor: null
	,iterableKeys: null
	,values: null
	,get: function(key) {
		var value = this._keys.intMap.h[key | 0];
		var index = value != null ? value : 0;
		if(index >= 2) {
			return this.values[index - 2];
		} else {
			return ceramic_IntMap.RET_NULL;
		}
	}
	,getInline: function(key) {
		var value = this._keys.intMap.h[key | 0];
		var index = value != null ? value : 0;
		if(index >= 2) {
			return this.values[index - 2];
		} else {
			return ceramic_IntMap.RET_NULL;
		}
	}
	,exists: function(key) {
		return this._keys.intMap.h.hasOwnProperty(key | 0);
	}
	,existsInline: function(key) {
		return this._keys.intMap.h.hasOwnProperty(key | 0);
	}
	,set: function(key,value) {
		var value1 = this._keys.intMap.h[key | 0];
		var index = value1 != null ? value1 : 0;
		if(index >= 2) {
			index -= 2;
			if(value != null) {
				this.values[index] = value;
			} else {
				this.values[index] = null;
				if(this.nextFreeIndex > index) {
					this.nextFreeIndex = index;
				}
				this._keys.set(key,1);
			}
		} else if(value == null) {
			if(index != 1) {
				this._keys.set(key,1);
				if(this.iterableKeys != null) {
					this.iterableKeys.push(key);
				}
			}
		} else {
			var valuesLen = this.values.length;
			if(this.nextFreeIndex >= valuesLen) {
				this.resizeValues(this.values.length * 2);
			}
			this.values[this.nextFreeIndex] = value;
			this._keys.set(key,this.nextFreeIndex + 2);
			if(index != 1 && this.iterableKeys != null) {
				this.iterableKeys.push(key);
			}
			do this.nextFreeIndex++; while(this.nextFreeIndex < valuesLen && this.values[this.nextFreeIndex] != null);
		}
	}
	,remove: function(key) {
		var value = this._keys.intMap.h[key | 0];
		var index = value != null ? value : 0;
		if(index != 0) {
			if(index != 1) {
				index -= 2;
				this.values[index] = null;
				if(this.nextFreeIndex > index) {
					this.nextFreeIndex = index;
				}
			}
			this._keys.remove(key);
			if(this.iterableKeys != null) {
				this.iterableKeys.splice(this.iterableKeys.indexOf(key),1);
			}
		}
	}
	,copy: function() {
		var map = new ceramic_IntMap();
		map.initialSize = this.initialSize;
		map.initialFillFactor = this.initialFillFactor;
		var _this = this._keys;
		var map1 = new ceramic_IntIntMap();
		map1.intMap = _this.intMap.copy();
		map1.size = _this.size;
		map1.iterableKeys = _this.iterableKeys != null ? _this.iterableKeys.slice() : null;
		map1.iterableKeysUsed = _this.iterableKeysUsed != null ? ceramic_IntBoolMap.copy(_this.iterableKeysUsed) : null;
		map._keys = map1;
		map.nextFreeIndex = this.nextFreeIndex;
		map.iterableKeys = this.iterableKeys != null ? this.iterableKeys.slice() : null;
		var this1 = this.values;
		var r = new Array(this1.length);
		haxe_ds_Vector.blit(this1,0,r,0,this1.length);
		map.values = r;
		return map;
	}
	,clear: function() {
		this._keys = new ceramic_IntIntMap(this.initialSize,this.initialFillFactor);
		this.values = new Array(this.initialSize);
		this.nextFreeIndex = 0;
		if(this.iterableKeys != null) {
			ceramic_Extensions.setArrayLength(this.iterableKeys,0);
		}
	}
	,iterator: function() {
		return new ceramic_IntMapIterator(this);
	}
	,keys: function() {
		return new ceramic_IntMapKeyIterator(this);
	}
	,keyValueIterator: function() {
		return new ceramic_IntMapKeyValueIterator(this);
	}
	,resizeValues: function(targetSize) {
		var prevValues = this.values;
		this.values = new Array(targetSize);
		var _g = 0;
		var _g1 = prevValues.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] = prevValues[i];
		}
	}
	,__class__: ceramic_IntMap
};
var ceramic_IntMapIterator = function(intMap) {
	this.intMap = intMap;
	this.i = 0;
	var iterableKeys = this.intMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntMapIterator"] = ceramic_IntMapIterator;
ceramic_IntMapIterator.__name__ = "ceramic.IntMapIterator";
ceramic_IntMapIterator.prototype = {
	intMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intMap.iterableKeys[n];
		return this.intMap.get(k);
	}
	,__class__: ceramic_IntMapIterator
};
var ceramic_IntMapKeyIterator = function(intMap) {
	this.i = 0;
	this.iterableKeys = intMap.iterableKeys;
	this.len = this.iterableKeys != null ? this.iterableKeys.length : -1;
};
$hxClasses["ceramic.IntMapKeyIterator"] = ceramic_IntMapKeyIterator;
ceramic_IntMapKeyIterator.__name__ = "ceramic.IntMapKeyIterator";
ceramic_IntMapKeyIterator.prototype = {
	iterableKeys: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.iterableKeys[n];
		return k;
	}
	,__class__: ceramic_IntMapKeyIterator
};
var ceramic_IntMapKeyValueIterator = function(intMap) {
	this.intMap = intMap;
	this.i = 0;
	var iterableKeys = this.intMap.iterableKeys;
	this.len = iterableKeys != null ? iterableKeys.length : -1;
};
$hxClasses["ceramic.IntMapKeyValueIterator"] = ceramic_IntMapKeyValueIterator;
ceramic_IntMapKeyValueIterator.__name__ = "ceramic.IntMapKeyValueIterator";
ceramic_IntMapKeyValueIterator.prototype = {
	intMap: null
	,i: null
	,len: null
	,hasNext: function() {
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		var k = this.intMap.iterableKeys[n];
		return { key : k, value : this.intMap.get(k)};
	}
	,__class__: ceramic_IntMapKeyValueIterator
};
var ceramic_Key = function(keyCode,scanCode) {
	this.keyCode = keyCode;
	this.scanCode = scanCode;
};
$hxClasses["ceramic.Key"] = ceramic_Key;
ceramic_Key.__name__ = "ceramic.Key";
ceramic_Key.prototype = {
	keyCode: null
	,keyCodeName: null
	,get_keyCodeName: function() {
		return ceramic_KeyCode.$name(this.keyCode);
	}
	,scanCode: null
	,scanCodeName: null
	,get_scanCodeName: function() {
		return ceramic_ScanCode.$name(this.scanCode);
	}
	,toString: function() {
		return "Key(" + this.keyCode + " " + ceramic_KeyCode.$name(this.keyCode) + " / " + this.scanCode + " " + ceramic_ScanCode.$name(this.scanCode) + ")";
	}
	,__class__: ceramic_Key
	,__properties__: {get_scanCodeName:"get_scanCodeName",get_keyCodeName:"get_keyCodeName"}
};
var ceramic_KeyCode = {};
ceramic_KeyCode.$name = function(keyCode) {
	if((keyCode & ceramic_ScanCode.MASK) != 0) {
		return ceramic_ScanCode.$name(keyCode & ~ceramic_ScanCode.MASK);
	}
	switch(keyCode) {
	case 8:
		return ceramic_ScanCode.$name(42);
	case 9:
		return ceramic_ScanCode.$name(43);
	case 13:
		return ceramic_ScanCode.$name(40);
	case 27:
		return ceramic_ScanCode.$name(41);
	case 32:
		return ceramic_ScanCode.$name(44);
	case 97:
		return ceramic_ScanCode.$name(4);
	case 98:
		return ceramic_ScanCode.$name(5);
	case 99:
		return ceramic_ScanCode.$name(6);
	case 100:
		return ceramic_ScanCode.$name(7);
	case 101:
		return ceramic_ScanCode.$name(8);
	case 102:
		return ceramic_ScanCode.$name(9);
	case 103:
		return ceramic_ScanCode.$name(10);
	case 104:
		return ceramic_ScanCode.$name(11);
	case 105:
		return ceramic_ScanCode.$name(12);
	case 106:
		return ceramic_ScanCode.$name(13);
	case 107:
		return ceramic_ScanCode.$name(14);
	case 108:
		return ceramic_ScanCode.$name(15);
	case 109:
		return ceramic_ScanCode.$name(16);
	case 110:
		return ceramic_ScanCode.$name(17);
	case 111:
		return ceramic_ScanCode.$name(18);
	case 112:
		return ceramic_ScanCode.$name(19);
	case 113:
		return ceramic_ScanCode.$name(20);
	case 114:
		return ceramic_ScanCode.$name(21);
	case 115:
		return ceramic_ScanCode.$name(22);
	case 116:
		return ceramic_ScanCode.$name(23);
	case 117:
		return ceramic_ScanCode.$name(24);
	case 118:
		return ceramic_ScanCode.$name(25);
	case 119:
		return ceramic_ScanCode.$name(26);
	case 120:
		return ceramic_ScanCode.$name(27);
	case 121:
		return ceramic_ScanCode.$name(28);
	case 122:
		return ceramic_ScanCode.$name(29);
	case 127:
		return ceramic_ScanCode.$name(76);
	default:
		return String.fromCodePoint(keyCode);
	}
};
ceramic_KeyCode.toString = function(this1) {
	return "KeyCode(" + this1 + " " + ceramic_KeyCode.$name(this1) + ")";
};
var ceramic_Mesh = function() {
	this.uvs = [];
	this.texture = null;
	this.colors = [];
	this.indices = [];
	this.vertices = [];
	this.complexHit = false;
	this.customFloatAttributesSize = 0;
	this.colorMapping = 0;
	ceramic_Visual.call(this);
	this.asMesh = this;
};
$hxClasses["ceramic.Mesh"] = ceramic_Mesh;
ceramic_Mesh.__name__ = "ceramic.Mesh";
ceramic_Mesh.__super__ = ceramic_Visual;
ceramic_Mesh.prototype = $extend(ceramic_Visual.prototype,{
	colorMapping: null
	,customFloatAttributesSize: null
	,complexHit: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.set_texture(null);
		this._lifecycleState = -1;
		ceramic_Visual.prototype.destroy.call(this);
	}
	,get_color: function() {
		if(this.colors == null || this.colors.length == 0) {
			return 16777215;
		}
		var this1 = this.colors[0];
		var red = this1 >> 16 & 255;
		var green = this1 >> 8 & 255;
		var blue = this1 & 255;
		var color = 0;
		color &= 65535;
		color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color &= 16711935;
		color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color &= 16776960;
		color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		return color;
	}
	,set_color: function(color) {
		if(this.colors == null) {
			this.colors = [];
		}
		if(this.colors.length == 0) {
			var alpha = 255;
			if(alpha == null) {
				alpha = 255;
			}
			var value = (color | 0) + (-16777216);
			value &= 16777215;
			value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
			this.colors.push(value);
		} else {
			var alpha = 255;
			if(alpha == null) {
				alpha = 255;
			}
			var value = (color | 0) + (-16777216);
			value &= 16777215;
			value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
			this.colors[0] = value;
		}
		return color;
	}
	,vertices: null
	,indices: null
	,colors: null
	,texture: null
	,set_texture: function(texture) {
		if(this.texture == texture) {
			return texture;
		}
		if(!(texture == null || texture._lifecycleState >= 0)) {
			ceramic_App.app.logger.error("texture == null || !texture.destroyed" + (" (" + ("Cannot assign destroyed texture: " + Std.string(texture)) + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Mesh.hx", lineNumber : 136, className : "ceramic.Mesh", methodName : "set_texture"});
			throw haxe_Exception.thrown("texture == null || !texture.destroyed" + (" (" + ("Cannot assign destroyed texture: " + Std.string(texture)) + ")"));
		}
		if(this.texture != null) {
			this.texture.offDestroy($bind(this,this.textureDestroyed));
			if(this.texture.asset != null) {
				this.texture.asset.release();
			}
		}
		this.texture = texture;
		if(this.texture != null) {
			this.texture.onDestroy(this,$bind(this,this.textureDestroyed));
			if(this.texture.asset != null) {
				this.texture.asset.retain();
			}
		}
		return texture;
	}
	,uvs: null
	,textureDestroyed: function(_) {
		this.set_texture(null);
	}
	,hitTest: function(x,y,matrix) {
		if(this.complexHit) {
			var testX = x * matrix.a + y * matrix.c + matrix.tx;
			var testY = x * matrix.b + y * matrix.d + matrix.ty;
			var floatsPerVertex = 2 + this.customFloatAttributesSize;
			var i = 0;
			var j = 0;
			var k;
			var numTriangles = this.indices.length / 3 | 0;
			var na;
			var nb;
			var nc;
			var ax;
			var ay;
			var bx;
			var by;
			var cx;
			var cy;
			while(i < numTriangles) {
				na = this.indices[j];
				++j;
				nb = this.indices[j];
				++j;
				nc = this.indices[j];
				++j;
				k = na * floatsPerVertex;
				ax = this.vertices[k];
				++k;
				ay = this.vertices[k];
				k = nb * floatsPerVertex;
				bx = this.vertices[k];
				++k;
				by = this.vertices[k];
				k = nc * floatsPerVertex;
				cx = this.vertices[k];
				++k;
				cy = this.vertices[k];
				var d1 = (testX - bx) * (ay - by) - (ax - bx) * (testY - by);
				var d2 = (testX - cx) * (by - cy) - (bx - cx) * (testY - cy);
				var d3 = (testX - ax) * (cy - ay) - (cx - ax) * (testY - ay);
				var hasNeg = d1 < 0 || d2 < 0 || d3 < 0;
				var hasPos = d1 > 0 || d2 > 0 || d3 > 0;
				if(!(hasNeg && hasPos)) {
					return true;
				}
				++i;
			}
			return false;
		} else {
			return ceramic_Visual.prototype.hitTest.call(this,x,y,matrix);
		}
	}
	,set_shader: function(shader) {
		this.shader = shader;
		if(shader != null) {
			this.customFloatAttributesSize = shader.customFloatAttributesSize;
		}
		return shader;
	}
	,computeSize: function() {
		if(this.vertices != null && this.vertices.length >= 2) {
			var maxX = 0;
			var maxY = 0;
			var i = 0;
			var lenMinus1 = this.vertices.length - 1;
			if(this.customFloatAttributesSize > 0) {
				while(i < lenMinus1) {
					var x = this.vertices[i];
					if(x > maxX) {
						maxX = x;
					}
					++i;
					var y = this.vertices[i];
					if(y > maxY) {
						maxY = y;
					}
					i += 1 + this.customFloatAttributesSize;
				}
			} else {
				while(i < lenMinus1) {
					var x = this.vertices[i];
					if(x > maxX) {
						maxX = x;
					}
					++i;
					var y = this.vertices[i];
					if(y > maxY) {
						maxY = y;
					}
					++i;
				}
			}
			var height = Math.round(maxY * 1000) / 1000;
			this.set_width(Math.round(maxX * 1000) / 1000);
			this.set_height(height);
		} else {
			this.set_width(0);
			this.set_height(0);
		}
	}
	,grid: function(cols,rows,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(width == -1) {
			width = this._width;
		}
		if(height == -1) {
			height = this._height;
		}
		var stepX = width / cols;
		var stepY = height / rows;
		var v = 0;
		var i = 0;
		var _g = 0;
		var _g1 = rows + 1;
		while(_g < _g1) {
			var r = _g++;
			var y = r * stepY;
			var _g2 = 0;
			var _g3 = cols + 1;
			while(_g2 < _g3) {
				var c = _g2++;
				this.vertices[v] = c * stepX;
				++v;
				this.vertices[v] = y;
				++v;
				if(r > 0 && c > 0) {
					var n = (r - 1) * (cols + 1) + c - 1;
					this.indices[i] = n;
					++i;
					this.indices[i] = n + 1;
					++i;
					this.indices[i] = n + (cols + 1);
					++i;
					this.indices[i] = n + 1;
					++i;
					this.indices[i] = n + (cols + 1);
					++i;
					this.indices[i] = n + (cols + 1) + 1;
					++i;
				}
			}
		}
		if(this.vertices.length > v) {
			ceramic_Extensions.setArrayLength(this.vertices,v);
		}
		if(this.indices.length > i) {
			ceramic_Extensions.setArrayLength(this.indices,i);
		}
	}
	,gridFromTexture: function(cols,rows,texture) {
		if(texture == null) {
			texture = this.texture;
		}
		this.grid(cols,rows,texture.width,texture.height);
		var u = 0;
		var stepX = 1.0 / cols;
		var stepY = 1.0 / rows;
		var _g = 0;
		var _g1 = rows + 1;
		while(_g < _g1) {
			var r = _g++;
			var y = r * stepY;
			this.uvs[u] = 0;
			++u;
			this.uvs[u] = y;
			++u;
			var _g2 = 1;
			var _g3 = cols + 1;
			while(_g2 < _g3) {
				var c = _g2++;
				this.uvs[u] = c * stepX;
				++u;
				this.uvs[u] = y;
				++u;
			}
		}
		if(this.uvs.length > u) {
			ceramic_Extensions.setArrayLength(this.uvs,u);
		}
	}
	,__class__: ceramic_Mesh
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_texture:"set_texture",set_color:"set_color",get_color:"get_color"})
});
var polyline_MiterUtils = function() {
	this.tmpY = 0;
	this.tmpX = 0;
	this.outY = 0;
	this.outX = 0;
	this.bY = 0;
	this.bX = 0;
	this.aY = 0;
	this.aX = 0;
	this.miterY = 0;
	this.miterX = 0;
	this.tangentY = 0;
	this.tangentX = 0;
};
$hxClasses["polyline.MiterUtils"] = polyline_MiterUtils;
polyline_MiterUtils.__name__ = "polyline.MiterUtils";
polyline_MiterUtils.prototype = {
	tangentX: null
	,tangentY: null
	,miterX: null
	,miterY: null
	,aX: null
	,aY: null
	,bX: null
	,bY: null
	,outX: null
	,outY: null
	,tmpX: null
	,tmpY: null
	,computeMiter: function(halfThick) {
		this.tangentX = this.aX + this.bX;
		this.tangentY = this.aY + this.bY;
		this.miterX = -this.tangentY;
		this.miterY = this.tangentX;
		this.tmpX = -this.aY;
		this.tmpY = this.aX;
		return halfThick / (this.miterX * this.tmpX + this.miterY * this.tmpY);
	}
	,normal: function(dirX,dirY) {
		this.outX = -dirY;
		this.outY = dirX;
	}
	,direction: function() {
		this.outX = this.aX - this.bX;
		this.outY = this.aY - this.bY;
		var len = this.outX * this.outX + this.outY * this.outY;
		if(len > 0) {
			len = 1.0 / Math.sqrt(len);
			this.outX *= len;
			this.outY *= len;
		}
	}
	,__class__: polyline_MiterUtils
};
var polyline_Stroke = function() {
	this._points = null;
	this._started = false;
	this._lastFlip = -1;
	this._normalY = 0;
	this._normalX = 0;
	this._hasNormal = false;
	this.capEndY = 0;
	this.capEndX = 0;
	this.miterY = 0;
	this.miterX = 0;
	this.tangentY = 0;
	this.tangentX = 0;
	this.lineBY = 0;
	this.lineBX = 0;
	this.lineAY = 0;
	this.lineAX = 0;
	this.tmpY = 0;
	this.tmpX = 0;
	this.canLoop = false;
	this.cap = polyline_StrokeCap.BUTT;
	this.join = polyline_StrokeJoin.MITER;
	this.thickness = 1;
	this.miterLimit = 10;
};
$hxClasses["polyline.Stroke"] = polyline_Stroke;
polyline_Stroke.__name__ = "polyline.Stroke";
polyline_Stroke.prototype = {
	miterLimit: null
	,thickness: null
	,join: null
	,cap: null
	,canLoop: null
	,tmpX: null
	,tmpY: null
	,lineAX: null
	,lineAY: null
	,lineBX: null
	,lineBY: null
	,tangentX: null
	,tangentY: null
	,miterX: null
	,miterY: null
	,capEndX: null
	,capEndY: null
	,_hasNormal: null
	,_normalX: null
	,_normalY: null
	,_lastFlip: null
	,_started: null
	,_points: null
	,build: function(points,vertices,indices) {
		if(vertices.length > 0) {
			vertices.splice(0,vertices.length);
		}
		if(indices.length > 0) {
			indices.splice(0,indices.length);
		}
		if(points.length == 0) {
			return;
		}
		var total = points.length;
		this._lastFlip = -1;
		this._started = false;
		this._hasNormal = false;
		var i = 2;
		var count = 0;
		var skip = false;
		var lastX = 0.0;
		var lastY = 0.0;
		var curX = 0.0;
		var curY = 0.0;
		var nextX = -9999999999.0;
		var nextY = -9999999999.0;
		var overlap = false;
		var thickness = 0.0;
		this._points = points;
		while(i < total) {
			if(!skip) {
				lastX = polyline_Extensions.unsafeGet(points,i - 2);
				lastY = polyline_Extensions.unsafeGet(points,i - 1);
				curX = polyline_Extensions.unsafeGet(points,i);
				curY = polyline_Extensions.unsafeGet(points,i + 1);
			}
			nextX = -9999999999.0;
			nextY = -9999999999.0;
			skip = false;
			thickness = this.mapThickness(curX,curY,i,points);
			if(i < total - 2) {
				nextX = polyline_Extensions.unsafeGet(points,i + 2);
				nextY = polyline_Extensions.unsafeGet(points,i + 3);
				if(curX == nextX && curY == nextY) {
					skip = true;
				} else {
					var vx = lastX - curX;
					var vy = lastY - curY;
					var wx = nextX - curX;
					var wy = nextY - curY;
					var c1 = wx * vx + wy * vy;
					var c2 = vx * vx + vy * vy;
					var b = c1 / c2;
					var pbx = curX + b * vx;
					var pby = curY + b * vy;
					var uvx = nextX - pbx;
					var uvy = nextY - pby;
					var dist = Math.sqrt(uvx * uvx + uvy * uvy);
					if(dist < thickness) {
						var result = Math.atan2(lastY - curY,lastX - curX) - Math.atan2(nextY - curY,nextX - curX);
						while(result < 0) result += 6.28318530718;
						while(result > 6.28318530718) result -= 6.28318530718;
						var angle = result;
						if(angle < 1.57079632679 || angle > 4.71238898038) {
							nextX = -9999999999.0;
							nextY = -9999999999.0;
						}
					}
				}
			}
			if(!skip) {
				var lastX1 = lastX;
				var lastY1 = lastY;
				var curX1 = curX;
				var curY1 = curY;
				var halfThick = thickness * 0.5;
				var count1 = 0;
				var capSquare = this.cap == polyline_StrokeCap.SQUARE;
				var joinBevel = this.join == polyline_StrokeJoin.BEVEL;
				polyline_Stroke.miterUtils.aX = curX1;
				polyline_Stroke.miterUtils.aY = curY1;
				polyline_Stroke.miterUtils.bX = lastX1;
				polyline_Stroke.miterUtils.bY = lastY1;
				var _this = polyline_Stroke.miterUtils;
				_this.outX = _this.aX - _this.bX;
				_this.outY = _this.aY - _this.bY;
				var len = _this.outX * _this.outX + _this.outY * _this.outY;
				if(len > 0) {
					len = 1.0 / Math.sqrt(len);
					_this.outX *= len;
					_this.outY *= len;
				}
				this.lineAX = polyline_Stroke.miterUtils.outX;
				this.lineAY = polyline_Stroke.miterUtils.outY;
				if(!this._hasNormal) {
					var _this1 = polyline_Stroke.miterUtils;
					_this1.outX = -this.lineAY;
					_this1.outY = this.lineAX;
					this._normalX = polyline_Stroke.miterUtils.outX;
					this._normalY = polyline_Stroke.miterUtils.outY;
					this._hasNormal = true;
				}
				if(!this._started) {
					this._started = true;
					var halfThickStart = this.mapThickness(polyline_Extensions.unsafeGet(this._points,0),polyline_Extensions.unsafeGet(this._points,1),0,this._points) * 0.5;
					if(capSquare) {
						this.capEndX = lastX1 + this.lineAX * -halfThickStart;
						this.capEndY = lastY1 + this.lineAY * -halfThickStart;
						lastX1 = this.capEndX;
						lastY1 = this.capEndY;
					}
					var normalX = this._normalX;
					var normalY = this._normalY;
					this.tmpX = lastX1 + normalX * -halfThickStart;
					this.tmpY = lastY1 + normalY * -halfThickStart;
					vertices.push(this.tmpX);
					vertices.push(this.tmpY);
					this.tmpX = lastX1 + normalX * halfThickStart;
					this.tmpY = lastY1 + normalY * halfThickStart;
					vertices.push(this.tmpX);
					vertices.push(this.tmpY);
				}
				indices.push(count);
				indices.push(count + 1);
				indices.push(count + 2);
				if(nextX == -9999999999.0) {
					var _this2 = polyline_Stroke.miterUtils;
					_this2.outX = -this.lineAY;
					_this2.outY = this.lineAX;
					this._normalX = polyline_Stroke.miterUtils.outX;
					this._normalY = polyline_Stroke.miterUtils.outY;
					this._hasNormal = true;
					if(capSquare) {
						this.capEndX = curX1 + this.lineAX * halfThick;
						this.capEndY = curY1 + this.lineAY * halfThick;
						curX1 = this.capEndX;
						curY1 = this.capEndY;
					}
					var normalX1 = this._normalX;
					var normalY1 = this._normalY;
					this.tmpX = curX1 + normalX1 * -halfThick;
					this.tmpY = curY1 + normalY1 * -halfThick;
					vertices.push(this.tmpX);
					vertices.push(this.tmpY);
					this.tmpX = curX1 + normalX1 * halfThick;
					this.tmpY = curY1 + normalY1 * halfThick;
					vertices.push(this.tmpX);
					vertices.push(this.tmpY);
					if(this._lastFlip == 1) {
						indices.push(count);
						indices.push(count + 2);
						indices.push(count + 3);
					} else {
						indices.push(count + 2);
						indices.push(count + 1);
						indices.push(count + 3);
					}
					count1 += 4;
				} else {
					polyline_Stroke.miterUtils.aX = nextX;
					polyline_Stroke.miterUtils.aY = nextY;
					polyline_Stroke.miterUtils.bX = curX1;
					polyline_Stroke.miterUtils.bY = curY1;
					var _this3 = polyline_Stroke.miterUtils;
					_this3.outX = _this3.aX - _this3.bX;
					_this3.outY = _this3.aY - _this3.bY;
					var len1 = _this3.outX * _this3.outX + _this3.outY * _this3.outY;
					if(len1 > 0) {
						len1 = 1.0 / Math.sqrt(len1);
						_this3.outX *= len1;
						_this3.outY *= len1;
					}
					this.lineBX = polyline_Stroke.miterUtils.outX;
					this.lineBY = polyline_Stroke.miterUtils.outY;
					polyline_Stroke.miterUtils.tangentX = this.tangentX;
					polyline_Stroke.miterUtils.tangentY = this.tangentY;
					polyline_Stroke.miterUtils.miterX = this.miterX;
					polyline_Stroke.miterUtils.miterY = this.miterY;
					polyline_Stroke.miterUtils.aX = this.lineAX;
					polyline_Stroke.miterUtils.aY = this.lineAY;
					polyline_Stroke.miterUtils.bX = this.lineBX;
					polyline_Stroke.miterUtils.bY = this.lineBY;
					var _this4 = polyline_Stroke.miterUtils;
					_this4.tangentX = _this4.aX + _this4.bX;
					_this4.tangentY = _this4.aY + _this4.bY;
					_this4.miterX = -_this4.tangentY;
					_this4.miterY = _this4.tangentX;
					_this4.tmpX = -_this4.aY;
					_this4.tmpY = _this4.aX;
					var miterLen = halfThick / (_this4.miterX * _this4.tmpX + _this4.miterY * _this4.tmpY);
					this.tangentX = polyline_Stroke.miterUtils.tangentX;
					this.tangentY = polyline_Stroke.miterUtils.tangentY;
					this.miterX = polyline_Stroke.miterUtils.miterX;
					this.miterY = polyline_Stroke.miterUtils.miterY;
					var flip = this.tangentX * this._normalX + this.tangentY * this._normalY < 0 ? -1 : 1;
					var bevel = joinBevel;
					if(!bevel && this.join == polyline_StrokeJoin.MITER) {
						var limit = miterLen / halfThick;
						if(limit > this.miterLimit) {
							bevel = true;
						}
					}
					if(bevel) {
						this.tmpX = curX1 + this._normalX * -halfThick * flip;
						this.tmpY = curY1 + this._normalY * -halfThick * flip;
						vertices.push(this.tmpX);
						vertices.push(this.tmpY);
						this.tmpX = curX1 + this.miterX * miterLen * flip;
						this.tmpY = curY1 + this.miterY * miterLen * flip;
						vertices.push(this.tmpX);
						vertices.push(this.tmpY);
						if(this._lastFlip != -flip) {
							indices.push(count);
							indices.push(count + 2);
							indices.push(count + 3);
						} else {
							indices.push(count + 2);
							indices.push(count + 1);
							indices.push(count + 3);
						}
						indices.push(count + 2);
						indices.push(count + 3);
						indices.push(count + 4);
						var _this5 = polyline_Stroke.miterUtils;
						_this5.outX = -this.lineBY;
						_this5.outY = this.lineBX;
						this.tmpX = polyline_Stroke.miterUtils.outX;
						this.tmpY = polyline_Stroke.miterUtils.outY;
						this._normalX = this.tmpX;
						this._normalY = this.tmpY;
						this.tmpX = curX1 + this.tmpX * -halfThick * flip;
						this.tmpY = curY1 + this.tmpY * -halfThick * flip;
						vertices.push(this.tmpX);
						vertices.push(this.tmpY);
						count1 += 3;
					} else {
						var normalX2 = this.miterX;
						var normalY2 = this.miterY;
						this.tmpX = curX1 + normalX2 * -miterLen;
						this.tmpY = curY1 + normalY2 * -miterLen;
						vertices.push(this.tmpX);
						vertices.push(this.tmpY);
						this.tmpX = curX1 + normalX2 * miterLen;
						this.tmpY = curY1 + normalY2 * miterLen;
						vertices.push(this.tmpX);
						vertices.push(this.tmpY);
						if(this._lastFlip == 1) {
							indices.push(count);
							indices.push(count + 2);
							indices.push(count + 3);
						} else {
							indices.push(count + 2);
							indices.push(count + 1);
							indices.push(count + 3);
						}
						flip = -1;
						this._normalX = this.miterX;
						this._normalY = this.miterY;
						count1 += 2;
					}
					this._lastFlip = flip;
				}
				var amt = count1;
				count += amt;
			}
			if(nextX == -9999999999.0) {
				this._lastFlip = -1;
				this._started = false;
				this._hasNormal = false;
				skip = false;
			}
			i += 2;
		}
		this._points = null;
		if(this.canLoop && this.cap == polyline_StrokeCap.BUTT) {
			if(points[0] == points[points.length - 2] && points[1] == points[points.length - 1] && points.length > 6) {
				var tmpX = (vertices[vertices.length - 2] + vertices[2]) * 0.5;
				var tmpY = (vertices[vertices.length - 1] + vertices[3]) * 0.5;
				vertices[vertices.length - 2] = tmpX;
				vertices[2] = tmpX;
				vertices[vertices.length - 1] = tmpY;
				vertices[3] = tmpY;
				tmpX = (vertices[vertices.length - 4] + vertices[0]) * 0.5;
				tmpY = (vertices[vertices.length - 3] + vertices[1]) * 0.5;
				vertices[vertices.length - 4] = tmpX;
				vertices[0] = tmpX;
				vertices[vertices.length - 3] = tmpY;
				vertices[1] = tmpY;
			}
		}
	}
	,mapThickness: function(pointX,pointY,i,points) {
		return this.thickness;
	}
	,_seg: function(vertices,indices,index,lastX,lastY,curX,curY,nextX,nextY,halfThick) {
		var count = 0;
		var capSquare = this.cap == polyline_StrokeCap.SQUARE;
		var joinBevel = this.join == polyline_StrokeJoin.BEVEL;
		polyline_Stroke.miterUtils.aX = curX;
		polyline_Stroke.miterUtils.aY = curY;
		polyline_Stroke.miterUtils.bX = lastX;
		polyline_Stroke.miterUtils.bY = lastY;
		var _this = polyline_Stroke.miterUtils;
		_this.outX = _this.aX - _this.bX;
		_this.outY = _this.aY - _this.bY;
		var len = _this.outX * _this.outX + _this.outY * _this.outY;
		if(len > 0) {
			len = 1.0 / Math.sqrt(len);
			_this.outX *= len;
			_this.outY *= len;
		}
		this.lineAX = polyline_Stroke.miterUtils.outX;
		this.lineAY = polyline_Stroke.miterUtils.outY;
		if(!this._hasNormal) {
			var _this = polyline_Stroke.miterUtils;
			_this.outX = -this.lineAY;
			_this.outY = this.lineAX;
			this._normalX = polyline_Stroke.miterUtils.outX;
			this._normalY = polyline_Stroke.miterUtils.outY;
			this._hasNormal = true;
		}
		if(!this._started) {
			this._started = true;
			var halfThickStart = this.mapThickness(polyline_Extensions.unsafeGet(this._points,0),polyline_Extensions.unsafeGet(this._points,1),0,this._points) * 0.5;
			if(capSquare) {
				this.capEndX = lastX + this.lineAX * -halfThickStart;
				this.capEndY = lastY + this.lineAY * -halfThickStart;
				lastX = this.capEndX;
				lastY = this.capEndY;
			}
			var normalX = this._normalX;
			var normalY = this._normalY;
			this.tmpX = lastX + normalX * -halfThickStart;
			this.tmpY = lastY + normalY * -halfThickStart;
			vertices.push(this.tmpX);
			vertices.push(this.tmpY);
			this.tmpX = lastX + normalX * halfThickStart;
			this.tmpY = lastY + normalY * halfThickStart;
			vertices.push(this.tmpX);
			vertices.push(this.tmpY);
		}
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		if(nextX == -9999999999.0) {
			var _this = polyline_Stroke.miterUtils;
			_this.outX = -this.lineAY;
			_this.outY = this.lineAX;
			this._normalX = polyline_Stroke.miterUtils.outX;
			this._normalY = polyline_Stroke.miterUtils.outY;
			this._hasNormal = true;
			if(capSquare) {
				this.capEndX = curX + this.lineAX * halfThick;
				this.capEndY = curY + this.lineAY * halfThick;
				curX = this.capEndX;
				curY = this.capEndY;
			}
			var normalX = this._normalX;
			var normalY = this._normalY;
			this.tmpX = curX + normalX * -halfThick;
			this.tmpY = curY + normalY * -halfThick;
			vertices.push(this.tmpX);
			vertices.push(this.tmpY);
			this.tmpX = curX + normalX * halfThick;
			this.tmpY = curY + normalY * halfThick;
			vertices.push(this.tmpX);
			vertices.push(this.tmpY);
			if(this._lastFlip == 1) {
				indices.push(index);
				indices.push(index + 2);
				indices.push(index + 3);
			} else {
				indices.push(index + 2);
				indices.push(index + 1);
				indices.push(index + 3);
			}
			count += 4;
		} else {
			polyline_Stroke.miterUtils.aX = nextX;
			polyline_Stroke.miterUtils.aY = nextY;
			polyline_Stroke.miterUtils.bX = curX;
			polyline_Stroke.miterUtils.bY = curY;
			var _this = polyline_Stroke.miterUtils;
			_this.outX = _this.aX - _this.bX;
			_this.outY = _this.aY - _this.bY;
			var len = _this.outX * _this.outX + _this.outY * _this.outY;
			if(len > 0) {
				len = 1.0 / Math.sqrt(len);
				_this.outX *= len;
				_this.outY *= len;
			}
			this.lineBX = polyline_Stroke.miterUtils.outX;
			this.lineBY = polyline_Stroke.miterUtils.outY;
			polyline_Stroke.miterUtils.tangentX = this.tangentX;
			polyline_Stroke.miterUtils.tangentY = this.tangentY;
			polyline_Stroke.miterUtils.miterX = this.miterX;
			polyline_Stroke.miterUtils.miterY = this.miterY;
			polyline_Stroke.miterUtils.aX = this.lineAX;
			polyline_Stroke.miterUtils.aY = this.lineAY;
			polyline_Stroke.miterUtils.bX = this.lineBX;
			polyline_Stroke.miterUtils.bY = this.lineBY;
			var _this = polyline_Stroke.miterUtils;
			_this.tangentX = _this.aX + _this.bX;
			_this.tangentY = _this.aY + _this.bY;
			_this.miterX = -_this.tangentY;
			_this.miterY = _this.tangentX;
			_this.tmpX = -_this.aY;
			_this.tmpY = _this.aX;
			var miterLen = halfThick / (_this.miterX * _this.tmpX + _this.miterY * _this.tmpY);
			this.tangentX = polyline_Stroke.miterUtils.tangentX;
			this.tangentY = polyline_Stroke.miterUtils.tangentY;
			this.miterX = polyline_Stroke.miterUtils.miterX;
			this.miterY = polyline_Stroke.miterUtils.miterY;
			var flip = this.tangentX * this._normalX + this.tangentY * this._normalY < 0 ? -1 : 1;
			var bevel = joinBevel;
			if(!bevel && this.join == polyline_StrokeJoin.MITER) {
				var limit = miterLen / halfThick;
				if(limit > this.miterLimit) {
					bevel = true;
				}
			}
			if(bevel) {
				this.tmpX = curX + this._normalX * -halfThick * flip;
				this.tmpY = curY + this._normalY * -halfThick * flip;
				vertices.push(this.tmpX);
				vertices.push(this.tmpY);
				this.tmpX = curX + this.miterX * miterLen * flip;
				this.tmpY = curY + this.miterY * miterLen * flip;
				vertices.push(this.tmpX);
				vertices.push(this.tmpY);
				if(this._lastFlip != -flip) {
					indices.push(index);
					indices.push(index + 2);
					indices.push(index + 3);
				} else {
					indices.push(index + 2);
					indices.push(index + 1);
					indices.push(index + 3);
				}
				indices.push(index + 2);
				indices.push(index + 3);
				indices.push(index + 4);
				var _this = polyline_Stroke.miterUtils;
				_this.outX = -this.lineBY;
				_this.outY = this.lineBX;
				this.tmpX = polyline_Stroke.miterUtils.outX;
				this.tmpY = polyline_Stroke.miterUtils.outY;
				this._normalX = this.tmpX;
				this._normalY = this.tmpY;
				this.tmpX = curX + this.tmpX * -halfThick * flip;
				this.tmpY = curY + this.tmpY * -halfThick * flip;
				vertices.push(this.tmpX);
				vertices.push(this.tmpY);
				count += 3;
			} else {
				var normalX = this.miterX;
				var normalY = this.miterY;
				this.tmpX = curX + normalX * -miterLen;
				this.tmpY = curY + normalY * -miterLen;
				vertices.push(this.tmpX);
				vertices.push(this.tmpY);
				this.tmpX = curX + normalX * miterLen;
				this.tmpY = curY + normalY * miterLen;
				vertices.push(this.tmpX);
				vertices.push(this.tmpY);
				if(this._lastFlip == 1) {
					indices.push(index);
					indices.push(index + 2);
					indices.push(index + 3);
				} else {
					indices.push(index + 2);
					indices.push(index + 1);
					indices.push(index + 3);
				}
				flip = -1;
				this._normalX = this.miterX;
				this._normalY = this.miterY;
				count += 2;
			}
			this._lastFlip = flip;
		}
		return count;
	}
	,extrusions: function(vertices,pointX,pointY,normalX,normalY,scale) {
		this.tmpX = pointX + normalX * -scale;
		this.tmpY = pointY + normalY * -scale;
		vertices.push(this.tmpX);
		vertices.push(this.tmpY);
		this.tmpX = pointX + normalX * scale;
		this.tmpY = pointY + normalY * scale;
		vertices.push(this.tmpX);
		vertices.push(this.tmpY);
	}
	,pointsAngle: function(x,y,x0,y0,x1,y1) {
		var result = Math.atan2(y1 - y,x1 - x) - Math.atan2(y0 - y,x0 - x);
		while(result < 0) result += 6.28318530718;
		while(result > 6.28318530718) result -= 6.28318530718;
		return result;
	}
	,distanceToLine: function(x,y,x0,y0,x1,y1) {
		var vx = x1 - x0;
		var vy = y1 - y0;
		var wx = x - x0;
		var wy = y - y0;
		var c1 = wx * vx + wy * vy;
		var c2 = vx * vx + vy * vy;
		var b = c1 / c2;
		var pbx = x0 + b * vx;
		var pby = y0 + b * vy;
		var uvx = x - pbx;
		var uvy = y - pby;
		return Math.sqrt(uvx * uvx + uvy * uvy);
	}
	,__class__: polyline_Stroke
};
var ceramic_Line = function() {
	this.autoComputeSize = true;
	this.loop = false;
	this.cap = polyline_StrokeCap.BUTT;
	this.join = polyline_StrokeJoin.BEVEL;
	this.thickness = 1;
	this.miterLimit = 10;
	this.points = null;
	ceramic_Mesh.call(this);
};
$hxClasses["ceramic.Line"] = ceramic_Line;
ceramic_Line.__name__ = "ceramic.Line";
ceramic_Line.__super__ = ceramic_Mesh;
ceramic_Line.prototype = $extend(ceramic_Mesh.prototype,{
	points: null
	,set_points: function(points) {
		this.points = points;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return points;
	}
	,miterLimit: null
	,set_miterLimit: function(miterLimit) {
		if(this.miterLimit == miterLimit) {
			return miterLimit;
		}
		this.miterLimit = miterLimit;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return miterLimit;
	}
	,thickness: null
	,set_thickness: function(thickness) {
		if(this.thickness == thickness) {
			return thickness;
		}
		this.thickness = thickness;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return thickness;
	}
	,join: null
	,set_join: function(join) {
		if(this.join == join) {
			return join;
		}
		this.join = join;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return join;
	}
	,cap: null
	,set_cap: function(cap) {
		if(this.cap == cap) {
			return cap;
		}
		this.cap = cap;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return cap;
	}
	,loop: null
	,set_loop: function(loop) {
		if(this.loop == loop) {
			return loop;
		}
		this.loop = loop;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return loop;
	}
	,autoComputeSize: null
	,set_autoComputeSize: function(autoComputeSize) {
		if(this.autoComputeSize == autoComputeSize) {
			return autoComputeSize;
		}
		this.autoComputeSize = autoComputeSize;
		if(autoComputeSize) {
			this.computeSize();
		}
		return autoComputeSize;
	}
	,computeContent: function() {
		if(this.points != null && this.points.length >= 4) {
			ceramic_Line._stroke.miterLimit = this.miterLimit;
			ceramic_Line._stroke.thickness = this.thickness;
			ceramic_Line._stroke.join = this.join;
			ceramic_Line._stroke.cap = this.cap;
			ceramic_Line._stroke.canLoop = this.loop;
			if(this.vertices == null) {
				this.vertices = [];
			}
			if(this.indices == null) {
				this.indices = [];
			}
			ceramic_Line._stroke.build(this.points,this.vertices,this.indices);
		}
		if(this.autoComputeSize) {
			this.computeSize();
		}
		this.contentDirty = false;
	}
	,computeSize: function() {
		if(this.points != null && this.points.length >= 2) {
			var maxX = 0;
			var maxY = 0;
			var i = 0;
			var lenMinus1 = this.points.length - 1;
			while(i < lenMinus1) {
				var x = this.points[i];
				if(x > maxX) {
					maxX = x;
				}
				++i;
				var y = this.points[i];
				if(y > maxY) {
					maxY = y;
				}
				++i;
			}
			this.set_width(maxX);
			this.set_height(maxY);
		} else {
			this.set_width(0);
			this.set_height(0);
		}
	}
	,__class__: ceramic_Line
	,__properties__: $extend(ceramic_Mesh.prototype.__properties__,{set_autoComputeSize:"set_autoComputeSize",set_loop:"set_loop",set_cap:"set_cap",set_join:"set_join",set_thickness:"set_thickness",set_miterLimit:"set_miterLimit",set_points:"set_points"})
});
var ceramic_Logger = function() {
	this.indentPrefix = "";
	ceramic_Entity.call(this);
	if(!ceramic_Logger.didInitOnce) {
		ceramic_Logger.didInitOnce = true;
	}
};
$hxClasses["ceramic.Logger"] = ceramic_Logger;
ceramic_Logger.__name__ = "ceramic.Logger";
ceramic_Logger.__super__ = ceramic_Entity;
ceramic_Logger.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnInfo: null
	,__cbOnceInfo: null
	,__cbOnOwnerUnbindInfo: null
	,__cbOnceOwnerUnbindInfo: null
	,emitInfo: function(value,pos) {
		var len = 0;
		if(this.__cbOnInfo != null) {
			len += this.__cbOnInfo.length;
		}
		if(this.__cbOnceInfo != null) {
			len += this.__cbOnceInfo.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnInfo.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnInfo[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceInfo != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceInfo.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceInfo[ii];
						this.__cbOnceInfo[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindInfo[ii];
						this.__cbOnceOwnerUnbindInfo[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindInfo[ii]);
						newCbOnceArray.push(this.__cbOnceInfo[ii]);
					}
				}
				this.__cbOnceOwnerUnbindInfo = newCbOnceOwnerUnbindArray;
				this.__cbOnceInfo = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onInfo: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "info" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offInfo(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindInfo == null) {
				this.__cbOnOwnerUnbindInfo = [];
			}
			this.__cbOnOwnerUnbindInfo.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindInfo == null) {
				this.__cbOnOwnerUnbindInfo = [];
			}
			this.__cbOnOwnerUnbindInfo.push(null);
		}
		if(this.__cbOnInfo == null) {
			this.__cbOnInfo = [];
		}
		this.__cbOnInfo.push(handleValuePos);
	}
	,onceInfo: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "info" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offInfo(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindInfo == null) {
				this.__cbOnceOwnerUnbindInfo = [];
			}
			this.__cbOnceOwnerUnbindInfo.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindInfo == null) {
				this.__cbOnceOwnerUnbindInfo = [];
			}
			this.__cbOnceOwnerUnbindInfo.push(null);
		}
		if(this.__cbOnceInfo == null) {
			this.__cbOnceInfo = [];
		}
		this.__cbOnceInfo.push(handleValuePos);
	}
	,offInfo: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnInfo != null) {
				index = this.__cbOnInfo.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnInfo.splice(index,1);
					unbind = this.__cbOnOwnerUnbindInfo[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindInfo.splice(index,1);
				}
			}
			if(this.__cbOnceInfo != null) {
				index = this.__cbOnceInfo.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceInfo.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindInfo[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindInfo.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindInfo.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindInfo[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindInfo = null;
			}
			if(this.__cbOnceOwnerUnbindInfo != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindInfo.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindInfo[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindInfo = null;
			}
			this.__cbOnInfo = null;
			this.__cbOnceInfo = null;
		}
	}
	,listensInfo: function() {
		if(!(this.__cbOnInfo != null && this.__cbOnInfo.length > 0)) {
			if(this.__cbOnceInfo != null) {
				return this.__cbOnceInfo.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnDebug: null
	,__cbOnceDebug: null
	,__cbOnOwnerUnbindDebug: null
	,__cbOnceOwnerUnbindDebug: null
	,emitDebug: function(value,pos) {
		var len = 0;
		if(this.__cbOnDebug != null) {
			len += this.__cbOnDebug.length;
		}
		if(this.__cbOnceDebug != null) {
			len += this.__cbOnceDebug.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnDebug.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDebug[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDebug != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDebug.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDebug[ii];
						this.__cbOnceDebug[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDebug[ii];
						this.__cbOnceOwnerUnbindDebug[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDebug[ii]);
						newCbOnceArray.push(this.__cbOnceDebug[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDebug = newCbOnceOwnerUnbindArray;
				this.__cbOnceDebug = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDebug: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "debug" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offDebug(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDebug == null) {
				this.__cbOnOwnerUnbindDebug = [];
			}
			this.__cbOnOwnerUnbindDebug.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDebug == null) {
				this.__cbOnOwnerUnbindDebug = [];
			}
			this.__cbOnOwnerUnbindDebug.push(null);
		}
		if(this.__cbOnDebug == null) {
			this.__cbOnDebug = [];
		}
		this.__cbOnDebug.push(handleValuePos);
	}
	,onceDebug: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "debug" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offDebug(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDebug == null) {
				this.__cbOnceOwnerUnbindDebug = [];
			}
			this.__cbOnceOwnerUnbindDebug.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDebug == null) {
				this.__cbOnceOwnerUnbindDebug = [];
			}
			this.__cbOnceOwnerUnbindDebug.push(null);
		}
		if(this.__cbOnceDebug == null) {
			this.__cbOnceDebug = [];
		}
		this.__cbOnceDebug.push(handleValuePos);
	}
	,offDebug: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnDebug != null) {
				index = this.__cbOnDebug.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnDebug.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDebug[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDebug.splice(index,1);
				}
			}
			if(this.__cbOnceDebug != null) {
				index = this.__cbOnceDebug.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceDebug.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDebug[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDebug.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDebug.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDebug[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDebug = null;
			}
			if(this.__cbOnceOwnerUnbindDebug != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDebug.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDebug[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDebug = null;
			}
			this.__cbOnDebug = null;
			this.__cbOnceDebug = null;
		}
	}
	,listensDebug: function() {
		if(!(this.__cbOnDebug != null && this.__cbOnDebug.length > 0)) {
			if(this.__cbOnceDebug != null) {
				return this.__cbOnceDebug.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnSuccess: null
	,__cbOnceSuccess: null
	,__cbOnOwnerUnbindSuccess: null
	,__cbOnceOwnerUnbindSuccess: null
	,emitSuccess: function(value,pos) {
		var len = 0;
		if(this.__cbOnSuccess != null) {
			len += this.__cbOnSuccess.length;
		}
		if(this.__cbOnceSuccess != null) {
			len += this.__cbOnceSuccess.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnSuccess.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSuccess[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSuccess != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSuccess.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSuccess[ii];
						this.__cbOnceSuccess[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSuccess[ii];
						this.__cbOnceOwnerUnbindSuccess[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSuccess[ii]);
						newCbOnceArray.push(this.__cbOnceSuccess[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSuccess = newCbOnceOwnerUnbindArray;
				this.__cbOnceSuccess = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSuccess: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "success" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offSuccess(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSuccess == null) {
				this.__cbOnOwnerUnbindSuccess = [];
			}
			this.__cbOnOwnerUnbindSuccess.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSuccess == null) {
				this.__cbOnOwnerUnbindSuccess = [];
			}
			this.__cbOnOwnerUnbindSuccess.push(null);
		}
		if(this.__cbOnSuccess == null) {
			this.__cbOnSuccess = [];
		}
		this.__cbOnSuccess.push(handleValuePos);
	}
	,onceSuccess: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "success" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offSuccess(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSuccess == null) {
				this.__cbOnceOwnerUnbindSuccess = [];
			}
			this.__cbOnceOwnerUnbindSuccess.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSuccess == null) {
				this.__cbOnceOwnerUnbindSuccess = [];
			}
			this.__cbOnceOwnerUnbindSuccess.push(null);
		}
		if(this.__cbOnceSuccess == null) {
			this.__cbOnceSuccess = [];
		}
		this.__cbOnceSuccess.push(handleValuePos);
	}
	,offSuccess: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnSuccess != null) {
				index = this.__cbOnSuccess.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnSuccess.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSuccess[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSuccess.splice(index,1);
				}
			}
			if(this.__cbOnceSuccess != null) {
				index = this.__cbOnceSuccess.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceSuccess.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSuccess[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSuccess.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSuccess.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSuccess[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSuccess = null;
			}
			if(this.__cbOnceOwnerUnbindSuccess != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSuccess.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSuccess[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSuccess = null;
			}
			this.__cbOnSuccess = null;
			this.__cbOnceSuccess = null;
		}
	}
	,listensSuccess: function() {
		if(!(this.__cbOnSuccess != null && this.__cbOnSuccess.length > 0)) {
			if(this.__cbOnceSuccess != null) {
				return this.__cbOnceSuccess.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnWarning: null
	,__cbOnceWarning: null
	,__cbOnOwnerUnbindWarning: null
	,__cbOnceOwnerUnbindWarning: null
	,emitWarning: function(value,pos) {
		var len = 0;
		if(this.__cbOnWarning != null) {
			len += this.__cbOnWarning.length;
		}
		if(this.__cbOnceWarning != null) {
			len += this.__cbOnceWarning.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnWarning.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnWarning[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceWarning != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceWarning.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceWarning[ii];
						this.__cbOnceWarning[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindWarning[ii];
						this.__cbOnceOwnerUnbindWarning[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindWarning[ii]);
						newCbOnceArray.push(this.__cbOnceWarning[ii]);
					}
				}
				this.__cbOnceOwnerUnbindWarning = newCbOnceOwnerUnbindArray;
				this.__cbOnceWarning = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWarning: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "warning" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offWarning(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWarning == null) {
				this.__cbOnOwnerUnbindWarning = [];
			}
			this.__cbOnOwnerUnbindWarning.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWarning == null) {
				this.__cbOnOwnerUnbindWarning = [];
			}
			this.__cbOnOwnerUnbindWarning.push(null);
		}
		if(this.__cbOnWarning == null) {
			this.__cbOnWarning = [];
		}
		this.__cbOnWarning.push(handleValuePos);
	}
	,onceWarning: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "warning" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offWarning(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWarning == null) {
				this.__cbOnceOwnerUnbindWarning = [];
			}
			this.__cbOnceOwnerUnbindWarning.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWarning == null) {
				this.__cbOnceOwnerUnbindWarning = [];
			}
			this.__cbOnceOwnerUnbindWarning.push(null);
		}
		if(this.__cbOnceWarning == null) {
			this.__cbOnceWarning = [];
		}
		this.__cbOnceWarning.push(handleValuePos);
	}
	,offWarning: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnWarning != null) {
				index = this.__cbOnWarning.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnWarning.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWarning[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWarning.splice(index,1);
				}
			}
			if(this.__cbOnceWarning != null) {
				index = this.__cbOnceWarning.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceWarning.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWarning[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWarning.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWarning.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWarning[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWarning = null;
			}
			if(this.__cbOnceOwnerUnbindWarning != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWarning.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWarning[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWarning = null;
			}
			this.__cbOnWarning = null;
			this.__cbOnceWarning = null;
		}
	}
	,listensWarning: function() {
		if(!(this.__cbOnWarning != null && this.__cbOnWarning.length > 0)) {
			if(this.__cbOnceWarning != null) {
				return this.__cbOnceWarning.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnError: null
	,__cbOnceError: null
	,__cbOnOwnerUnbindError: null
	,__cbOnceOwnerUnbindError: null
	,emitError: function(value,pos) {
		var len = 0;
		if(this.__cbOnError != null) {
			len += this.__cbOnError.length;
		}
		if(this.__cbOnceError != null) {
			len += this.__cbOnceError.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnError != null) {
				var _g = 0;
				var _g1 = this.__cbOnError.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnError[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceError != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceError.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceError[ii];
						this.__cbOnceError[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindError[ii];
						this.__cbOnceOwnerUnbindError[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindError[ii]);
						newCbOnceArray.push(this.__cbOnceError[ii]);
					}
				}
				this.__cbOnceOwnerUnbindError = newCbOnceOwnerUnbindArray;
				this.__cbOnceError = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,pos);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onError: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "error" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offError(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindError == null) {
				this.__cbOnOwnerUnbindError = [];
			}
			this.__cbOnOwnerUnbindError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindError == null) {
				this.__cbOnOwnerUnbindError = [];
			}
			this.__cbOnOwnerUnbindError.push(null);
		}
		if(this.__cbOnError == null) {
			this.__cbOnError = [];
		}
		this.__cbOnError.push(handleValuePos);
	}
	,onceError: function(owner,handleValuePos) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "error" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValuePos != null) {
					_gthis.offError(handleValuePos);
					handleValuePos = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindError == null) {
				this.__cbOnceOwnerUnbindError = [];
			}
			this.__cbOnceOwnerUnbindError.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValuePos = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindError == null) {
				this.__cbOnceOwnerUnbindError = [];
			}
			this.__cbOnceOwnerUnbindError.push(null);
		}
		if(this.__cbOnceError == null) {
			this.__cbOnceError = [];
		}
		this.__cbOnceError.push(handleValuePos);
	}
	,offError: function(handleValuePos) {
		if(handleValuePos != null) {
			var index;
			var unbind;
			if(this.__cbOnError != null) {
				index = this.__cbOnError.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnError.splice(index,1);
					unbind = this.__cbOnOwnerUnbindError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindError.splice(index,1);
				}
			}
			if(this.__cbOnceError != null) {
				index = this.__cbOnceError.indexOf(handleValuePos);
				if(index != -1) {
					this.__cbOnceError.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindError[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindError.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindError != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindError = null;
			}
			if(this.__cbOnceOwnerUnbindError != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindError.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindError[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindError = null;
			}
			this.__cbOnError = null;
			this.__cbOnceError = null;
		}
	}
	,listensError: function() {
		if(!(this.__cbOnError != null && this.__cbOnError.length > 0)) {
			if(this.__cbOnceError != null) {
				return this.__cbOnceError.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,indentPrefix: null
	,debug: function(value,pos) {
		var _gthis = this;
		this.emitDebug(value,pos);
		haxe_Log.trace(this.prefixLines("[debug] ",value),pos);
	}
	,info: function(value,pos) {
		var _gthis = this;
		this.emitInfo(value,pos);
		haxe_Log.trace(this.prefixLines("[info] ",value),pos);
	}
	,success: function(value,pos) {
		var _gthis = this;
		this.emitSuccess(value,pos);
		haxe_Log.trace(this.prefixLines("[success] ",value),pos);
	}
	,warning: function(value,pos) {
		var _gthis = this;
		this.emitWarning(value,pos);
		if(ceramic_Logger._hasElectronRunner) {
			haxe_Log.trace(this.prefixLines("[warning] ",value),pos);
		} else {
			console.warn(value);
		}
	}
	,error: function(value,pos) {
		var _gthis = this;
		this.emitError(value,pos);
		if(ceramic_Logger._hasElectronRunner) {
			haxe_Log.trace(this.prefixLines("[error] ",value),pos);
		} else {
			console.error(value);
		}
	}
	,pushIndent: function() {
		this.indentPrefix += "    ";
	}
	,popIndent: function() {
		this.indentPrefix = this.indentPrefix.substring(0,this.indentPrefix.length - 4);
	}
	,prefixLines: function(prefix,input) {
		var result = [];
		var _g = 0;
		var _g1 = Std.string(input).split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			result.push(prefix + this.indentPrefix + line);
		}
		return result.join("\n");
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offInfo();
		this.offDebug();
		this.offSuccess();
		this.offWarning();
		this.offError();
	}
	,__class__: ceramic_Logger
});
var ceramic_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["ceramic.Path"] = ceramic_Path;
ceramic_Path.__name__ = "ceramic.Path";
ceramic_Path.withoutExtension = function(path) {
	var s = new ceramic_Path(path);
	s.ext = null;
	return s.toString();
};
ceramic_Path.withoutDirectory = function(path) {
	var s = new ceramic_Path(path);
	s.dir = null;
	return s.toString();
};
ceramic_Path.directory = function(path) {
	var s = new ceramic_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
ceramic_Path.extension = function(path) {
	var s = new ceramic_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
ceramic_Path.withExtension = function(path,ext) {
	var s = new ceramic_Path(path);
	s.ext = ext;
	return s.toString();
};
ceramic_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = ceramic_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return ceramic_Path.normalize(path);
};
ceramic_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var doubleSlashIndex = -1;
	while(true) {
		doubleSlashIndex = tmp.indexOf("//");
		if(!(doubleSlashIndex != -1)) {
			break;
		}
		tmp = tmp.substring(0,doubleSlashIndex) + tmp.substring(doubleSlashIndex + 1);
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g = 0;
	var _g1 = tmp.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = tmp.charCodeAt(i);
		switch(_g2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i2);
		}
	}
	return acc_b;
};
ceramic_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
ceramic_Path.removeTrailingSlashes = function(path) {
	_hx_loop1: while(true) {
		var _g = HxOverrides.cca(path,path.length - 1);
		if(_g == null) {
			break;
		} else {
			switch(_g) {
			case 47:case 92:
				path = HxOverrides.substr(path,0,-1);
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	return path;
};
ceramic_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
ceramic_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: ceramic_Path
};
var ceramic_PersistentData = function(id) {
	this.id = id;
	var rawData = ceramic_App.app.backend.io.readString("persistent_" + id);
	if(rawData != null) {
		try {
			var unserializer = new haxe_Unserializer(rawData);
			this.internalData = unserializer.unserialize();
		} catch( _g ) {
			ceramic_App.app.logger.warning("Failed to read persistent data with id " + id,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\PersistentData.hx", lineNumber : 22, className : "ceramic.PersistentData", methodName : "new"});
		}
	}
	if(this.internalData == null) {
		this.internalData = { };
	}
};
$hxClasses["ceramic.PersistentData"] = ceramic_PersistentData;
ceramic_PersistentData.__name__ = "ceramic.PersistentData";
ceramic_PersistentData.prototype = {
	internalData: null
	,id: null
	,get: function(key) {
		return this.internalData[key];
	}
	,set: function(key,value) {
		this.internalData[key] = value;
	}
	,remove: function(key) {
		Reflect.deleteField(this.internalData,key);
	}
	,clear: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.internalData);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			Reflect.deleteField(this.internalData,key);
		}
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.internalData,key);
	}
	,keys: function() {
		return Reflect.fields(this.internalData);
	}
	,save: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this.internalData);
		var rawData = serializer.toString();
		ceramic_App.app.backend.io.saveString("persistent_" + this.id,rawData);
	}
	,__class__: ceramic_PersistentData
};
var ceramic_Pixels = function() { };
$hxClasses["ceramic.Pixels"] = ceramic_Pixels;
ceramic_Pixels.__name__ = "ceramic.Pixels";
ceramic_Pixels.copy = function(srcBuffer,srcBufferWidth,dstBuffer,dstBufferWidth,srcX,srcY,srcWidth,srcHeight,dstX,dstY,copyRed,copyGreen,copyBlue,copyAlpha) {
	if(copyAlpha == null) {
		copyAlpha = true;
	}
	if(copyBlue == null) {
		copyBlue = true;
	}
	if(copyGreen == null) {
		copyGreen = true;
	}
	if(copyRed == null) {
		copyRed = true;
	}
	var right = srcX + srcWidth;
	var bottom = srcY + srcHeight;
	var x0 = srcX;
	var y0 = srcY;
	var x1 = dstX;
	var y1 = dstY;
	while(y0 < bottom) {
		var yIndex0 = y0 * srcBufferWidth;
		var yIndex1 = y1 * dstBufferWidth;
		while(x0 < right) {
			var index0 = (yIndex0 + x0) * 4;
			var index1 = (yIndex1 + x1) * 4;
			if(copyRed) {
				dstBuffer[index1] = srcBuffer[index0];
			}
			++index0;
			++index1;
			if(copyGreen) {
				dstBuffer[index1] = srcBuffer[index0];
			}
			++index0;
			++index1;
			if(copyBlue) {
				dstBuffer[index1] = srcBuffer[index0];
			}
			++index0;
			++index1;
			if(copyAlpha) {
				dstBuffer[index1] = srcBuffer[index0];
			}
			++index0;
			++index1;
			++x0;
			++x1;
		}
		++y0;
		++y1;
		x0 = srcX;
		x1 = dstX;
	}
};
ceramic_Pixels.create = function(width,height,fillColor) {
	var buffer = new Uint8Array(width * height * 4);
	var _g = 0;
	var _g1 = width * height;
	while(_g < _g1) {
		var i = _g++;
		var n = i * 4;
		buffer[n] = fillColor >> 16 & 255;
		++n;
		buffer[n] = fillColor >> 8 & 255;
		++n;
		buffer[n] = fillColor & 255;
		++n;
		buffer[n] = fillColor >> 24 & 255;
	}
	return buffer;
};
ceramic_Pixels.fromBytes = function(bytes) {
	var byteOffset = null;
	var len = null;
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	} else if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	} else {
		return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
	}
};
ceramic_Pixels.get = function(buffer,bufferWidth,x,y) {
	var index = (y * bufferWidth + x) * 4;
	var red = buffer[index];
	var green = buffer[index + 1];
	var blue = buffer[index + 2];
	var color = 0;
	color &= 65535;
	color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
	color &= 16711935;
	color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
	color &= 16776960;
	color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
	var alpha = buffer[index + 3];
	if(alpha == null) {
		alpha = 255;
	}
	var value = (color | 0) + (-16777216);
	value &= 16777215;
	value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	return value;
};
ceramic_Pixels.set = function(buffer,bufferWidth,x,y,color) {
	var index = (y * bufferWidth + x) * 4;
	buffer[index] = color >> 16 & 255;
	buffer[index + 1] = color >> 8 & 255;
	buffer[index + 2] = color & 255;
	buffer[index + 3] = color >> 24 & 255;
};
ceramic_Pixels.setRectangle = function(buffer,bufferWidth,x,y,width,height,color) {
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var rectangleX = _g++;
		var _g2 = 0;
		var _g3 = height;
		while(_g2 < _g3) {
			var rectangleY = _g2++;
			var index = ((y + rectangleY) * bufferWidth + (x + rectangleX)) * 4;
			buffer[index] = color >> 16 & 255;
			buffer[index + 1] = color >> 8 & 255;
			buffer[index + 2] = color & 255;
			buffer[index + 3] = color >> 24 & 255;
		}
	}
};
ceramic_Pixels._pixelsToPng = function(width,height,pixels,path,done) {
	ceramic_App.app.backend.textures.pixelsToPng(width,height,pixels,path,done);
};
ceramic_Pixels.rgbaPixelsToRgbPixels = function(width,height,inPixels,outPixels) {
	var rgbLength = width * height * 3;
	if(outPixels == null) {
		outPixels = new Uint8Array(rgbLength);
	} else if(outPixels.length != rgbLength) {
		ceramic_App.app.logger.warning("Not reusing outPixels because its length (" + outPixels.length + ") does not match the required one: " + rgbLength + ". Creating a new buffer.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Pixels.hx", lineNumber : 240, className : "ceramic.Pixels", methodName : "rgbaPixelsToRgbPixels"});
		outPixels = new Uint8Array(rgbLength);
	}
	var _g = 0;
	var _g1 = width * height;
	while(_g < _g1) {
		var i = _g++;
		var nRgb = i * 3;
		var nRgba = i * 4;
		outPixels[nRgb] = inPixels[nRgba];
		++nRgb;
		++nRgba;
		outPixels[nRgb] = inPixels[nRgba];
		++nRgb;
		++nRgba;
		outPixels[nRgb] = inPixels[nRgba];
	}
	return outPixels;
};
ceramic_Pixels.rgbPixelsToRgbaPixels = function(width,height,alpha,inPixels,outPixels) {
	if(alpha == null) {
		alpha = 255;
	}
	var rgbaLength = width * height * 4;
	if(outPixels == null) {
		outPixels = new Uint8Array(rgbaLength);
	} else if(outPixels.length != rgbaLength) {
		ceramic_App.app.logger.warning("Not reusing outPixels because its length (" + outPixels.length + ") does not match the required one: " + rgbaLength + ". Creating a new buffer.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Pixels.hx", lineNumber : 275, className : "ceramic.Pixels", methodName : "rgbPixelsToRgbaPixels"});
		outPixels = new Uint8Array(rgbaLength);
	}
	var _g = 0;
	var _g1 = width * height;
	while(_g < _g1) {
		var i = _g++;
		var nRgb = i * 3;
		var nRgba = i * 4;
		outPixels[nRgba] = inPixels[nRgb];
		++nRgb;
		++nRgba;
		outPixels[nRgba] = inPixels[nRgb];
		++nRgb;
		++nRgba;
		outPixels[nRgba] = inPixels[nRgb];
		++nRgba;
		outPixels[nRgba] = alpha;
	}
	return outPixels;
};
ceramic_Pixels.mixPixelsBuffers = function(inPixelsList,middleFactor,outPixels) {
	if(middleFactor == null) {
		middleFactor = 1;
	}
	if(inPixelsList.length <= 0) {
		ceramic_App.app.logger.error("inPixelsList.length > 0" + (" (" + "There should be at least one pixels buffer to mix" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Pixels.hx", lineNumber : 305, className : "ceramic.Pixels", methodName : "mixPixelsBuffers"});
		throw haxe_Exception.thrown("inPixelsList.length > 0" + (" (" + "There should be at least one pixels buffer to mix" + ")"));
	}
	var numBuffers = inPixelsList.length;
	var length = inPixelsList[0].length;
	if(outPixels == null) {
		outPixels = new Uint8Array(length);
	}
	var weight = 0;
	var factors = [];
	var factor = 1;
	var i = 0;
	var half = Math.ceil(numBuffers * 0.5);
	while(i < half) {
		factors[i] = factor;
		weight += factor;
		factor *= middleFactor;
		++i;
	}
	i = numBuffers - 1;
	factor = 1;
	while(i >= half) {
		factors[i] = factor;
		weight += factor;
		factor *= middleFactor;
		--i;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var total = 0;
		var _g2 = 0;
		var _g3 = numBuffers;
		while(_g2 < _g3) {
			var n = _g2++;
			total += inPixelsList[n][i] * factors[n];
		}
		outPixels[i] = Math.round(total / weight);
	}
	return outPixels;
};
ceramic_Pixels.flipY = function(buffer,bufferWidth) {
	var bufferHeight = buffer.length / (bufferWidth * 4) | 0;
	var halfHeight = bufferHeight * 0.5 | 0;
	var index0 = 0;
	var index1 = 0;
	var r = 0;
	var g = 0;
	var b = 0;
	var a = 0;
	var _g = 0;
	var _g1 = halfHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = bufferWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			index0 = (y * bufferWidth + x) * 4;
			index1 = ((bufferHeight - 1 - y) * bufferWidth + x) * 4;
			r = buffer[index0];
			g = buffer[index0 + 1];
			b = buffer[index0 + 2];
			a = buffer[index0 + 3];
			buffer[index0] = buffer[index1];
			buffer[index0 + 1] = buffer[index1 + 1];
			buffer[index0 + 2] = buffer[index1 + 2];
			buffer[index0 + 3] = buffer[index1 + 3];
			buffer[index1] = r;
			buffer[index1 + 1] = g;
			buffer[index1 + 2] = b;
			buffer[index1 + 3] = a;
		}
	}
};
ceramic_Pixels.flipX = function(buffer,bufferWidth) {
	var bufferHeight = buffer.length / (bufferWidth * 4) | 0;
	var halfWidth = bufferWidth * 0.5 | 0;
	var index0 = 0;
	var index1 = 0;
	var r = 0;
	var g = 0;
	var b = 0;
	var a = 0;
	var _g = 0;
	var _g1 = bufferHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = halfWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			index0 = (y * bufferWidth + x) * 4;
			index1 = (y * bufferWidth + bufferWidth - 1 - x) * 4;
			r = buffer[index0];
			g = buffer[index0 + 1];
			b = buffer[index0 + 2];
			a = buffer[index0 + 3];
			buffer[index0] = buffer[index1];
			buffer[index0 + 1] = buffer[index1 + 1];
			buffer[index0 + 2] = buffer[index1 + 2];
			buffer[index0 + 3] = buffer[index1 + 3];
			buffer[index1] = r;
			buffer[index1 + 1] = g;
			buffer[index1 + 2] = b;
			buffer[index1 + 3] = a;
		}
	}
};
var ceramic_PlatformSpecific = function() { };
$hxClasses["ceramic.PlatformSpecific"] = ceramic_PlatformSpecific;
ceramic_PlatformSpecific.__name__ = "ceramic.PlatformSpecific";
ceramic_PlatformSpecific.postAppInit = function() {
};
ceramic_PlatformSpecific.readStringFromAsset = function(assetPath) {
	return null;
};
ceramic_PlatformSpecific.readBytesFromAsset = function(assetPath) {
	return null;
};
ceramic_PlatformSpecific.getAssetsPath = function() {
	return null;
};
ceramic_PlatformSpecific.getRtti = function(c) {
	return haxe_rtti_Rtti.getRtti(c);
};
ceramic_PlatformSpecific.resolveElectron = function() {
	if(!ceramic_PlatformSpecific.testedElectronAvailability) {
		ceramic_PlatformSpecific.testedElectronAvailability = true;
		try {
			ceramic_PlatformSpecific.electron = require('electron');
		} catch( _g ) {
		}
	}
	return ceramic_PlatformSpecific.electron;
};
ceramic_PlatformSpecific.nodeRequire = function(module) {
	if(!ceramic_PlatformSpecific.testedElectronAvailability) {
		ceramic_PlatformSpecific.testedElectronAvailability = true;
		try {
			ceramic_PlatformSpecific.electron = require('electron');
		} catch( _g ) {
		}
	}
	if(ceramic_PlatformSpecific.electron != null) {
		var required = ceramic_PlatformSpecific.electron.remote.require(module);
		return required;
	} else {
		return null;
	}
};
ceramic_PlatformSpecific.electronRemote = function() {
	if(!ceramic_PlatformSpecific.testedElectronAvailability) {
		ceramic_PlatformSpecific.testedElectronAvailability = true;
		try {
			ceramic_PlatformSpecific.electron = require('electron');
		} catch( _g ) {
		}
	}
	if(ceramic_PlatformSpecific.electron != null) {
		return ceramic_PlatformSpecific.electron.remote;
	} else {
		return null;
	}
};
ceramic_PlatformSpecific.quit = function() {
	clay_Clay.app.shutdown();
	var remote = ceramic_PlatformSpecific.electronRemote();
	if(remote != null) {
		var $window = remote.getCurrentWindow();
		if($window != null) {
			$window.close();
		}
	}
};
var ceramic_PremultiplyAlpha = function() { };
$hxClasses["ceramic.PremultiplyAlpha"] = ceramic_PremultiplyAlpha;
ceramic_PremultiplyAlpha.__name__ = "ceramic.PremultiplyAlpha";
ceramic_PremultiplyAlpha.premultiplyAlpha = function(pixels) {
	var count = pixels.length;
	var index = 0;
	while(index < count) {
		var r = pixels[index];
		var g = pixels[index + 1];
		var b = pixels[index + 2];
		var a = pixels[index + 3] / 255.0;
		pixels[index] = r * a | 0;
		pixels[index + 1] = g * a | 0;
		pixels[index + 2] = b * a | 0;
		index += 4;
	}
};
ceramic_PremultiplyAlpha.reversePremultiplyAlpha = function(pixels) {
	var count = pixels.length;
	var index = 0;
	while(index < count) {
		var r = pixels[index];
		var g = pixels[index + 1];
		var b = pixels[index + 2];
		var a = pixels[index + 3] / 255.0;
		if(a > 0) {
			pixels[index] = r / a | 0;
			pixels[index + 1] = g / a | 0;
			pixels[index + 2] = b / a | 0;
		}
		index += 4;
	}
};
var ceramic_ReadOnlyArray = {};
ceramic_ReadOnlyArray.__properties__ = {get_length:"get_length",get_original:"get_original"};
ceramic_ReadOnlyArray.get_original = function(this1) {
	return this1;
};
ceramic_ReadOnlyArray.get_length = function(this1) {
	return this1.length;
};
ceramic_ReadOnlyArray.unsafeGet = function(this1,index) {
	return this1[index];
};
var ceramic_ReadOnlyMap = {};
ceramic_ReadOnlyMap.__properties__ = {get_original:"get_original"};
ceramic_ReadOnlyMap.get_original = function(this1) {
	return this1;
};
ceramic_ReadOnlyMap.iterator = function(this1) {
	return this1.iterator();
};
ceramic_ReadOnlyMap.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
var ceramic_Texture = function(backendItem,density) {
	if(density == null) {
		density = -1;
	}
	this.asset = null;
	this.wrapT = 0;
	this.wrapS = 0;
	this.filter = ceramic_TextureFilter.LINEAR;
	this.asRenderTexture = null;
	this.isRenderTexture = false;
	this.index = ceramic_Texture._nextIndex++;
	ceramic_Entity.call(this);
	if(density == -1) {
		density = ceramic_App.app.screen.get_texturesDensity();
	}
	this.backendItem = backendItem;
	this.set_density(density);
};
$hxClasses["ceramic.Texture"] = ceramic_Texture;
ceramic_Texture.__name__ = "ceramic.Texture";
ceramic_Texture.fromPixels = function(width,height,pixels,density) {
	if(density == null) {
		density = 1;
	}
	var backendItem = ceramic_App.app.backend.textures.createTexture(Math.round(width * density),Math.round(height * density),pixels);
	return new ceramic_Texture(backendItem,density);
};
ceramic_Texture.fromBytes = function(bytes,density,options,done) {
	if(density == null) {
		density = 1;
	}
	ceramic_App.app.backend.textures.loadFromBytes(bytes,ceramic_Utils.imageTypeFromBytes(bytes),options,function(backendItem) {
		done(new ceramic_Texture(backendItem,density));
	});
};
ceramic_Texture.__super__ = ceramic_Entity;
ceramic_Texture.prototype = $extend(ceramic_Entity.prototype,{
	index: null
	,isRenderTexture: null
	,asRenderTexture: null
	,get_textureId: function() {
		return this.backendItem.textureId;
	}
	,get_nativeWidth: function() {
		return this.backendItem.width;
	}
	,get_nativeHeight: function() {
		return this.backendItem.height;
	}
	,get_nativeWidthActual: function() {
		return this.backendItem.widthActual;
	}
	,get_nativeHeightActual: function() {
		return this.backendItem.heightActual;
	}
	,width: null
	,height: null
	,density: null
	,set_density: function(density) {
		if(this.density == density) {
			return density;
		}
		this.density = density;
		this.width = this.backendItem.width / density;
		this.height = this.backendItem.height / density;
		return density;
	}
	,filter: null
	,set_filter: function(filter) {
		if(this.filter == filter) {
			return filter;
		}
		this.filter = filter;
		var _this = ceramic_App.app.backend.textures;
		var texture = this.backendItem;
		switch(filter._hx_index) {
		case 0:
			texture.set_filterMin(9729);
			texture.set_filterMag(9729);
			break;
		case 1:
			texture.set_filterMin(9728);
			texture.set_filterMag(9728);
			break;
		}
		return filter;
	}
	,wrapS: null
	,set_wrapS: function(wrapS) {
		if(this.wrapS == wrapS) {
			return wrapS;
		}
		this.wrapS = wrapS;
		var _this = ceramic_App.app.backend.textures;
		var texture = this.backendItem;
		switch(wrapS) {
		case 0:
			texture.set_wrapS(33071);
			break;
		case 1:
			texture.set_wrapS(10497);
			break;
		case 2:
			texture.set_wrapS(33648);
			break;
		}
		return wrapS;
	}
	,wrapT: null
	,set_wrapT: function(wrapT) {
		if(this.wrapT == wrapT) {
			return wrapT;
		}
		this.wrapT = wrapT;
		var _this = ceramic_App.app.backend.textures;
		var texture = this.backendItem;
		switch(wrapT) {
		case 0:
			texture.set_wrapT(33071);
			break;
		case 1:
			texture.set_wrapT(10497);
			break;
		case 2:
			texture.set_wrapT(33648);
			break;
		}
		return wrapT;
	}
	,setWrap: function(wrapS,wrapT) {
		this.set_wrapS(wrapS);
		if(wrapT != null) {
			this.set_wrapT(wrapT);
		}
	}
	,backendItem: null
	,asset: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		ceramic_App.app.backend.textures.destroyTexture(this.backendItem);
		this.backendItem = null;
	}
	,fetchPixels: function(result) {
		return ceramic_App.app.backend.textures.fetchTexturePixels(this.backendItem,result);
	}
	,submitPixels: function(pixels) {
		ceramic_App.app.backend.textures.submitTexturePixels(this.backendItem,pixels);
	}
	,_toPng: function(path,reversePremultiplyAlpha,done) {
		if(reversePremultiplyAlpha == null) {
			reversePremultiplyAlpha = true;
		}
		ceramic_App.app.backend.textures.textureToPng(this.backendItem,reversePremultiplyAlpha,path,done);
	}
	,toString: function() {
		if(this.id != null) {
			var name = this.id;
			if(StringTools.startsWith(name,"texture:")) {
				name = HxOverrides.substr(name,8,null);
			}
			return "Texture(" + name + " " + this.width + " " + this.height + " " + this.density + " #" + this.index + ")";
		} else {
			return "Texture(" + this.width + " " + this.height + " " + this.density + " #" + this.index + ")";
		}
	}
	,__class__: ceramic_Texture
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_wrapT:"set_wrapT",set_wrapS:"set_wrapS",set_filter:"set_filter",set_density:"set_density",get_nativeHeightActual:"get_nativeHeightActual",get_nativeWidthActual:"get_nativeWidthActual",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_textureId:"get_textureId"})
});
var ceramic_RenderTexture = function(width,height,density,depth,stencil,antialiasing) {
	if(antialiasing == null) {
		antialiasing = 0;
	}
	if(stencil == null) {
		stencil = true;
	}
	if(depth == null) {
		depth = true;
	}
	if(density == null) {
		density = -1;
	}
	this._initialClearQuad = null;
	this._renderedOnce = false;
	this._usedInRendering = false;
	this.priority = 0;
	this.dependingTextures = null;
	this.antialiasing = 0;
	this.stencil = true;
	this.depth = true;
	this.renderDirty = false;
	this.clearOnRender = true;
	this.autoRender = true;
	if(density == -1) {
		density = ceramic_App.app.screen.get_texturesDensity();
	}
	this.depth = depth;
	this.stencil = stencil;
	this.antialiasing = antialiasing;
	var _this = ceramic_App.app.backend.textures;
	var width1 = Math.round(width * density);
	var height1 = Math.round(height * density);
	var id = "render:" + _this.nextRenderIndex++;
	var webglVersion = clay_Clay.app.runtime.webglVersion;
	var renderTexture = new clay_graphics_RenderTexture();
	renderTexture.id = id;
	renderTexture.width = width1;
	renderTexture.height = height1;
	renderTexture.depth = depth;
	renderTexture.stencil = stencil;
	renderTexture.antialiasing = webglVersion >= 2 ? antialiasing : 0;
	renderTexture.init();
	_this.loadedTexturesRetainCount.h[id] = 1;
	var backendItem = renderTexture;
	ceramic_Texture.call(this,backendItem,density);
	this.isRenderTexture = true;
	this.asRenderTexture = this;
	ceramic_App.app.renderTextures.push(this);
	this._initialClearQuad = new ceramic_Quad();
	var _this = this._initialClearQuad;
	_this.set_x(0);
	_this.set_y(0);
	var _this = this._initialClearQuad;
	_this.set_width(0);
	_this.set_height(0);
	var _this = this._initialClearQuad;
	_this.flags &= -17;
	this._initialClearQuad.set_renderTarget(this);
	this.renderDirty = true;
};
$hxClasses["ceramic.RenderTexture"] = ceramic_RenderTexture;
ceramic_RenderTexture.__name__ = "ceramic.RenderTexture";
ceramic_RenderTexture.__super__ = ceramic_Texture;
ceramic_RenderTexture.prototype = $extend(ceramic_Texture.prototype,{
	autoRender: null
	,clearOnRender: null
	,renderDirty: null
	,depth: null
	,stencil: null
	,antialiasing: null
	,dependingTextures: null
	,priority: null
	,_usedInRendering: null
	,_renderedOnce: null
	,set__renderedOnce: function(_renderedOnce) {
		this._renderedOnce = _renderedOnce;
		if(_renderedOnce && this._initialClearQuad != null) {
			this._initialClearQuad.destroy();
			this._initialClearQuad = null;
		}
		return _renderedOnce;
	}
	,_initialClearQuad: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Texture.prototype.destroy.call(this);
		if(this._initialClearQuad != null) {
			this._initialClearQuad.destroy();
			this._initialClearQuad = null;
		}
		HxOverrides.remove(ceramic_App.app.renderTextures,this);
	}
	,stamp: function(visual,done) {
		this._stamp(visual,done);
	}
	,_stamp: function(visual,done) {
		var _gthis = this;
		var visualParent = visual.parent;
		var visualRenderTarget = visual.renderTarget;
		var visualVisible = visual.visible;
		if(visualParent != null) {
			visualParent.remove(visual);
		}
		visual.set_renderTarget(this);
		visual.set_visible(true);
		ceramic_App.app.oncePreUpdate(this,function(_) {
			_gthis.renderDirty = true;
			ceramic_App.app.onceFinishDraw(_gthis,function() {
				visual.set_visible(visualVisible);
				visual.set_renderTarget(visualRenderTarget);
				if(visualParent != null) {
					visualParent.add(visual);
					visualParent = null;
				}
				visual = null;
				visualRenderTarget = null;
				done();
				done = null;
			});
		});
	}
	,clear: function(color,alpha,clipX,clipY,clipWidth,clipHeight,done) {
		if(clipHeight == null) {
			clipHeight = -1;
		}
		if(clipWidth == null) {
			clipWidth = -1;
		}
		if(clipY == null) {
			clipY = -1;
		}
		if(clipX == null) {
			clipX = -1;
		}
		if(alpha == null) {
			alpha = 0;
		}
		if(color == null) {
			color = 16777215;
		}
		if(ceramic_RenderTexture._clearQuad == null) {
			ceramic_RenderTexture._clearQuad = new ceramic_Quad();
			ceramic_RenderTexture._clearQuad.set_active(false);
			ceramic_RenderTexture._clearQuad.set_blending(4);
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_anchorX(0);
			_this.set_anchorY(0);
		}
		ceramic_RenderTexture._clearQuad.color = color;
		ceramic_RenderTexture._clearQuad.set_alpha(alpha);
		ceramic_RenderTexture._clearQuad.set_depth(-1);
		if(clipX != -1 && clipY != -1 && clipWidth != -1 && clipHeight != -1) {
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_width(clipWidth);
			_this.set_height(clipHeight);
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_x(clipX);
			_this.set_y(clipY);
		} else {
			var _this = ceramic_RenderTexture._clearQuad;
			var height = this.height;
			_this.set_width(this.width);
			_this.set_height(height);
			var _this = ceramic_RenderTexture._clearQuad;
			_this.set_x(0);
			_this.set_y(0);
		}
		this.stamp(ceramic_RenderTexture._clearQuad,done);
	}
	,dependsOnTexture: function(texture) {
		if(this.dependingTextures != null) {
			var value = this.dependingTextures.intMap.h[texture.index | 0];
			return (value != null ? value : 0) > 0;
		} else {
			return false;
		}
	}
	,dependsOnTextureCount: function(texture) {
		if(this.dependingTextures != null) {
			var value = this.dependingTextures.intMap.h[texture.index | 0];
			if(value != null) {
				return value;
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	}
	,incrementDependingTextureCount: function(texture) {
		if(this.dependingTextures == null) {
			this.dependingTextures = new ceramic_IntIntMap();
		}
		var value = this.dependingTextures.intMap.h[texture.index | 0];
		var prevValue = value != null ? value : 0;
		this.dependingTextures.set(texture.index,prevValue + 1);
	}
	,resetDependingTextureCounts: function() {
		if(this.dependingTextures != null) {
			this.dependingTextures.clear();
		}
	}
	,toString: function() {
		if(this.id != null) {
			var name = this.id;
			if(StringTools.startsWith(name,"texture:")) {
				name = HxOverrides.substr(name,8,null);
			}
			return "RenderTexture(" + name + " " + this.width + " " + this.height + " " + this.density + " #" + this.index + "/" + this.priority + ")";
		} else {
			return "RenderTexture(" + this.width + " " + this.height + " " + this.density + " #" + this.index + "/" + this.priority + ")";
		}
	}
	,__class__: ceramic_RenderTexture
	,__properties__: $extend(ceramic_Texture.prototype.__properties__,{set__renderedOnce:"set__renderedOnce"})
});
var ceramic_Renderer = function() {
	this.usedRenderTarget = null;
	this.activeShaderCanBatchMultipleTextures = false;
	this.maxUsableTexturesInBatch = -1;
	this.usedTextures = 0;
	this.usedTextureIndexes = [];
	this.z = 0;
	this.stateDirty = true;
	this.mesh = null;
	this.quad = null;
	this.defaultWhiteTexture = null;
	this.defaultTexturedShader = null;
	this.texHeightActual = 0;
	this.texWidthActual = 0;
	this.texHeight = 0;
	this.texWidth = 0;
	this.activeTextureSlot = 0;
	this.lastClipIsRegular = false;
	this.lastClip = null;
	this.lastComputedBlending = 1;
	this.lastRenderTarget = null;
	this.lastShader = null;
	this.lastTextureId = backend_TextureId.DEFAULT;
	this.lastTexture = null;
	this.stencilClip = false;
	this.customFloatAttributesSize = 0;
	this.activeShader = null;
	this.drawCalls = 0;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Renderer"] = ceramic_Renderer;
ceramic_Renderer.__name__ = "ceramic.Renderer";
ceramic_Renderer.__super__ = ceramic_Entity;
ceramic_Renderer.prototype = $extend(ceramic_Entity.prototype,{
	drawCalls: null
	,activeShader: null
	,customFloatAttributesSize: null
	,stencilClip: null
	,lastTexture: null
	,lastTextureId: null
	,lastShader: null
	,lastRenderTarget: null
	,lastComputedBlending: null
	,lastClip: null
	,lastClipIsRegular: null
	,activeTextureSlot: null
	,backendTextures: null
	,backendShaders: null
	,texWidth: null
	,texHeight: null
	,texWidthActual: null
	,texHeightActual: null
	,defaultTexturedShader: null
	,defaultWhiteTexture: null
	,quad: null
	,mesh: null
	,stateDirty: null
	,z: null
	,usedTextureIndexes: null
	,usedTextures: null
	,maxUsableTexturesInBatch: null
	,activeShaderCanBatchMultipleTextures: null
	,usedRenderTarget: null
	,render: function(isMainRender,ceramicVisuals) {
		var draw = ceramic_App.app.backend.draw;
		this.backendTextures = ceramic_App.app.backend.textures;
		this.backendShaders = ceramic_App.app.backend.shaders;
		this.defaultTexturedShader = ceramic_App.app.defaultTexturedShader.backendItem;
		this.defaultWhiteTexture = ceramic_App.app.defaultWhiteTexture;
		this.maxUsableTexturesInBatch = Math.min(this.backendTextures.maxTexturesByBatch(),this.backendShaders.maxIfStatementsByFragmentShader()) | 0;
		while(this.usedTextureIndexes.length < this.maxUsableTexturesInBatch) this.usedTextureIndexes.push(0);
		this.usedRenderTarget = null;
		this.drawCalls = 0;
		backend_Draw._activeTextureSlot = 0;
		backend_Draw._buffersIndex = -1;
		draw.prepareNextBuffers();
		this.quad = null;
		this.mesh = null;
		this.lastTexture = null;
		this.lastTextureId = backend_TextureId.DEFAULT;
		this.lastShader = null;
		this.lastRenderTarget = null;
		this.lastComputedBlending = 1;
		this.lastClip = null;
		this.usedTextures = 0;
		this.texWidth = 0;
		this.texHeight = 0;
		this.texWidthActual = 0;
		this.texHeightActual = 0;
		this.stencilClip = false;
		this.z = 0;
		this.stateDirty = true;
		var defaultTexturedShader = ceramic_App.app.defaultTexturedShader.backendItem;
		var allRenderTextures = ceramic_App.app.renderTextures;
		var _g = 0;
		var _g1 = allRenderTextures.length;
		while(_g < _g1) {
			var ii = _g++;
			var renderTexture = allRenderTextures[ii];
			renderTexture._usedInRendering = false;
			if(renderTexture.autoRender) {
				renderTexture.renderDirty = true;
			}
		}
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
		this.usedTextures = this.maxUsableTexturesInBatch;
		this.unbindUsedTextures(draw);
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		draw.setRenderTarget(null,true);
		var background = ceramic_App.app.settings.get_background();
		clay_opengl_web_GL.gl.clearColor((background >> 16 & 255) / 255,(background >> 8 & 255) / 255,(background & 255) / 255,1);
		if(clay_Clay.app.config.render.depth > 0) {
			clay_opengl_web_GL.gl.clear(16640);
			clay_opengl_web_GL.gl.clearDepth(1.0);
		} else {
			clay_opengl_web_GL.gl.clear(16384);
		}
		if(backend_Draw._currentRenderTarget != null) {
			backend_Draw._didUpdateCurrentRenderTarget = true;
		}
		clay_opengl_web_GL.gl.enable(3042);
		this.activeShader = null;
		this.lastShader = null;
		this.useShader(draw,null);
		clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
		this.lastComputedBlending = 1;
		clay_opengl_web_GL.gl.stencilFunc(519,1,255);
		clay_opengl_web_GL.gl.stencilMask(255);
		clay_opengl_web_GL.gl.colorMask(true,true,true,true);
		clay_opengl_web_GL.gl.disable(2960);
		if(ceramicVisuals != null) {
			var _g = 0;
			var _g1 = ceramicVisuals.length;
			while(_g < _g1) {
				var ii = _g++;
				var visual = ceramicVisuals[ii];
				var quad = visual.asQuad;
				var mesh = visual.asMesh;
				if(visual.computedVisible) {
					if(visual.computedRenderTarget == null || visual.computedRenderTarget.renderDirty) {
						var clip = visual.computedClip;
						if(clip != this.lastClip) {
							this.flush(draw);
							this.unbindUsedTextures(draw);
							this.stateDirty = true;
							if(this.lastClip != null) {
								if(this.lastClipIsRegular) {
									clay_opengl_web_GL.gl.disable(3089);
								} else {
									this.lastRenderTarget = this.lastClip.computedRenderTarget;
									this.useRenderTarget(draw,this.lastRenderTarget);
									clay_opengl_web_GL.gl.stencilFunc(519,1,255);
									clay_opengl_web_GL.gl.stencilMask(255);
									clay_opengl_web_GL.gl.colorMask(true,true,true,true);
									clay_opengl_web_GL.gl.disable(2960);
								}
							}
							this.lastClip = clip;
							if(this.lastClip != null) {
								this.lastRenderTarget = this.lastClip.computedRenderTarget;
								this.useRenderTarget(draw,this.lastRenderTarget);
								if(this.lastClip.asQuad != null && this.lastClip.asQuad.isRegular()) {
									this.lastClipIsRegular = true;
									this.scissorWithQuad(draw,this.lastClip.asQuad);
								} else {
									this.lastClipIsRegular = false;
									backend_Draw._drawingInStencilBuffer = true;
									clay_opengl_web_GL.gl.stencilMask(255);
									clay_opengl_web_GL.gl.clearStencil(255);
									clay_opengl_web_GL.gl.clear(1024);
									clay_opengl_web_GL.gl.enable(2960);
									clay_opengl_web_GL.gl.stencilOp(7680,7680,7681);
									clay_opengl_web_GL.gl.stencilFunc(519,1,255);
									clay_opengl_web_GL.gl.stencilMask(255);
									clay_opengl_web_GL.gl.colorMask(false,false,false,false);
									if(this.lastClip.asQuad != null) {
										quad = this.lastClip.asQuad;
										this.stencilClip = true;
										this.drawQuad(draw,quad);
										this.stencilClip = false;
										quad = visual.asQuad;
									} else if(this.lastClip.asMesh != null) {
										mesh = this.lastClip.asMesh;
										this.stencilClip = true;
										this.drawMesh(draw,mesh);
										this.stencilClip = false;
										mesh = visual.asMesh;
									}
									this.flush(draw);
									this.unbindUsedTextures(draw);
									this.stateDirty = true;
									backend_Draw._drawingInStencilBuffer = false;
									clay_opengl_web_GL.gl.stencilFunc(514,1,255);
									clay_opengl_web_GL.gl.stencilMask(0);
									clay_opengl_web_GL.gl.colorMask(true,true,true,true);
									clay_opengl_web_GL.gl.enable(2960);
								}
							}
						}
						if(quad != null && (quad.flags & 16) != 16) {
							this.drawQuad(draw,quad);
						} else if(mesh != null) {
							this.drawMesh(draw,mesh);
						}
					}
				}
			}
			this.flush(draw);
			this.unbindUsedTextures(draw);
			this.stateDirty = true;
		}
		var allRenderTextures = ceramic_App.app.renderTextures;
		var _g = 0;
		var _g1 = allRenderTextures.length;
		while(_g < _g1) {
			var ii = _g++;
			var renderTexture = allRenderTextures[ii];
			renderTexture.renderDirty = false;
		}
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		draw.setRenderTarget(null,true);
		clay_opengl_web_GL.gl.enable(3042);
		this.activeShader = null;
		this.lastShader = null;
		this.useShader(draw,null);
		clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
	}
	,drawQuad: function(draw,quad) {
		var _gthis = this;
		if(this.stencilClip) {
			this.unbindUsedTextures(draw);
			this.useFirstTextureInBatch(draw,null);
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
			this.lastComputedBlending = 1;
			this.lastRenderTarget = quad.computedRenderTarget;
			this.useRenderTarget(draw,this.lastRenderTarget);
			this.lastShader = null;
			this.useShader(draw,null);
			this.stateDirty = false;
		} else {
			var textureToUseInSameBatch = null;
			var needsCheckRenderTextureClear = true;
			if(!this.stateDirty) {
				var newComputedBlending = this.computeQuadBlending(quad);
				this.stateDirty = !this.isSameShader(quad.shader,this.lastShader) || newComputedBlending != this.lastComputedBlending || quad.computedRenderTarget != this.lastRenderTarget;
				if(!this.stateDirty) {
					if(quad._texture != this.lastTexture) {
						if(quad._texture != null && this.lastTexture != null) {
							if(quad._texture.backendItem.textureId != this.lastTextureId) {
								if(!this.canUseTextureInSameBatch(draw,quad._texture)) {
									this.stateDirty = true;
								} else {
									textureToUseInSameBatch = quad._texture;
								}
							}
						} else if(!this.canUseTextureInSameBatch(draw,quad._texture)) {
							this.stateDirty = true;
						} else {
							textureToUseInSameBatch = quad._texture != null ? quad._texture : this.defaultWhiteTexture;
						}
					}
				}
			}
			if(this.stateDirty) {
				_gthis.flush(draw);
				_gthis.unbindUsedTextures(draw);
				_gthis.lastTexture = quad._texture;
				_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
				if(quad.computedRenderTarget != _gthis.lastRenderTarget) {
					_gthis.lastRenderTarget = quad.computedRenderTarget;
					_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
					if(_gthis.lastClip != null && _gthis.lastClipIsRegular) {
						_gthis.scissorWithQuad(draw,_gthis.lastClip.asQuad);
					}
				}
				_gthis.lastShader = quad.shader;
				_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
				_gthis.lastComputedBlending = _gthis.computeQuadBlending(quad);
				_gthis.useBlending(draw,_gthis.lastComputedBlending);
				_gthis.stateDirty = false;
			} else if(textureToUseInSameBatch != null) {
				this.useTextureInSameBatch(draw,textureToUseInSameBatch);
			}
		}
		if(backend_Draw._numPos + 4 > backend_Draw._maxVerts || backend_Draw._numIndices + 6 > 16384) {
			_gthis.flush(draw);
			_gthis.unbindUsedTextures(draw);
			_gthis.lastTexture = quad._texture;
			_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
			if(quad.computedRenderTarget != _gthis.lastRenderTarget) {
				_gthis.lastRenderTarget = quad.computedRenderTarget;
				_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
				if(_gthis.lastClip != null && _gthis.lastClipIsRegular) {
					_gthis.scissorWithQuad(draw,_gthis.lastClip.asQuad);
				}
			}
			_gthis.lastShader = quad.shader;
			_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
			_gthis.lastComputedBlending = _gthis.computeQuadBlending(quad);
			_gthis.useBlending(draw,_gthis.lastComputedBlending);
			_gthis.stateDirty = false;
		}
		var w = quad.get_width();
		var h = quad.get_height();
		var matA = quad.matA;
		var matB = quad.matB;
		var matC = quad.matC;
		var matD = quad.matD;
		var matTX = quad.matTX;
		var matTY = quad.matTY;
		var z = this.z;
		var textureSlot = this.activeShaderCanBatchMultipleTextures ? this.activeTextureSlot : -1;
		if(this.customFloatAttributesSize == 0) {
			if(textureSlot != -1) {
				var numPos = backend_Draw._numPos;
				var n8 = matTX + matA * w + matC * h;
				var n9 = matTY + matB * w + matD * h;
				backend_Draw._posList[backend_Draw._posIndex] = n8;
				backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
				backend_Draw._posIndex += 4;
				backend_Draw._numPos++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
				backend_Draw._numIndices++;
			} else {
				var numPos = backend_Draw._numPos;
				var n8 = matTX + matA * w + matC * h;
				var n9 = matTY + matB * w + matD * h;
				backend_Draw._posList[backend_Draw._posIndex] = n8;
				backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
				backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
				backend_Draw._posList[backend_Draw._posIndex + 2] = z;
				backend_Draw._posIndex += 3;
				backend_Draw._numPos++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
				backend_Draw._numIndices++;
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
				backend_Draw._numIndices++;
			}
		} else if(textureSlot != -1) {
			var numPos = backend_Draw._numPos;
			var n8 = matTX + matA * w + matC * h;
			var n9 = matTY + matB * w + matD * h;
			backend_Draw._posList[backend_Draw._posIndex] = n8;
			backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
			backend_Draw._posIndex += 4;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
			backend_Draw._numIndices++;
		} else {
			var numPos = backend_Draw._numPos;
			var n8 = matTX + matA * w + matC * h;
			var n9 = matTY + matB * w + matD * h;
			backend_Draw._posList[backend_Draw._posIndex] = n8;
			backend_Draw._posList[backend_Draw._posIndex + 1] = n9;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matC * h;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matD * h;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * w;
			backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * w;
			backend_Draw._posList[backend_Draw._posIndex + 2] = z;
			backend_Draw._posIndex += 3;
			backend_Draw._numPos++;
			var _g = 0;
			var _g1 = _gthis.customFloatAttributesSize;
			while(_g < _g1) {
				var l = _g++;
				backend_Draw._posList[backend_Draw._posIndex + l] = 0.0;
			}
			backend_Draw._posIndex += backend_Draw._floatAttributesSize;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 1;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 2;
			backend_Draw._numIndices++;
			backend_Draw._indiceList[backend_Draw._numIndices] = numPos + 3;
			backend_Draw._numIndices++;
		}
		var r;
		var g;
		var b;
		var a;
		if(this.stencilClip) {
			a = 1;
			r = 1;
			g = 0;
			b = 0;
		} else if(this.lastComputedBlending == 3) {
			a = quad.computedAlpha;
			r = (quad.color >> 16 & 255) / 255;
			g = (quad.color >> 8 & 255) / 255;
			b = (quad.color & 255) / 255;
			if(quad.blending == 2 && this.lastComputedBlending != 2) {
				a = 0;
			}
		} else {
			a = quad.computedAlpha;
			r = (quad.color >> 16 & 255) / 255 * a;
			g = (quad.color >> 8 & 255) / 255 * a;
			b = (quad.color & 255) / 255 * a;
			if(quad.blending == 2 && this.lastComputedBlending != 2) {
				a = 0;
			}
		}
		var i = 0;
		while(i < 4) {
			backend_Draw._colorList[backend_Draw._colorIndex] = r;
			backend_Draw._colorList[backend_Draw._colorIndex + 1] = g;
			backend_Draw._colorList[backend_Draw._colorIndex + 2] = b;
			backend_Draw._colorList[backend_Draw._colorIndex + 3] = a;
			backend_Draw._colorIndex += 4;
			backend_Draw._numColors++;
			++i;
		}
		var uvX = 0;
		var uvY = 0;
		var uvW = 0;
		var uvH = 0;
		if(quad._texture != null) {
			var texWidthActual = this.texWidthActual;
			var texHeightActual = this.texHeightActual;
			var texDensity = quad._texture.density;
			uvX = quad.frameX * texDensity / texWidthActual;
			uvY = quad.frameY * texDensity / texHeightActual;
			if((quad.flags & 32) == 32) {
				uvW = quad.frameHeight * texDensity / texWidthActual;
				uvH = quad.frameWidth * texDensity / texHeightActual;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX + uvW;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX + uvW;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY + uvH;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY + uvH;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
			} else {
				uvW = quad.frameWidth * texDensity / texWidthActual;
				uvH = quad.frameHeight * texDensity / texHeightActual;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX + uvW;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY + uvH;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY + uvH;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
				backend_Draw._uvList[backend_Draw._uvIndex] = uvX + uvW;
				backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
				backend_Draw._uvIndex += 2;
				backend_Draw._numUVs++;
			}
		} else {
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
			backend_Draw._uvList[backend_Draw._uvIndex] = 0;
			backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
			backend_Draw._uvIndex += 2;
			backend_Draw._numUVs++;
		}
		this.z = z + 0.001;
	}
	,drawMesh: function(draw,mesh) {
		var _gthis = this;
		if(this.stencilClip) {
			this.unbindUsedTextures(draw);
			this.useFirstTextureInBatch(draw,null);
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
			this.lastComputedBlending = 1;
			this.lastRenderTarget = mesh.computedRenderTarget;
			this.useRenderTarget(draw,this.lastRenderTarget);
			this.lastShader = null;
			this.useShader(draw,null);
			this.stateDirty = false;
		} else {
			var textureToUseInSameBatch = null;
			var needsCheckRenderTextureClear = true;
			if(!this.stateDirty) {
				var newComputedBlending = this.computeMeshBlending(mesh);
				this.stateDirty = !this.isSameShader(mesh.shader,this.lastShader) || newComputedBlending != this.lastComputedBlending || mesh.computedRenderTarget != this.lastRenderTarget;
				if(!this.stateDirty) {
					if(mesh.texture != this.lastTexture) {
						if(mesh.texture != null && this.lastTexture != null) {
							if(mesh.texture.backendItem.textureId != this.lastTextureId) {
								if(!this.canUseTextureInSameBatch(draw,mesh.texture)) {
									this.stateDirty = true;
								} else {
									textureToUseInSameBatch = mesh.texture;
								}
							}
						} else if(!this.canUseTextureInSameBatch(draw,mesh.texture)) {
							this.stateDirty = true;
						} else {
							textureToUseInSameBatch = mesh.texture != null ? mesh.texture : this.defaultWhiteTexture;
						}
					}
				}
			}
			if(this.stateDirty) {
				_gthis.flush(draw);
				_gthis.unbindUsedTextures(draw);
				_gthis.lastTexture = mesh.texture;
				_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
				if(mesh.computedRenderTarget != _gthis.lastRenderTarget) {
					_gthis.lastRenderTarget = mesh.computedRenderTarget;
					_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
					if(_gthis.lastClip != null && _gthis.lastClipIsRegular) {
						_gthis.scissorWithQuad(draw,_gthis.lastClip.asQuad);
					}
				}
				_gthis.lastShader = mesh.shader;
				_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
				_gthis.lastComputedBlending = _gthis.computeMeshBlending(mesh);
				_gthis.useBlending(draw,_gthis.lastComputedBlending);
				_gthis.stateDirty = false;
			} else if(textureToUseInSameBatch != null) {
				this.useTextureInSameBatch(draw,textureToUseInSameBatch);
			}
		}
		var matA = mesh.matA;
		var matB = mesh.matB;
		var matC = mesh.matC;
		var matD = mesh.matD;
		var matTX = mesh.matTX;
		var matTY = mesh.matTY;
		var z = this.z;
		var textureSlot = this.activeShaderCanBatchMultipleTextures ? this.activeTextureSlot : -1;
		var meshColors = mesh.colors;
		var meshSingleColor = this.stencilClip || mesh.colorMapping == 0;
		var meshIndicesColor = !this.stencilClip && mesh.colorMapping == 1;
		var meshUvs = mesh.uvs;
		var meshVertices = mesh.vertices;
		var meshIndices = mesh.indices;
		var visualNumVertices = meshIndices.length;
		var customFloatAttributesSize = this.customFloatAttributesSize;
		var meshCustomFloatAttributesSize = mesh.customFloatAttributesSize;
		var startVertices = 0;
		var meshDrawsRenderTexture = mesh.texture != null && mesh.texture.isRenderTexture;
		var endVertices = visualNumVertices;
		if(backend_Draw._numPos + visualNumVertices > backend_Draw._maxVerts || backend_Draw._numIndices + visualNumVertices > 16384) {
			_gthis.flush(draw);
			_gthis.unbindUsedTextures(draw);
			_gthis.lastTexture = mesh.texture;
			_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
			if(mesh.computedRenderTarget != _gthis.lastRenderTarget) {
				_gthis.lastRenderTarget = mesh.computedRenderTarget;
				_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
				if(_gthis.lastClip != null && _gthis.lastClipIsRegular) {
					_gthis.scissorWithQuad(draw,_gthis.lastClip.asQuad);
				}
			}
			_gthis.lastShader = mesh.shader;
			_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
			_gthis.lastComputedBlending = _gthis.computeMeshBlending(mesh);
			_gthis.useBlending(draw,_gthis.lastComputedBlending);
			_gthis.stateDirty = false;
			textureSlot = this.activeShaderCanBatchMultipleTextures ? this.activeTextureSlot : -1;
			if(visualNumVertices > backend_Draw._maxVerts - backend_Draw._numPos || visualNumVertices > 16384 - backend_Draw._numIndices) {
				endVertices = Math.min(backend_Draw._maxVerts - backend_Draw._numPos,16384 - backend_Draw._numIndices) | 0;
				endVertices = (endVertices / 3 | 0) * 3;
			}
		}
		var texture = mesh.texture;
		var uvFactorX = 0;
		var uvFactorY = 0;
		if(texture != null) {
			uvFactorX = this.texWidth / this.texWidthActual;
			uvFactorY = this.texHeight / this.texHeightActual;
		}
		while(true) {
			var a = 0;
			var r = 0;
			var g = 0;
			var b = 0;
			if(meshSingleColor) {
				if(_gthis.stencilClip) {
					a = 1;
					r = 1;
					g = 0;
					b = 0;
				} else if(_gthis.lastComputedBlending == 3) {
					var meshAlphaColor = meshColors[0];
					a = mesh.computedAlpha * ((meshAlphaColor >> 24 & 255) / 255);
					r = (meshAlphaColor >> 16 & 255) / 255;
					g = (meshAlphaColor >> 8 & 255) / 255;
					b = (meshAlphaColor & 255) / 255;
					if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
						a = 0;
					}
				} else {
					var meshAlphaColor1 = meshColors[0];
					a = mesh.computedAlpha * ((meshAlphaColor1 >> 24 & 255) / 255);
					r = (meshAlphaColor1 >> 16 & 255) / 255 * a;
					g = (meshAlphaColor1 >> 8 & 255) / 255 * a;
					b = (meshAlphaColor1 & 255) / 255 * a;
					if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
						a = 0;
					}
				}
			}
			var i = startVertices;
			var numPos = backend_Draw._numPos;
			while(i < endVertices) {
				var j = meshIndices[i];
				var k = j * 2;
				var l = j * (2 + meshCustomFloatAttributesSize);
				var x = meshVertices[l++];
				var y = meshVertices[l++];
				backend_Draw._indiceList[backend_Draw._numIndices] = numPos;
				backend_Draw._numIndices++;
				++numPos;
				if(textureSlot != -1) {
					backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * x + matC * y;
					backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * x + matD * y;
					backend_Draw._posList[backend_Draw._posIndex + 2] = z;
					backend_Draw._posList[backend_Draw._posIndex + 3] = textureSlot;
					backend_Draw._posIndex += 4;
					backend_Draw._numPos++;
				} else {
					backend_Draw._posList[backend_Draw._posIndex] = matTX + matA * x + matC * y;
					backend_Draw._posList[backend_Draw._posIndex + 1] = matTY + matB * x + matD * y;
					backend_Draw._posList[backend_Draw._posIndex + 2] = z;
					backend_Draw._posIndex += 3;
					backend_Draw._numPos++;
				}
				if(!meshSingleColor) {
					var meshAlphaColor2 = meshIndicesColor ? meshColors[i] : meshColors[j];
					if(meshDrawsRenderTexture || _gthis.lastComputedBlending == 3) {
						a = mesh.computedAlpha * ((meshAlphaColor2 >> 24 & 255) / 255);
						r = (meshAlphaColor2 >> 16 & 255) / 255;
						g = (meshAlphaColor2 >> 8 & 255) / 255;
						b = (meshAlphaColor2 & 255) / 255;
						if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
							a = 0;
						}
					} else {
						a = mesh.computedAlpha * ((meshAlphaColor2 >> 24 & 255) / 255);
						r = (meshAlphaColor2 >> 16 & 255) / 255 * a;
						g = (meshAlphaColor2 >> 8 & 255) / 255 * a;
						b = (meshAlphaColor2 & 255) / 255 * a;
						if(mesh.blending == 2 && _gthis.lastComputedBlending != 2) {
							a = 0;
						}
					}
				}
				backend_Draw._colorList[backend_Draw._colorIndex] = r;
				backend_Draw._colorList[backend_Draw._colorIndex + 1] = g;
				backend_Draw._colorList[backend_Draw._colorIndex + 2] = b;
				backend_Draw._colorList[backend_Draw._colorIndex + 3] = a;
				backend_Draw._colorIndex += 4;
				backend_Draw._numColors++;
				if(texture != null) {
					var uvX = meshUvs[k] * uvFactorX;
					var uvY = meshUvs[k + 1] * uvFactorY;
					backend_Draw._uvList[backend_Draw._uvIndex] = uvX;
					backend_Draw._uvList[backend_Draw._uvIndex + 1] = uvY;
					backend_Draw._uvIndex += 2;
					backend_Draw._numUVs++;
				} else {
					backend_Draw._uvList[backend_Draw._uvIndex] = 0;
					backend_Draw._uvList[backend_Draw._uvIndex + 1] = 0;
					backend_Draw._uvIndex += 2;
					backend_Draw._numUVs++;
				}
				if(customFloatAttributesSize != 0) {
					var _g = 0;
					var _g1 = customFloatAttributesSize;
					while(_g < _g1) {
						var n = _g++;
						if(n < meshCustomFloatAttributesSize) {
							backend_Draw._posList[backend_Draw._posIndex + n] = meshVertices[l++];
						} else {
							backend_Draw._posList[backend_Draw._posIndex + n] = 0.0;
						}
					}
					backend_Draw._posIndex += backend_Draw._floatAttributesSize;
				}
				++i;
			}
			if(endVertices == visualNumVertices) {
				break;
			} else {
				_gthis.flush(draw);
				_gthis.unbindUsedTextures(draw);
				_gthis.lastTexture = mesh.texture;
				_gthis.useFirstTextureInBatch(draw,_gthis.lastTexture);
				if(mesh.computedRenderTarget != _gthis.lastRenderTarget) {
					_gthis.lastRenderTarget = mesh.computedRenderTarget;
					_gthis.useRenderTarget(draw,_gthis.lastRenderTarget);
					if(_gthis.lastClip != null && _gthis.lastClipIsRegular) {
						_gthis.scissorWithQuad(draw,_gthis.lastClip.asQuad);
					}
				}
				_gthis.lastShader = mesh.shader;
				_gthis.useShader(draw,_gthis.lastShader != null ? _gthis.lastShader.backendItem : null);
				_gthis.lastComputedBlending = _gthis.computeMeshBlending(mesh);
				_gthis.useBlending(draw,_gthis.lastComputedBlending);
				_gthis.stateDirty = false;
				textureSlot = _gthis.activeShaderCanBatchMultipleTextures ? _gthis.activeTextureSlot : -1;
				startVertices = endVertices;
				endVertices = startVertices + (Math.min(backend_Draw._maxVerts - backend_Draw._numPos,16384 - backend_Draw._numIndices) | 0);
				endVertices = (endVertices / 3 | 0) * 3;
				if(endVertices > visualNumVertices) {
					endVertices = visualNumVertices;
				}
			}
		}
		this.z = z + 0.001;
	}
	,flush: function(draw) {
		if(backend_Draw._numPos <= 0) {
			return false;
		}
		var batchMultiTexture = backend_Draw._batchMultiTexture;
		var pos = new Float32Array(backend_Draw._posList.buffer,0,backend_Draw._posIndex * 4 / 4 | 0);
		var uvs = new Float32Array(backend_Draw._uvList.buffer,0,backend_Draw._uvIndex * 4 / 4 | 0);
		var colors = new Float32Array(backend_Draw._colorList.buffer,0,backend_Draw._colorIndex * 4 / 4 | 0);
		var indices = new Uint16Array(backend_Draw._indiceList.buffer,0,backend_Draw._numIndices * 2 / 2 | 0);
		var pb = clay_opengl_web_GL.gl.createBuffer();
		var cb = clay_opengl_web_GL.gl.createBuffer();
		var tb = clay_opengl_web_GL.gl.createBuffer();
		var ib = clay_opengl_web_GL.gl.createBuffer();
		clay_opengl_web_GL.gl.enableVertexAttribArray(0);
		clay_opengl_web_GL.gl.enableVertexAttribArray(1);
		clay_opengl_web_GL.gl.enableVertexAttribArray(2);
		clay_opengl_web_GL.gl.bindBuffer(34962,pb);
		clay_opengl_web_GL.gl.vertexAttribPointer(0,3,5126,false,backend_Draw._posSize * 4,0);
		clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,tb);
		clay_opengl_web_GL.gl.vertexAttribPointer(1,2,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,uvs,35040);
		clay_opengl_web_GL.gl.bindBuffer(34962,cb);
		clay_opengl_web_GL.gl.vertexAttribPointer(2,4,5126,false,0,0);
		clay_opengl_web_GL.gl.bufferData(34962,colors,35040);
		var offset = 3;
		var n = 3;
		var customGLBuffersLen = 0;
		if(batchMultiTexture) {
			var b = clay_opengl_web_GL.gl.createBuffer();
			backend_Draw._customGLBuffers[customGLBuffersLen++] = b;
			clay_opengl_web_GL.gl.enableVertexAttribArray(n);
			clay_opengl_web_GL.gl.bindBuffer(34962,b);
			clay_opengl_web_GL.gl.vertexAttribPointer(n,1,5126,false,backend_Draw._posSize * 4,offset * 4);
			clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
			++n;
			++offset;
		}
		if(backend_Draw._activeShader != null && backend_Draw._activeShader.customAttributes != null) {
			var allAttrs = backend_Draw._activeShader.customAttributes;
			var start = customGLBuffersLen;
			var end = start + allAttrs.length;
			customGLBuffersLen += allAttrs.length;
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var ii = _g++;
				var attrIndex = ii - start;
				var attr = allAttrs[attrIndex];
				var b = clay_opengl_web_GL.gl.createBuffer();
				backend_Draw._customGLBuffers[ii] = b;
				clay_opengl_web_GL.gl.enableVertexAttribArray(n);
				clay_opengl_web_GL.gl.bindBuffer(34962,b);
				clay_opengl_web_GL.gl.vertexAttribPointer(n,attr.size,5126,false,backend_Draw._posSize * 4,offset * 4);
				clay_opengl_web_GL.gl.bufferData(34962,pos,35040);
				++n;
				offset += attr.size;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,ib);
		clay_opengl_web_GL.gl.bufferData(34963,indices,35040);
		clay_opengl_web_GL.gl.drawElements(4,backend_Draw._numIndices,5123,0);
		clay_opengl_web_GL.gl.deleteBuffer(pb);
		clay_opengl_web_GL.gl.deleteBuffer(cb);
		clay_opengl_web_GL.gl.deleteBuffer(tb);
		if(customGLBuffersLen > 0) {
			var n = 3;
			var _g = 0;
			var _g1 = customGLBuffersLen;
			while(_g < _g1) {
				var ii = _g++;
				var b = backend_Draw._customGLBuffers[ii];
				clay_opengl_web_GL.gl.deleteBuffer(b);
				clay_opengl_web_GL.gl.disableVertexAttribArray(n);
				++n;
			}
		}
		clay_opengl_web_GL.gl.bindBuffer(34963,clay_opengl_GLGraphics.NO_BUFFER);
		clay_opengl_web_GL.gl.deleteBuffer(ib);
		if(backend_Draw._currentRenderTarget != null) {
			backend_Draw._didUpdateCurrentRenderTarget = true;
		}
		pos = null;
		uvs = null;
		colors = null;
		indices = null;
		backend_Draw._numIndices = 0;
		backend_Draw._numPos = 0;
		backend_Draw._numUVs = 0;
		backend_Draw._numColors = 0;
		backend_Draw._posIndex = 0;
		backend_Draw._uvIndex = 0;
		backend_Draw._colorIndex = 0;
		draw.prepareNextBuffers();
		this.drawCalls++;
		return true;
	}
	,computeQuadBlending: function(quad) {
		var blending = quad.blending;
		if(blending == 0 || blending == 2) {
			if(quad.computedRenderTarget != null) {
				blending = 5;
			} else {
				blending = 1;
			}
		}
		return blending;
	}
	,computeMeshBlending: function(mesh) {
		var blending = mesh.blending;
		if(blending == 0 || blending == 2) {
			if(mesh.computedRenderTarget != null) {
				blending = 5;
			} else {
				blending = 1;
			}
		}
		return blending;
	}
	,isSameShader: function(shaderA,shaderB) {
		var backendItemA = shaderA != null ? shaderA.backendItem : this.defaultTexturedShader;
		var backendItemB = shaderB != null ? shaderB.backendItem : this.defaultTexturedShader;
		return backendItemA == backendItemB;
	}
	,useShader: function(draw,shader) {
		if(shader == null) {
			shader = this.defaultTexturedShader;
		}
		this.activeShader = shader;
		backend_Draw._activeShader = shader;
		shader.uniforms.setMatrix4("projectionMatrix",backend_Draw._projectionMatrix);
		shader.uniforms.setMatrix4("modelViewMatrix",backend_Draw._modelViewMatrix);
		var shadersBackend = ceramic_App.app.backend.shaders;
		var customFloatAttributesSize = 0;
		var allAttrs = backend_Draw._activeShader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		backend_Draw._floatAttributesSize = customFloatAttributesSize;
		backend_Draw._batchMultiTexture = shadersBackend.canBatchWithMultipleTextures(backend_Draw._activeShader);
		backend_Draw._vertexSize = 3 + backend_Draw._floatAttributesSize + (backend_Draw._batchMultiTexture ? 1 : 0);
		backend_Draw._posSize = backend_Draw._vertexSize;
		if(backend_Draw._vertexSize < 4) {
			backend_Draw._vertexSize = 4;
		}
		backend_Draw._maxVerts = Math.floor(65536 / backend_Draw._vertexSize) | 0;
		shader.activate();
		if(backend_Draw._numPos == 0) {
			backend_Draw._numIndices = 0;
			backend_Draw._numPos = 0;
			backend_Draw._numUVs = 0;
			backend_Draw._numColors = 0;
			backend_Draw._posIndex = 0;
			backend_Draw._uvIndex = 0;
			backend_Draw._colorIndex = 0;
		}
		this.activeShaderCanBatchMultipleTextures = this.backendShaders.canBatchWithMultipleTextures(shader);
		var _this = this.backendShaders;
		var customFloatAttributesSize = 0;
		var allAttrs = shader.customAttributes;
		if(allAttrs != null) {
			var _g = 0;
			var _g1 = allAttrs.length;
			while(_g < _g1) {
				var ii = _g++;
				var attr = allAttrs[ii];
				customFloatAttributesSize += attr.size;
			}
		}
		this.customFloatAttributesSize = customFloatAttributesSize;
	}
	,useBlending: function(draw,blending) {
		switch(blending) {
		case 0:
			throw haxe_Exception.thrown("Cannot apply AUTO blending. Needs to be computed to an actual blending function.");
		case 1:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,1,771);
			break;
		case 2:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,1,1,1);
			break;
		case 3:
			clay_opengl_web_GL.gl.blendFuncSeparate(770,771,1,771);
			break;
		case 4:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,770,1,770);
			break;
		case 5:
			clay_opengl_web_GL.gl.blendFuncSeparate(1,771,773,1);
			break;
		case 6:
			clay_opengl_web_GL.gl.blendFuncSeparate(770,771,773,1);
			break;
		}
	}
	,scissorWithQuad: function(draw,quad) {
		draw.enableScissor(quad.matTX,quad.matTY,quad.matA * quad.get_width(),quad.matD * quad.get_height());
	}
	,isNotRenderedRenderTexture: function(texture) {
		var renderTexture = texture.asRenderTexture;
		if(renderTexture != null && !renderTexture._renderedOnce && renderTexture.renderDirty) {
			return !renderTexture._usedInRendering;
		} else {
			return false;
		}
	}
	,useRenderTarget: function(draw,renderTarget) {
		this.usedRenderTarget = renderTarget;
		if(renderTarget != null) {
			renderTarget._usedInRendering = true;
			renderTarget.set__renderedOnce(true);
			draw.setRenderTarget(renderTarget);
		} else {
			draw.setRenderTarget(null);
		}
	}
	,useFirstTextureInBatch: function(draw,texture) {
		if(texture == null) {
			texture = this.defaultWhiteTexture;
		}
		this.usedTextures = 1;
		var textureIndex = texture.backendItem.index;
		this.usedTextureIndexes[0] = textureIndex;
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		this.useTexture(draw,texture,false);
	}
	,useTexture: function(draw,texture,reusing) {
		if(texture != null) {
			this.lastTexture = texture;
			this.lastTextureId = texture.backendItem.textureId;
			this.texWidth = texture.backendItem.width;
			this.texHeight = texture.backendItem.height;
			this.texWidthActual = texture.backendItem.widthActual;
			this.texHeightActual = texture.backendItem.heightActual;
			if(!reusing) {
				var textureId = texture.backendItem.textureId;
				if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
					clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
					clay_opengl_web_GL.gl.bindTexture(3553,textureId);
				}
			}
		} else {
			this.lastTexture = null;
			this.lastTextureId = backend_TextureId.DEFAULT;
			var backendItem = ceramic_App.app.defaultWhiteTexture.backendItem;
			var textureId = backendItem.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
	}
	,canUseTextureInSameBatch: function(draw,texture) {
		var canKeepSameState = false;
		if(texture == null) {
			texture = this.defaultWhiteTexture;
		}
		if(this.usedTextures > 0) {
			if(this.activeShaderCanBatchMultipleTextures) {
				var textureIndex = texture.backendItem.index;
				var _g = 0;
				var _g1 = this.usedTextures;
				while(_g < _g1) {
					var slot = _g++;
					if(textureIndex == this.usedTextureIndexes[slot]) {
						canKeepSameState = true;
						break;
					}
				}
				if(!canKeepSameState && this.usedTextures < this.maxUsableTexturesInBatch) {
					canKeepSameState = true;
				}
			} else if(this.lastTexture == texture) {
				canKeepSameState = true;
			}
		}
		return canKeepSameState;
	}
	,useTextureInSameBatch: function(draw,texture) {
		var alreadyUsed = false;
		if(texture == null) {
			texture = this.defaultWhiteTexture;
		}
		if(this.activeShaderCanBatchMultipleTextures) {
			var textureIndex = texture.backendItem.index;
			var _g = 0;
			var _g1 = this.usedTextures;
			while(_g < _g1) {
				var slot = _g++;
				if(textureIndex == this.usedTextureIndexes[slot]) {
					backend_Draw._activeTextureSlot = slot;
					if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
						clay_opengl_GLGraphics._activeTextureSlot = slot;
						while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
						clay_opengl_web_GL.gl.activeTexture(33984 + slot);
					}
					this.activeTextureSlot = slot;
					this.useTexture(draw,texture,true);
					alreadyUsed = true;
					break;
				}
			}
			if(!alreadyUsed && this.usedTextures < this.maxUsableTexturesInBatch) {
				var slot = this.usedTextures++;
				this.usedTextureIndexes[slot] = textureIndex;
				backend_Draw._activeTextureSlot = slot;
				if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
					clay_opengl_GLGraphics._activeTextureSlot = slot;
					while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
					clay_opengl_web_GL.gl.activeTexture(33984 + slot);
				}
				this.activeTextureSlot = slot;
				this.useTexture(draw,texture,false);
			}
		}
	}
	,unbindUsedTextures: function(draw) {
		while(this.usedTextures > 0) {
			this.usedTextures--;
			var slot = this.usedTextures;
			backend_Draw._activeTextureSlot = slot;
			if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
				clay_opengl_GLGraphics._activeTextureSlot = slot;
				while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
				clay_opengl_web_GL.gl.activeTexture(33984 + slot);
			}
			var backendItem = ceramic_App.app.defaultWhiteTexture.backendItem;
			var textureId = backendItem.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
		backend_Draw._activeTextureSlot = 0;
		if(clay_opengl_GLGraphics._activeTextureSlot != 0) {
			clay_opengl_GLGraphics._activeTextureSlot = 0;
			while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
			clay_opengl_web_GL.gl.activeTexture(33984);
		}
		this.activeTextureSlot = 0;
		this.useTexture(draw,null,false);
	}
	,__class__: ceramic_Renderer
});
var ceramic_ReusableArray = function(length) {
	this._poolIndex = -1;
	this.set_length(length);
};
$hxClasses["ceramic.ReusableArray"] = ceramic_ReusableArray;
ceramic_ReusableArray.__name__ = "ceramic.ReusableArray";
ceramic_ReusableArray.prototype = {
	_poolIndex: null
	,vector: null
	,length: null
	,set_length: function(length) {
		if(this.vector == null) {
			this.vector = new Array(length);
			this.length = length;
			return length;
		}
		if(length == this.length) {
			return length;
		}
		if(length > this.vector.length) {
			var newVector = new Array(length);
			var _g = 0;
			var _g1 = this.length;
			while(_g < _g1) {
				var i = _g++;
				newVector[i] = this.vector[i];
				this.vector[i] = null;
			}
			this.vector = newVector;
			var _g = this.length;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				this.vector[i] = null;
			}
		} else {
			var _g = length;
			var _g1 = this.length;
			while(_g < _g1) {
				var i = _g++;
				this.vector[i] = null;
			}
		}
		this.length = length;
		return length;
	}
	,get: function(index) {
		return this.vector[index];
	}
	,set: function(index,value) {
		this.vector[index] = value;
	}
	,__class__: ceramic_ReusableArray
	,__properties__: {set_length:"set_length"}
};
var ceramic_Runner = function() { };
$hxClasses["ceramic.Runner"] = ceramic_Runner;
ceramic_Runner.__name__ = "ceramic.Runner";
ceramic_Runner.currentIsMainThread = function() {
	return true;
};
ceramic_Runner.init = function() {
};
ceramic_Runner.tick = function() {
};
ceramic_Runner.isEmulatingBackgroundWithMain = function() {
	return true;
};
ceramic_Runner.runInMain = function(_fn) {
	ceramic_App.app._onceImmediate(_fn);
};
ceramic_Runner.runInBackground = function(fn) {
	ceramic_App.app._onceImmediate(fn);
};
var ceramic_RuntimeAssets = function(allAssets,path) {
	this.path = null;
	this.cachedLists = null;
	this.cachedNames = new haxe_ds_StringMap();
	this.assetDirsByBaseName = null;
	this.assetsByBaseName = null;
	this.allAssetDirs = null;
	this.allAssets = null;
	this.allAssets = allAssets;
	this.path = path;
	this.initData();
};
$hxClasses["ceramic.RuntimeAssets"] = ceramic_RuntimeAssets;
ceramic_RuntimeAssets.__name__ = "ceramic.RuntimeAssets";
ceramic_RuntimeAssets.fromPath = function(path) {
	return new ceramic_RuntimeAssets(ceramic_Files.getFlatDirectory(path),path);
};
ceramic_RuntimeAssets.toAssetConstName = function(input) {
	var res_b = "";
	var len = input.length;
	var i = 0;
	var canAddSpace = false;
	while(i < len) {
		var c = input.charAt(i);
		if(c == "/") {
			res_b += "__";
			canAddSpace = false;
		} else if(c == ".") {
			res_b += "_";
			canAddSpace = false;
		} else if(ceramic_RuntimeAssets.isAsciiChar(c)) {
			var uc = c.toUpperCase();
			var isUpperCase = c == uc;
			if(canAddSpace && isUpperCase) {
				res_b += "_";
				canAddSpace = false;
			}
			res_b += uc == null ? "null" : "" + uc;
			canAddSpace = !isUpperCase;
		} else {
			res_b += "_";
			canAddSpace = false;
		}
		++i;
	}
	var str = res_b;
	if(StringTools.endsWith(str,"_")) {
		str = HxOverrides.substr(str,0,str.length - 1);
	}
	return str;
};
ceramic_RuntimeAssets.isAsciiChar = function(c) {
	var code = HxOverrides.cca(c,0);
	if(!(code >= 48 && code <= 57 || code >= 65 && code <= 90)) {
		if(code >= 97) {
			return code <= 122;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ceramic_RuntimeAssets.prototype = {
	allAssets: null
	,allAssetDirs: null
	,assetsByBaseName: null
	,assetDirsByBaseName: null
	,cachedNames: null
	,cachedLists: null
	,path: null
	,reset: function(allAssets,path) {
		this.allAssets = allAssets;
		this.path = path;
		this.allAssetDirs = null;
		this.assetsByBaseName = null;
		this.assetDirsByBaseName = null;
		this.cachedNames = new haxe_ds_StringMap();
		this.cachedLists = null;
		this.initData();
	}
	,getNames: function(kind,extensions,dir) {
		if(dir == null) {
			dir = false;
		}
		var cacheKey = kind + "|" + (extensions != null ? extensions.join(",") : "") + (dir ? "|1" : "|0");
		var cached = this.cachedNames.h[cacheKey];
		if(cached != null) {
			return cached;
		}
		var entries = [];
		if(extensions == null) {
			extensions = [];
		}
		var extensions1;
		switch(kind) {
		case "atlas":
			extensions1 = ["atlas"];
			break;
		case "database":
			extensions1 = ["csv"];
			break;
		case "font":
			extensions1 = ["fnt"];
			break;
		case "fragments":
			extensions1 = ["fragments"];
			break;
		case "image":
			extensions1 = ["png","jpg","jpeg"];
			break;
		case "shader":
			extensions1 = ["frag","vert"];
			break;
		case "sound":
			var _this = ceramic_App.app.backend.info;
			if(backend_Info._soundExtensions != null) {
				extensions1 = [].concat(backend_Info._soundExtensions);
			} else {
				backend_Info._soundExtensions = [];
				var audioTest = new Audio();
				var ua = $global.navigator != null ? $global.navigator.userAgent : "";
				var checkOpera = backend_Info.RE_OPERA.match(ua);
				var isOldOpera = checkOpera && parseInt(backend_Info.RE_OPERA.matched(0).split("/")[1],10) < 33;
				var checkSafari = ua.indexOf("Safari") != -1 && ua.indexOf("Chrome") == -1;
				var safariVersion = backend_Info.RE_SAFARI_VERSION.match(ua);
				var isOldSafari = checkSafari && safariVersion && parseInt(backend_Info.RE_SAFARI_VERSION.matched(1),10) < 15;
				var oggTest = audioTest.canPlayType("audio/ogg; codecs=\"vorbis\"");
				var canPlayOgg = oggTest != null && oggTest != "no" && oggTest != "";
				if(canPlayOgg) {
					backend_Info._soundExtensions.push("ogg");
				}
				var mpegTest = audioTest.canPlayType("audio/mpeg;");
				var mp3Test = audioTest.canPlayType("audio/mp3;");
				var canPlayMp3 = mpegTest != null && mpegTest != "no" && mpegTest != "" || mp3Test != null && mp3Test != "no" && mp3Test != "";
				if(!isOldOpera && canPlayMp3) {
					backend_Info._soundExtensions.push("mp3");
				}
				var xFlacTest = audioTest.canPlayType("audio/x-flac;");
				var flacTest = audioTest.canPlayType("audio/flac;");
				var canPlayFlac = xFlacTest != null && xFlacTest != "no" && xFlacTest != "" || flacTest != null && flacTest != "no" && flacTest != "";
				if(canPlayFlac) {
					backend_Info._soundExtensions.push("flac");
				}
				var wavCodecTest = audioTest.canPlayType("audio/wav; codecs=\"1\"");
				var wavTest = audioTest.canPlayType("audio/wav;");
				var canPlayWav = wavCodecTest != null && wavCodecTest != "no" && wavCodecTest != "" || wavTest != null && wavTest != "no" && wavTest != "";
				if(canPlayWav) {
					backend_Info._soundExtensions.push("wav");
				}
				extensions1 = [].concat(backend_Info._soundExtensions);
			}
			break;
		case "text":
			extensions1 = ["txt","json","fnt","atlas"];
			break;
		default:
			extensions1 = [];
		}
		extensions = extensions.concat(extensions1);
		if(extensions.length == 0) {
			return entries;
		}
		var used_h = Object.create(null);
		var fileList = dir ? this.allAssetDirs : this.allAssets;
		var _g = 0;
		while(_g < extensions.length) {
			var ext = extensions[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < fileList.length) {
				var name = fileList[_g1];
				++_g1;
				var lowerName = name.toLowerCase();
				var dotIndex = lowerName.lastIndexOf(".");
				var fileExt = null;
				var baseName = null;
				var fieldName = null;
				if(dotIndex != -1) {
					fileExt = HxOverrides.substr(lowerName,dotIndex + 1,null);
					if(fileExt == ext) {
						var truncatedName = HxOverrides.substr(name,0,dotIndex);
						var baseAtIndex = truncatedName.lastIndexOf("@");
						if(baseAtIndex == -1) {
							baseAtIndex = dotIndex;
						}
						baseName = HxOverrides.substr(name,0,Math.min(baseAtIndex,dotIndex));
						fieldName = ceramic_RuntimeAssets.toAssetConstName(baseName);
						if(fieldName != null && !Object.prototype.hasOwnProperty.call(used_h,fieldName) && fileExt != null) {
							used_h[fieldName] = baseName;
						}
					}
				}
			}
		}
		var byBaseName = dir ? this.assetDirsByBaseName : this.assetsByBaseName;
		var h = used_h;
		var fieldName_h = h;
		var fieldName_keys = Object.keys(h);
		var fieldName_length = fieldName_keys.length;
		var fieldName_current = 0;
		while(fieldName_current < fieldName_length) {
			var fieldName = fieldName_keys[fieldName_current++];
			var value = kind + ":" + used_h[fieldName];
			var fieldDoc = [];
			var files = byBaseName.h[used_h[fieldName]];
			var _g = 0;
			while(_g < files.length) {
				var file = files[_g];
				++_g;
				var _g1 = 0;
				while(_g1 < extensions.length) {
					var ext = extensions[_g1];
					++_g1;
					if(StringTools.endsWith(file,"." + ext)) {
						fieldDoc.push(file);
						break;
					}
				}
			}
			var entry = { name : used_h[fieldName], constName : fieldName, paths : fieldDoc};
			entries.push(entry);
		}
		this.cachedNames.h[cacheKey] = entries;
		return entries;
	}
	,getLists: function() {
		if(this.cachedLists != null) {
			return this.cachedLists;
		}
		var result = { all : [], allDirs : [], allByName : new haxe_ds_StringMap(), allDirsByName : new haxe_ds_StringMap()};
		var _g = 0;
		var _g1 = this.allAssets;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result.all.push(name);
		}
		var _g = 0;
		var _g1 = this.allAssetDirs;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			result.allDirs.push(name);
		}
		var h = this.assetsByBaseName.h;
		var baseName_h = h;
		var baseName_keys = Object.keys(h);
		var baseName_length = baseName_keys.length;
		var baseName_current = 0;
		while(baseName_current < baseName_length) {
			var baseName = baseName_keys[baseName_current++];
			var list = [].concat(this.assetsByBaseName.h[baseName]);
			result.allByName.h[baseName] = list;
		}
		var h = this.assetDirsByBaseName.h;
		var baseName_h = h;
		var baseName_keys = Object.keys(h);
		var baseName_length = baseName_keys.length;
		var baseName_current = 0;
		while(baseName_current < baseName_length) {
			var baseName = baseName_keys[baseName_current++];
			var list = [].concat(this.assetDirsByBaseName.h[baseName]);
			result.allDirsByName.h[baseName] = list;
		}
		this.cachedLists = result;
		return result;
	}
	,getEncodableLists: function() {
		var lists = this.getLists();
		var allByNameEncodable = { };
		var h = lists.allByName.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			allByNameEncodable[key] = lists.allByName.h[key];
		}
		var allDirsByNameEncodable = { };
		var h = lists.allDirsByName.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			allDirsByNameEncodable[key] = lists.allDirsByName.h[key];
		}
		return { all : lists.all, allDirs : lists.allDirs, allByName : allByNameEncodable, allDirsByName : allDirsByNameEncodable};
	}
	,initData: function() {
		var usedPaths_h = Object.create(null);
		var _g = 0;
		var _g1 = this.allAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			usedPaths_h[asset] = true;
		}
		var usedDirs_h = Object.create(null);
		this.allAssetDirs = [];
		var _g = 0;
		var _g1 = this.allAssets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			var lastSlash = asset.lastIndexOf("/");
			if(lastSlash != -1) {
				var dir = HxOverrides.substr(asset,0,lastSlash);
				while(!Object.prototype.hasOwnProperty.call(usedDirs_h,dir)) {
					this.allAssetDirs.push(dir);
					usedDirs_h[dir] = true;
					lastSlash = dir.lastIndexOf("/");
					if(lastSlash == -1) {
						break;
					}
					dir = HxOverrides.substr(dir,0,lastSlash);
				}
			}
		}
		if(this.assetsByBaseName == null) {
			this.assetsByBaseName = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = this.allAssets;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var dotIndex = name.lastIndexOf(".");
				var truncatedName = HxOverrides.substr(name,0,dotIndex);
				var baseAtIndex = truncatedName.lastIndexOf("@");
				if(baseAtIndex == -1) {
					baseAtIndex = dotIndex;
				}
				var baseName = HxOverrides.substr(name,0,Math.min(baseAtIndex,dotIndex));
				if(!Object.prototype.hasOwnProperty.call(this.assetsByBaseName.h,baseName)) {
					this.assetsByBaseName.h[baseName] = [];
				}
				var list = this.assetsByBaseName.h[baseName];
				list.push(name);
			}
		}
		if(this.assetDirsByBaseName == null) {
			this.assetDirsByBaseName = new haxe_ds_StringMap();
			var _g = 0;
			var _g1 = this.allAssetDirs;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var dotIndex = name.lastIndexOf(".");
				var truncatedName = HxOverrides.substr(name,0,dotIndex);
				var baseAtIndex = truncatedName.lastIndexOf("@");
				if(baseAtIndex == -1) {
					baseAtIndex = dotIndex;
				}
				var baseName = HxOverrides.substr(name,0,Math.min(baseAtIndex,dotIndex));
				if(!Object.prototype.hasOwnProperty.call(this.assetDirsByBaseName.h,baseName)) {
					this.assetDirsByBaseName.h[baseName] = [];
				}
				var list = this.assetDirsByBaseName.h[baseName];
				list.push(name);
			}
		}
	}
	,__class__: ceramic_RuntimeAssets
};
var ceramic_ScanCode = {};
ceramic_ScanCode.$name = function(scanCode) {
	var res = null;
	if(scanCode >= 0 && scanCode < ceramic_ScanCode.scanCodeNames.length) {
		res = ceramic_ScanCode.scanCodeNames[scanCode];
	}
	if(res != null) {
		return res;
	} else {
		return "";
	}
};
ceramic_ScanCode.toString = function(this1) {
	return "ScanCode(" + this1 + " " + ceramic_ScanCode.$name(this1) + ")";
};
var ceramic_SceneStatus = {};
ceramic_SceneStatus.toString = function(this1) {
	switch(this1) {
	case 0:
		return "NONE";
	case 1:
		return "PRELOAD";
	case 2:
		return "LOAD";
	case 3:
		return "CREATE";
	case 4:
		return "FADE_IN";
	case 5:
		return "READY";
	case 6:
		return "FADE_OUT";
	case 7:
		return "DISABLED";
	default:
		return "_";
	}
};
var ceramic_System = function() {
	this.lateUpdateOrder = 0;
	this.earlyUpdateOrder = 0;
	this.autoUpdate = true;
	this.name = null;
	ceramic_Entity.call(this);
	ceramic_App.app.systems.addSystem(this);
};
$hxClasses["ceramic.System"] = ceramic_System;
ceramic_System.__name__ = "ceramic.System";
ceramic_System.__super__ = ceramic_Entity;
ceramic_System.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnBeginEarlyUpdate: null
	,__cbOnceBeginEarlyUpdate: null
	,__cbOnOwnerUnbindBeginEarlyUpdate: null
	,__cbOnceOwnerUnbindBeginEarlyUpdate: null
	,emitBeginEarlyUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnBeginEarlyUpdate != null) {
			len += this.__cbOnBeginEarlyUpdate.length;
		}
		if(this.__cbOnceBeginEarlyUpdate != null) {
			len += this.__cbOnceBeginEarlyUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBeginEarlyUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBeginEarlyUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBeginEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBeginEarlyUpdate[ii];
						this.__cbOnceBeginEarlyUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBeginEarlyUpdate[ii];
						this.__cbOnceOwnerUnbindBeginEarlyUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBeginEarlyUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceBeginEarlyUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceBeginEarlyUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginEarlyUpdate.push(null);
		}
		if(this.__cbOnBeginEarlyUpdate == null) {
			this.__cbOnBeginEarlyUpdate = [];
		}
		this.__cbOnBeginEarlyUpdate.push(handleDelta);
	}
	,onceBeginEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginEarlyUpdate.push(null);
		}
		if(this.__cbOnceBeginEarlyUpdate == null) {
			this.__cbOnceBeginEarlyUpdate = [];
		}
		this.__cbOnceBeginEarlyUpdate.push(handleDelta);
	}
	,offBeginEarlyUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginEarlyUpdate != null) {
				index = this.__cbOnBeginEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnBeginEarlyUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginEarlyUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceBeginEarlyUpdate != null) {
				index = this.__cbOnceBeginEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceBeginEarlyUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginEarlyUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginEarlyUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindBeginEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginEarlyUpdate = null;
			}
			this.__cbOnBeginEarlyUpdate = null;
			this.__cbOnceBeginEarlyUpdate = null;
		}
	}
	,listensBeginEarlyUpdate: function() {
		if(!(this.__cbOnBeginEarlyUpdate != null && this.__cbOnBeginEarlyUpdate.length > 0)) {
			if(this.__cbOnceBeginEarlyUpdate != null) {
				return this.__cbOnceBeginEarlyUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnEndEarlyUpdate: null
	,__cbOnceEndEarlyUpdate: null
	,__cbOnOwnerUnbindEndEarlyUpdate: null
	,__cbOnceOwnerUnbindEndEarlyUpdate: null
	,emitEndEarlyUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnEndEarlyUpdate != null) {
			len += this.__cbOnEndEarlyUpdate.length;
		}
		if(this.__cbOnceEndEarlyUpdate != null) {
			len += this.__cbOnceEndEarlyUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnEndEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnEndEarlyUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceEndEarlyUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceEndEarlyUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceEndEarlyUpdate[ii];
						this.__cbOnceEndEarlyUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindEndEarlyUpdate[ii];
						this.__cbOnceOwnerUnbindEndEarlyUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindEndEarlyUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceEndEarlyUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindEndEarlyUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceEndEarlyUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEndEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindEndEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnOwnerUnbindEndEarlyUpdate.push(null);
		}
		if(this.__cbOnEndEarlyUpdate == null) {
			this.__cbOnEndEarlyUpdate = [];
		}
		this.__cbOnEndEarlyUpdate.push(handleDelta);
	}
	,onceEndEarlyUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endEarlyUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndEarlyUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndEarlyUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEndEarlyUpdate == null) {
				this.__cbOnceOwnerUnbindEndEarlyUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndEarlyUpdate.push(null);
		}
		if(this.__cbOnceEndEarlyUpdate == null) {
			this.__cbOnceEndEarlyUpdate = [];
		}
		this.__cbOnceEndEarlyUpdate.push(handleDelta);
	}
	,offEndEarlyUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnEndEarlyUpdate != null) {
				index = this.__cbOnEndEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnEndEarlyUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEndEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEndEarlyUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceEndEarlyUpdate != null) {
				index = this.__cbOnceEndEarlyUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceEndEarlyUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEndEarlyUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEndEarlyUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEndEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEndEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEndEarlyUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindEndEarlyUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEndEarlyUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEndEarlyUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEndEarlyUpdate = null;
			}
			this.__cbOnEndEarlyUpdate = null;
			this.__cbOnceEndEarlyUpdate = null;
		}
	}
	,listensEndEarlyUpdate: function() {
		if(!(this.__cbOnEndEarlyUpdate != null && this.__cbOnEndEarlyUpdate.length > 0)) {
			if(this.__cbOnceEndEarlyUpdate != null) {
				return this.__cbOnceEndEarlyUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBeginLateUpdate: null
	,__cbOnceBeginLateUpdate: null
	,__cbOnOwnerUnbindBeginLateUpdate: null
	,__cbOnceOwnerUnbindBeginLateUpdate: null
	,emitBeginLateUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnBeginLateUpdate != null) {
			len += this.__cbOnBeginLateUpdate.length;
		}
		if(this.__cbOnceBeginLateUpdate != null) {
			len += this.__cbOnceBeginLateUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnBeginLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBeginLateUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBeginLateUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBeginLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBeginLateUpdate[ii];
						this.__cbOnceBeginLateUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBeginLateUpdate[ii];
						this.__cbOnceOwnerUnbindBeginLateUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBeginLateUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceBeginLateUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBeginLateUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceBeginLateUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBeginLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnOwnerUnbindBeginLateUpdate.push(null);
		}
		if(this.__cbOnBeginLateUpdate == null) {
			this.__cbOnBeginLateUpdate = [];
		}
		this.__cbOnBeginLateUpdate.push(handleDelta);
	}
	,onceBeginLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "beginLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offBeginLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnceOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBeginLateUpdate == null) {
				this.__cbOnceOwnerUnbindBeginLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindBeginLateUpdate.push(null);
		}
		if(this.__cbOnceBeginLateUpdate == null) {
			this.__cbOnceBeginLateUpdate = [];
		}
		this.__cbOnceBeginLateUpdate.push(handleDelta);
	}
	,offBeginLateUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnBeginLateUpdate != null) {
				index = this.__cbOnBeginLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnBeginLateUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBeginLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBeginLateUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceBeginLateUpdate != null) {
				index = this.__cbOnceBeginLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceBeginLateUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBeginLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBeginLateUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBeginLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBeginLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBeginLateUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindBeginLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBeginLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBeginLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBeginLateUpdate = null;
			}
			this.__cbOnBeginLateUpdate = null;
			this.__cbOnceBeginLateUpdate = null;
		}
	}
	,listensBeginLateUpdate: function() {
		if(!(this.__cbOnBeginLateUpdate != null && this.__cbOnBeginLateUpdate.length > 0)) {
			if(this.__cbOnceBeginLateUpdate != null) {
				return this.__cbOnceBeginLateUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnEndLateUpdate: null
	,__cbOnceEndLateUpdate: null
	,__cbOnOwnerUnbindEndLateUpdate: null
	,__cbOnceOwnerUnbindEndLateUpdate: null
	,emitEndLateUpdate: function(delta) {
		var len = 0;
		if(this.__cbOnEndLateUpdate != null) {
			len += this.__cbOnEndLateUpdate.length;
		}
		if(this.__cbOnceEndLateUpdate != null) {
			len += this.__cbOnceEndLateUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnEndLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnEndLateUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceEndLateUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceEndLateUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceEndLateUpdate[ii];
						this.__cbOnceEndLateUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindEndLateUpdate[ii];
						this.__cbOnceOwnerUnbindEndLateUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindEndLateUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceEndLateUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindEndLateUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceEndLateUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(delta);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEndLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEndLateUpdate == null) {
				this.__cbOnOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnOwnerUnbindEndLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEndLateUpdate == null) {
				this.__cbOnOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnOwnerUnbindEndLateUpdate.push(null);
		}
		if(this.__cbOnEndLateUpdate == null) {
			this.__cbOnEndLateUpdate = [];
		}
		this.__cbOnEndLateUpdate.push(handleDelta);
	}
	,onceEndLateUpdate: function(owner,handleDelta) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLateUpdate" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleDelta != null) {
					_gthis.offEndLateUpdate(handleDelta);
					handleDelta = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEndLateUpdate == null) {
				this.__cbOnceOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndLateUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleDelta = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEndLateUpdate == null) {
				this.__cbOnceOwnerUnbindEndLateUpdate = [];
			}
			this.__cbOnceOwnerUnbindEndLateUpdate.push(null);
		}
		if(this.__cbOnceEndLateUpdate == null) {
			this.__cbOnceEndLateUpdate = [];
		}
		this.__cbOnceEndLateUpdate.push(handleDelta);
	}
	,offEndLateUpdate: function(handleDelta) {
		if(handleDelta != null) {
			var index;
			var unbind;
			if(this.__cbOnEndLateUpdate != null) {
				index = this.__cbOnEndLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnEndLateUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEndLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEndLateUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceEndLateUpdate != null) {
				index = this.__cbOnceEndLateUpdate.indexOf(handleDelta);
				if(index != -1) {
					this.__cbOnceEndLateUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEndLateUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEndLateUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEndLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEndLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEndLateUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindEndLateUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEndLateUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEndLateUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEndLateUpdate = null;
			}
			this.__cbOnEndLateUpdate = null;
			this.__cbOnceEndLateUpdate = null;
		}
	}
	,listensEndLateUpdate: function() {
		if(!(this.__cbOnEndLateUpdate != null && this.__cbOnEndLateUpdate.length > 0)) {
			if(this.__cbOnceEndLateUpdate != null) {
				return this.__cbOnceEndLateUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,name: null
	,autoUpdate: null
	,earlyUpdateOrder: null
	,set_earlyUpdateOrder: function(earlyUpdateOrder) {
		if(this.earlyUpdateOrder != earlyUpdateOrder) {
			this.earlyUpdateOrder = earlyUpdateOrder;
			ceramic_App.app.systems.earlyUpdateOrderDirty = true;
		}
		return earlyUpdateOrder;
	}
	,lateUpdateOrder: null
	,set_lateUpdateOrder: function(lateUpdateOrder) {
		if(this.lateUpdateOrder != lateUpdateOrder) {
			this.lateUpdateOrder = lateUpdateOrder;
			ceramic_App.app.systems.lateUpdateOrderDirty = true;
		}
		return lateUpdateOrder;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		ceramic_App.app.systems.removeSystem(this);
	}
	,earlyUpdate: function(delta) {
	}
	,lateUpdate: function(delta) {
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offBeginEarlyUpdate();
		this.offEndEarlyUpdate();
		this.offBeginLateUpdate();
		this.offEndLateUpdate();
	}
	,__class__: ceramic_System
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_lateUpdateOrder:"set_lateUpdateOrder",set_earlyUpdateOrder:"set_earlyUpdateOrder"})
});
var ceramic_SceneSystem = function() {
	this.rootScenes = new haxe_ds_StringMap();
	this.filter = null;
	this.autoScaleFilter = true;
	this.autoDestroyFilter = true;
	this.main = null;
	this.fadeOutWhenNextMainCanFadeIn = true;
	this.bindMainToScreenSize = true;
	this.keepAssetsForNextMain = false;
	this._updatingScenes = [];
	this.all = [];
	ceramic_System.call(this);
	this.set_lateUpdateOrder(5000);
};
$hxClasses["ceramic.SceneSystem"] = ceramic_SceneSystem;
ceramic_SceneSystem.__name__ = "ceramic.SceneSystem";
ceramic_SceneSystem.__properties__ = {set_shared:"set_shared",get_shared:"get_shared"};
ceramic_SceneSystem.get_shared = function() {
	if(ceramic_SceneSystem.lazyShared) {
		ceramic_SceneSystem.lazyShared = false;
		ceramic_SceneSystem.shared = new ceramic_SceneSystem();
	}
	return ceramic_SceneSystem.shared;
};
ceramic_SceneSystem.set_shared = function(shared_) {
	return ceramic_SceneSystem.shared = shared_;
};
ceramic_SceneSystem.__super__ = ceramic_System;
ceramic_SceneSystem.prototype = $extend(ceramic_System.prototype,{
	all: null
	,_updatingScenes: null
	,keepAssetsForNextMain: null
	,bindMainToScreenSize: null
	,fadeOutWhenNextMainCanFadeIn: null
	,main: null
	,autoDestroyFilter: null
	,autoScaleFilter: null
	,filter: null
	,set_filter: function(filter) {
		if(this.filter != filter) {
			var prevFilter = this.filter;
			if(prevFilter != null) {
				var h = this.rootScenes.h;
				var scene_h = h;
				var scene_keys = Object.keys(h);
				var scene_length = scene_keys.length;
				var scene_current = 0;
				while(scene_current < scene_length) {
					var scene = scene_h[scene_keys[scene_current++]];
					if(scene.parent == prevFilter.content) {
						prevFilter.content.remove(scene);
						scene.set_scaleX(1);
						scene.set_scaleY(1);
					}
				}
				if(prevFilter.content.children != null) {
					var toRemove = null;
					var _g = 0;
					var _g1 = prevFilter.content.children.length;
					while(_g < _g1) {
						var i = _g++;
						var child = prevFilter.content.children[i];
						if(((child) instanceof ceramic_Scene)) {
							var childScene = child;
							if(childScene.isRootScene) {
								if(toRemove == null) {
									toRemove = [];
								}
								toRemove.push(childScene);
							}
						}
					}
					if(toRemove != null) {
						var _g = 0;
						var _g1 = toRemove.length;
						while(_g < _g1) {
							var i = _g++;
							var childScene = toRemove[i];
							prevFilter.content.remove(childScene);
							childScene.set_active(false);
						}
					}
				}
				if(this.autoDestroyFilter) {
					prevFilter.destroy();
				} else {
					prevFilter.set_scaleX(1.0);
					prevFilter.set_scaleY(1.0);
				}
			}
			this.filter = filter;
			if(filter != null) {
				if(this.autoScaleFilter) {
					this.scaleFilter();
				}
				var h = this.rootScenes.h;
				var scene_h = h;
				var scene_keys = Object.keys(h);
				var scene_length = scene_keys.length;
				var scene_current = 0;
				while(scene_current < scene_length) {
					var scene = scene_h[scene_keys[scene_current++]];
					if(scene.parent != filter.content) {
						filter.content.add(scene);
					}
				}
			}
		}
		return filter;
	}
	,scaleFilter: function() {
		var _this = this.filter;
		var scaleX = ceramic_App.app.screen.width / this.filter.get_width();
		var scaleY = ceramic_App.app.screen.height / this.filter.get_height();
		_this.set_scaleX(scaleX);
		_this.set_scaleY(scaleY);
		var _this = this.filter.content;
		var scaleX = this.filter.get_width() / ceramic_App.app.screen.width;
		var scaleY = this.filter.get_height() / ceramic_App.app.screen.height;
		_this.set_scaleX(scaleX);
		_this.set_scaleY(scaleY);
	}
	,rootScenes: null
	,set_main: function(main) {
		if(this.main != main) {
			this.main = main;
			this.set("main",main,this.bindMainToScreenSize,this.keepAssetsForNextMain);
		}
		return main;
	}
	,set: function(name,scene,bindToScreenSize,keepAssets) {
		if(keepAssets == null) {
			keepAssets = false;
		}
		if(bindToScreenSize == null) {
			bindToScreenSize = true;
		}
		var _gthis = this;
		var prevScene = this.rootScenes.h[name];
		if(scene != prevScene) {
			if(scene == null) {
				var _this = this.rootScenes;
				if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
					delete(_this.h[name]);
				}
				if(name == "main") {
					this.set_main(null);
				}
				if(prevScene._lifecycleState >= 0) {
					switch(prevScene.get_status()) {
					case 0:case 1:case 2:case 3:case 4:
						prevScene.scheduleOnceReady(prevScene,$bind(prevScene,prevScene.destroy));
						break;
					case 5:
						prevScene.fadeOut($bind(prevScene,prevScene.destroy));
						break;
					case 6:case 7:
						prevScene.destroy();
						break;
					}
				}
			} else {
				if(scene._lifecycleState < 0) {
					throw haxe_Exception.thrown("Cannot assign a destroyed scene as root scene!");
				}
				scene.isRootScene = true;
				var prevAssets = null;
				this.rootScenes.h[name] = scene;
				if(name == "main") {
					this.set_main(scene);
				}
				scene.onDestroy(this,function(destroyedScene) {
					var sceneInSlot = _gthis.rootScenes.h[name];
					if(destroyedScene == sceneInSlot) {
						var _this = _gthis.rootScenes;
						if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
							delete(_this.h[name]);
						}
						if(name == "main") {
							_gthis.set_main(null);
						}
					}
				});
				if(prevScene != null) {
					if(keepAssets) {
						prevAssets = prevScene._assets;
					}
					var fadeOutDone = function() {
						if(keepAssets) {
							prevScene._assets = null;
						}
						prevScene.destroy();
						prevScene = null;
					};
					if(this.fadeOutWhenNextMainCanFadeIn) {
						var handleStatusChange = null;
						switch(scene.get_status()) {
						case 0:case 1:case 2:case 3:
							handleStatusChange = function(current,previous) {
								switch(current) {
								case 0:case 1:case 2:case 3:
									break;
								case 4:case 5:case 6:case 7:
									scene.offStatusChange(handleStatusChange);
									switch(prevScene.get_status()) {
									case 5:
										prevScene.fadeOut(fadeOutDone);
										break;
									case 0:case 1:case 2:case 3:case 4:case 6:case 7:
										fadeOutDone();
										break;
									}
									break;
								}
							};
							scene.onStatusChange(prevScene,handleStatusChange);
							break;
						case 4:case 5:case 6:case 7:
							switch(prevScene.get_status()) {
							case 5:
								prevScene.fadeOut(fadeOutDone);
								break;
							case 0:case 1:case 2:case 3:case 4:case 6:case 7:
								fadeOutDone();
								break;
							}
							break;
						}
					} else {
						switch(prevScene.get_status()) {
						case 5:
							prevScene.fadeOut(fadeOutDone);
							break;
						case 0:case 1:case 2:case 3:case 4:case 6:case 7:
							fadeOutDone();
							break;
						}
					}
				}
				scene._assets = prevAssets;
				if(bindToScreenSize) {
					scene.bindToScreenSize();
				}
				if(this.filter != null) {
					this.filter.content.add(scene);
				}
				scene._boot();
			}
		}
	}
	,get: function(name) {
		return this.rootScenes.h[name];
	}
	,setCurrentScene: function(scene,keepAssets) {
		if(keepAssets == null) {
			keepAssets = false;
		}
		this.keepAssetsForNextMain = keepAssets;
		this.set_main(scene);
	}
	,lateUpdate: function(delta) {
		var len = this.all.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._updatingScenes[i] = this.all[i];
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var scene = this._updatingScenes[i];
			if((scene.flags & 1) == 1 && !scene.autoUpdateWhenInactive) {
				continue;
			}
			if(scene._lifecycleState < 0) {
				continue;
			}
			if(scene.get_status() == 0 && scene.parent != null) {
				scene._boot();
			}
			if(!scene.paused && scene.autoUpdate) {
				switch(scene.get_status()) {
				case 4:case 5:case 6:
					scene.update(delta);
					break;
				case 0:case 1:case 2:case 3:case 7:
					break;
				}
			}
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._updatingScenes[i] = null;
		}
		if(this.autoScaleFilter && this.filter != null) {
			this.scaleFilter();
		}
	}
	,__class__: ceramic_SceneSystem
	,__properties__: $extend(ceramic_System.prototype.__properties__,{set_filter:"set_filter",set_main:"set_main"})
});
var ceramic_Screen = function() {
	this.hitVisuals = [];
	this.matchedOverListeners = new haxe_ds_IntMap();
	this.matchedDownListeners = new haxe_ds_IntMap();
	this.visualsListenPointerOver = false;
	this.maxTouchIndex = -1;
	this.prevMouseY = 0;
	this.prevMouseX = 0;
	this.prevTouchPositions = new ceramic_IntFloatMap(16,0.5,false);
	this.pressedTouches = new ceramic_IntIntMap(16,0.5,false);
	this.pressedMouseButtons = new ceramic_IntIntMap(16,0.5,false);
	this._numPointerDown = 0;
	this.resizing = false;
	this.reverseMatrix = new ceramic_Transform();
	this.matrix = new ceramic_Transform();
	this.unobservedTexturesDensity = 1.0;
	this.texturesDensityAutoruns = null;
	this.unobservedFocusedVisual = null;
	this.focusedVisualAutoruns = null;
	this.touches = new ceramic_IntMap(8,0.5,false);
	this.mouseWheelDeltaY = 0;
	this.mouseWheelDeltaX = 0;
	this.mouseDeltaY = 0;
	this.mouseDeltaX = 0;
	this.mouseY = 0;
	this.mouseX = 0;
	this.pointerDeltaY = 0;
	this.pointerDeltaX = 0;
	this.pointerY = 0;
	this.pointerX = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.actualHeight = 0;
	this.actualWidth = 0;
	this.height = 0;
	this.width = 0;
	this.density = 1.0;
	this.observedDirty = false;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Screen"] = ceramic_Screen;
ceramic_Screen.__name__ = "ceramic.Screen";
ceramic_Screen.__interfaces__ = [tracker_Observable];
ceramic_Screen.__super__ = ceramic_Entity;
ceramic_Screen.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,density: null
	,width: null
	,height: null
	,actualWidth: null
	,actualHeight: null
	,offsetX: null
	,offsetY: null
	,nativeWidth: null
	,get_nativeWidth: function() {
		return clay_Clay.app.screenWidth;
	}
	,nativeHeight: null
	,get_nativeHeight: function() {
		return clay_Clay.app.screenHeight;
	}
	,nativeDensity: null
	,get_nativeDensity: function() {
		return clay_Clay.app.screenDensity;
	}
	,pointerX: null
	,pointerY: null
	,pointerDeltaX: null
	,pointerDeltaY: null
	,mouseX: null
	,mouseY: null
	,mouseDeltaX: null
	,mouseDeltaY: null
	,mouseWheelDeltaX: null
	,mouseWheelDeltaY: null
	,touches: null
	,focusedVisualAutoruns: null
	,get_focusedVisual: function() {
		var value = this.unobservedFocusedVisual;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.focusedVisualAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.focusedVisualAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_focusedVisual: function(focusedVisual) {
		var prevValue = this.unobservedFocusedVisual;
		this.set_unobservedFocusedVisual(focusedVisual);
		if(prevValue == focusedVisual) {
			return focusedVisual;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFocusedVisualChange(focusedVisual,prevValue);
		var fieldAutoruns = this.focusedVisualAutoruns;
		if(fieldAutoruns != null) {
			this.focusedVisualAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return focusedVisual;
	}
	,invalidateFocusedVisual: function() {
		var value = this.unobservedFocusedVisual;
		this.emitFocusedVisualChange(value,value);
		var fieldAutoruns = this.focusedVisualAutoruns;
		if(fieldAutoruns != null) {
			this.focusedVisualAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedFocusedVisual: null
	,__cbOnFocusedVisualChange: null
	,__cbOnceFocusedVisualChange: null
	,__cbOnOwnerUnbindFocusedVisualChange: null
	,__cbOnceOwnerUnbindFocusedVisualChange: null
	,emitFocusedVisualChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFocusedVisualChange != null) {
			len += this.__cbOnFocusedVisualChange.length;
		}
		if(this.__cbOnceFocusedVisualChange != null) {
			len += this.__cbOnceFocusedVisualChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFocusedVisualChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFocusedVisualChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFocusedVisualChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFocusedVisualChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFocusedVisualChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFocusedVisualChange[ii];
						this.__cbOnceFocusedVisualChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFocusedVisualChange[ii];
						this.__cbOnceOwnerUnbindFocusedVisualChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFocusedVisualChange[ii]);
						newCbOnceArray.push(this.__cbOnceFocusedVisualChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFocusedVisualChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFocusedVisualChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFocusedVisualChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focusedVisualChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFocusedVisualChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFocusedVisualChange == null) {
				this.__cbOnOwnerUnbindFocusedVisualChange = [];
			}
			this.__cbOnOwnerUnbindFocusedVisualChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFocusedVisualChange == null) {
				this.__cbOnOwnerUnbindFocusedVisualChange = [];
			}
			this.__cbOnOwnerUnbindFocusedVisualChange.push(null);
		}
		if(this.__cbOnFocusedVisualChange == null) {
			this.__cbOnFocusedVisualChange = [];
		}
		this.__cbOnFocusedVisualChange.push(handleCurrentPrevious);
	}
	,onceFocusedVisualChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focusedVisualChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFocusedVisualChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFocusedVisualChange == null) {
				this.__cbOnceOwnerUnbindFocusedVisualChange = [];
			}
			this.__cbOnceOwnerUnbindFocusedVisualChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFocusedVisualChange == null) {
				this.__cbOnceOwnerUnbindFocusedVisualChange = [];
			}
			this.__cbOnceOwnerUnbindFocusedVisualChange.push(null);
		}
		if(this.__cbOnceFocusedVisualChange == null) {
			this.__cbOnceFocusedVisualChange = [];
		}
		this.__cbOnceFocusedVisualChange.push(handleCurrentPrevious);
	}
	,offFocusedVisualChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFocusedVisualChange != null) {
				index = this.__cbOnFocusedVisualChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFocusedVisualChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFocusedVisualChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFocusedVisualChange.splice(index,1);
				}
			}
			if(this.__cbOnceFocusedVisualChange != null) {
				index = this.__cbOnceFocusedVisualChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFocusedVisualChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFocusedVisualChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFocusedVisualChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFocusedVisualChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFocusedVisualChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFocusedVisualChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFocusedVisualChange = null;
			}
			if(this.__cbOnceOwnerUnbindFocusedVisualChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFocusedVisualChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFocusedVisualChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFocusedVisualChange = null;
			}
			this.__cbOnFocusedVisualChange = null;
			this.__cbOnceFocusedVisualChange = null;
		}
	}
	,listensFocusedVisualChange: function() {
		if(!(this.__cbOnFocusedVisualChange != null && this.__cbOnFocusedVisualChange.length > 0)) {
			if(this.__cbOnceFocusedVisualChange != null) {
				return this.__cbOnceFocusedVisualChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_unobservedFocusedVisual: function(focusedVisual) {
		if(this.unobservedFocusedVisual == focusedVisual) {
			return focusedVisual;
		}
		var prevFocused = this.unobservedFocusedVisual;
		this.unobservedFocusedVisual = focusedVisual;
		if(prevFocused != null) {
			this.emitBlur(prevFocused);
			prevFocused.emitBlur();
		}
		if(focusedVisual != null) {
			this.emitFocus(focusedVisual);
			focusedVisual.emitFocus();
		}
		return focusedVisual;
	}
	,texturesDensityAutoruns: null
	,get_texturesDensity: function() {
		var value = this.unobservedTexturesDensity;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.texturesDensityAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.texturesDensityAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_texturesDensity: function(texturesDensity) {
		var prevValue = this.unobservedTexturesDensity;
		this.unobservedTexturesDensity = texturesDensity;
		if(prevValue == texturesDensity) {
			return texturesDensity;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTexturesDensityChange(texturesDensity,prevValue);
		var fieldAutoruns = this.texturesDensityAutoruns;
		if(fieldAutoruns != null) {
			this.texturesDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return texturesDensity;
	}
	,invalidateTexturesDensity: function() {
		var value = this.unobservedTexturesDensity;
		this.emitTexturesDensityChange(value,value);
		var fieldAutoruns = this.texturesDensityAutoruns;
		if(fieldAutoruns != null) {
			this.texturesDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTexturesDensity: null
	,__cbOnTexturesDensityChange: null
	,__cbOnceTexturesDensityChange: null
	,__cbOnOwnerUnbindTexturesDensityChange: null
	,__cbOnceOwnerUnbindTexturesDensityChange: null
	,emitTexturesDensityChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTexturesDensityChange != null) {
			len += this.__cbOnTexturesDensityChange.length;
		}
		if(this.__cbOnceTexturesDensityChange != null) {
			len += this.__cbOnceTexturesDensityChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTexturesDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTexturesDensityChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTexturesDensityChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTexturesDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTexturesDensityChange[ii];
						this.__cbOnceTexturesDensityChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTexturesDensityChange[ii];
						this.__cbOnceOwnerUnbindTexturesDensityChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTexturesDensityChange[ii]);
						newCbOnceArray.push(this.__cbOnceTexturesDensityChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTexturesDensityChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTexturesDensityChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTexturesDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "texturesDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTexturesDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnOwnerUnbindTexturesDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnOwnerUnbindTexturesDensityChange.push(null);
		}
		if(this.__cbOnTexturesDensityChange == null) {
			this.__cbOnTexturesDensityChange = [];
		}
		this.__cbOnTexturesDensityChange.push(handleCurrentPrevious);
	}
	,onceTexturesDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "texturesDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTexturesDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnceOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTexturesDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTexturesDensityChange == null) {
				this.__cbOnceOwnerUnbindTexturesDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTexturesDensityChange.push(null);
		}
		if(this.__cbOnceTexturesDensityChange == null) {
			this.__cbOnceTexturesDensityChange = [];
		}
		this.__cbOnceTexturesDensityChange.push(handleCurrentPrevious);
	}
	,offTexturesDensityChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTexturesDensityChange != null) {
				index = this.__cbOnTexturesDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTexturesDensityChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTexturesDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTexturesDensityChange.splice(index,1);
				}
			}
			if(this.__cbOnceTexturesDensityChange != null) {
				index = this.__cbOnceTexturesDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTexturesDensityChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTexturesDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTexturesDensityChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTexturesDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTexturesDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTexturesDensityChange = null;
			}
			if(this.__cbOnceOwnerUnbindTexturesDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTexturesDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTexturesDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTexturesDensityChange = null;
			}
			this.__cbOnTexturesDensityChange = null;
			this.__cbOnceTexturesDensityChange = null;
		}
	}
	,listensTexturesDensityChange: function() {
		if(!(this.__cbOnTexturesDensityChange != null && this.__cbOnTexturesDensityChange.length > 0)) {
			if(this.__cbOnceTexturesDensityChange != null) {
				return this.__cbOnceTexturesDensityChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,matrix: null
	,reverseMatrix: null
	,resizing: null
	,isPointerDown: null
	,_numPointerDown: null
	,get_isPointerDown: function() {
		return this._numPointerDown > 0;
	}
	,pressedMouseButtons: null
	,pressedTouches: null
	,prevTouchPositions: null
	,prevMouseX: null
	,prevMouseY: null
	,maxTouchIndex: null
	,visualsListenPointerOver: null
	,__cbOnResize: null
	,__cbOnceResize: null
	,__cbOnOwnerUnbindResize: null
	,__cbOnceOwnerUnbindResize: null
	,emitResize: function() {
		var len = 0;
		if(this.__cbOnResize != null) {
			len += this.__cbOnResize.length;
		}
		if(this.__cbOnceResize != null) {
			len += this.__cbOnceResize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnResize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnResize[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceResize != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceResize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceResize[ii];
						this.__cbOnceResize[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindResize[ii];
						this.__cbOnceOwnerUnbindResize[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindResize[ii]);
						newCbOnceArray.push(this.__cbOnceResize[ii]);
					}
				}
				this.__cbOnceOwnerUnbindResize = newCbOnceOwnerUnbindArray;
				this.__cbOnceResize = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindResize == null) {
				this.__cbOnOwnerUnbindResize = [];
			}
			this.__cbOnOwnerUnbindResize.push(null);
		}
		if(this.__cbOnResize == null) {
			this.__cbOnResize = [];
		}
		this.__cbOnResize.push(handle);
	}
	,onceResize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "resize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offResize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindResize == null) {
				this.__cbOnceOwnerUnbindResize = [];
			}
			this.__cbOnceOwnerUnbindResize.push(null);
		}
		if(this.__cbOnceResize == null) {
			this.__cbOnceResize = [];
		}
		this.__cbOnceResize.push(handle);
	}
	,offResize: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnResize != null) {
				index = this.__cbOnResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnResize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindResize.splice(index,1);
				}
			}
			if(this.__cbOnceResize != null) {
				index = this.__cbOnceResize.indexOf(handle);
				if(index != -1) {
					this.__cbOnceResize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindResize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindResize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindResize = null;
			}
			if(this.__cbOnceOwnerUnbindResize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindResize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindResize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindResize = null;
			}
			this.__cbOnResize = null;
			this.__cbOnceResize = null;
		}
	}
	,listensResize: function() {
		if(!(this.__cbOnResize != null && this.__cbOnResize.length > 0)) {
			if(this.__cbOnceResize != null) {
				return this.__cbOnceResize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseDown: null
	,__cbOnceMouseDown: null
	,__cbOnOwnerUnbindMouseDown: null
	,__cbOnceOwnerUnbindMouseDown: null
	,emitMouseDown: function(buttonId,x,y) {
		this.willEmitMouseDown(buttonId,x,y);
		var len = 0;
		if(this.__cbOnMouseDown != null) {
			len += this.__cbOnMouseDown.length;
		}
		if(this.__cbOnceMouseDown != null) {
			len += this.__cbOnceMouseDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseDown[ii];
						this.__cbOnceMouseDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseDown[ii];
						this.__cbOnceOwnerUnbindMouseDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseDown[ii]);
						newCbOnceArray.push(this.__cbOnceMouseDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var matched = this.matchFirstDownListener(x,y,-1,buttonId);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(-1,buttonId,x,y,true));
			}
		}
		var id = 10000 + buttonId;
		this.matchedDownListeners.h[id] = matched;
	}
	,onMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseDown == null) {
				this.__cbOnOwnerUnbindMouseDown = [];
			}
			this.__cbOnOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnMouseDown == null) {
			this.__cbOnMouseDown = [];
		}
		this.__cbOnMouseDown.push(handleButtonIdXY);
	}
	,onceMouseDown: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseDown(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseDown == null) {
				this.__cbOnceOwnerUnbindMouseDown = [];
			}
			this.__cbOnceOwnerUnbindMouseDown.push(null);
		}
		if(this.__cbOnceMouseDown == null) {
			this.__cbOnceMouseDown = [];
		}
		this.__cbOnceMouseDown.push(handleButtonIdXY);
	}
	,offMouseDown: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseDown != null) {
				index = this.__cbOnMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseDown.splice(index,1);
				}
			}
			if(this.__cbOnceMouseDown != null) {
				index = this.__cbOnceMouseDown.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseDown = null;
			}
			if(this.__cbOnceOwnerUnbindMouseDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseDown = null;
			}
			this.__cbOnMouseDown = null;
			this.__cbOnceMouseDown = null;
		}
	}
	,listensMouseDown: function() {
		if(!(this.__cbOnMouseDown != null && this.__cbOnMouseDown.length > 0)) {
			if(this.__cbOnceMouseDown != null) {
				return this.__cbOnceMouseDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseUp: null
	,__cbOnceMouseUp: null
	,__cbOnOwnerUnbindMouseUp: null
	,__cbOnceOwnerUnbindMouseUp: null
	,emitMouseUp: function(buttonId,x,y) {
		this.willEmitMouseUp(buttonId,x,y);
		var len = 0;
		if(this.__cbOnMouseUp != null) {
			len += this.__cbOnMouseUp.length;
		}
		if(this.__cbOnceMouseUp != null) {
			len += this.__cbOnceMouseUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseUp[ii];
						this.__cbOnceMouseUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseUp[ii];
						this.__cbOnceOwnerUnbindMouseUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseUp[ii]);
						newCbOnceArray.push(this.__cbOnceMouseUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(buttonId,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var id = 10000 + buttonId;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(-1,buttonId,x,y,matched._hits(x,y,false)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,onMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseUp == null) {
				this.__cbOnOwnerUnbindMouseUp = [];
			}
			this.__cbOnOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnMouseUp == null) {
			this.__cbOnMouseUp = [];
		}
		this.__cbOnMouseUp.push(handleButtonIdXY);
	}
	,onceMouseUp: function(owner,handleButtonIdXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleButtonIdXY != null) {
					_gthis.offMouseUp(handleButtonIdXY);
					handleButtonIdXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleButtonIdXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseUp == null) {
				this.__cbOnceOwnerUnbindMouseUp = [];
			}
			this.__cbOnceOwnerUnbindMouseUp.push(null);
		}
		if(this.__cbOnceMouseUp == null) {
			this.__cbOnceMouseUp = [];
		}
		this.__cbOnceMouseUp.push(handleButtonIdXY);
	}
	,offMouseUp: function(handleButtonIdXY) {
		if(handleButtonIdXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseUp != null) {
				index = this.__cbOnMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnMouseUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseUp.splice(index,1);
				}
			}
			if(this.__cbOnceMouseUp != null) {
				index = this.__cbOnceMouseUp.indexOf(handleButtonIdXY);
				if(index != -1) {
					this.__cbOnceMouseUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseUp = null;
			}
			if(this.__cbOnceOwnerUnbindMouseUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseUp = null;
			}
			this.__cbOnMouseUp = null;
			this.__cbOnceMouseUp = null;
		}
	}
	,listensMouseUp: function() {
		if(!(this.__cbOnMouseUp != null && this.__cbOnMouseUp.length > 0)) {
			if(this.__cbOnceMouseUp != null) {
				return this.__cbOnceMouseUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseWheel: null
	,__cbOnceMouseWheel: null
	,__cbOnOwnerUnbindMouseWheel: null
	,__cbOnceOwnerUnbindMouseWheel: null
	,emitMouseWheel: function(x,y) {
		this.willEmitMouseWheel(x,y);
		var len = 0;
		if(this.__cbOnMouseWheel != null) {
			len += this.__cbOnMouseWheel.length;
		}
		if(this.__cbOnceMouseWheel != null) {
			len += this.__cbOnceMouseWheel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseWheel[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseWheel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseWheel[ii];
						this.__cbOnceMouseWheel[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseWheel[ii];
						this.__cbOnceOwnerUnbindMouseWheel[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseWheel[ii]);
						newCbOnceArray.push(this.__cbOnceMouseWheel[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseWheel = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseWheel = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel == null) {
				this.__cbOnOwnerUnbindMouseWheel = [];
			}
			this.__cbOnOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnMouseWheel == null) {
			this.__cbOnMouseWheel = [];
		}
		this.__cbOnMouseWheel.push(handleXY);
	}
	,onceMouseWheel: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseWheel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseWheel(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseWheel == null) {
				this.__cbOnceOwnerUnbindMouseWheel = [];
			}
			this.__cbOnceOwnerUnbindMouseWheel.push(null);
		}
		if(this.__cbOnceMouseWheel == null) {
			this.__cbOnceMouseWheel = [];
		}
		this.__cbOnceMouseWheel.push(handleXY);
	}
	,offMouseWheel: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseWheel != null) {
				index = this.__cbOnMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseWheel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseWheel.splice(index,1);
				}
			}
			if(this.__cbOnceMouseWheel != null) {
				index = this.__cbOnceMouseWheel.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseWheel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseWheel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseWheel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseWheel = null;
			}
			if(this.__cbOnceOwnerUnbindMouseWheel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseWheel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseWheel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseWheel = null;
			}
			this.__cbOnMouseWheel = null;
			this.__cbOnceMouseWheel = null;
		}
	}
	,listensMouseWheel: function() {
		if(!(this.__cbOnMouseWheel != null && this.__cbOnMouseWheel.length > 0)) {
			if(this.__cbOnceMouseWheel != null) {
				return this.__cbOnceMouseWheel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMouseMove: null
	,__cbOnceMouseMove: null
	,__cbOnOwnerUnbindMouseMove: null
	,__cbOnceOwnerUnbindMouseMove: null
	,emitMouseMove: function(x,y) {
		this.willEmitMouseMove(x,y);
		var len = 0;
		if(this.__cbOnMouseMove != null) {
			len += this.__cbOnMouseMove.length;
		}
		if(this.__cbOnceMouseMove != null) {
			len += this.__cbOnceMouseMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMouseMove[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMouseMove != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMouseMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMouseMove[ii];
						this.__cbOnceMouseMove[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMouseMove[ii];
						this.__cbOnceOwnerUnbindMouseMove[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMouseMove[ii]);
						newCbOnceArray.push(this.__cbOnceMouseMove[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMouseMove = newCbOnceOwnerUnbindArray;
				this.__cbOnceMouseMove = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMouseMove == null) {
				this.__cbOnOwnerUnbindMouseMove = [];
			}
			this.__cbOnOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnMouseMove == null) {
			this.__cbOnMouseMove = [];
		}
		this.__cbOnMouseMove.push(handleXY);
	}
	,onceMouseMove: function(owner,handleXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "mouseMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleXY != null) {
					_gthis.offMouseMove(handleXY);
					handleXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMouseMove == null) {
				this.__cbOnceOwnerUnbindMouseMove = [];
			}
			this.__cbOnceOwnerUnbindMouseMove.push(null);
		}
		if(this.__cbOnceMouseMove == null) {
			this.__cbOnceMouseMove = [];
		}
		this.__cbOnceMouseMove.push(handleXY);
	}
	,offMouseMove: function(handleXY) {
		if(handleXY != null) {
			var index;
			var unbind;
			if(this.__cbOnMouseMove != null) {
				index = this.__cbOnMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnMouseMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMouseMove.splice(index,1);
				}
			}
			if(this.__cbOnceMouseMove != null) {
				index = this.__cbOnceMouseMove.indexOf(handleXY);
				if(index != -1) {
					this.__cbOnceMouseMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMouseMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMouseMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMouseMove = null;
			}
			if(this.__cbOnceOwnerUnbindMouseMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMouseMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMouseMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMouseMove = null;
			}
			this.__cbOnMouseMove = null;
			this.__cbOnceMouseMove = null;
		}
	}
	,listensMouseMove: function() {
		if(!(this.__cbOnMouseMove != null && this.__cbOnMouseMove.length > 0)) {
			if(this.__cbOnceMouseMove != null) {
				return this.__cbOnceMouseMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTouchDown: null
	,__cbOnceTouchDown: null
	,__cbOnOwnerUnbindTouchDown: null
	,__cbOnceOwnerUnbindTouchDown: null
	,emitTouchDown: function(touchIndex,x,y) {
		this.willEmitTouchDown(touchIndex,x,y);
		var len = 0;
		if(this.__cbOnTouchDown != null) {
			len += this.__cbOnTouchDown.length;
		}
		if(this.__cbOnceTouchDown != null) {
			len += this.__cbOnceTouchDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTouchDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTouchDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTouchDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTouchDown[ii];
						this.__cbOnceTouchDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTouchDown[ii];
						this.__cbOnceOwnerUnbindTouchDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTouchDown[ii]);
						newCbOnceArray.push(this.__cbOnceTouchDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTouchDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceTouchDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var matched = this.matchFirstDownListener(x,y,touchIndex,-1);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(touchIndex,-1,x,y,true));
			}
		}
		var id = 20000 + touchIndex;
		this.matchedDownListeners.h[id] = matched;
	}
	,onTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchDown == null) {
				this.__cbOnOwnerUnbindTouchDown = [];
			}
			this.__cbOnOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnTouchDown == null) {
			this.__cbOnTouchDown = [];
		}
		this.__cbOnTouchDown.push(handleTouchIndexXY);
	}
	,onceTouchDown: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchDown(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchDown == null) {
				this.__cbOnceOwnerUnbindTouchDown = [];
			}
			this.__cbOnceOwnerUnbindTouchDown.push(null);
		}
		if(this.__cbOnceTouchDown == null) {
			this.__cbOnceTouchDown = [];
		}
		this.__cbOnceTouchDown.push(handleTouchIndexXY);
	}
	,offTouchDown: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchDown != null) {
				index = this.__cbOnTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchDown.splice(index,1);
				}
			}
			if(this.__cbOnceTouchDown != null) {
				index = this.__cbOnceTouchDown.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchDown = null;
			}
			if(this.__cbOnceOwnerUnbindTouchDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchDown = null;
			}
			this.__cbOnTouchDown = null;
			this.__cbOnceTouchDown = null;
		}
	}
	,listensTouchDown: function() {
		if(!(this.__cbOnTouchDown != null && this.__cbOnTouchDown.length > 0)) {
			if(this.__cbOnceTouchDown != null) {
				return this.__cbOnceTouchDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTouchUp: null
	,__cbOnceTouchUp: null
	,__cbOnOwnerUnbindTouchUp: null
	,__cbOnceOwnerUnbindTouchUp: null
	,emitTouchUp: function(touchIndex,x,y) {
		this.willEmitTouchUp(touchIndex,x,y);
		var len = 0;
		if(this.__cbOnTouchUp != null) {
			len += this.__cbOnTouchUp.length;
		}
		if(this.__cbOnceTouchUp != null) {
			len += this.__cbOnceTouchUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTouchUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTouchUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTouchUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTouchUp[ii];
						this.__cbOnceTouchUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTouchUp[ii];
						this.__cbOnceOwnerUnbindTouchUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTouchUp[ii]);
						newCbOnceArray.push(this.__cbOnceTouchUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTouchUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceTouchUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		var id = 20000 + touchIndex;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(touchIndex,-1,x,y,matched._hits(x,y,false)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,onTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchUp == null) {
				this.__cbOnOwnerUnbindTouchUp = [];
			}
			this.__cbOnOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnTouchUp == null) {
			this.__cbOnTouchUp = [];
		}
		this.__cbOnTouchUp.push(handleTouchIndexXY);
	}
	,onceTouchUp: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchUp(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchUp == null) {
				this.__cbOnceOwnerUnbindTouchUp = [];
			}
			this.__cbOnceOwnerUnbindTouchUp.push(null);
		}
		if(this.__cbOnceTouchUp == null) {
			this.__cbOnceTouchUp = [];
		}
		this.__cbOnceTouchUp.push(handleTouchIndexXY);
	}
	,offTouchUp: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchUp != null) {
				index = this.__cbOnTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchUp.splice(index,1);
				}
			}
			if(this.__cbOnceTouchUp != null) {
				index = this.__cbOnceTouchUp.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchUp = null;
			}
			if(this.__cbOnceOwnerUnbindTouchUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchUp = null;
			}
			this.__cbOnTouchUp = null;
			this.__cbOnceTouchUp = null;
		}
	}
	,listensTouchUp: function() {
		if(!(this.__cbOnTouchUp != null && this.__cbOnTouchUp.length > 0)) {
			if(this.__cbOnceTouchUp != null) {
				return this.__cbOnceTouchUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnTouchMove: null
	,__cbOnceTouchMove: null
	,__cbOnOwnerUnbindTouchMove: null
	,__cbOnceOwnerUnbindTouchMove: null
	,emitTouchMove: function(touchIndex,x,y) {
		this.willEmitTouchMove(touchIndex,x,y);
		var len = 0;
		if(this.__cbOnTouchMove != null) {
			len += this.__cbOnTouchMove.length;
		}
		if(this.__cbOnceTouchMove != null) {
			len += this.__cbOnceTouchMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTouchMove[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTouchMove != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTouchMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTouchMove[ii];
						this.__cbOnceTouchMove[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTouchMove[ii];
						this.__cbOnceOwnerUnbindTouchMove[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTouchMove[ii]);
						newCbOnceArray.push(this.__cbOnceTouchMove[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTouchMove = newCbOnceOwnerUnbindArray;
				this.__cbOnceTouchMove = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(touchIndex,x,y);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTouchMove == null) {
				this.__cbOnOwnerUnbindTouchMove = [];
			}
			this.__cbOnOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnTouchMove == null) {
			this.__cbOnTouchMove = [];
		}
		this.__cbOnTouchMove.push(handleTouchIndexXY);
	}
	,onceTouchMove: function(owner,handleTouchIndexXY) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "touchMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTouchIndexXY != null) {
					_gthis.offTouchMove(handleTouchIndexXY);
					handleTouchIndexXY = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTouchIndexXY = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTouchMove == null) {
				this.__cbOnceOwnerUnbindTouchMove = [];
			}
			this.__cbOnceOwnerUnbindTouchMove.push(null);
		}
		if(this.__cbOnceTouchMove == null) {
			this.__cbOnceTouchMove = [];
		}
		this.__cbOnceTouchMove.push(handleTouchIndexXY);
	}
	,offTouchMove: function(handleTouchIndexXY) {
		if(handleTouchIndexXY != null) {
			var index;
			var unbind;
			if(this.__cbOnTouchMove != null) {
				index = this.__cbOnTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnTouchMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTouchMove.splice(index,1);
				}
			}
			if(this.__cbOnceTouchMove != null) {
				index = this.__cbOnceTouchMove.indexOf(handleTouchIndexXY);
				if(index != -1) {
					this.__cbOnceTouchMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTouchMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTouchMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTouchMove = null;
			}
			if(this.__cbOnceOwnerUnbindTouchMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTouchMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTouchMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTouchMove = null;
			}
			this.__cbOnTouchMove = null;
			this.__cbOnceTouchMove = null;
		}
	}
	,listensTouchMove: function() {
		if(!(this.__cbOnTouchMove != null && this.__cbOnTouchMove.length > 0)) {
			if(this.__cbOnceTouchMove != null) {
				return this.__cbOnceTouchMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPointerDown: null
	,__cbOncePointerDown: null
	,__cbOnOwnerUnbindPointerDown: null
	,__cbOnceOwnerUnbindPointerDown: null
	,emitPointerDown: function(info) {
		var len = 0;
		if(this.__cbOnPointerDown != null) {
			len += this.__cbOnPointerDown.length;
		}
		if(this.__cbOncePointerDown != null) {
			len += this.__cbOncePointerDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerDown[ii];
						this.__cbOncePointerDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerDown[ii];
						this.__cbOnceOwnerUnbindPointerDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerDown[ii]);
						newCbOnceArray.push(this.__cbOncePointerDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerDown = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerDown == null) {
				this.__cbOnOwnerUnbindPointerDown = [];
			}
			this.__cbOnOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOnPointerDown == null) {
			this.__cbOnPointerDown = [];
		}
		this.__cbOnPointerDown.push(handleInfo);
	}
	,oncePointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerDown == null) {
				this.__cbOnceOwnerUnbindPointerDown = [];
			}
			this.__cbOnceOwnerUnbindPointerDown.push(null);
		}
		if(this.__cbOncePointerDown == null) {
			this.__cbOncePointerDown = [];
		}
		this.__cbOncePointerDown.push(handleInfo);
	}
	,offPointerDown: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerDown != null) {
				index = this.__cbOnPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerDown.splice(index,1);
				}
			}
			if(this.__cbOncePointerDown != null) {
				index = this.__cbOncePointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerDown = null;
			}
			if(this.__cbOnceOwnerUnbindPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerDown = null;
			}
			this.__cbOnPointerDown = null;
			this.__cbOncePointerDown = null;
		}
	}
	,listensPointerDown: function() {
		if(!(this.__cbOnPointerDown != null && this.__cbOnPointerDown.length > 0)) {
			if(this.__cbOncePointerDown != null) {
				return this.__cbOncePointerDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPointerUp: null
	,__cbOncePointerUp: null
	,__cbOnOwnerUnbindPointerUp: null
	,__cbOnceOwnerUnbindPointerUp: null
	,emitPointerUp: function(info) {
		var len = 0;
		if(this.__cbOnPointerUp != null) {
			len += this.__cbOnPointerUp.length;
		}
		if(this.__cbOncePointerUp != null) {
			len += this.__cbOncePointerUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerUp[ii];
						this.__cbOncePointerUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerUp[ii];
						this.__cbOnceOwnerUnbindPointerUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerUp[ii]);
						newCbOnceArray.push(this.__cbOncePointerUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerUp = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerUp == null) {
				this.__cbOnOwnerUnbindPointerUp = [];
			}
			this.__cbOnOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOnPointerUp == null) {
			this.__cbOnPointerUp = [];
		}
		this.__cbOnPointerUp.push(handleInfo);
	}
	,oncePointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerUp == null) {
				this.__cbOnceOwnerUnbindPointerUp = [];
			}
			this.__cbOnceOwnerUnbindPointerUp.push(null);
		}
		if(this.__cbOncePointerUp == null) {
			this.__cbOncePointerUp = [];
		}
		this.__cbOncePointerUp.push(handleInfo);
	}
	,offPointerUp: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerUp != null) {
				index = this.__cbOnPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerUp.splice(index,1);
				}
			}
			if(this.__cbOncePointerUp != null) {
				index = this.__cbOncePointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerUp = null;
			}
			if(this.__cbOnceOwnerUnbindPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerUp = null;
			}
			this.__cbOnPointerUp = null;
			this.__cbOncePointerUp = null;
		}
	}
	,listensPointerUp: function() {
		if(!(this.__cbOnPointerUp != null && this.__cbOnPointerUp.length > 0)) {
			if(this.__cbOncePointerUp != null) {
				return this.__cbOncePointerUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnPointerMove: null
	,__cbOncePointerMove: null
	,__cbOnOwnerUnbindPointerMove: null
	,__cbOnceOwnerUnbindPointerMove: null
	,emitPointerMove: function(info) {
		var len = 0;
		if(this.__cbOnPointerMove != null) {
			len += this.__cbOnPointerMove.length;
		}
		if(this.__cbOncePointerMove != null) {
			len += this.__cbOncePointerMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnPointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPointerMove[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePointerMove != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePointerMove[ii];
						this.__cbOncePointerMove[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPointerMove[ii];
						this.__cbOnceOwnerUnbindPointerMove[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPointerMove[ii]);
						newCbOnceArray.push(this.__cbOncePointerMove[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPointerMove = newCbOnceOwnerUnbindArray;
				this.__cbOncePointerMove = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPointerMove == null) {
				this.__cbOnOwnerUnbindPointerMove = [];
			}
			this.__cbOnOwnerUnbindPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPointerMove == null) {
				this.__cbOnOwnerUnbindPointerMove = [];
			}
			this.__cbOnOwnerUnbindPointerMove.push(null);
		}
		if(this.__cbOnPointerMove == null) {
			this.__cbOnPointerMove = [];
		}
		this.__cbOnPointerMove.push(handleInfo);
	}
	,oncePointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "pointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPointerMove == null) {
				this.__cbOnceOwnerUnbindPointerMove = [];
			}
			this.__cbOnceOwnerUnbindPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPointerMove == null) {
				this.__cbOnceOwnerUnbindPointerMove = [];
			}
			this.__cbOnceOwnerUnbindPointerMove.push(null);
		}
		if(this.__cbOncePointerMove == null) {
			this.__cbOncePointerMove = [];
		}
		this.__cbOncePointerMove.push(handleInfo);
	}
	,offPointerMove: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnPointerMove != null) {
				index = this.__cbOnPointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnPointerMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPointerMove.splice(index,1);
				}
			}
			if(this.__cbOncePointerMove != null) {
				index = this.__cbOncePointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOncePointerMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPointerMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPointerMove = null;
			}
			if(this.__cbOnceOwnerUnbindPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPointerMove = null;
			}
			this.__cbOnPointerMove = null;
			this.__cbOncePointerMove = null;
		}
	}
	,listensPointerMove: function() {
		if(!(this.__cbOnPointerMove != null && this.__cbOnPointerMove.length > 0)) {
			if(this.__cbOncePointerMove != null) {
				return this.__cbOncePointerMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMultiTouchPointerDown: null
	,__cbOnceMultiTouchPointerDown: null
	,__cbOnOwnerUnbindMultiTouchPointerDown: null
	,__cbOnceOwnerUnbindMultiTouchPointerDown: null
	,emitMultiTouchPointerDown: function(info) {
		var len = 0;
		if(this.__cbOnMultiTouchPointerDown != null) {
			len += this.__cbOnMultiTouchPointerDown.length;
		}
		if(this.__cbOnceMultiTouchPointerDown != null) {
			len += this.__cbOnceMultiTouchPointerDown.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnMultiTouchPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMultiTouchPointerDown[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMultiTouchPointerDown != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMultiTouchPointerDown.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMultiTouchPointerDown[ii];
						this.__cbOnceMultiTouchPointerDown[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerDown[ii];
						this.__cbOnceOwnerUnbindMultiTouchPointerDown[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMultiTouchPointerDown[ii]);
						newCbOnceArray.push(this.__cbOnceMultiTouchPointerDown[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = newCbOnceOwnerUnbindArray;
				this.__cbOnceMultiTouchPointerDown = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMultiTouchPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerDown.push(null);
		}
		if(this.__cbOnMultiTouchPointerDown == null) {
			this.__cbOnMultiTouchPointerDown = [];
		}
		this.__cbOnMultiTouchPointerDown.push(handleInfo);
	}
	,onceMultiTouchPointerDown: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerDown" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerDown(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerDown.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMultiTouchPointerDown == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerDown.push(null);
		}
		if(this.__cbOnceMultiTouchPointerDown == null) {
			this.__cbOnceMultiTouchPointerDown = [];
		}
		this.__cbOnceMultiTouchPointerDown.push(handleInfo);
	}
	,offMultiTouchPointerDown: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnMultiTouchPointerDown != null) {
				index = this.__cbOnMultiTouchPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnMultiTouchPointerDown.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMultiTouchPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMultiTouchPointerDown.splice(index,1);
				}
			}
			if(this.__cbOnceMultiTouchPointerDown != null) {
				index = this.__cbOnceMultiTouchPointerDown.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnceMultiTouchPointerDown.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMultiTouchPointerDown[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMultiTouchPointerDown.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMultiTouchPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMultiTouchPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMultiTouchPointerDown = null;
			}
			if(this.__cbOnceOwnerUnbindMultiTouchPointerDown != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMultiTouchPointerDown.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerDown[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerDown = null;
			}
			this.__cbOnMultiTouchPointerDown = null;
			this.__cbOnceMultiTouchPointerDown = null;
		}
	}
	,listensMultiTouchPointerDown: function() {
		if(!(this.__cbOnMultiTouchPointerDown != null && this.__cbOnMultiTouchPointerDown.length > 0)) {
			if(this.__cbOnceMultiTouchPointerDown != null) {
				return this.__cbOnceMultiTouchPointerDown.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMultiTouchPointerUp: null
	,__cbOnceMultiTouchPointerUp: null
	,__cbOnOwnerUnbindMultiTouchPointerUp: null
	,__cbOnceOwnerUnbindMultiTouchPointerUp: null
	,emitMultiTouchPointerUp: function(info) {
		var len = 0;
		if(this.__cbOnMultiTouchPointerUp != null) {
			len += this.__cbOnMultiTouchPointerUp.length;
		}
		if(this.__cbOnceMultiTouchPointerUp != null) {
			len += this.__cbOnceMultiTouchPointerUp.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnMultiTouchPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMultiTouchPointerUp[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMultiTouchPointerUp != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMultiTouchPointerUp.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMultiTouchPointerUp[ii];
						this.__cbOnceMultiTouchPointerUp[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerUp[ii];
						this.__cbOnceOwnerUnbindMultiTouchPointerUp[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMultiTouchPointerUp[ii]);
						newCbOnceArray.push(this.__cbOnceMultiTouchPointerUp[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = newCbOnceOwnerUnbindArray;
				this.__cbOnceMultiTouchPointerUp = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMultiTouchPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerUp.push(null);
		}
		if(this.__cbOnMultiTouchPointerUp == null) {
			this.__cbOnMultiTouchPointerUp = [];
		}
		this.__cbOnMultiTouchPointerUp.push(handleInfo);
	}
	,onceMultiTouchPointerUp: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerUp" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerUp(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerUp.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMultiTouchPointerUp == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerUp.push(null);
		}
		if(this.__cbOnceMultiTouchPointerUp == null) {
			this.__cbOnceMultiTouchPointerUp = [];
		}
		this.__cbOnceMultiTouchPointerUp.push(handleInfo);
	}
	,offMultiTouchPointerUp: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnMultiTouchPointerUp != null) {
				index = this.__cbOnMultiTouchPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnMultiTouchPointerUp.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMultiTouchPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMultiTouchPointerUp.splice(index,1);
				}
			}
			if(this.__cbOnceMultiTouchPointerUp != null) {
				index = this.__cbOnceMultiTouchPointerUp.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnceMultiTouchPointerUp.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMultiTouchPointerUp[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMultiTouchPointerUp.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMultiTouchPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMultiTouchPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMultiTouchPointerUp = null;
			}
			if(this.__cbOnceOwnerUnbindMultiTouchPointerUp != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMultiTouchPointerUp.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerUp[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerUp = null;
			}
			this.__cbOnMultiTouchPointerUp = null;
			this.__cbOnceMultiTouchPointerUp = null;
		}
	}
	,listensMultiTouchPointerUp: function() {
		if(!(this.__cbOnMultiTouchPointerUp != null && this.__cbOnMultiTouchPointerUp.length > 0)) {
			if(this.__cbOnceMultiTouchPointerUp != null) {
				return this.__cbOnceMultiTouchPointerUp.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnMultiTouchPointerMove: null
	,__cbOnceMultiTouchPointerMove: null
	,__cbOnOwnerUnbindMultiTouchPointerMove: null
	,__cbOnceOwnerUnbindMultiTouchPointerMove: null
	,emitMultiTouchPointerMove: function(info) {
		var len = 0;
		if(this.__cbOnMultiTouchPointerMove != null) {
			len += this.__cbOnMultiTouchPointerMove.length;
		}
		if(this.__cbOnceMultiTouchPointerMove != null) {
			len += this.__cbOnceMultiTouchPointerMove.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnMultiTouchPointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMultiTouchPointerMove[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMultiTouchPointerMove != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMultiTouchPointerMove.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMultiTouchPointerMove[ii];
						this.__cbOnceMultiTouchPointerMove[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerMove[ii];
						this.__cbOnceOwnerUnbindMultiTouchPointerMove[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMultiTouchPointerMove[ii]);
						newCbOnceArray.push(this.__cbOnceMultiTouchPointerMove[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = newCbOnceOwnerUnbindArray;
				this.__cbOnceMultiTouchPointerMove = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(info);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMultiTouchPointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnOwnerUnbindMultiTouchPointerMove.push(null);
		}
		if(this.__cbOnMultiTouchPointerMove == null) {
			this.__cbOnMultiTouchPointerMove = [];
		}
		this.__cbOnMultiTouchPointerMove.push(handleInfo);
	}
	,onceMultiTouchPointerMove: function(owner,handleInfo) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "multiTouchPointerMove" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInfo != null) {
					_gthis.offMultiTouchPointerMove(handleInfo);
					handleInfo = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerMove.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInfo = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMultiTouchPointerMove == null) {
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = [];
			}
			this.__cbOnceOwnerUnbindMultiTouchPointerMove.push(null);
		}
		if(this.__cbOnceMultiTouchPointerMove == null) {
			this.__cbOnceMultiTouchPointerMove = [];
		}
		this.__cbOnceMultiTouchPointerMove.push(handleInfo);
	}
	,offMultiTouchPointerMove: function(handleInfo) {
		if(handleInfo != null) {
			var index;
			var unbind;
			if(this.__cbOnMultiTouchPointerMove != null) {
				index = this.__cbOnMultiTouchPointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnMultiTouchPointerMove.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMultiTouchPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMultiTouchPointerMove.splice(index,1);
				}
			}
			if(this.__cbOnceMultiTouchPointerMove != null) {
				index = this.__cbOnceMultiTouchPointerMove.indexOf(handleInfo);
				if(index != -1) {
					this.__cbOnceMultiTouchPointerMove.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMultiTouchPointerMove[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMultiTouchPointerMove.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMultiTouchPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMultiTouchPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMultiTouchPointerMove = null;
			}
			if(this.__cbOnceOwnerUnbindMultiTouchPointerMove != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMultiTouchPointerMove.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMultiTouchPointerMove[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMultiTouchPointerMove = null;
			}
			this.__cbOnMultiTouchPointerMove = null;
			this.__cbOnceMultiTouchPointerMove = null;
		}
	}
	,listensMultiTouchPointerMove: function() {
		if(!(this.__cbOnMultiTouchPointerMove != null && this.__cbOnMultiTouchPointerMove.length > 0)) {
			if(this.__cbOnceMultiTouchPointerMove != null) {
				return this.__cbOnceMultiTouchPointerMove.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnFocus: null
	,__cbOnceFocus: null
	,__cbOnOwnerUnbindFocus: null
	,__cbOnceOwnerUnbindFocus: null
	,emitFocus: function(visual) {
		var len = 0;
		if(this.__cbOnFocus != null) {
			len += this.__cbOnFocus.length;
		}
		if(this.__cbOnceFocus != null) {
			len += this.__cbOnceFocus.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFocus[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFocus != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFocus.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFocus[ii];
						this.__cbOnceFocus[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFocus[ii];
						this.__cbOnceOwnerUnbindFocus[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFocus[ii]);
						newCbOnceArray.push(this.__cbOnceFocus[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFocus = newCbOnceOwnerUnbindArray;
				this.__cbOnceFocus = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(visual);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFocus: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offFocus(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFocus == null) {
				this.__cbOnOwnerUnbindFocus = [];
			}
			this.__cbOnOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnFocus == null) {
			this.__cbOnFocus = [];
		}
		this.__cbOnFocus.push(handleVisual);
	}
	,onceFocus: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "focus" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offFocus(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFocus == null) {
				this.__cbOnceOwnerUnbindFocus = [];
			}
			this.__cbOnceOwnerUnbindFocus.push(null);
		}
		if(this.__cbOnceFocus == null) {
			this.__cbOnceFocus = [];
		}
		this.__cbOnceFocus.push(handleVisual);
	}
	,offFocus: function(handleVisual) {
		if(handleVisual != null) {
			var index;
			var unbind;
			if(this.__cbOnFocus != null) {
				index = this.__cbOnFocus.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnFocus.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFocus.splice(index,1);
				}
			}
			if(this.__cbOnceFocus != null) {
				index = this.__cbOnceFocus.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnceFocus.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFocus[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFocus.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFocus = null;
			}
			if(this.__cbOnceOwnerUnbindFocus != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFocus.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFocus[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFocus = null;
			}
			this.__cbOnFocus = null;
			this.__cbOnceFocus = null;
		}
	}
	,listensFocus: function() {
		if(!(this.__cbOnFocus != null && this.__cbOnFocus.length > 0)) {
			if(this.__cbOnceFocus != null) {
				return this.__cbOnceFocus.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBlur: null
	,__cbOnceBlur: null
	,__cbOnOwnerUnbindBlur: null
	,__cbOnceOwnerUnbindBlur: null
	,emitBlur: function(visual) {
		var len = 0;
		if(this.__cbOnBlur != null) {
			len += this.__cbOnBlur.length;
		}
		if(this.__cbOnceBlur != null) {
			len += this.__cbOnceBlur.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBlur[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBlur != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBlur.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBlur[ii];
						this.__cbOnceBlur[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBlur[ii];
						this.__cbOnceOwnerUnbindBlur[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBlur[ii]);
						newCbOnceArray.push(this.__cbOnceBlur[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBlur = newCbOnceOwnerUnbindArray;
				this.__cbOnceBlur = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(visual);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBlur: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offBlur(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBlur == null) {
				this.__cbOnOwnerUnbindBlur = [];
			}
			this.__cbOnOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnBlur == null) {
			this.__cbOnBlur = [];
		}
		this.__cbOnBlur.push(handleVisual);
	}
	,onceBlur: function(owner,handleVisual) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blur" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleVisual != null) {
					_gthis.offBlur(handleVisual);
					handleVisual = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleVisual = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBlur == null) {
				this.__cbOnceOwnerUnbindBlur = [];
			}
			this.__cbOnceOwnerUnbindBlur.push(null);
		}
		if(this.__cbOnceBlur == null) {
			this.__cbOnceBlur = [];
		}
		this.__cbOnceBlur.push(handleVisual);
	}
	,offBlur: function(handleVisual) {
		if(handleVisual != null) {
			var index;
			var unbind;
			if(this.__cbOnBlur != null) {
				index = this.__cbOnBlur.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnBlur.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBlur.splice(index,1);
				}
			}
			if(this.__cbOnceBlur != null) {
				index = this.__cbOnceBlur.indexOf(handleVisual);
				if(index != -1) {
					this.__cbOnceBlur.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBlur[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBlur.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBlur = null;
			}
			if(this.__cbOnceOwnerUnbindBlur != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBlur.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBlur[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBlur = null;
			}
			this.__cbOnBlur = null;
			this.__cbOnceBlur = null;
		}
	}
	,listensBlur: function() {
		if(!(this.__cbOnBlur != null && this.__cbOnBlur.length > 0)) {
			if(this.__cbOnceBlur != null) {
				return this.__cbOnceBlur.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,backendReady: function() {
		var _gthis = this;
		ceramic_App.app.backend.screen.onResize(this,$bind(this,this.resize));
		this.resize();
		ceramic_App.app.settings.onBackgroundChange(this,function(background,prevBackground) {
			ceramic_App.app.logger.info("Setting background=" + (background == null ? "null" : background == -1 ? "NONE" : "0x" + StringTools.hex(background >> 16 & 255,2) + StringTools.hex(background >> 8 & 255,2) + StringTools.hex(background & 255,2)),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 272, className : "ceramic.Screen", methodName : "backendReady"});
			ceramic_App.app.backend.screen.setBackground(background);
		});
		ceramic_App.app.settings.onTitleChange(this,function(title,prevTitle) {
			ceramic_App.app.logger.info("Setting title=" + title,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 276, className : "ceramic.Screen", methodName : "backendReady"});
			ceramic_App.app.backend.screen.setWindowTitle(title);
		});
		ceramic_App.app.settings.onFullscreenChange(this,function(fullscreen,prevFullscreen) {
			ceramic_App.app.logger.info("Setting fullscreen=" + (fullscreen == null ? "null" : "" + fullscreen),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 280, className : "ceramic.Screen", methodName : "backendReady"});
			ceramic_App.app.backend.screen.setWindowFullscreen(fullscreen);
		});
		ceramic_App.app.settings.onScalingChange(this,function(scaling,prevScaling) {
			ceramic_App.app.logger.info("Setting scaling=" + Std.string(scaling),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 284, className : "ceramic.Screen", methodName : "backendReady"});
			_gthis.resize();
		});
		ceramic_App.app.settings.onTargetWidthChange(this,function(targetWidth,prevTargetWidth) {
			ceramic_App.app.logger.info("Setting targetWidth=" + targetWidth,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 288, className : "ceramic.Screen", methodName : "backendReady"});
			_gthis.resize();
		});
		ceramic_App.app.settings.onTargetHeightChange(this,function(targetHeight,prevTargetWidth) {
			ceramic_App.app.logger.info("Setting targetHeight=" + targetHeight,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 292, className : "ceramic.Screen", methodName : "backendReady"});
			_gthis.resize();
		});
		ceramic_App.app.settings.onTargetDensityChange(this,function(targetDensity,prevTargetDensity) {
			ceramic_App.app.logger.info("Setting targetDensity=" + targetDensity,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 296, className : "ceramic.Screen", methodName : "backendReady"});
			_gthis.updateTexturesDensity();
		});
		this.matrix.onChange(this,function() {
			var _this = _gthis.reverseMatrix;
			_this.a = 1;
			_this.b = 0;
			_this.c = 0;
			_this.d = 1;
			_this.tx = 0;
			_this.ty = 0;
			_this.changedDirty = true;
			var _this = _gthis.reverseMatrix;
			var m = _gthis.matrix;
			var a1 = _this.a * m.a + _this.b * m.c;
			_this.b = _this.a * m.b + _this.b * m.d;
			_this.a = a1;
			var c1 = _this.c * m.a + _this.d * m.c;
			_this.d = _this.c * m.b + _this.d * m.d;
			_this.c = c1;
			var tx1 = _this.tx * m.a + _this.ty * m.c + m.tx;
			_this.ty = _this.tx * m.b + _this.ty * m.d + m.ty;
			_this.tx = tx1;
			_this.changedDirty = true;
			var _this = _gthis.reverseMatrix;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				_this.a = _this.b = _this.c = _this.d = 0;
				_this.tx = -_this.tx;
				_this.ty = -_this.ty;
			} else {
				norm = 1.0 / norm;
				var a1 = _this.d * norm;
				_this.d = _this.a * norm;
				_this.a = a1;
				_this.b *= -norm;
				_this.c *= -norm;
				var tx1 = -_this.a * _this.tx - _this.c * _this.ty;
				_this.ty = -_this.b * _this.tx - _this.d * _this.ty;
				_this.tx = tx1;
			}
			_this.changedDirty = true;
			_gthis.reverseMatrix.emitChange();
		});
		ceramic_App.app.backend.screen.onMouseDown(this,function(buttonId,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(-1,buttonId,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g_intMap = _gthis.touches;
				var _g_i = 0;
				var _g_len = _g_intMap.values.length;
				while(true) {
					while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
					if(!(_g_i < _g_len)) {
						break;
					}
					var n = _g_i++;
					var pointer = _g_intMap.values[n];
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitMouseDown(buttonId,x1,y1);
				_gthis._numPointerDown++;
				_gthis.emitMultiTouchPointerDown(info);
				if(_gthis._numPointerDown == 1) {
					_gthis.emitPointerDown(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onMouseUp(this,function(buttonId,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(-1,buttonId,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g_intMap = _gthis.touches;
				var _g_i = 0;
				var _g_len = _g_intMap.values.length;
				while(true) {
					while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
					if(!(_g_i < _g_len)) {
						break;
					}
					var n = _g_i++;
					var pointer = _g_intMap.values[n];
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				if(info.touchIndex != -1) {
					_gthis.touches.set(info.touchIndex,null);
				}
				_gthis.emitMouseUp(buttonId,x1,y1);
				_gthis._numPointerDown--;
				_gthis.emitMultiTouchPointerUp(info);
				if(_gthis._numPointerDown == 0) {
					_gthis.emitPointerUp(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onMouseMove(this,function(x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(-1,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				_gthis.mouseX = info.x;
				_gthis.mouseY = info.y;
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g_intMap = _gthis.touches;
				var _g_i = 0;
				var _g_len = _g_intMap.values.length;
				while(true) {
					while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
					if(!(_g_i < _g_len)) {
						break;
					}
					var n = _g_i++;
					var pointer = _g_intMap.values[n];
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitMouseMove(x1,y1);
				_gthis.emitMultiTouchPointerMove(info);
				_gthis.emitPointerMove(info);
			});
		});
		ceramic_App.app.backend.screen.onMouseWheel(this,function(x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				_gthis.emitMouseWheel(x,y);
			});
		});
		ceramic_App.app.backend.screen.onTouchDown(this,function(touchIndex,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(touchIndex,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g_intMap = _gthis.touches;
				var _g_i = 0;
				var _g_len = _g_intMap.values.length;
				while(true) {
					while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
					if(!(_g_i < _g_len)) {
						break;
					}
					var n = _g_i++;
					var pointer = _g_intMap.values[n];
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitTouchDown(touchIndex,x1,y1);
				_gthis._numPointerDown++;
				_gthis.emitMultiTouchPointerDown(info);
				if(_gthis._numPointerDown == 1) {
					_gthis.emitPointerDown(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onTouchUp(this,function(touchIndex,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(touchIndex,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.buttonId != -1) {
					_gthis.mouseX = info.x;
					_gthis.mouseY = info.y;
				}
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g_intMap = _gthis.touches;
				var _g_i = 0;
				var _g_len = _g_intMap.values.length;
				while(true) {
					while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
					if(!(_g_i < _g_len)) {
						break;
					}
					var n = _g_i++;
					var pointer = _g_intMap.values[n];
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				if(info.touchIndex != -1) {
					_gthis.touches.set(info.touchIndex,null);
				}
				_gthis.emitTouchUp(touchIndex,x1,y1);
				_gthis._numPointerDown--;
				_gthis.emitMultiTouchPointerUp(info);
				if(_gthis._numPointerDown == 0) {
					_gthis.emitPointerUp(info);
				}
			});
		});
		ceramic_App.app.backend.screen.onTouchMove(this,function(touchIndex,x,y) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				ceramic_App.app.flushImmediate();
				var x0 = x * clay_Clay.app.screenDensity;
				var y0 = y * clay_Clay.app.screenDensity;
				var _this = _gthis.reverseMatrix;
				var x1 = x0 * _this.a + y0 * _this.c + _this.tx;
				var _this = _gthis.reverseMatrix;
				var y1 = x0 * _this.b + y0 * _this.d + _this.ty;
				var info = new ceramic_TouchInfo(touchIndex,-1,x1,y1,x1 >= 0 && x1 <= _gthis.width && y1 >= 0 && y1 <= _gthis.height);
				if(info.touchIndex != -1) {
					var pointer = _gthis.touches.get(info.touchIndex);
					if(pointer == null) {
						pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
						_gthis.touches.set(info.touchIndex,pointer);
					} else {
						pointer.x = info.x;
						pointer.y = info.y;
					}
				}
				var prevPointerX = _gthis.pointerX;
				var prevPointerY = _gthis.pointerY;
				var numTouchPointers = 0;
				var pX = 0.0;
				var pY = 0.0;
				var _g_intMap = _gthis.touches;
				var _g_i = 0;
				var _g_len = _g_intMap.values.length;
				while(true) {
					while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
					if(!(_g_i < _g_len)) {
						break;
					}
					var n = _g_i++;
					var pointer = _g_intMap.values[n];
					++numTouchPointers;
					pX += pointer.x;
					pY += pointer.y;
				}
				if(numTouchPointers > 0) {
					_gthis.pointerX = pX / numTouchPointers;
					_gthis.pointerY = pY / numTouchPointers;
				} else {
					_gthis.pointerX = _gthis.mouseX;
					_gthis.pointerY = _gthis.mouseY;
				}
				_gthis.pointerDeltaX += _gthis.pointerX - prevPointerX;
				_gthis.pointerDeltaY += _gthis.pointerY - prevPointerY;
				_gthis.emitTouchMove(touchIndex,x1,y1);
				_gthis.emitMultiTouchPointerMove(info);
				if(_gthis._numPointerDown > 0) {
					_gthis.emitPointerMove(info);
				}
			});
		});
	}
	,updatePointerOverState: function(delta) {
		var x = this.mouseX;
		var y = this.mouseY;
		var id = 10000;
		var prevMatched = this.matchedOverListeners.h[id];
		var matched = this.matchFirstOverListener(x,y);
		if(matched != prevMatched) {
			if(matched != null) {
				this.matchedOverListeners.h[id] = matched;
			} else {
				this.matchedOverListeners.remove(id);
			}
		}
		if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
			prevMatched._numPointerOver--;
			if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
				prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
			}
		}
		if(matched != null && prevMatched != matched) {
			matched._numPointerOver++;
			if(matched._numPointerOver == 1 || matched.multiTouch) {
				matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
			}
		}
		var _g_intMap = this.touches;
		var _g_i = 0;
		var _g_len = _g_intMap.values.length;
		while(true) {
			while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
			if(!(_g_i < _g_len)) {
				break;
			}
			var n = _g_i++;
			var touch = _g_intMap.values[n];
			var x = touch.x;
			var y = touch.y;
			var id = 20000 + touch.index;
			var prevMatched = this.matchedOverListeners.h[id];
			var matched = this.matchFirstOverListener(x,y);
			if(matched != prevMatched) {
				if(matched != null) {
					this.matchedOverListeners.h[id] = matched;
				} else {
					this.matchedOverListeners.remove(id);
				}
			}
			if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
				prevMatched._numPointerOver--;
				if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
					prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
				}
			}
			if(matched != null && prevMatched != matched) {
				matched._numPointerOver++;
				if(matched._numPointerOver == 1 || matched.multiTouch) {
					matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
				}
			}
		}
	}
	,resize: function() {
		if(this.resizing) {
			return;
		}
		this.resizing = true;
		this.updateScaling();
		var prevScaling = ceramic_App.app.settings.get_scaling();
		var prevTargetWidth = ceramic_App.app.settings.get_targetWidth();
		var prevTargetHeight = ceramic_App.app.settings.get_targetHeight();
		this.emitResize();
		if(prevScaling != ceramic_App.app.settings.get_scaling() || prevTargetWidth != ceramic_App.app.settings.get_targetWidth() || prevTargetHeight != ceramic_App.app.settings.get_targetHeight()) {
			this.updateScaling();
		}
		this.updateTransform();
		this.updateTexturesDensity();
		this.resizing = false;
	}
	,updateTexturesDensity: function() {
		if(ceramic_App.app.settings.get_targetDensity() > 0) {
			this.set_texturesDensity(ceramic_App.app.settings.get_targetDensity());
		} else {
			var texturesDensity = this.density;
			if(texturesDensity < 1) {
				texturesDensity = 1;
			} else {
				texturesDensity = Math.round(texturesDensity);
			}
			this.set_texturesDensity(texturesDensity);
		}
	}
	,updateScaling: function() {
		var targetWidth = ceramic_App.app.settings.get_targetWidth() > 0 ? ceramic_App.app.settings.get_targetWidth() : clay_Clay.app.screenWidth;
		var targetHeight = ceramic_App.app.settings.get_targetHeight() > 0 ? ceramic_App.app.settings.get_targetHeight() : clay_Clay.app.screenHeight;
		var scale;
		switch(ceramic_App.app.settings.get_scaling()._hx_index) {
		case 0:
			scale = Math.max(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		case 1:
			scale = Math.min(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		case 2:
			targetWidth = clay_Clay.app.screenWidth;
			targetHeight = clay_Clay.app.screenHeight;
			scale = Math.max(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		case 3:
			var nativeRatio = clay_Clay.app.screenHeight / clay_Clay.app.screenWidth;
			var targetRatio = targetHeight / targetWidth;
			if(nativeRatio > targetRatio) {
				targetHeight = targetWidth * nativeRatio;
			} else if(nativeRatio < targetRatio) {
				targetWidth = targetHeight / nativeRatio;
			}
			targetWidth = Math.ceil(targetWidth);
			targetHeight = Math.ceil(targetHeight);
			scale = Math.max(targetWidth / (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity),targetHeight / (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity));
			break;
		}
		this.actualWidth = Math.ceil(clay_Clay.app.screenWidth * clay_Clay.app.screenDensity * scale);
		this.actualHeight = Math.ceil(clay_Clay.app.screenHeight * clay_Clay.app.screenDensity * scale);
		this.density = 1.0 / scale;
		switch(ceramic_App.app.settings.get_scaling()._hx_index) {
		case 0:case 1:
			this.offsetX = (this.actualWidth - targetWidth) * 0.5;
			this.offsetY = (this.actualHeight - targetHeight) * 0.5;
			break;
		case 2:case 3:
			this.offsetX = 0;
			this.offsetY = 0;
			break;
		}
		this.width = targetWidth;
		this.height = targetHeight;
	}
	,updateTransform: function() {
		var targetWidth = ceramic_App.app.settings.get_targetWidth() > 0 ? ceramic_App.app.settings.get_targetWidth() * this.density : clay_Clay.app.screenWidth * clay_Clay.app.screenDensity;
		var targetHeight = ceramic_App.app.settings.get_targetHeight() > 0 ? ceramic_App.app.settings.get_targetHeight() * this.density : clay_Clay.app.screenHeight * clay_Clay.app.screenDensity;
		switch(ceramic_App.app.settings.get_scaling()._hx_index) {
		case 2:
			targetWidth = clay_Clay.app.screenWidth * clay_Clay.app.screenDensity;
			targetHeight = clay_Clay.app.screenHeight * clay_Clay.app.screenDensity;
			break;
		case 3:
			var nativeRatio = clay_Clay.app.screenHeight / clay_Clay.app.screenWidth;
			var targetRatio = targetHeight / targetWidth;
			if(nativeRatio > targetRatio) {
				targetHeight = targetWidth * nativeRatio;
			} else if(nativeRatio < targetRatio) {
				targetWidth = targetHeight / nativeRatio;
			}
			break;
		default:
		}
		var _this = this.matrix;
		_this.a = 1;
		_this.b = 0;
		_this.c = 0;
		_this.d = 1;
		_this.tx = 0;
		_this.ty = 0;
		_this.changedDirty = true;
		var _this = this.matrix;
		var x = this.density;
		var y = this.density;
		_this.a *= x;
		_this.b *= y;
		_this.c *= x;
		_this.d *= y;
		_this.tx *= x;
		_this.ty *= y;
		_this.changedDirty = true;
		var tx = (clay_Clay.app.screenWidth * clay_Clay.app.screenDensity - targetWidth) * 0.5;
		var ty = (clay_Clay.app.screenHeight * clay_Clay.app.screenDensity - targetHeight) * 0.5;
		var _this = this.matrix;
		_this.tx += tx;
		_this.ty += ty;
		_this.changedDirty = true;
	}
	,matchFirstDownListener: function(x,y,touchIndex,buttonId) {
		if(buttonId == null) {
			buttonId = -1;
		}
		if(touchIndex == null) {
			touchIndex = -1;
		}
		ceramic_App.app.computeHierarchy();
		var _g = 0;
		while(_g < 2) {
			var n = _g++;
			ceramic_Screen.matchedHitVisual = null;
			var testHitVisuals = n == 0;
			var visuals = ceramic_App.app.visuals;
			var i = visuals.length - 1;
			while(i >= 0) {
				var visual = visuals[i];
				if(visual._lifecycleState >= 0 && visual.computedTouchable) {
					var visualListensPointerDown = visual.__cbOnPointerDown != null && visual.__cbOnPointerDown.length > 0 || visual.__cbOncePointerDown != null && visual.__cbOncePointerDown.length > 0;
					var visualHits = false;
					var visualIntercepts = false;
					if(visualListensPointerDown) {
						visualHits = visual._hits(x,y,false);
						if(visualHits) {
							visualIntercepts = visual.interceptPointerDown(visual,x,y,touchIndex,buttonId);
						}
					}
					if(visualHits && !visualIntercepts || testHitVisuals && this.isHitVisual(visual) && visual._hits(x,y,false)) {
						var intercepts = false;
						if(visualListensPointerDown) {
							var parent = visual.parent;
							while(parent != null) {
								intercepts = parent.interceptPointerDown(visual,x,y,touchIndex,buttonId);
								if(intercepts) {
									break;
								}
								parent = parent.parent;
							}
						}
						if(!intercepts) {
							if(!visualListensPointerDown && testHitVisuals && this.isHitVisual(visual)) {
								ceramic_Screen.matchedHitVisual = visual;
							} else {
								ceramic_Screen.matchedHitVisual = null;
								return visual;
							}
						}
					}
				}
				--i;
			}
		}
		ceramic_Screen.matchedHitVisual = null;
		return null;
	}
	,matchFirstOverListener: function(x,y) {
		if(this.visualsListenPointerOver) {
			ceramic_App.app.computeHierarchy();
			var _g = 0;
			while(_g < 2) {
				var n = _g++;
				ceramic_Screen.matchedHitVisual = null;
				var testHitVisuals = n == 0;
				var visuals = ceramic_App.app.visuals;
				var i = visuals.length - 1;
				while(i >= 0) {
					var visual = visuals[i];
					if(visual._lifecycleState >= 0 && visual.computedTouchable) {
						var visualListensPointerOver = visual.__cbOnPointerOver != null && visual.__cbOnPointerOver.length > 0 || visual.__cbOncePointerOver != null && visual.__cbOncePointerOver.length > 0;
						var visualHits = false;
						var visualIntercepts = false;
						if(visualListensPointerOver) {
							visualHits = visual._hits(x,y,false);
							if(visualHits) {
								visualIntercepts = visual.interceptPointerOver(visual,x,y);
							}
						}
						if(visualHits && !visualIntercepts || testHitVisuals && this.isHitVisual(visual) && visual._hits(x,y,false)) {
							var intercepts = false;
							if(visualListensPointerOver) {
								var parent = visual.parent;
								while(parent != null) {
									intercepts = parent.interceptPointerOver(visual,x,y);
									if(intercepts) {
										break;
									}
									parent = parent.parent;
								}
							}
							if(!intercepts) {
								if(!visualListensPointerOver && testHitVisuals && this.isHitVisual(visual)) {
									ceramic_Screen.matchedHitVisual = visual;
								} else {
									ceramic_Screen.matchedHitVisual = null;
									return visual;
								}
							}
						}
					}
					--i;
				}
			}
			ceramic_Screen.matchedHitVisual = null;
		}
		return null;
	}
	,prepareMultiTouchPointerDown: function(info) {
		if(info.buttonId != -1) {
			this.mouseX = info.x;
			this.mouseY = info.y;
		}
		if(info.touchIndex != -1) {
			var pointer = this.touches.get(info.touchIndex);
			if(pointer == null) {
				pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
				this.touches.set(info.touchIndex,pointer);
			} else {
				pointer.x = info.x;
				pointer.y = info.y;
			}
		}
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g_intMap = this.touches;
		var _g_i = 0;
		var _g_len = _g_intMap.values.length;
		while(true) {
			while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
			if(!(_g_i < _g_len)) {
				break;
			}
			var n = _g_i++;
			var pointer = _g_intMap.values[n];
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
	}
	,prepareMultiTouchPointerUp: function(info) {
		if(info.buttonId != -1) {
			this.mouseX = info.x;
			this.mouseY = info.y;
		}
		if(info.touchIndex != -1) {
			var pointer = this.touches.get(info.touchIndex);
			if(pointer == null) {
				pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
				this.touches.set(info.touchIndex,pointer);
			} else {
				pointer.x = info.x;
				pointer.y = info.y;
			}
		}
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g_intMap = this.touches;
		var _g_i = 0;
		var _g_len = _g_intMap.values.length;
		while(true) {
			while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
			if(!(_g_i < _g_len)) {
				break;
			}
			var n = _g_i++;
			var pointer = _g_intMap.values[n];
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
		if(info.touchIndex != -1) {
			this.touches.set(info.touchIndex,null);
		}
	}
	,prepareMultiTouchPointerMove: function(info,isMouse) {
		if(isMouse) {
			this.mouseX = info.x;
			this.mouseY = info.y;
		}
		if(info.touchIndex != -1) {
			var pointer = this.touches.get(info.touchIndex);
			if(pointer == null) {
				pointer = new ceramic_Touch(info.touchIndex,info.x,info.y,0,0);
				this.touches.set(info.touchIndex,pointer);
			} else {
				pointer.x = info.x;
				pointer.y = info.y;
			}
		}
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g_intMap = this.touches;
		var _g_i = 0;
		var _g_len = _g_intMap.values.length;
		while(true) {
			while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
			if(!(_g_i < _g_len)) {
				break;
			}
			var n = _g_i++;
			var pointer = _g_intMap.values[n];
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
	}
	,updatePointer: function() {
		var prevPointerX = this.pointerX;
		var prevPointerY = this.pointerY;
		var numTouchPointers = 0;
		var pX = 0.0;
		var pY = 0.0;
		var _g_intMap = this.touches;
		var _g_i = 0;
		var _g_len = _g_intMap.values.length;
		while(true) {
			while(_g_i < _g_len && _g_intMap.values[_g_i] == null) ++_g_i;
			if(!(_g_i < _g_len)) {
				break;
			}
			var n = _g_i++;
			var pointer = _g_intMap.values[n];
			++numTouchPointers;
			pX += pointer.x;
			pY += pointer.y;
		}
		if(numTouchPointers > 0) {
			this.pointerX = pX / numTouchPointers;
			this.pointerY = pY / numTouchPointers;
		} else {
			this.pointerX = this.mouseX;
			this.pointerY = this.mouseY;
		}
		this.pointerDeltaX += this.pointerX - prevPointerX;
		this.pointerDeltaY += this.pointerY - prevPointerY;
	}
	,matchedDownListeners: null
	,matchedOverListeners: null
	,didEmitMouseDown: function(buttonId,x,y) {
		var matched = this.matchFirstDownListener(x,y,-1,buttonId);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(-1,buttonId,x,y,true));
			}
		}
		var id = 10000 + buttonId;
		this.matchedDownListeners.h[id] = matched;
	}
	,didEmitMouseUp: function(buttonId,x,y) {
		var id = 10000 + buttonId;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(-1,buttonId,x,y,matched._hits(x,y,false)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,updateMouseOver: function(x,y) {
		var id = 10000;
		var prevMatched = this.matchedOverListeners.h[id];
		var matched = this.matchFirstOverListener(x,y);
		if(matched != prevMatched) {
			if(matched != null) {
				this.matchedOverListeners.h[id] = matched;
			} else {
				this.matchedOverListeners.remove(id);
			}
		}
		if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
			prevMatched._numPointerOver--;
			if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
				prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
			}
		}
		if(matched != null && prevMatched != matched) {
			matched._numPointerOver++;
			if(matched._numPointerOver == 1 || matched.multiTouch) {
				matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
			}
		}
	}
	,didEmitTouchDown: function(touchIndex,x,y) {
		var matched = this.matchFirstDownListener(x,y,touchIndex,-1);
		if(matched != null) {
			matched._numPointerDown++;
			if(matched._numPointerDown == 1 || matched.multiTouch) {
				ceramic_App.app.screen.set_focusedVisual(matched);
				matched.emitPointerDown(new ceramic_TouchInfo(touchIndex,-1,x,y,true));
			}
		}
		var id = 20000 + touchIndex;
		this.matchedDownListeners.h[id] = matched;
	}
	,didEmitTouchUp: function(touchIndex,x,y) {
		var id = 20000 + touchIndex;
		var matched = this.matchedDownListeners.h[id];
		if(matched != null && matched._lifecycleState >= 0 && matched._numPointerDown > 0) {
			matched._numPointerDown--;
			if(matched._numPointerDown == 0 || matched.multiTouch) {
				matched.emitPointerUp(new ceramic_TouchInfo(touchIndex,-1,x,y,matched._hits(x,y,false)));
			}
		}
		this.matchedDownListeners.remove(id);
	}
	,updateTouchOver: function(touchIndex,x,y) {
		var id = 20000 + touchIndex;
		var prevMatched = this.matchedOverListeners.h[id];
		var matched = this.matchFirstOverListener(x,y);
		if(matched != prevMatched) {
			if(matched != null) {
				this.matchedOverListeners.h[id] = matched;
			} else {
				this.matchedOverListeners.remove(id);
			}
		}
		if(prevMatched != null && prevMatched != matched && prevMatched._lifecycleState >= 0 && prevMatched._numPointerOver > 0) {
			prevMatched._numPointerOver--;
			if(prevMatched._numPointerOver == 0 || prevMatched.multiTouch) {
				prevMatched.emitPointerOut(new ceramic_TouchInfo(-1,-1,x,y,false));
			}
		}
		if(matched != null && prevMatched != matched) {
			matched._numPointerOver++;
			if(matched._numPointerOver == 1 || matched.multiTouch) {
				matched.emitPointerOver(new ceramic_TouchInfo(-1,-1,x,y,true));
			}
		}
	}
	,hitVisuals: null
	,addHitVisual: function(visual) {
		var wasHitVisual = (visual.flags & 8) == 8;
		this.hitVisuals.push(visual);
		if(!wasHitVisual) {
			visual.flags |= 8;
		}
	}
	,removeHitVisual: function(visual) {
		var index = this.hitVisuals.indexOf(visual);
		if(index == -1) {
			ceramic_App.app.logger.warning("Hit visual not removed from hitVisuals because it was not added at the first place",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Screen.hx", lineNumber : 1198, className : "ceramic.Screen", methodName : "removeHitVisual"});
		} else {
			this.hitVisuals.splice(index,1);
			if(this.hitVisuals.indexOf(visual) == -1) {
				visual.flags &= -9;
			}
		}
	}
	,isHitVisual: function(visual) {
		return (visual.flags & 8) == 8;
	}
	,resetDeltas: function() {
		this.pointerDeltaX = 0;
		this.pointerDeltaY = 0;
		this.mouseDeltaX = 0;
		this.mouseDeltaY = 0;
		this.mouseWheelDeltaX = 0;
		this.mouseWheelDeltaY = 0;
		var i = 0;
		while(i <= this.maxTouchIndex) {
			var touch = this.touches.get(i);
			if(touch != null) {
				touch.deltaX = 0;
				touch.deltaY = 0;
			}
			++i;
		}
	}
	,willEmitMouseMove: function(x,y) {
		this.mouseDeltaX += x - this.prevMouseX;
		this.mouseDeltaY += y - this.prevMouseY;
		this.prevMouseX = x;
		this.prevMouseY = y;
	}
	,willEmitMouseDown: function(buttonId,x,y) {
		var _gthis = this;
		this.prevMouseX = x;
		this.prevMouseY = y;
		var value = this.pressedMouseButtons.intMap.h[buttonId | 0];
		var prevValue = value != null ? value : 0;
		if(prevValue == -1) {
			prevValue = 0;
		}
		this.pressedMouseButtons.set(buttonId,prevValue + 1);
		if(prevValue == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedMouseButtons.intMap.h[buttonId | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedMouseButtons.set(buttonId,2);
				}
			});
		}
	}
	,willEmitMouseUp: function(buttonId,x,y) {
		var _gthis = this;
		this.pressedMouseButtons.set(buttonId,-1);
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedMouseButtons.intMap.h[buttonId | 0];
			if((value != null ? value : 0) == -1) {
				_gthis.pressedMouseButtons.set(buttonId,0);
			}
		});
	}
	,willEmitMouseWheel: function(x,y) {
		this.mouseWheelDeltaX += x;
		this.mouseWheelDeltaY += y;
	}
	,mouseAllowed: function(owner) {
		return true;
	}
	,_mousePressed: function(buttonId) {
		var value = this.pressedMouseButtons.intMap.h[buttonId | 0];
		return (value != null ? value : 0) > 0;
	}
	,_mouseJustPressed: function(buttonId) {
		var value = this.pressedMouseButtons.intMap.h[buttonId | 0];
		return (value != null ? value : 0) == 1;
	}
	,_mouseJustReleased: function(buttonId) {
		var value = this.pressedMouseButtons.intMap.h[buttonId | 0];
		return (value != null ? value : 0) == -1;
	}
	,willEmitTouchMove: function(touchIndex,x,y) {
		if(touchIndex > this.maxTouchIndex) {
			this.maxTouchIndex = touchIndex;
		}
		var keyX = touchIndex * 2;
		var keyY = keyX + 1;
		var value = this.prevTouchPositions.intMap.h[keyX | 0];
		var prevX = value != null ? value : 0;
		var value = this.prevTouchPositions.intMap.h[keyY | 0];
		var prevY = value != null ? value : 0;
		var touch = this.touches.get(touchIndex);
		if(touch != null) {
			touch.deltaX += x - prevX;
			touch.deltaY += y - prevY;
		}
	}
	,willEmitTouchDown: function(touchIndex,x,y) {
		var _gthis = this;
		var keyX = touchIndex * 2;
		var keyY = keyX + 1;
		this.prevTouchPositions.set(keyX,x);
		this.prevTouchPositions.set(keyY,y);
		var value = this.pressedTouches.intMap.h[touchIndex | 0];
		var prevValue = value != null ? value : 0;
		if(prevValue == -1) {
			prevValue = 0;
		}
		this.pressedTouches.set(touchIndex,prevValue + 1);
		if(prevValue == 0) {
			ceramic_App.app.beginUpdateCallbacks.push(function() {
				var value = _gthis.pressedTouches.intMap.h[touchIndex | 0];
				if((value != null ? value : 0) == 1) {
					_gthis.pressedTouches.set(touchIndex,2);
				}
			});
		}
	}
	,willEmitTouchUp: function(touchIndex,x,y) {
		var _gthis = this;
		var value = this.pressedTouches.intMap.h[touchIndex | 0];
		var state = value != null ? value : 0;
		if(state == 1) {
			this.pressedTouches.set(touchIndex,-2);
		} else {
			this.pressedTouches.set(touchIndex,-1);
		}
		ceramic_App.app.beginUpdateCallbacks.push(function() {
			var value = _gthis.pressedTouches.intMap.h[touchIndex | 0];
			var state = value != null ? value : 0;
			if(state == -1 || state == -2) {
				_gthis.pressedTouches.set(touchIndex,0);
			}
		});
	}
	,_touchPressed: function(touchIndex) {
		var value = this.pressedTouches.intMap.h[touchIndex | 0];
		return (value != null ? value : 0) > 0;
	}
	,_touchJustPressed: function(touchIndex) {
		var value = this.pressedTouches.intMap.h[touchIndex | 0];
		var state = value != null ? value : 0;
		if(state != 1) {
			return state == -2;
		} else {
			return true;
		}
	}
	,_touchJustReleased: function(touchIndex) {
		var value = this.pressedTouches.intMap.h[touchIndex | 0];
		var state = value != null ? value : 0;
		if(state != -1) {
			return state == -2;
		} else {
			return true;
		}
	}
	,touchDeltaX: function(touchIndex) {
		var touch = this.touches.get(touchIndex);
		if(touch != null) {
			return touch.deltaX;
		} else {
			return 0.0;
		}
	}
	,touchDeltaY: function(touchIndex) {
		var touch = this.touches.get(touchIndex);
		if(touch != null) {
			return touch.deltaY;
		} else {
			return 0.0;
		}
	}
	,toTexture: function(done) {
		var _gthis = this;
		ceramic_App.app.backend.screen.screenshotToTexture(function(backendItem) {
			if(backendItem != null) {
				var texture = new ceramic_Texture(backendItem,clay_Clay.app.screenDensity);
				done(texture);
			} else {
				done(null);
			}
		});
	}
	,toPixels: function(done) {
		ceramic_App.app.backend.screen.screenshotToPixels(done);
	}
	,_toPng: function(path,done) {
		ceramic_App.app.onceFinishDraw(this,function() {
			ceramic_App.app.backend.screen.screenshotToPng(path,done);
		});
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offObservedDirty();
		this.offFocusedVisualChange();
		this.offTexturesDensityChange();
		this.offResize();
		this.offMouseDown();
		this.offMouseUp();
		this.offMouseWheel();
		this.offMouseMove();
		this.offTouchDown();
		this.offTouchUp();
		this.offTouchMove();
		this.offPointerDown();
		this.offPointerUp();
		this.offPointerMove();
		this.offMultiTouchPointerDown();
		this.offMultiTouchPointerUp();
		this.offMultiTouchPointerMove();
		this.offFocus();
		this.offBlur();
	}
	,__class__: ceramic_Screen
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_isPointerDown:"get_isPointerDown",set_texturesDensity:"set_texturesDensity",get_texturesDensity:"get_texturesDensity",set_unobservedFocusedVisual:"set_unobservedFocusedVisual",set_focusedVisual:"set_focusedVisual",get_focusedVisual:"get_focusedVisual",get_nativeDensity:"get_nativeDensity",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth"})
});
var ceramic_ScreenScaling = $hxEnums["ceramic.ScreenScaling"] = { __ename__:"ceramic.ScreenScaling",__constructs__:null
	,FIT: {_hx_name:"FIT",_hx_index:0,__enum__:"ceramic.ScreenScaling",toString:$estr}
	,FILL: {_hx_name:"FILL",_hx_index:1,__enum__:"ceramic.ScreenScaling",toString:$estr}
	,RESIZE: {_hx_name:"RESIZE",_hx_index:2,__enum__:"ceramic.ScreenScaling",toString:$estr}
	,FIT_RESIZE: {_hx_name:"FIT_RESIZE",_hx_index:3,__enum__:"ceramic.ScreenScaling",toString:$estr}
};
ceramic_ScreenScaling.__constructs__ = [ceramic_ScreenScaling.FIT,ceramic_ScreenScaling.FILL,ceramic_ScreenScaling.RESIZE,ceramic_ScreenScaling.FIT_RESIZE];
var ceramic_Settings = function() {
	this.defaultShader = "shader:textured";
	this.defaultFont = "font:RobotoMedium";
	this.backend = { };
	this.assetsPath = "assets";
	this.resizable = false;
	this.antialiasing = 0;
	this.appInfo = null;
	this.collections = null;
	this.orientation = 0;
	this.unobservedPreventDefaultTouches = true;
	this.preventDefaultTouchesAutoruns = null;
	this.unobservedPreventDefaultMouseWheel = true;
	this.preventDefaultMouseWheelAutoruns = null;
	this.unobservedOverrideDelta = -1;
	this.overrideDeltaAutoruns = null;
	this.unobservedMaxDelta = 0.1;
	this.maxDeltaAutoruns = null;
	this.unobservedTargetFps = -1;
	this.targetFpsAutoruns = null;
	this.unobservedFullscreen = false;
	this.fullscreenAutoruns = null;
	this.unobservedTitle = "App";
	this.titleAutoruns = null;
	this.unobservedScaling = ceramic_ScreenScaling.FIT;
	this.scalingAutoruns = null;
	this.unobservedBackground = 0;
	this.backgroundAutoruns = null;
	this.unobservedTargetDensity = 0;
	this.targetDensityAutoruns = null;
	this.unobservedWindowHeight = 0;
	this.windowHeightAutoruns = null;
	this.unobservedWindowWidth = 0;
	this.windowWidthAutoruns = null;
	this.unobservedTargetHeight = 0;
	this.targetHeightAutoruns = null;
	this.unobservedTargetWidth = 0;
	this.targetWidthAutoruns = null;
	this.observedDirty = false;
};
$hxClasses["ceramic.Settings"] = ceramic_Settings;
ceramic_Settings.__name__ = "ceramic.Settings";
ceramic_Settings.__interfaces__ = [tracker_Observable];
ceramic_Settings.prototype = {
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,targetWidthAutoruns: null
	,get_targetWidth: function() {
		var value = this.unobservedTargetWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_targetWidth: function(targetWidth) {
		var prevValue = this.unobservedTargetWidth;
		this.unobservedTargetWidth = targetWidth;
		if(prevValue == targetWidth) {
			return targetWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetWidthChange(targetWidth,prevValue);
		var fieldAutoruns = this.targetWidthAutoruns;
		if(fieldAutoruns != null) {
			this.targetWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetWidth;
	}
	,invalidateTargetWidth: function() {
		var value = this.unobservedTargetWidth;
		this.emitTargetWidthChange(value,value);
		var fieldAutoruns = this.targetWidthAutoruns;
		if(fieldAutoruns != null) {
			this.targetWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTargetWidth: null
	,__cbOnTargetWidthChange: null
	,__cbOnceTargetWidthChange: null
	,__cbOnOwnerUnbindTargetWidthChange: null
	,__cbOnceOwnerUnbindTargetWidthChange: null
	,emitTargetWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetWidthChange != null) {
			len += this.__cbOnTargetWidthChange.length;
		}
		if(this.__cbOnceTargetWidthChange != null) {
			len += this.__cbOnceTargetWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTargetWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTargetWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTargetWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTargetWidthChange[ii];
						this.__cbOnceTargetWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTargetWidthChange[ii];
						this.__cbOnceOwnerUnbindTargetWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTargetWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceTargetWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTargetWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTargetWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetWidthChange == null) {
				this.__cbOnOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnOwnerUnbindTargetWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetWidthChange == null) {
				this.__cbOnOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnOwnerUnbindTargetWidthChange.push(null);
		}
		if(this.__cbOnTargetWidthChange == null) {
			this.__cbOnTargetWidthChange = [];
		}
		this.__cbOnTargetWidthChange.push(handleCurrentPrevious);
	}
	,onceTargetWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetWidthChange == null) {
				this.__cbOnceOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTargetWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetWidthChange == null) {
				this.__cbOnceOwnerUnbindTargetWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTargetWidthChange.push(null);
		}
		if(this.__cbOnceTargetWidthChange == null) {
			this.__cbOnceTargetWidthChange = [];
		}
		this.__cbOnceTargetWidthChange.push(handleCurrentPrevious);
	}
	,offTargetWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetWidthChange != null) {
				index = this.__cbOnTargetWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetWidthChange != null) {
				index = this.__cbOnceTargetWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetWidthChange = null;
			}
			this.__cbOnTargetWidthChange = null;
			this.__cbOnceTargetWidthChange = null;
		}
	}
	,listensTargetWidthChange: function() {
		if(!(this.__cbOnTargetWidthChange != null && this.__cbOnTargetWidthChange.length > 0)) {
			if(this.__cbOnceTargetWidthChange != null) {
				return this.__cbOnceTargetWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,targetHeightAutoruns: null
	,get_targetHeight: function() {
		var value = this.unobservedTargetHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_targetHeight: function(targetHeight) {
		var prevValue = this.unobservedTargetHeight;
		this.unobservedTargetHeight = targetHeight;
		if(prevValue == targetHeight) {
			return targetHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetHeightChange(targetHeight,prevValue);
		var fieldAutoruns = this.targetHeightAutoruns;
		if(fieldAutoruns != null) {
			this.targetHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetHeight;
	}
	,invalidateTargetHeight: function() {
		var value = this.unobservedTargetHeight;
		this.emitTargetHeightChange(value,value);
		var fieldAutoruns = this.targetHeightAutoruns;
		if(fieldAutoruns != null) {
			this.targetHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTargetHeight: null
	,__cbOnTargetHeightChange: null
	,__cbOnceTargetHeightChange: null
	,__cbOnOwnerUnbindTargetHeightChange: null
	,__cbOnceOwnerUnbindTargetHeightChange: null
	,emitTargetHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetHeightChange != null) {
			len += this.__cbOnTargetHeightChange.length;
		}
		if(this.__cbOnceTargetHeightChange != null) {
			len += this.__cbOnceTargetHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTargetHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTargetHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTargetHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTargetHeightChange[ii];
						this.__cbOnceTargetHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTargetHeightChange[ii];
						this.__cbOnceOwnerUnbindTargetHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTargetHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceTargetHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTargetHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTargetHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetHeightChange == null) {
				this.__cbOnOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnOwnerUnbindTargetHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetHeightChange == null) {
				this.__cbOnOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnOwnerUnbindTargetHeightChange.push(null);
		}
		if(this.__cbOnTargetHeightChange == null) {
			this.__cbOnTargetHeightChange = [];
		}
		this.__cbOnTargetHeightChange.push(handleCurrentPrevious);
	}
	,onceTargetHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetHeightChange == null) {
				this.__cbOnceOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTargetHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetHeightChange == null) {
				this.__cbOnceOwnerUnbindTargetHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTargetHeightChange.push(null);
		}
		if(this.__cbOnceTargetHeightChange == null) {
			this.__cbOnceTargetHeightChange = [];
		}
		this.__cbOnceTargetHeightChange.push(handleCurrentPrevious);
	}
	,offTargetHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetHeightChange != null) {
				index = this.__cbOnTargetHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetHeightChange != null) {
				index = this.__cbOnceTargetHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetHeightChange = null;
			}
			this.__cbOnTargetHeightChange = null;
			this.__cbOnceTargetHeightChange = null;
		}
	}
	,listensTargetHeightChange: function() {
		if(!(this.__cbOnTargetHeightChange != null && this.__cbOnTargetHeightChange.length > 0)) {
			if(this.__cbOnceTargetHeightChange != null) {
				return this.__cbOnceTargetHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,targetSize: function(targetWidth,targetHeight) {
		this.set_targetWidth(targetWidth);
		this.set_targetHeight(targetHeight);
	}
	,windowWidthAutoruns: null
	,get_windowWidth: function() {
		var value = this.unobservedWindowWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.windowWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.windowWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_windowWidth: function(windowWidth) {
		var prevValue = this.unobservedWindowWidth;
		this.unobservedWindowWidth = windowWidth;
		if(prevValue == windowWidth) {
			return windowWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitWindowWidthChange(windowWidth,prevValue);
		var fieldAutoruns = this.windowWidthAutoruns;
		if(fieldAutoruns != null) {
			this.windowWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return windowWidth;
	}
	,invalidateWindowWidth: function() {
		var value = this.unobservedWindowWidth;
		this.emitWindowWidthChange(value,value);
		var fieldAutoruns = this.windowWidthAutoruns;
		if(fieldAutoruns != null) {
			this.windowWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedWindowWidth: null
	,__cbOnWindowWidthChange: null
	,__cbOnceWindowWidthChange: null
	,__cbOnOwnerUnbindWindowWidthChange: null
	,__cbOnceOwnerUnbindWindowWidthChange: null
	,emitWindowWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWindowWidthChange != null) {
			len += this.__cbOnWindowWidthChange.length;
		}
		if(this.__cbOnceWindowWidthChange != null) {
			len += this.__cbOnceWindowWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWindowWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnWindowWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceWindowWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceWindowWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceWindowWidthChange[ii];
						this.__cbOnceWindowWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindWindowWidthChange[ii];
						this.__cbOnceOwnerUnbindWindowWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindWindowWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceWindowWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindWindowWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceWindowWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWindowWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWindowWidthChange == null) {
				this.__cbOnOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnOwnerUnbindWindowWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWindowWidthChange == null) {
				this.__cbOnOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnOwnerUnbindWindowWidthChange.push(null);
		}
		if(this.__cbOnWindowWidthChange == null) {
			this.__cbOnWindowWidthChange = [];
		}
		this.__cbOnWindowWidthChange.push(handleCurrentPrevious);
	}
	,onceWindowWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWindowWidthChange == null) {
				this.__cbOnceOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWindowWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWindowWidthChange == null) {
				this.__cbOnceOwnerUnbindWindowWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWindowWidthChange.push(null);
		}
		if(this.__cbOnceWindowWidthChange == null) {
			this.__cbOnceWindowWidthChange = [];
		}
		this.__cbOnceWindowWidthChange.push(handleCurrentPrevious);
	}
	,offWindowWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWindowWidthChange != null) {
				index = this.__cbOnWindowWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWindowWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWindowWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWindowWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceWindowWidthChange != null) {
				index = this.__cbOnceWindowWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWindowWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWindowWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWindowWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWindowWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWindowWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWindowWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindWindowWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWindowWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWindowWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWindowWidthChange = null;
			}
			this.__cbOnWindowWidthChange = null;
			this.__cbOnceWindowWidthChange = null;
		}
	}
	,listensWindowWidthChange: function() {
		if(!(this.__cbOnWindowWidthChange != null && this.__cbOnWindowWidthChange.length > 0)) {
			if(this.__cbOnceWindowWidthChange != null) {
				return this.__cbOnceWindowWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,windowHeightAutoruns: null
	,get_windowHeight: function() {
		var value = this.unobservedWindowHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.windowHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.windowHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_windowHeight: function(windowHeight) {
		var prevValue = this.unobservedWindowHeight;
		this.unobservedWindowHeight = windowHeight;
		if(prevValue == windowHeight) {
			return windowHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitWindowHeightChange(windowHeight,prevValue);
		var fieldAutoruns = this.windowHeightAutoruns;
		if(fieldAutoruns != null) {
			this.windowHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return windowHeight;
	}
	,invalidateWindowHeight: function() {
		var value = this.unobservedWindowHeight;
		this.emitWindowHeightChange(value,value);
		var fieldAutoruns = this.windowHeightAutoruns;
		if(fieldAutoruns != null) {
			this.windowHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedWindowHeight: null
	,__cbOnWindowHeightChange: null
	,__cbOnceWindowHeightChange: null
	,__cbOnOwnerUnbindWindowHeightChange: null
	,__cbOnceOwnerUnbindWindowHeightChange: null
	,emitWindowHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWindowHeightChange != null) {
			len += this.__cbOnWindowHeightChange.length;
		}
		if(this.__cbOnceWindowHeightChange != null) {
			len += this.__cbOnceWindowHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWindowHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnWindowHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceWindowHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceWindowHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceWindowHeightChange[ii];
						this.__cbOnceWindowHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindWindowHeightChange[ii];
						this.__cbOnceOwnerUnbindWindowHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindWindowHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceWindowHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindWindowHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceWindowHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWindowHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWindowHeightChange == null) {
				this.__cbOnOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnOwnerUnbindWindowHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWindowHeightChange == null) {
				this.__cbOnOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnOwnerUnbindWindowHeightChange.push(null);
		}
		if(this.__cbOnWindowHeightChange == null) {
			this.__cbOnWindowHeightChange = [];
		}
		this.__cbOnWindowHeightChange.push(handleCurrentPrevious);
	}
	,onceWindowHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "windowHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWindowHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWindowHeightChange == null) {
				this.__cbOnceOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnceOwnerUnbindWindowHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWindowHeightChange == null) {
				this.__cbOnceOwnerUnbindWindowHeightChange = [];
			}
			this.__cbOnceOwnerUnbindWindowHeightChange.push(null);
		}
		if(this.__cbOnceWindowHeightChange == null) {
			this.__cbOnceWindowHeightChange = [];
		}
		this.__cbOnceWindowHeightChange.push(handleCurrentPrevious);
	}
	,offWindowHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWindowHeightChange != null) {
				index = this.__cbOnWindowHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWindowHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWindowHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWindowHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceWindowHeightChange != null) {
				index = this.__cbOnceWindowHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWindowHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWindowHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWindowHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWindowHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWindowHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWindowHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindWindowHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWindowHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWindowHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWindowHeightChange = null;
			}
			this.__cbOnWindowHeightChange = null;
			this.__cbOnceWindowHeightChange = null;
		}
	}
	,listensWindowHeightChange: function() {
		if(!(this.__cbOnWindowHeightChange != null && this.__cbOnWindowHeightChange.length > 0)) {
			if(this.__cbOnceWindowHeightChange != null) {
				return this.__cbOnceWindowHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,targetDensityAutoruns: null
	,get_targetDensity: function() {
		var value = this.unobservedTargetDensity;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetDensityAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetDensityAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_targetDensity: function(targetDensity) {
		var prevValue = this.unobservedTargetDensity;
		this.unobservedTargetDensity = targetDensity;
		if(prevValue == targetDensity) {
			return targetDensity;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetDensityChange(targetDensity,prevValue);
		var fieldAutoruns = this.targetDensityAutoruns;
		if(fieldAutoruns != null) {
			this.targetDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetDensity;
	}
	,invalidateTargetDensity: function() {
		var value = this.unobservedTargetDensity;
		this.emitTargetDensityChange(value,value);
		var fieldAutoruns = this.targetDensityAutoruns;
		if(fieldAutoruns != null) {
			this.targetDensityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTargetDensity: null
	,__cbOnTargetDensityChange: null
	,__cbOnceTargetDensityChange: null
	,__cbOnOwnerUnbindTargetDensityChange: null
	,__cbOnceOwnerUnbindTargetDensityChange: null
	,emitTargetDensityChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetDensityChange != null) {
			len += this.__cbOnTargetDensityChange.length;
		}
		if(this.__cbOnceTargetDensityChange != null) {
			len += this.__cbOnceTargetDensityChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTargetDensityChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTargetDensityChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTargetDensityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTargetDensityChange[ii];
						this.__cbOnceTargetDensityChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTargetDensityChange[ii];
						this.__cbOnceOwnerUnbindTargetDensityChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTargetDensityChange[ii]);
						newCbOnceArray.push(this.__cbOnceTargetDensityChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTargetDensityChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTargetDensityChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetDensityChange == null) {
				this.__cbOnOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnOwnerUnbindTargetDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetDensityChange == null) {
				this.__cbOnOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnOwnerUnbindTargetDensityChange.push(null);
		}
		if(this.__cbOnTargetDensityChange == null) {
			this.__cbOnTargetDensityChange = [];
		}
		this.__cbOnTargetDensityChange.push(handleCurrentPrevious);
	}
	,onceTargetDensityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetDensityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetDensityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetDensityChange == null) {
				this.__cbOnceOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTargetDensityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetDensityChange == null) {
				this.__cbOnceOwnerUnbindTargetDensityChange = [];
			}
			this.__cbOnceOwnerUnbindTargetDensityChange.push(null);
		}
		if(this.__cbOnceTargetDensityChange == null) {
			this.__cbOnceTargetDensityChange = [];
		}
		this.__cbOnceTargetDensityChange.push(handleCurrentPrevious);
	}
	,offTargetDensityChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetDensityChange != null) {
				index = this.__cbOnTargetDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetDensityChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetDensityChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetDensityChange != null) {
				index = this.__cbOnceTargetDensityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetDensityChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetDensityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetDensityChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetDensityChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetDensityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetDensityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetDensityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetDensityChange = null;
			}
			this.__cbOnTargetDensityChange = null;
			this.__cbOnceTargetDensityChange = null;
		}
	}
	,listensTargetDensityChange: function() {
		if(!(this.__cbOnTargetDensityChange != null && this.__cbOnTargetDensityChange.length > 0)) {
			if(this.__cbOnceTargetDensityChange != null) {
				return this.__cbOnceTargetDensityChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,backgroundAutoruns: null
	,get_background: function() {
		var value = this.unobservedBackground;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.backgroundAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.backgroundAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_background: function(background) {
		var prevValue = this.unobservedBackground;
		this.unobservedBackground = background;
		if(prevValue == background) {
			return background;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitBackgroundChange(background,prevValue);
		var fieldAutoruns = this.backgroundAutoruns;
		if(fieldAutoruns != null) {
			this.backgroundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return background;
	}
	,invalidateBackground: function() {
		var value = this.unobservedBackground;
		this.emitBackgroundChange(value,value);
		var fieldAutoruns = this.backgroundAutoruns;
		if(fieldAutoruns != null) {
			this.backgroundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedBackground: null
	,__cbOnBackgroundChange: null
	,__cbOnceBackgroundChange: null
	,__cbOnOwnerUnbindBackgroundChange: null
	,__cbOnceOwnerUnbindBackgroundChange: null
	,emitBackgroundChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnBackgroundChange != null) {
			len += this.__cbOnBackgroundChange.length;
		}
		if(this.__cbOnceBackgroundChange != null) {
			len += this.__cbOnceBackgroundChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnBackgroundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBackgroundChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBackgroundChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBackgroundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBackgroundChange[ii];
						this.__cbOnceBackgroundChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBackgroundChange[ii];
						this.__cbOnceOwnerUnbindBackgroundChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBackgroundChange[ii]);
						newCbOnceArray.push(this.__cbOnceBackgroundChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBackgroundChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceBackgroundChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBackgroundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "backgroundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBackgroundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBackgroundChange == null) {
				this.__cbOnOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnOwnerUnbindBackgroundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBackgroundChange == null) {
				this.__cbOnOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnOwnerUnbindBackgroundChange.push(null);
		}
		if(this.__cbOnBackgroundChange == null) {
			this.__cbOnBackgroundChange = [];
		}
		this.__cbOnBackgroundChange.push(handleCurrentPrevious);
	}
	,onceBackgroundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "backgroundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBackgroundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBackgroundChange == null) {
				this.__cbOnceOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnceOwnerUnbindBackgroundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBackgroundChange == null) {
				this.__cbOnceOwnerUnbindBackgroundChange = [];
			}
			this.__cbOnceOwnerUnbindBackgroundChange.push(null);
		}
		if(this.__cbOnceBackgroundChange == null) {
			this.__cbOnceBackgroundChange = [];
		}
		this.__cbOnceBackgroundChange.push(handleCurrentPrevious);
	}
	,offBackgroundChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnBackgroundChange != null) {
				index = this.__cbOnBackgroundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnBackgroundChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBackgroundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBackgroundChange.splice(index,1);
				}
			}
			if(this.__cbOnceBackgroundChange != null) {
				index = this.__cbOnceBackgroundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceBackgroundChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBackgroundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBackgroundChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBackgroundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBackgroundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBackgroundChange = null;
			}
			if(this.__cbOnceOwnerUnbindBackgroundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBackgroundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBackgroundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBackgroundChange = null;
			}
			this.__cbOnBackgroundChange = null;
			this.__cbOnceBackgroundChange = null;
		}
	}
	,listensBackgroundChange: function() {
		if(!(this.__cbOnBackgroundChange != null && this.__cbOnBackgroundChange.length > 0)) {
			if(this.__cbOnceBackgroundChange != null) {
				return this.__cbOnceBackgroundChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,scalingAutoruns: null
	,get_scaling: function() {
		var value = this.unobservedScaling;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.scalingAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.scalingAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_scaling: function(scaling) {
		var prevValue = this.unobservedScaling;
		this.unobservedScaling = scaling;
		if(prevValue == scaling) {
			return scaling;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitScalingChange(scaling,prevValue);
		var fieldAutoruns = this.scalingAutoruns;
		if(fieldAutoruns != null) {
			this.scalingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return scaling;
	}
	,invalidateScaling: function() {
		var value = this.unobservedScaling;
		this.emitScalingChange(value,value);
		var fieldAutoruns = this.scalingAutoruns;
		if(fieldAutoruns != null) {
			this.scalingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedScaling: null
	,__cbOnScalingChange: null
	,__cbOnceScalingChange: null
	,__cbOnOwnerUnbindScalingChange: null
	,__cbOnceOwnerUnbindScalingChange: null
	,emitScalingChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnScalingChange != null) {
			len += this.__cbOnScalingChange.length;
		}
		if(this.__cbOnceScalingChange != null) {
			len += this.__cbOnceScalingChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnScalingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnScalingChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceScalingChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceScalingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceScalingChange[ii];
						this.__cbOnceScalingChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindScalingChange[ii];
						this.__cbOnceOwnerUnbindScalingChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindScalingChange[ii]);
						newCbOnceArray.push(this.__cbOnceScalingChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindScalingChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceScalingChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onScalingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "scalingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offScalingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindScalingChange == null) {
				this.__cbOnOwnerUnbindScalingChange = [];
			}
			this.__cbOnOwnerUnbindScalingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindScalingChange == null) {
				this.__cbOnOwnerUnbindScalingChange = [];
			}
			this.__cbOnOwnerUnbindScalingChange.push(null);
		}
		if(this.__cbOnScalingChange == null) {
			this.__cbOnScalingChange = [];
		}
		this.__cbOnScalingChange.push(handleCurrentPrevious);
	}
	,onceScalingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "scalingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offScalingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindScalingChange == null) {
				this.__cbOnceOwnerUnbindScalingChange = [];
			}
			this.__cbOnceOwnerUnbindScalingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindScalingChange == null) {
				this.__cbOnceOwnerUnbindScalingChange = [];
			}
			this.__cbOnceOwnerUnbindScalingChange.push(null);
		}
		if(this.__cbOnceScalingChange == null) {
			this.__cbOnceScalingChange = [];
		}
		this.__cbOnceScalingChange.push(handleCurrentPrevious);
	}
	,offScalingChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnScalingChange != null) {
				index = this.__cbOnScalingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnScalingChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindScalingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindScalingChange.splice(index,1);
				}
			}
			if(this.__cbOnceScalingChange != null) {
				index = this.__cbOnceScalingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceScalingChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindScalingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindScalingChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindScalingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindScalingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindScalingChange = null;
			}
			if(this.__cbOnceOwnerUnbindScalingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindScalingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindScalingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindScalingChange = null;
			}
			this.__cbOnScalingChange = null;
			this.__cbOnceScalingChange = null;
		}
	}
	,listensScalingChange: function() {
		if(!(this.__cbOnScalingChange != null && this.__cbOnScalingChange.length > 0)) {
			if(this.__cbOnceScalingChange != null) {
				return this.__cbOnceScalingChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,titleAutoruns: null
	,get_title: function() {
		var value = this.unobservedTitle;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.titleAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.titleAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_title: function(title) {
		var prevValue = this.unobservedTitle;
		this.unobservedTitle = title;
		if(prevValue == title) {
			return title;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTitleChange(title,prevValue);
		var fieldAutoruns = this.titleAutoruns;
		if(fieldAutoruns != null) {
			this.titleAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return title;
	}
	,invalidateTitle: function() {
		var value = this.unobservedTitle;
		this.emitTitleChange(value,value);
		var fieldAutoruns = this.titleAutoruns;
		if(fieldAutoruns != null) {
			this.titleAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTitle: null
	,__cbOnTitleChange: null
	,__cbOnceTitleChange: null
	,__cbOnOwnerUnbindTitleChange: null
	,__cbOnceOwnerUnbindTitleChange: null
	,emitTitleChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTitleChange != null) {
			len += this.__cbOnTitleChange.length;
		}
		if(this.__cbOnceTitleChange != null) {
			len += this.__cbOnceTitleChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTitleChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTitleChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTitleChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTitleChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTitleChange[ii];
						this.__cbOnceTitleChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTitleChange[ii];
						this.__cbOnceOwnerUnbindTitleChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTitleChange[ii]);
						newCbOnceArray.push(this.__cbOnceTitleChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTitleChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTitleChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTitleChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "titleChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTitleChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTitleChange == null) {
				this.__cbOnOwnerUnbindTitleChange = [];
			}
			this.__cbOnOwnerUnbindTitleChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTitleChange == null) {
				this.__cbOnOwnerUnbindTitleChange = [];
			}
			this.__cbOnOwnerUnbindTitleChange.push(null);
		}
		if(this.__cbOnTitleChange == null) {
			this.__cbOnTitleChange = [];
		}
		this.__cbOnTitleChange.push(handleCurrentPrevious);
	}
	,onceTitleChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "titleChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTitleChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTitleChange == null) {
				this.__cbOnceOwnerUnbindTitleChange = [];
			}
			this.__cbOnceOwnerUnbindTitleChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTitleChange == null) {
				this.__cbOnceOwnerUnbindTitleChange = [];
			}
			this.__cbOnceOwnerUnbindTitleChange.push(null);
		}
		if(this.__cbOnceTitleChange == null) {
			this.__cbOnceTitleChange = [];
		}
		this.__cbOnceTitleChange.push(handleCurrentPrevious);
	}
	,offTitleChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTitleChange != null) {
				index = this.__cbOnTitleChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTitleChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTitleChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTitleChange.splice(index,1);
				}
			}
			if(this.__cbOnceTitleChange != null) {
				index = this.__cbOnceTitleChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTitleChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTitleChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTitleChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTitleChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTitleChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTitleChange = null;
			}
			if(this.__cbOnceOwnerUnbindTitleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTitleChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTitleChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTitleChange = null;
			}
			this.__cbOnTitleChange = null;
			this.__cbOnceTitleChange = null;
		}
	}
	,listensTitleChange: function() {
		if(!(this.__cbOnTitleChange != null && this.__cbOnTitleChange.length > 0)) {
			if(this.__cbOnceTitleChange != null) {
				return this.__cbOnceTitleChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,fullscreenAutoruns: null
	,get_fullscreen: function() {
		var value = this.unobservedFullscreen;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.fullscreenAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.fullscreenAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_fullscreen: function(fullscreen) {
		var prevValue = this.unobservedFullscreen;
		this.unobservedFullscreen = fullscreen;
		if(prevValue == fullscreen) {
			return fullscreen;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFullscreenChange(fullscreen,prevValue);
		var fieldAutoruns = this.fullscreenAutoruns;
		if(fieldAutoruns != null) {
			this.fullscreenAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return fullscreen;
	}
	,invalidateFullscreen: function() {
		var value = this.unobservedFullscreen;
		this.emitFullscreenChange(value,value);
		var fieldAutoruns = this.fullscreenAutoruns;
		if(fieldAutoruns != null) {
			this.fullscreenAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedFullscreen: null
	,__cbOnFullscreenChange: null
	,__cbOnceFullscreenChange: null
	,__cbOnOwnerUnbindFullscreenChange: null
	,__cbOnceOwnerUnbindFullscreenChange: null
	,emitFullscreenChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFullscreenChange != null) {
			len += this.__cbOnFullscreenChange.length;
		}
		if(this.__cbOnceFullscreenChange != null) {
			len += this.__cbOnceFullscreenChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFullscreenChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFullscreenChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFullscreenChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFullscreenChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFullscreenChange[ii];
						this.__cbOnceFullscreenChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFullscreenChange[ii];
						this.__cbOnceOwnerUnbindFullscreenChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFullscreenChange[ii]);
						newCbOnceArray.push(this.__cbOnceFullscreenChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFullscreenChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFullscreenChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFullscreenChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fullscreenChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFullscreenChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFullscreenChange == null) {
				this.__cbOnOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnOwnerUnbindFullscreenChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFullscreenChange == null) {
				this.__cbOnOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnOwnerUnbindFullscreenChange.push(null);
		}
		if(this.__cbOnFullscreenChange == null) {
			this.__cbOnFullscreenChange = [];
		}
		this.__cbOnFullscreenChange.push(handleCurrentPrevious);
	}
	,onceFullscreenChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "fullscreenChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFullscreenChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFullscreenChange == null) {
				this.__cbOnceOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnceOwnerUnbindFullscreenChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFullscreenChange == null) {
				this.__cbOnceOwnerUnbindFullscreenChange = [];
			}
			this.__cbOnceOwnerUnbindFullscreenChange.push(null);
		}
		if(this.__cbOnceFullscreenChange == null) {
			this.__cbOnceFullscreenChange = [];
		}
		this.__cbOnceFullscreenChange.push(handleCurrentPrevious);
	}
	,offFullscreenChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFullscreenChange != null) {
				index = this.__cbOnFullscreenChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFullscreenChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFullscreenChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFullscreenChange.splice(index,1);
				}
			}
			if(this.__cbOnceFullscreenChange != null) {
				index = this.__cbOnceFullscreenChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFullscreenChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFullscreenChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFullscreenChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFullscreenChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFullscreenChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFullscreenChange = null;
			}
			if(this.__cbOnceOwnerUnbindFullscreenChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFullscreenChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFullscreenChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFullscreenChange = null;
			}
			this.__cbOnFullscreenChange = null;
			this.__cbOnceFullscreenChange = null;
		}
	}
	,listensFullscreenChange: function() {
		if(!(this.__cbOnFullscreenChange != null && this.__cbOnFullscreenChange.length > 0)) {
			if(this.__cbOnceFullscreenChange != null) {
				return this.__cbOnceFullscreenChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,targetFpsAutoruns: null
	,get_targetFps: function() {
		var value = this.unobservedTargetFps;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.targetFpsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.targetFpsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_targetFps: function(targetFps) {
		var prevValue = this.unobservedTargetFps;
		this.unobservedTargetFps = targetFps;
		if(prevValue == targetFps) {
			return targetFps;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTargetFpsChange(targetFps,prevValue);
		var fieldAutoruns = this.targetFpsAutoruns;
		if(fieldAutoruns != null) {
			this.targetFpsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return targetFps;
	}
	,invalidateTargetFps: function() {
		var value = this.unobservedTargetFps;
		this.emitTargetFpsChange(value,value);
		var fieldAutoruns = this.targetFpsAutoruns;
		if(fieldAutoruns != null) {
			this.targetFpsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTargetFps: null
	,__cbOnTargetFpsChange: null
	,__cbOnceTargetFpsChange: null
	,__cbOnOwnerUnbindTargetFpsChange: null
	,__cbOnceOwnerUnbindTargetFpsChange: null
	,emitTargetFpsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTargetFpsChange != null) {
			len += this.__cbOnTargetFpsChange.length;
		}
		if(this.__cbOnceTargetFpsChange != null) {
			len += this.__cbOnceTargetFpsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTargetFpsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTargetFpsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTargetFpsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTargetFpsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTargetFpsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTargetFpsChange[ii];
						this.__cbOnceTargetFpsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTargetFpsChange[ii];
						this.__cbOnceOwnerUnbindTargetFpsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTargetFpsChange[ii]);
						newCbOnceArray.push(this.__cbOnceTargetFpsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTargetFpsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTargetFpsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTargetFpsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetFpsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetFpsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTargetFpsChange == null) {
				this.__cbOnOwnerUnbindTargetFpsChange = [];
			}
			this.__cbOnOwnerUnbindTargetFpsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTargetFpsChange == null) {
				this.__cbOnOwnerUnbindTargetFpsChange = [];
			}
			this.__cbOnOwnerUnbindTargetFpsChange.push(null);
		}
		if(this.__cbOnTargetFpsChange == null) {
			this.__cbOnTargetFpsChange = [];
		}
		this.__cbOnTargetFpsChange.push(handleCurrentPrevious);
	}
	,onceTargetFpsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "targetFpsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTargetFpsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTargetFpsChange == null) {
				this.__cbOnceOwnerUnbindTargetFpsChange = [];
			}
			this.__cbOnceOwnerUnbindTargetFpsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTargetFpsChange == null) {
				this.__cbOnceOwnerUnbindTargetFpsChange = [];
			}
			this.__cbOnceOwnerUnbindTargetFpsChange.push(null);
		}
		if(this.__cbOnceTargetFpsChange == null) {
			this.__cbOnceTargetFpsChange = [];
		}
		this.__cbOnceTargetFpsChange.push(handleCurrentPrevious);
	}
	,offTargetFpsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTargetFpsChange != null) {
				index = this.__cbOnTargetFpsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTargetFpsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTargetFpsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTargetFpsChange.splice(index,1);
				}
			}
			if(this.__cbOnceTargetFpsChange != null) {
				index = this.__cbOnceTargetFpsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTargetFpsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTargetFpsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTargetFpsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTargetFpsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTargetFpsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTargetFpsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTargetFpsChange = null;
			}
			if(this.__cbOnceOwnerUnbindTargetFpsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTargetFpsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTargetFpsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTargetFpsChange = null;
			}
			this.__cbOnTargetFpsChange = null;
			this.__cbOnceTargetFpsChange = null;
		}
	}
	,listensTargetFpsChange: function() {
		if(!(this.__cbOnTargetFpsChange != null && this.__cbOnTargetFpsChange.length > 0)) {
			if(this.__cbOnceTargetFpsChange != null) {
				return this.__cbOnceTargetFpsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,maxDeltaAutoruns: null
	,get_maxDelta: function() {
		var value = this.unobservedMaxDelta;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.maxDeltaAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.maxDeltaAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_maxDelta: function(maxDelta) {
		var prevValue = this.unobservedMaxDelta;
		this.unobservedMaxDelta = maxDelta;
		if(prevValue == maxDelta) {
			return maxDelta;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitMaxDeltaChange(maxDelta,prevValue);
		var fieldAutoruns = this.maxDeltaAutoruns;
		if(fieldAutoruns != null) {
			this.maxDeltaAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return maxDelta;
	}
	,invalidateMaxDelta: function() {
		var value = this.unobservedMaxDelta;
		this.emitMaxDeltaChange(value,value);
		var fieldAutoruns = this.maxDeltaAutoruns;
		if(fieldAutoruns != null) {
			this.maxDeltaAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedMaxDelta: null
	,__cbOnMaxDeltaChange: null
	,__cbOnceMaxDeltaChange: null
	,__cbOnOwnerUnbindMaxDeltaChange: null
	,__cbOnceOwnerUnbindMaxDeltaChange: null
	,emitMaxDeltaChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnMaxDeltaChange != null) {
			len += this.__cbOnMaxDeltaChange.length;
		}
		if(this.__cbOnceMaxDeltaChange != null) {
			len += this.__cbOnceMaxDeltaChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnMaxDeltaChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMaxDeltaChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMaxDeltaChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMaxDeltaChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMaxDeltaChange[ii];
						this.__cbOnceMaxDeltaChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMaxDeltaChange[ii];
						this.__cbOnceOwnerUnbindMaxDeltaChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMaxDeltaChange[ii]);
						newCbOnceArray.push(this.__cbOnceMaxDeltaChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMaxDeltaChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceMaxDeltaChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMaxDeltaChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxDeltaChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxDeltaChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnOwnerUnbindMaxDeltaChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnOwnerUnbindMaxDeltaChange.push(null);
		}
		if(this.__cbOnMaxDeltaChange == null) {
			this.__cbOnMaxDeltaChange = [];
		}
		this.__cbOnMaxDeltaChange.push(handleCurrentPrevious);
	}
	,onceMaxDeltaChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxDeltaChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxDeltaChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnceOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnceOwnerUnbindMaxDeltaChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMaxDeltaChange == null) {
				this.__cbOnceOwnerUnbindMaxDeltaChange = [];
			}
			this.__cbOnceOwnerUnbindMaxDeltaChange.push(null);
		}
		if(this.__cbOnceMaxDeltaChange == null) {
			this.__cbOnceMaxDeltaChange = [];
		}
		this.__cbOnceMaxDeltaChange.push(handleCurrentPrevious);
	}
	,offMaxDeltaChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnMaxDeltaChange != null) {
				index = this.__cbOnMaxDeltaChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnMaxDeltaChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMaxDeltaChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMaxDeltaChange.splice(index,1);
				}
			}
			if(this.__cbOnceMaxDeltaChange != null) {
				index = this.__cbOnceMaxDeltaChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceMaxDeltaChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMaxDeltaChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMaxDeltaChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMaxDeltaChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMaxDeltaChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMaxDeltaChange = null;
			}
			if(this.__cbOnceOwnerUnbindMaxDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMaxDeltaChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMaxDeltaChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMaxDeltaChange = null;
			}
			this.__cbOnMaxDeltaChange = null;
			this.__cbOnceMaxDeltaChange = null;
		}
	}
	,listensMaxDeltaChange: function() {
		if(!(this.__cbOnMaxDeltaChange != null && this.__cbOnMaxDeltaChange.length > 0)) {
			if(this.__cbOnceMaxDeltaChange != null) {
				return this.__cbOnceMaxDeltaChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,overrideDeltaAutoruns: null
	,get_overrideDelta: function() {
		var value = this.unobservedOverrideDelta;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.overrideDeltaAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.overrideDeltaAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_overrideDelta: function(overrideDelta) {
		var prevValue = this.unobservedOverrideDelta;
		this.unobservedOverrideDelta = overrideDelta;
		if(prevValue == overrideDelta) {
			return overrideDelta;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitOverrideDeltaChange(overrideDelta,prevValue);
		var fieldAutoruns = this.overrideDeltaAutoruns;
		if(fieldAutoruns != null) {
			this.overrideDeltaAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return overrideDelta;
	}
	,invalidateOverrideDelta: function() {
		var value = this.unobservedOverrideDelta;
		this.emitOverrideDeltaChange(value,value);
		var fieldAutoruns = this.overrideDeltaAutoruns;
		if(fieldAutoruns != null) {
			this.overrideDeltaAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedOverrideDelta: null
	,__cbOnOverrideDeltaChange: null
	,__cbOnceOverrideDeltaChange: null
	,__cbOnOwnerUnbindOverrideDeltaChange: null
	,__cbOnceOwnerUnbindOverrideDeltaChange: null
	,emitOverrideDeltaChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnOverrideDeltaChange != null) {
			len += this.__cbOnOverrideDeltaChange.length;
		}
		if(this.__cbOnceOverrideDeltaChange != null) {
			len += this.__cbOnceOverrideDeltaChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnOverrideDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOverrideDeltaChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnOverrideDeltaChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceOverrideDeltaChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceOverrideDeltaChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceOverrideDeltaChange[ii];
						this.__cbOnceOverrideDeltaChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindOverrideDeltaChange[ii];
						this.__cbOnceOwnerUnbindOverrideDeltaChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindOverrideDeltaChange[ii]);
						newCbOnceArray.push(this.__cbOnceOverrideDeltaChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindOverrideDeltaChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceOverrideDeltaChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onOverrideDeltaChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "overrideDeltaChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOverrideDeltaChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindOverrideDeltaChange == null) {
				this.__cbOnOwnerUnbindOverrideDeltaChange = [];
			}
			this.__cbOnOwnerUnbindOverrideDeltaChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindOverrideDeltaChange == null) {
				this.__cbOnOwnerUnbindOverrideDeltaChange = [];
			}
			this.__cbOnOwnerUnbindOverrideDeltaChange.push(null);
		}
		if(this.__cbOnOverrideDeltaChange == null) {
			this.__cbOnOverrideDeltaChange = [];
		}
		this.__cbOnOverrideDeltaChange.push(handleCurrentPrevious);
	}
	,onceOverrideDeltaChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "overrideDeltaChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOverrideDeltaChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindOverrideDeltaChange == null) {
				this.__cbOnceOwnerUnbindOverrideDeltaChange = [];
			}
			this.__cbOnceOwnerUnbindOverrideDeltaChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindOverrideDeltaChange == null) {
				this.__cbOnceOwnerUnbindOverrideDeltaChange = [];
			}
			this.__cbOnceOwnerUnbindOverrideDeltaChange.push(null);
		}
		if(this.__cbOnceOverrideDeltaChange == null) {
			this.__cbOnceOverrideDeltaChange = [];
		}
		this.__cbOnceOverrideDeltaChange.push(handleCurrentPrevious);
	}
	,offOverrideDeltaChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnOverrideDeltaChange != null) {
				index = this.__cbOnOverrideDeltaChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnOverrideDeltaChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindOverrideDeltaChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindOverrideDeltaChange.splice(index,1);
				}
			}
			if(this.__cbOnceOverrideDeltaChange != null) {
				index = this.__cbOnceOverrideDeltaChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceOverrideDeltaChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindOverrideDeltaChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindOverrideDeltaChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindOverrideDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindOverrideDeltaChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindOverrideDeltaChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindOverrideDeltaChange = null;
			}
			if(this.__cbOnceOwnerUnbindOverrideDeltaChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindOverrideDeltaChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindOverrideDeltaChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindOverrideDeltaChange = null;
			}
			this.__cbOnOverrideDeltaChange = null;
			this.__cbOnceOverrideDeltaChange = null;
		}
	}
	,listensOverrideDeltaChange: function() {
		if(!(this.__cbOnOverrideDeltaChange != null && this.__cbOnOverrideDeltaChange.length > 0)) {
			if(this.__cbOnceOverrideDeltaChange != null) {
				return this.__cbOnceOverrideDeltaChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,preventDefaultMouseWheelAutoruns: null
	,get_preventDefaultMouseWheel: function() {
		var value = this.unobservedPreventDefaultMouseWheel;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.preventDefaultMouseWheelAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.preventDefaultMouseWheelAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_preventDefaultMouseWheel: function(preventDefaultMouseWheel) {
		var prevValue = this.unobservedPreventDefaultMouseWheel;
		this.unobservedPreventDefaultMouseWheel = preventDefaultMouseWheel;
		if(prevValue == preventDefaultMouseWheel) {
			return preventDefaultMouseWheel;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitPreventDefaultMouseWheelChange(preventDefaultMouseWheel,prevValue);
		var fieldAutoruns = this.preventDefaultMouseWheelAutoruns;
		if(fieldAutoruns != null) {
			this.preventDefaultMouseWheelAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return preventDefaultMouseWheel;
	}
	,invalidatePreventDefaultMouseWheel: function() {
		var value = this.unobservedPreventDefaultMouseWheel;
		this.emitPreventDefaultMouseWheelChange(value,value);
		var fieldAutoruns = this.preventDefaultMouseWheelAutoruns;
		if(fieldAutoruns != null) {
			this.preventDefaultMouseWheelAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedPreventDefaultMouseWheel: null
	,__cbOnPreventDefaultMouseWheelChange: null
	,__cbOncePreventDefaultMouseWheelChange: null
	,__cbOnOwnerUnbindPreventDefaultMouseWheelChange: null
	,__cbOnceOwnerUnbindPreventDefaultMouseWheelChange: null
	,emitPreventDefaultMouseWheelChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnPreventDefaultMouseWheelChange != null) {
			len += this.__cbOnPreventDefaultMouseWheelChange.length;
		}
		if(this.__cbOncePreventDefaultMouseWheelChange != null) {
			len += this.__cbOncePreventDefaultMouseWheelChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPreventDefaultMouseWheelChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnPreventDefaultMouseWheelChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPreventDefaultMouseWheelChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePreventDefaultMouseWheelChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePreventDefaultMouseWheelChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePreventDefaultMouseWheelChange[ii];
						this.__cbOncePreventDefaultMouseWheelChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange[ii];
						this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange[ii]);
						newCbOnceArray.push(this.__cbOncePreventDefaultMouseWheelChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange = newCbOnceOwnerUnbindArray;
				this.__cbOncePreventDefaultMouseWheelChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPreventDefaultMouseWheelChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preventDefaultMouseWheelChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offPreventDefaultMouseWheelChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange == null) {
				this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange = [];
			}
			this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange == null) {
				this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange = [];
			}
			this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange.push(null);
		}
		if(this.__cbOnPreventDefaultMouseWheelChange == null) {
			this.__cbOnPreventDefaultMouseWheelChange = [];
		}
		this.__cbOnPreventDefaultMouseWheelChange.push(handleCurrentPrevious);
	}
	,oncePreventDefaultMouseWheelChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preventDefaultMouseWheelChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offPreventDefaultMouseWheelChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange == null) {
				this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange = [];
			}
			this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange == null) {
				this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange = [];
			}
			this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange.push(null);
		}
		if(this.__cbOncePreventDefaultMouseWheelChange == null) {
			this.__cbOncePreventDefaultMouseWheelChange = [];
		}
		this.__cbOncePreventDefaultMouseWheelChange.push(handleCurrentPrevious);
	}
	,offPreventDefaultMouseWheelChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnPreventDefaultMouseWheelChange != null) {
				index = this.__cbOnPreventDefaultMouseWheelChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnPreventDefaultMouseWheelChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange.splice(index,1);
				}
			}
			if(this.__cbOncePreventDefaultMouseWheelChange != null) {
				index = this.__cbOncePreventDefaultMouseWheelChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOncePreventDefaultMouseWheelChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPreventDefaultMouseWheelChange = null;
			}
			if(this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPreventDefaultMouseWheelChange = null;
			}
			this.__cbOnPreventDefaultMouseWheelChange = null;
			this.__cbOncePreventDefaultMouseWheelChange = null;
		}
	}
	,listensPreventDefaultMouseWheelChange: function() {
		if(!(this.__cbOnPreventDefaultMouseWheelChange != null && this.__cbOnPreventDefaultMouseWheelChange.length > 0)) {
			if(this.__cbOncePreventDefaultMouseWheelChange != null) {
				return this.__cbOncePreventDefaultMouseWheelChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,preventDefaultTouchesAutoruns: null
	,get_preventDefaultTouches: function() {
		var value = this.unobservedPreventDefaultTouches;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.preventDefaultTouchesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.preventDefaultTouchesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_preventDefaultTouches: function(preventDefaultTouches) {
		var prevValue = this.unobservedPreventDefaultTouches;
		this.unobservedPreventDefaultTouches = preventDefaultTouches;
		if(prevValue == preventDefaultTouches) {
			return preventDefaultTouches;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitPreventDefaultTouchesChange(preventDefaultTouches,prevValue);
		var fieldAutoruns = this.preventDefaultTouchesAutoruns;
		if(fieldAutoruns != null) {
			this.preventDefaultTouchesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return preventDefaultTouches;
	}
	,invalidatePreventDefaultTouches: function() {
		var value = this.unobservedPreventDefaultTouches;
		this.emitPreventDefaultTouchesChange(value,value);
		var fieldAutoruns = this.preventDefaultTouchesAutoruns;
		if(fieldAutoruns != null) {
			this.preventDefaultTouchesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedPreventDefaultTouches: null
	,__cbOnPreventDefaultTouchesChange: null
	,__cbOncePreventDefaultTouchesChange: null
	,__cbOnOwnerUnbindPreventDefaultTouchesChange: null
	,__cbOnceOwnerUnbindPreventDefaultTouchesChange: null
	,emitPreventDefaultTouchesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnPreventDefaultTouchesChange != null) {
			len += this.__cbOnPreventDefaultTouchesChange.length;
		}
		if(this.__cbOncePreventDefaultTouchesChange != null) {
			len += this.__cbOncePreventDefaultTouchesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnPreventDefaultTouchesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnPreventDefaultTouchesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnPreventDefaultTouchesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOncePreventDefaultTouchesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOncePreventDefaultTouchesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOncePreventDefaultTouchesChange[ii];
						this.__cbOncePreventDefaultTouchesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindPreventDefaultTouchesChange[ii];
						this.__cbOnceOwnerUnbindPreventDefaultTouchesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindPreventDefaultTouchesChange[ii]);
						newCbOnceArray.push(this.__cbOncePreventDefaultTouchesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindPreventDefaultTouchesChange = newCbOnceOwnerUnbindArray;
				this.__cbOncePreventDefaultTouchesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onPreventDefaultTouchesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preventDefaultTouchesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offPreventDefaultTouchesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindPreventDefaultTouchesChange == null) {
				this.__cbOnOwnerUnbindPreventDefaultTouchesChange = [];
			}
			this.__cbOnOwnerUnbindPreventDefaultTouchesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindPreventDefaultTouchesChange == null) {
				this.__cbOnOwnerUnbindPreventDefaultTouchesChange = [];
			}
			this.__cbOnOwnerUnbindPreventDefaultTouchesChange.push(null);
		}
		if(this.__cbOnPreventDefaultTouchesChange == null) {
			this.__cbOnPreventDefaultTouchesChange = [];
		}
		this.__cbOnPreventDefaultTouchesChange.push(handleCurrentPrevious);
	}
	,oncePreventDefaultTouchesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "preventDefaultTouchesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offPreventDefaultTouchesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindPreventDefaultTouchesChange == null) {
				this.__cbOnceOwnerUnbindPreventDefaultTouchesChange = [];
			}
			this.__cbOnceOwnerUnbindPreventDefaultTouchesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindPreventDefaultTouchesChange == null) {
				this.__cbOnceOwnerUnbindPreventDefaultTouchesChange = [];
			}
			this.__cbOnceOwnerUnbindPreventDefaultTouchesChange.push(null);
		}
		if(this.__cbOncePreventDefaultTouchesChange == null) {
			this.__cbOncePreventDefaultTouchesChange = [];
		}
		this.__cbOncePreventDefaultTouchesChange.push(handleCurrentPrevious);
	}
	,offPreventDefaultTouchesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnPreventDefaultTouchesChange != null) {
				index = this.__cbOnPreventDefaultTouchesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnPreventDefaultTouchesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindPreventDefaultTouchesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindPreventDefaultTouchesChange.splice(index,1);
				}
			}
			if(this.__cbOncePreventDefaultTouchesChange != null) {
				index = this.__cbOncePreventDefaultTouchesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOncePreventDefaultTouchesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindPreventDefaultTouchesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindPreventDefaultTouchesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindPreventDefaultTouchesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindPreventDefaultTouchesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindPreventDefaultTouchesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindPreventDefaultTouchesChange = null;
			}
			if(this.__cbOnceOwnerUnbindPreventDefaultTouchesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindPreventDefaultTouchesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindPreventDefaultTouchesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindPreventDefaultTouchesChange = null;
			}
			this.__cbOnPreventDefaultTouchesChange = null;
			this.__cbOncePreventDefaultTouchesChange = null;
		}
	}
	,listensPreventDefaultTouchesChange: function() {
		if(!(this.__cbOnPreventDefaultTouchesChange != null && this.__cbOnPreventDefaultTouchesChange.length > 0)) {
			if(this.__cbOncePreventDefaultTouchesChange != null) {
				return this.__cbOncePreventDefaultTouchesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,orientation: null
	,collections: null
	,appInfo: null
	,antialiasing: null
	,resizable: null
	,assetsPath: null
	,backend: null
	,defaultFont: null
	,defaultShader: null
	,unbindEvents: function() {
		this.offObservedDirty();
		this.offTargetWidthChange();
		this.offTargetHeightChange();
		this.offWindowWidthChange();
		this.offWindowHeightChange();
		this.offTargetDensityChange();
		this.offBackgroundChange();
		this.offScalingChange();
		this.offTitleChange();
		this.offFullscreenChange();
		this.offTargetFpsChange();
		this.offMaxDeltaChange();
		this.offOverrideDeltaChange();
		this.offPreventDefaultMouseWheelChange();
		this.offPreventDefaultTouchesChange();
	}
	,__class__: ceramic_Settings
	,__properties__: {set_preventDefaultTouches:"set_preventDefaultTouches",get_preventDefaultTouches:"get_preventDefaultTouches",set_preventDefaultMouseWheel:"set_preventDefaultMouseWheel",get_preventDefaultMouseWheel:"get_preventDefaultMouseWheel",set_overrideDelta:"set_overrideDelta",get_overrideDelta:"get_overrideDelta",set_maxDelta:"set_maxDelta",get_maxDelta:"get_maxDelta",set_targetFps:"set_targetFps",get_targetFps:"get_targetFps",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_title:"set_title",get_title:"get_title",set_scaling:"set_scaling",get_scaling:"get_scaling",set_background:"set_background",get_background:"get_background",set_targetDensity:"set_targetDensity",get_targetDensity:"get_targetDensity",set_windowHeight:"set_windowHeight",get_windowHeight:"get_windowHeight",set_windowWidth:"set_windowWidth",get_windowWidth:"get_windowWidth",set_targetHeight:"set_targetHeight",get_targetHeight:"get_targetHeight",set_targetWidth:"set_targetWidth",get_targetWidth:"get_targetWidth"}
};
var ceramic_Shader = function(backendItem,customAttributes) {
	ceramic_Entity.call(this);
	this.backendItem = backendItem;
	var attributes = [new ceramic_ShaderAttribute(3,"vertexPosition"),new ceramic_ShaderAttribute(2,"vertexTCoord"),new ceramic_ShaderAttribute(4,"vertexColor")];
	if(customAttributes != null) {
		var _g = 0;
		var _g1 = customAttributes.length;
		while(_g < _g1) {
			var i = _g++;
			var attribute = customAttributes[i];
			attributes.push(attribute);
		}
	}
	this.attributes = attributes;
	this.customAttributes = customAttributes;
	var _this = ceramic_App.app.backend.shaders;
	var customFloatAttributesSize = 0;
	var allAttrs = backendItem.customAttributes;
	if(allAttrs != null) {
		var _g = 0;
		var _g1 = allAttrs.length;
		while(_g < _g1) {
			var ii = _g++;
			var attr = allAttrs[ii];
			customFloatAttributesSize += attr.size;
		}
	}
	this.customFloatAttributesSize = customFloatAttributesSize;
};
$hxClasses["ceramic.Shader"] = ceramic_Shader;
ceramic_Shader.__name__ = "ceramic.Shader";
ceramic_Shader.fromSource = function(vertSource,fragSource) {
	var _this = ceramic_App.app.backend.shaders;
	var vertSource1 = vertSource;
	var fragSource1 = fragSource;
	var customAttributes = null;
	var isMultiTextureTemplate = false;
	var _g = 0;
	var _g1 = fragSource1.split("\n");
	while(_g < _g1.length) {
		var line = _g1[_g];
		++_g;
		if(StringTools.replace(StringTools.trim(line)," ","").toLowerCase() == "//ceramic:multitexture") {
			isMultiTextureTemplate = true;
			break;
		}
	}
	var textures = ["tex0"];
	if(isMultiTextureTemplate) {
		var maxTextures = ceramic_App.app.backend.textures.maxTexturesByBatch();
		var maxIfs = _this.maxIfStatementsByFragmentShader();
		var maxTexturesAndIfs = Math.min(maxTextures,maxIfs) | 0;
		if(maxTexturesAndIfs > 1) {
			var i = 1;
			while(i <= maxTexturesAndIfs) {
				textures.push("tex" + i);
				++i;
			}
		}
		fragSource1 = backend_Shaders.processMultiTextureFragTemplate(fragSource1,maxTextures,maxIfs);
		vertSource1 = backend_Shaders.processMultiTextureVertTemplate(vertSource1,maxTextures,maxIfs);
	}
	var shouldRemoveExtensions = false;
	var shouldConvertToGLES3 = false;
	if(clay_Clay.app.runtime.webglVersion >= 2) {
		shouldRemoveExtensions = true;
		shouldConvertToGLES3 = true;
	}
	if(shouldRemoveExtensions) {
		fragSource1 = backend_Shaders.removeExtensions(fragSource1);
		vertSource1 = backend_Shaders.removeExtensions(vertSource1);
	}
	if(shouldConvertToGLES3) {
		fragSource1 = backend_Shaders.convertToGLES3(fragSource1,true);
		vertSource1 = backend_Shaders.convertToGLES3(vertSource1,false);
	}
	var shader = new backend_ShaderImpl();
	shader.attributes = isMultiTextureTemplate ? backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE : backend_Shaders.SHADER_ATTRIBUTES;
	shader.textures = textures;
	shader.vertSource = vertSource1;
	shader.fragSource = fragSource1;
	shader.isBatchingMultiTexture = isMultiTextureTemplate;
	shader.customAttributes = customAttributes;
	shader.init();
	var backendItem = shader;
	if(backendItem == null) {
		return null;
	}
	return new ceramic_Shader(backendItem);
};
ceramic_Shader.__super__ = ceramic_Entity;
ceramic_Shader.prototype = $extend(ceramic_Entity.prototype,{
	backendItem: null
	,asset: null
	,attributes: null
	,customAttributes: null
	,customFloatAttributesSize: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.destroy();
		this.backendItem = null;
		this.attributes = null;
	}
	,clone: function() {
		var _this = ceramic_App.app.backend.shaders;
		var clonedBackendItem = this.backendItem.clone();
		var cloned = new ceramic_Shader(clonedBackendItem,this.customAttributes);
		return cloned;
	}
	,setInt: function(name,value) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setInt(name,value);
	}
	,setFloat: function(name,value) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setFloat(name,value);
	}
	,setColor: function(name,color) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setColor(name,(color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,1.0);
	}
	,setAlphaColor: function(name,color) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setColor(name,(color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,(color >> 24 & 255) / 255);
	}
	,setVec2: function(name,x,y) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setVector2(name,x,y);
	}
	,setVec3: function(name,x,y,z) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setVector3(name,x,y,z);
	}
	,setVec4: function(name,x,y,z,w) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setVector4(name,x,y,z,w);
	}
	,setFloatArray: function(name,array) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setFloatArray(name,new Float32Array(array));
	}
	,setTexture: function(name,slot,texture) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setTexture(name,slot,texture.backendItem);
	}
	,setMat4FromTransform: function(name,transform) {
		var _this = ceramic_App.app.backend.shaders;
		this.backendItem.uniforms.setMatrix4(name,new Float32Array([transform.a,transform.b,0,0,transform.c,transform.d,0,0,0,0,1,0,transform.tx,transform.ty,0,1]));
	}
	,toString: function() {
		if(this.id != null) {
			var name = this.id;
			if(StringTools.startsWith(name,"shader:")) {
				name = HxOverrides.substr(name,7,null);
			}
			if(this.asset != null && this.asset.options.vertId != null || this.asset.options.fragId != null) {
				var vertId = this.asset.options.vertId != null ? this.asset.options.vertId : "default";
				var fragId = this.asset.options.fragId != null ? this.asset.options.fragId : "default";
				return "Shader(" + name + " " + vertId + " " + fragId + ")";
			} else {
				return "Shader(" + name + ")";
			}
		} else {
			return "Shader()";
		}
	}
	,__class__: ceramic_Shader
});
var ceramic_ShaderAsset = function(name,options) {
	this.unobservedShader = null;
	this.shaderAutoruns = null;
	ceramic_Asset.call(this,"shader",name,options);
};
$hxClasses["ceramic.ShaderAsset"] = ceramic_ShaderAsset;
ceramic_ShaderAsset.__name__ = "ceramic.ShaderAsset";
ceramic_ShaderAsset.__super__ = ceramic_Asset;
ceramic_ShaderAsset.prototype = $extend(ceramic_Asset.prototype,{
	shaderAutoruns: null
	,get_shader: function() {
		var value = this.unobservedShader;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.shaderAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.shaderAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_shader: function(shader) {
		var prevValue = this.unobservedShader;
		this.unobservedShader = shader;
		if(prevValue == shader) {
			return shader;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitShaderChange(shader,prevValue);
		var fieldAutoruns = this.shaderAutoruns;
		if(fieldAutoruns != null) {
			this.shaderAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return shader;
	}
	,invalidateShader: function() {
		var value = this.unobservedShader;
		this.emitShaderChange(value,value);
		var fieldAutoruns = this.shaderAutoruns;
		if(fieldAutoruns != null) {
			this.shaderAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedShader: null
	,__cbOnShaderChange: null
	,__cbOnceShaderChange: null
	,__cbOnOwnerUnbindShaderChange: null
	,__cbOnceOwnerUnbindShaderChange: null
	,emitShaderChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnShaderChange != null) {
			len += this.__cbOnShaderChange.length;
		}
		if(this.__cbOnceShaderChange != null) {
			len += this.__cbOnceShaderChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnShaderChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnShaderChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnShaderChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceShaderChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceShaderChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceShaderChange[ii];
						this.__cbOnceShaderChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindShaderChange[ii];
						this.__cbOnceOwnerUnbindShaderChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindShaderChange[ii]);
						newCbOnceArray.push(this.__cbOnceShaderChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindShaderChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceShaderChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onShaderChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "shaderChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offShaderChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindShaderChange == null) {
				this.__cbOnOwnerUnbindShaderChange = [];
			}
			this.__cbOnOwnerUnbindShaderChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindShaderChange == null) {
				this.__cbOnOwnerUnbindShaderChange = [];
			}
			this.__cbOnOwnerUnbindShaderChange.push(null);
		}
		if(this.__cbOnShaderChange == null) {
			this.__cbOnShaderChange = [];
		}
		this.__cbOnShaderChange.push(handleCurrentPrevious);
	}
	,onceShaderChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "shaderChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offShaderChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindShaderChange == null) {
				this.__cbOnceOwnerUnbindShaderChange = [];
			}
			this.__cbOnceOwnerUnbindShaderChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindShaderChange == null) {
				this.__cbOnceOwnerUnbindShaderChange = [];
			}
			this.__cbOnceOwnerUnbindShaderChange.push(null);
		}
		if(this.__cbOnceShaderChange == null) {
			this.__cbOnceShaderChange = [];
		}
		this.__cbOnceShaderChange.push(handleCurrentPrevious);
	}
	,offShaderChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnShaderChange != null) {
				index = this.__cbOnShaderChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnShaderChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindShaderChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindShaderChange.splice(index,1);
				}
			}
			if(this.__cbOnceShaderChange != null) {
				index = this.__cbOnceShaderChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceShaderChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindShaderChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindShaderChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindShaderChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindShaderChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindShaderChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindShaderChange = null;
			}
			if(this.__cbOnceOwnerUnbindShaderChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindShaderChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindShaderChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindShaderChange = null;
			}
			this.__cbOnShaderChange = null;
			this.__cbOnceShaderChange = null;
		}
	}
	,listensShaderChange: function() {
		if(!(this.__cbOnShaderChange != null && this.__cbOnShaderChange.length > 0)) {
			if(this.__cbOnceShaderChange != null) {
				return this.__cbOnceShaderChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load shader asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 24, className : "ceramic.ShaderAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var customAttributes = null;
		if(this.options.customAttributes != null) {
			customAttributes = [];
			var rawAttributes = this.options.customAttributes;
			var _g = 0;
			var _g1 = rawAttributes.length;
			while(_g < _g1) {
				var i = _g++;
				var rawAttr = rawAttributes[i];
				customAttributes.push(new ceramic_ShaderAttribute(rawAttr.size,rawAttr.name));
			}
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		if(this.path != null && (StringTools.endsWith(this.path.toLowerCase(),".frag") || StringTools.endsWith(this.path.toLowerCase(),".vert"))) {
			var paths = ceramic_Assets.allByName.h[this.name];
			if(this.options.fragId == null) {
				var _g = 0;
				var _g1 = paths.length;
				while(_g < _g1) {
					var i = _g++;
					var path = paths[i];
					if(StringTools.endsWith(path.toLowerCase(),".frag")) {
						this.options.fragId = path;
						break;
					}
				}
			}
			if(this.options.vertId == null) {
				var _g = 0;
				var _g1 = paths.length;
				while(_g < _g1) {
					var i = _g++;
					var path = paths[i];
					if(StringTools.endsWith(path.toLowerCase(),".vert")) {
						this.options.vertId = path;
						break;
					}
				}
			}
			ceramic_App.app.logger.info("Load shader" + (this.options.vertId != null ? " " + Std.string(this.options.vertId) : "") + (this.options.fragId != null ? " " + Std.string(this.options.fragId) : ""),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 72, className : "ceramic.ShaderAsset", methodName : "load"});
		} else {
			ceramic_App.app.logger.info("Load shader " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 75, className : "ceramic.ShaderAsset", methodName : "load"});
		}
		if(this.options.vertId == null) {
			this.options.vertId = "textured.vert";
		}
		if(this.options.fragId == null) {
			this.set_status(ceramic_AssetStatus.BROKEN);
			ceramic_App.app.logger.error("Missing fragId option to load shader at path: " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 84, className : "ceramic.ShaderAsset", methodName : "load"});
			this.emitComplete(false);
			return;
		}
		var vertPath = this.options.vertId;
		if(this.options.vertId != "textured.vert") {
			vertPath = ceramic_Assets.realAssetPath(this.options.vertId,this.runtimeAssets);
			var assetReloadedCount = ceramic_Assets.getReloadCount(vertPath);
			if(assetReloadedCount > 0) {
				vertPath += "?hot=" + assetReloadedCount;
			}
		} else {
			vertPath = ceramic_Assets.realAssetPath(this.options.vertId,null);
		}
		var fragPath = ceramic_Assets.realAssetPath(this.options.fragId,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(fragPath);
		if(assetReloadedCount > 0) {
			fragPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.backend.texts.load(vertPath,loadOptions,function(vertSource) {
			ceramic_App.app.backend.texts.load(fragPath,loadOptions,function(fragSource) {
				if(vertSource == null) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to load " + Std.string(_gthis.options.vertId) + (" for shader at path: " + _gthis.path),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 112, className : "ceramic.ShaderAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				if(fragSource == null) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to load " + Std.string(_gthis.options.fragId) + (" for shader at path: " + _gthis.path),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 119, className : "ceramic.ShaderAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				var backendItem = null;
				try {
					var _this = ceramic_App.app.backend.shaders;
					var vertSource1 = vertSource;
					var fragSource1 = fragSource;
					var isMultiTextureTemplate = false;
					var _g = 0;
					var _g1 = fragSource1.split("\n");
					while(_g < _g1.length) {
						var line = _g1[_g];
						++_g;
						if(StringTools.replace(StringTools.trim(line)," ","").toLowerCase() == "//ceramic:multitexture") {
							isMultiTextureTemplate = true;
							break;
						}
					}
					var textures = ["tex0"];
					if(isMultiTextureTemplate) {
						var maxTextures = ceramic_App.app.backend.textures.maxTexturesByBatch();
						var maxIfs = _this.maxIfStatementsByFragmentShader();
						var maxTexturesAndIfs = Math.min(maxTextures,maxIfs) | 0;
						if(maxTexturesAndIfs > 1) {
							var i = 1;
							while(i <= maxTexturesAndIfs) {
								textures.push("tex" + i);
								++i;
							}
						}
						fragSource1 = backend_Shaders.processMultiTextureFragTemplate(fragSource1,maxTextures,maxIfs);
						vertSource1 = backend_Shaders.processMultiTextureVertTemplate(vertSource1,maxTextures,maxIfs);
					}
					var shouldRemoveExtensions = false;
					var shouldConvertToGLES3 = false;
					if(clay_Clay.app.runtime.webglVersion >= 2) {
						shouldRemoveExtensions = true;
						shouldConvertToGLES3 = true;
					}
					if(shouldRemoveExtensions) {
						fragSource1 = backend_Shaders.removeExtensions(fragSource1);
						vertSource1 = backend_Shaders.removeExtensions(vertSource1);
					}
					if(shouldConvertToGLES3) {
						fragSource1 = backend_Shaders.convertToGLES3(fragSource1,true);
						vertSource1 = backend_Shaders.convertToGLES3(vertSource1,false);
					}
					var shader = new backend_ShaderImpl();
					shader.attributes = isMultiTextureTemplate ? backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE : backend_Shaders.SHADER_ATTRIBUTES;
					shader.textures = textures;
					shader.vertSource = vertSource1;
					shader.fragSource = fragSource1;
					shader.isBatchingMultiTexture = isMultiTextureTemplate;
					shader.customAttributes = customAttributes;
					shader.init();
					backendItem = shader;
				} catch( _g ) {
					var e = haxe_Exception.caught(_g).unwrap();
					ceramic_App.app.logger.error("Error when creating shader from source: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 129, className : "ceramic.ShaderAsset", methodName : "load"});
				}
				if(backendItem == null) {
					_gthis.set_status(ceramic_AssetStatus.BROKEN);
					ceramic_App.app.logger.error("Failed to create shader from data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 134, className : "ceramic.ShaderAsset", methodName : "load"});
					_gthis.emitComplete(false);
					return;
				}
				var shader = new ceramic_Shader(backendItem,customAttributes);
				shader.asset = _gthis;
				shader.id = "shader:" + _gthis.path;
				var prevShader = _gthis.get_shader();
				_gthis.set_shader(shader);
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
				if(prevShader != null) {
					prevShader.asset = null;
					prevShader.destroy();
					prevShader = null;
				}
			});
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		if(this.options != null) {
			if(this.options.fragId != null) {
				var path = this.options.fragId;
				var previousTime = -1;
				if(Object.prototype.hasOwnProperty.call(previousFiles.h,path)) {
					previousTime = previousFiles.h[path];
				}
				var newTime = -1;
				if(Object.prototype.hasOwnProperty.call(newFiles.h,path)) {
					newTime = newFiles.h[path];
				}
				if(newTime > previousTime) {
					ceramic_App.app.logger.info("Reload shader (fragment shader has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 196, className : "ceramic.ShaderAsset", methodName : "assetFilesDidChange"});
					this.load();
				}
			} else if(this.options.vertId != null) {
				var path = this.options.vertId;
				var previousTime = -1;
				if(Object.prototype.hasOwnProperty.call(previousFiles.h,path)) {
					previousTime = previousFiles.h[path];
				}
				var newTime = -1;
				if(Object.prototype.hasOwnProperty.call(newFiles.h,path)) {
					newTime = newFiles.h[path];
				}
				if(newTime > previousTime) {
					ceramic_App.app.logger.info("Reload shader (vertex shader has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\ShaderAsset.hx", lineNumber : 212, className : "ceramic.ShaderAsset", methodName : "assetFilesDidChange"});
					this.load();
				}
			}
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_shader() != null) {
			this.get_shader().destroy();
			this.set_shader(null);
		}
	}
	,toString: function() {
		var className = "ShaderAsset";
		if(this.options.vertId != null || this.options.fragId != null) {
			var vertId = this.options.vertId != null ? this.options.vertId : "default";
			var fragId = this.options.fragId != null ? this.options.fragId : "default";
			return "" + className + "(" + this.name + " " + vertId + " " + fragId + ")";
		} else if(this.path != null && StringTools.trim(this.path) != "") {
			return "" + className + "(" + this.name + " " + this.path + ")";
		} else {
			return "" + className + "(" + this.name + ")";
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offShaderChange();
	}
	,__class__: ceramic_ShaderAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_shader:"set_shader",get_shader:"get_shader"})
});
var ceramic_ShaderAttribute = function(size,name) {
	this.size = size;
	this.name = name;
};
$hxClasses["ceramic.ShaderAttribute"] = ceramic_ShaderAttribute;
ceramic_ShaderAttribute.__name__ = "ceramic.ShaderAttribute";
ceramic_ShaderAttribute.prototype = {
	size: null
	,name: null
	,toString: function() {
		return "" + Std.string({ size : this.size, name : this.name});
	}
	,__class__: ceramic_ShaderAttribute
};
var ceramic_Shortcuts = function() { };
$hxClasses["ceramic.Shortcuts"] = ceramic_Shortcuts;
ceramic_Shortcuts.__name__ = "ceramic.Shortcuts";
ceramic_Shortcuts.__properties__ = {get_systems:"get_systems",get_log:"get_log",get_settings:"get_settings",get_input:"get_input",get_audio:"get_audio",get_screen:"get_screen",get_app:"get_app"};
ceramic_Shortcuts.get_app = function() {
	return ceramic_App.app;
};
ceramic_Shortcuts.get_screen = function() {
	return ceramic_App.app.screen;
};
ceramic_Shortcuts.get_audio = function() {
	return ceramic_App.app.audio;
};
ceramic_Shortcuts.get_input = function() {
	return ceramic_App.app.input;
};
ceramic_Shortcuts.get_settings = function() {
	return ceramic_App.app.settings;
};
ceramic_Shortcuts.get_log = function() {
	return ceramic_App.app.logger;
};
ceramic_Shortcuts.get_systems = function() {
	return ceramic_App.app.systems;
};
ceramic_Shortcuts.unobserve = function() {
	tracker_Autorun.unobserve();
};
ceramic_Shortcuts.reobserve = function() {
	tracker_Autorun.reobserve();
};
var ceramic_SortVisuals = function() { };
$hxClasses["ceramic.SortVisuals"] = ceramic_SortVisuals;
ceramic_SortVisuals.__name__ = "ceramic.SortVisuals";
ceramic_SortVisuals.cmp = function(a,b) {
	var result = 0;
	if(!a.computedVisible && !a.computedTouchable) {
		result = -1;
	} else if(!b.computedVisible && !b.computedTouchable) {
		result = 1;
	} else if(a.computedRenderTarget != b.computedRenderTarget) {
		if(a.computedRenderTarget == null) {
			result = 1;
		} else if(b.computedRenderTarget == null) {
			result = -1;
		} else if(a.computedRenderTarget.priority > b.computedRenderTarget.priority) {
			result = -1;
		} else if(a.computedRenderTarget.priority < b.computedRenderTarget.priority) {
			result = 1;
		} else if(a.computedRenderTarget.index < b.computedRenderTarget.index) {
			result = -1;
		} else {
			result = 1;
		}
	} else if(a.computedDepth > b.computedDepth) {
		result = 1;
	} else if(a.computedDepth < b.computedDepth) {
		result = -1;
	} else {
		var aQuad = a.asQuad;
		var bQuad = b.asQuad;
		var aMesh = a.asMesh;
		var bMesh = b.asMesh;
		var aIsQuadOrMesh = aQuad != null || aMesh != null;
		var bIsQuadOrMesh = bQuad != null || bMesh != null;
		if(aIsQuadOrMesh && bIsQuadOrMesh) {
			var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
			var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
			if(aTexture != null && bTexture == null) {
				result = 1;
			} else if(aTexture == null && bTexture != null) {
				result = -1;
			} else if(aTexture != null && bTexture != null) {
				if(aTexture.index < bTexture.index) {
					result = 1;
				} else if(aTexture.index > bTexture.index) {
					result = -1;
				} else if(a.blending > b.blending) {
					result = 1;
				} else if(a.blending < b.blending) {
					result = -1;
				}
			} else if(a.blending > b.blending) {
				result = 1;
			} else if(a.blending < b.blending) {
				result = -1;
			}
		}
	}
	return result;
};
ceramic_SortVisuals.sort = function(a) {
	ceramic_SortVisuals.rec(a,0,a.length);
};
ceramic_SortVisuals.rec = function(a,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				var a1 = a[j];
				var b = a[j - 1];
				var result = 0;
				if(!a1.computedVisible && !a1.computedTouchable) {
					result = -1;
				} else if(!b.computedVisible && !b.computedTouchable) {
					result = 1;
				} else if(a1.computedRenderTarget != b.computedRenderTarget) {
					if(a1.computedRenderTarget == null) {
						result = 1;
					} else if(b.computedRenderTarget == null) {
						result = -1;
					} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
						result = -1;
					} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
						result = 1;
					} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
						result = -1;
					} else {
						result = 1;
					}
				} else if(a1.computedDepth > b.computedDepth) {
					result = 1;
				} else if(a1.computedDepth < b.computedDepth) {
					result = -1;
				} else {
					var aQuad = a1.asQuad;
					var bQuad = b.asQuad;
					var aMesh = a1.asMesh;
					var bMesh = b.asMesh;
					var aIsQuadOrMesh = aQuad != null || aMesh != null;
					var bIsQuadOrMesh = bQuad != null || bMesh != null;
					if(aIsQuadOrMesh && bIsQuadOrMesh) {
						var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
						var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
						if(aTexture != null && bTexture == null) {
							result = 1;
						} else if(aTexture == null && bTexture != null) {
							result = -1;
						} else if(aTexture != null && bTexture != null) {
							if(aTexture.index < bTexture.index) {
								result = 1;
							} else if(aTexture.index > bTexture.index) {
								result = -1;
							} else if(a1.blending > b.blending) {
								result = 1;
							} else if(a1.blending < b.blending) {
								result = -1;
							}
						} else if(a1.blending > b.blending) {
							result = 1;
						} else if(a1.blending < b.blending) {
							result = -1;
						}
					}
				}
				if(result < 0) {
					var i1 = j - 1;
					var tmp = a[i1];
					a[i1] = a[j];
					a[j] = tmp;
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	ceramic_SortVisuals.rec(a,from,middle);
	ceramic_SortVisuals.rec(a,middle,to);
	ceramic_SortVisuals.doMerge(a,from,middle,to,middle - from,to - middle);
};
ceramic_SortVisuals.doMerge = function(a,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		var a1 = a[pivot];
		var b = a[from];
		var result = 0;
		if(!a1.computedVisible && !a1.computedTouchable) {
			result = -1;
		} else if(!b.computedVisible && !b.computedTouchable) {
			result = 1;
		} else if(a1.computedRenderTarget != b.computedRenderTarget) {
			if(a1.computedRenderTarget == null) {
				result = 1;
			} else if(b.computedRenderTarget == null) {
				result = -1;
			} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
				result = -1;
			} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
				result = 1;
			} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
				result = -1;
			} else {
				result = 1;
			}
		} else if(a1.computedDepth > b.computedDepth) {
			result = 1;
		} else if(a1.computedDepth < b.computedDepth) {
			result = -1;
		} else {
			var aQuad = a1.asQuad;
			var bQuad = b.asQuad;
			var aMesh = a1.asMesh;
			var bMesh = b.asMesh;
			var aIsQuadOrMesh = aQuad != null || aMesh != null;
			var bIsQuadOrMesh = bQuad != null || bMesh != null;
			if(aIsQuadOrMesh && bIsQuadOrMesh) {
				var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
				var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
				if(aTexture != null && bTexture == null) {
					result = 1;
				} else if(aTexture == null && bTexture != null) {
					result = -1;
				} else if(aTexture != null && bTexture != null) {
					if(aTexture.index < bTexture.index) {
						result = 1;
					} else if(aTexture.index > bTexture.index) {
						result = -1;
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			}
		}
		if(result < 0) {
			var tmp = a[pivot];
			a[pivot] = a[from];
			a[from] = tmp;
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		var from1 = pivot;
		var len = to - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[mid];
			var b = a[first_cut];
			var result = 0;
			if(!a1.computedVisible && !a1.computedTouchable) {
				result = -1;
			} else if(!b.computedVisible && !b.computedTouchable) {
				result = 1;
			} else if(a1.computedRenderTarget != b.computedRenderTarget) {
				if(a1.computedRenderTarget == null) {
					result = 1;
				} else if(b.computedRenderTarget == null) {
					result = -1;
				} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
					result = -1;
				} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
					result = 1;
				} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
					result = -1;
				} else {
					result = 1;
				}
			} else if(a1.computedDepth > b.computedDepth) {
				result = 1;
			} else if(a1.computedDepth < b.computedDepth) {
				result = -1;
			} else {
				var aQuad = a1.asQuad;
				var bQuad = b.asQuad;
				var aMesh = a1.asMesh;
				var bMesh = b.asMesh;
				var aIsQuadOrMesh = aQuad != null || aMesh != null;
				var bIsQuadOrMesh = bQuad != null || bMesh != null;
				if(aIsQuadOrMesh && bIsQuadOrMesh) {
					var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
					var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
					if(aTexture != null && bTexture == null) {
						result = 1;
					} else if(aTexture == null && bTexture != null) {
						result = -1;
					} else if(aTexture != null && bTexture != null) {
						if(aTexture.index < bTexture.index) {
							result = 1;
						} else if(aTexture.index > bTexture.index) {
							result = -1;
						} else if(a1.blending > b.blending) {
							result = 1;
						} else if(a1.blending < b.blending) {
							result = -1;
						}
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				}
			}
			if(result < 0) {
				from1 = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		second_cut = from1;
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		var from1 = from;
		var len = pivot - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[second_cut];
			var b = a[mid];
			var result = 0;
			if(!a1.computedVisible && !a1.computedTouchable) {
				result = -1;
			} else if(!b.computedVisible && !b.computedTouchable) {
				result = 1;
			} else if(a1.computedRenderTarget != b.computedRenderTarget) {
				if(a1.computedRenderTarget == null) {
					result = 1;
				} else if(b.computedRenderTarget == null) {
					result = -1;
				} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
					result = -1;
				} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
					result = 1;
				} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
					result = -1;
				} else {
					result = 1;
				}
			} else if(a1.computedDepth > b.computedDepth) {
				result = 1;
			} else if(a1.computedDepth < b.computedDepth) {
				result = -1;
			} else {
				var aQuad = a1.asQuad;
				var bQuad = b.asQuad;
				var aMesh = a1.asMesh;
				var bMesh = b.asMesh;
				var aIsQuadOrMesh = aQuad != null || aMesh != null;
				var bIsQuadOrMesh = bQuad != null || bMesh != null;
				if(aIsQuadOrMesh && bIsQuadOrMesh) {
					var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
					var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
					if(aTexture != null && bTexture == null) {
						result = 1;
					} else if(aTexture == null && bTexture != null) {
						result = -1;
					} else if(aTexture != null && bTexture != null) {
						if(aTexture.index < bTexture.index) {
							result = 1;
						} else if(aTexture.index > bTexture.index) {
							result = -1;
						} else if(a1.blending > b.blending) {
							result = 1;
						} else if(a1.blending < b.blending) {
							result = -1;
						}
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				}
			}
			if(result < 0) {
				len = half;
			} else {
				from1 = mid + 1;
				len = len - half - 1;
			}
		}
		first_cut = from1;
		len11 = first_cut - from;
	}
	var n;
	if(!(first_cut == pivot || pivot == second_cut)) {
		var m = second_cut - first_cut;
		var n1 = pivot - first_cut;
		while(n1 != 0) {
			var t = m % n1;
			m = n1;
			n1 = t;
		}
		n = m;
		while(n-- != 0) {
			var k = first_cut + n;
			var val = a[k];
			var shift = pivot - first_cut;
			var p1 = first_cut + n;
			var p2 = first_cut + n + shift;
			while(p2 != first_cut + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(second_cut - p2 > shift) {
					p2 += shift;
				} else {
					p2 = first_cut + (shift - (second_cut - p2));
				}
			}
			a[p1] = val;
		}
	}
	var new_mid = first_cut + len22;
	ceramic_SortVisuals.doMerge(a,from,first_cut,new_mid,len11,len22);
	ceramic_SortVisuals.doMerge(a,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
ceramic_SortVisuals.rotate = function(a,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var m = to - from;
	var n = mid - from;
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	var n = m;
	while(n-- != 0) {
		var k = from + n;
		var val = a[k];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
ceramic_SortVisuals.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
ceramic_SortVisuals.upper = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[val];
		var b = a[mid];
		var result = 0;
		if(!a1.computedVisible && !a1.computedTouchable) {
			result = -1;
		} else if(!b.computedVisible && !b.computedTouchable) {
			result = 1;
		} else if(a1.computedRenderTarget != b.computedRenderTarget) {
			if(a1.computedRenderTarget == null) {
				result = 1;
			} else if(b.computedRenderTarget == null) {
				result = -1;
			} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
				result = -1;
			} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
				result = 1;
			} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
				result = -1;
			} else {
				result = 1;
			}
		} else if(a1.computedDepth > b.computedDepth) {
			result = 1;
		} else if(a1.computedDepth < b.computedDepth) {
			result = -1;
		} else {
			var aQuad = a1.asQuad;
			var bQuad = b.asQuad;
			var aMesh = a1.asMesh;
			var bMesh = b.asMesh;
			var aIsQuadOrMesh = aQuad != null || aMesh != null;
			var bIsQuadOrMesh = bQuad != null || bMesh != null;
			if(aIsQuadOrMesh && bIsQuadOrMesh) {
				var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
				var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
				if(aTexture != null && bTexture == null) {
					result = 1;
				} else if(aTexture == null && bTexture != null) {
					result = -1;
				} else if(aTexture != null && bTexture != null) {
					if(aTexture.index < bTexture.index) {
						result = 1;
					} else if(aTexture.index > bTexture.index) {
						result = -1;
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			}
		}
		if(result < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
ceramic_SortVisuals.lower = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[mid];
		var b = a[val];
		var result = 0;
		if(!a1.computedVisible && !a1.computedTouchable) {
			result = -1;
		} else if(!b.computedVisible && !b.computedTouchable) {
			result = 1;
		} else if(a1.computedRenderTarget != b.computedRenderTarget) {
			if(a1.computedRenderTarget == null) {
				result = 1;
			} else if(b.computedRenderTarget == null) {
				result = -1;
			} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
				result = -1;
			} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
				result = 1;
			} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
				result = -1;
			} else {
				result = 1;
			}
		} else if(a1.computedDepth > b.computedDepth) {
			result = 1;
		} else if(a1.computedDepth < b.computedDepth) {
			result = -1;
		} else {
			var aQuad = a1.asQuad;
			var bQuad = b.asQuad;
			var aMesh = a1.asMesh;
			var bMesh = b.asMesh;
			var aIsQuadOrMesh = aQuad != null || aMesh != null;
			var bIsQuadOrMesh = bQuad != null || bMesh != null;
			if(aIsQuadOrMesh && bIsQuadOrMesh) {
				var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
				var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
				if(aTexture != null && bTexture == null) {
					result = 1;
				} else if(aTexture == null && bTexture != null) {
					result = -1;
				} else if(aTexture != null && bTexture != null) {
					if(aTexture.index < bTexture.index) {
						result = 1;
					} else if(aTexture.index > bTexture.index) {
						result = -1;
					} else if(a1.blending > b.blending) {
						result = 1;
					} else if(a1.blending < b.blending) {
						result = -1;
					}
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			}
		}
		if(result < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
ceramic_SortVisuals.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
ceramic_SortVisuals.compare = function(a,i,j) {
	var a1 = a[i];
	var b = a[j];
	var result = 0;
	if(!a1.computedVisible && !a1.computedTouchable) {
		result = -1;
	} else if(!b.computedVisible && !b.computedTouchable) {
		result = 1;
	} else if(a1.computedRenderTarget != b.computedRenderTarget) {
		if(a1.computedRenderTarget == null) {
			result = 1;
		} else if(b.computedRenderTarget == null) {
			result = -1;
		} else if(a1.computedRenderTarget.priority > b.computedRenderTarget.priority) {
			result = -1;
		} else if(a1.computedRenderTarget.priority < b.computedRenderTarget.priority) {
			result = 1;
		} else if(a1.computedRenderTarget.index < b.computedRenderTarget.index) {
			result = -1;
		} else {
			result = 1;
		}
	} else if(a1.computedDepth > b.computedDepth) {
		result = 1;
	} else if(a1.computedDepth < b.computedDepth) {
		result = -1;
	} else {
		var aQuad = a1.asQuad;
		var bQuad = b.asQuad;
		var aMesh = a1.asMesh;
		var bMesh = b.asMesh;
		var aIsQuadOrMesh = aQuad != null || aMesh != null;
		var bIsQuadOrMesh = bQuad != null || bMesh != null;
		if(aIsQuadOrMesh && bIsQuadOrMesh) {
			var aTexture = aMesh != null ? aMesh.texture : aQuad._texture;
			var bTexture = bMesh != null ? bMesh.texture : bQuad._texture;
			if(aTexture != null && bTexture == null) {
				result = 1;
			} else if(aTexture == null && bTexture != null) {
				result = -1;
			} else if(aTexture != null && bTexture != null) {
				if(aTexture.index < bTexture.index) {
					result = 1;
				} else if(aTexture.index > bTexture.index) {
					result = -1;
				} else if(a1.blending > b.blending) {
					result = 1;
				} else if(a1.blending < b.blending) {
					result = -1;
				}
			} else if(a1.blending > b.blending) {
				result = 1;
			} else if(a1.blending < b.blending) {
				result = -1;
			}
		}
	}
	return result;
};
var ceramic_SortVisualsByDepth = function() { };
$hxClasses["ceramic.SortVisualsByDepth"] = ceramic_SortVisualsByDepth;
ceramic_SortVisualsByDepth.__name__ = "ceramic.SortVisualsByDepth";
ceramic_SortVisualsByDepth.cmp = function(a,b) {
	var result = 0;
	if(a.depth > b.depth) {
		result = 1;
	} else if(a.depth < b.depth) {
		result = -1;
	}
	return result;
};
ceramic_SortVisualsByDepth.sort = function(a) {
	ceramic_SortVisualsByDepth.rec(a,0,a.length);
};
ceramic_SortVisualsByDepth.rec = function(a,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				var a1 = a[j];
				var b = a[j - 1];
				var result = 0;
				if(a1.depth > b.depth) {
					result = 1;
				} else if(a1.depth < b.depth) {
					result = -1;
				}
				if(result < 0) {
					var i1 = j - 1;
					var tmp = a[i1];
					a[i1] = a[j];
					a[j] = tmp;
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	ceramic_SortVisualsByDepth.rec(a,from,middle);
	ceramic_SortVisualsByDepth.rec(a,middle,to);
	ceramic_SortVisualsByDepth.doMerge(a,from,middle,to,middle - from,to - middle);
};
ceramic_SortVisualsByDepth.doMerge = function(a,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		var a1 = a[pivot];
		var b = a[from];
		var result = 0;
		if(a1.depth > b.depth) {
			result = 1;
		} else if(a1.depth < b.depth) {
			result = -1;
		}
		if(result < 0) {
			var tmp = a[pivot];
			a[pivot] = a[from];
			a[from] = tmp;
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		var from1 = pivot;
		var len = to - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[mid];
			var b = a[first_cut];
			var result = 0;
			if(a1.depth > b.depth) {
				result = 1;
			} else if(a1.depth < b.depth) {
				result = -1;
			}
			if(result < 0) {
				from1 = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		second_cut = from1;
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		var from1 = from;
		var len = pivot - from1;
		var half;
		var mid;
		while(len > 0) {
			half = len >> 1;
			mid = from1 + half;
			var a1 = a[second_cut];
			var b = a[mid];
			var result = 0;
			if(a1.depth > b.depth) {
				result = 1;
			} else if(a1.depth < b.depth) {
				result = -1;
			}
			if(result < 0) {
				len = half;
			} else {
				from1 = mid + 1;
				len = len - half - 1;
			}
		}
		first_cut = from1;
		len11 = first_cut - from;
	}
	var n;
	if(!(first_cut == pivot || pivot == second_cut)) {
		var m = second_cut - first_cut;
		var n1 = pivot - first_cut;
		while(n1 != 0) {
			var t = m % n1;
			m = n1;
			n1 = t;
		}
		n = m;
		while(n-- != 0) {
			var k = first_cut + n;
			var val = a[k];
			var shift = pivot - first_cut;
			var p1 = first_cut + n;
			var p2 = first_cut + n + shift;
			while(p2 != first_cut + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(second_cut - p2 > shift) {
					p2 += shift;
				} else {
					p2 = first_cut + (shift - (second_cut - p2));
				}
			}
			a[p1] = val;
		}
	}
	var new_mid = first_cut + len22;
	ceramic_SortVisualsByDepth.doMerge(a,from,first_cut,new_mid,len11,len22);
	ceramic_SortVisualsByDepth.doMerge(a,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
ceramic_SortVisualsByDepth.rotate = function(a,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var m = to - from;
	var n = mid - from;
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	var n = m;
	while(n-- != 0) {
		var k = from + n;
		var val = a[k];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
ceramic_SortVisualsByDepth.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
ceramic_SortVisualsByDepth.upper = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[val];
		var b = a[mid];
		var result = 0;
		if(a1.depth > b.depth) {
			result = 1;
		} else if(a1.depth < b.depth) {
			result = -1;
		}
		if(result < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
ceramic_SortVisualsByDepth.lower = function(a,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		var a1 = a[mid];
		var b = a[val];
		var result = 0;
		if(a1.depth > b.depth) {
			result = 1;
		} else if(a1.depth < b.depth) {
			result = -1;
		}
		if(result < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
ceramic_SortVisualsByDepth.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
ceramic_SortVisualsByDepth.compare = function(a,i,j) {
	var a1 = a[i];
	var b = a[j];
	var result = 0;
	if(a1.depth > b.depth) {
		result = 1;
	} else if(a1.depth < b.depth) {
		result = -1;
	}
	return result;
};
var ceramic_Sound = function(backendItem) {
	this.pitch = 1;
	this.pan = 0;
	this.volume = 0.5;
	this.group = 0;
	ceramic_Entity.call(this);
	this.backendItem = backendItem;
};
$hxClasses["ceramic.Sound"] = ceramic_Sound;
ceramic_Sound.__name__ = "ceramic.Sound";
ceramic_Sound.__super__ = ceramic_Entity;
ceramic_Sound.prototype = $extend(ceramic_Entity.prototype,{
	backendItem: null
	,asset: null
	,group: null
	,set_group: function(group) {
		if(this.group == group) {
			return group;
		}
		this.group = group;
		var _this = ceramic_App.app.audio;
		if(!_this.mixers.exists(group)) {
			_this.mixers.set(group,new ceramic_AudioMixer(group));
		}
		return group;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
		}
		var _this = ceramic_App.app.backend.audio;
		var audio = this.backendItem;
		var id = null;
		var h = _this.loadedAudioResources.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var val = _g_value;
			if(val == audio) {
				id = key1;
			}
		}
		if(id == null) {
			ceramic_App.app.logger.error("Failed to destroy audio resource: " + Std.string(audio) + " because id could not be resolved",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\clay\\runtime\\src\\backend\\Audio.hx", lineNumber : 175, className : "backend.Audio", methodName : "destroy"});
		} else if(_this.loadedAudioRetainCount.h[id] > 1) {
			_this.loadedAudioRetainCount.h[id] -= 1;
		} else {
			var _this1 = _this.loadedAudioResources;
			if(Object.prototype.hasOwnProperty.call(_this1.h,id)) {
				delete(_this1.h[id]);
			}
			var _this1 = _this.loadedAudioRetainCount;
			if(Object.prototype.hasOwnProperty.call(_this1.h,id)) {
				delete(_this1.h[id]);
			}
			audio.destroy();
		}
		this.backendItem = null;
	}
	,volume: null
	,pan: null
	,pitch: null
	,get_duration: function() {
		var _this = ceramic_App.app.backend.audio;
		return this.backendItem.getDuration();
	}
	,play: function(position,loop,volume,pan,pitch) {
		if(loop == null) {
			loop = false;
		}
		if(position == null) {
			position = 0;
		}
		var _this = ceramic_App.app.audio.mixers;
		var value = _this._keys.intMap.h[this.group | 0];
		var index = value != null ? value : 0;
		var mixer = index >= 2 ? _this.values[index - 2] : ceramic_IntMap.RET_NULL;
		if(mixer.mute) {
			return -1;
		}
		if(volume == null) {
			volume = this.volume;
		}
		if(pan == null) {
			pan = this.pan;
		}
		if(pitch == null) {
			pitch = this.pitch;
		}
		volume *= mixer.volume * 2;
		pan += mixer.pan;
		pitch += mixer.pitch - 1;
		return ceramic_App.app.backend.audio.play(this.backendItem,volume,pan,pitch,position,loop);
	}
	,__class__: ceramic_Sound
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_duration:"get_duration",set_group:"set_group"})
});
var ceramic_SoundAsset = function(name,options) {
	this.unobservedSound = null;
	this.soundAutoruns = null;
	this.stream = false;
	ceramic_Asset.call(this,"sound",name,options);
};
$hxClasses["ceramic.SoundAsset"] = ceramic_SoundAsset;
ceramic_SoundAsset.__name__ = "ceramic.SoundAsset";
ceramic_SoundAsset.__super__ = ceramic_Asset;
ceramic_SoundAsset.prototype = $extend(ceramic_Asset.prototype,{
	__cbOnReplaceSound: null
	,__cbOnceReplaceSound: null
	,__cbOnOwnerUnbindReplaceSound: null
	,__cbOnceOwnerUnbindReplaceSound: null
	,emitReplaceSound: function(newSound,prevSound) {
		var len = 0;
		if(this.__cbOnReplaceSound != null) {
			len += this.__cbOnReplaceSound.length;
		}
		if(this.__cbOnceReplaceSound != null) {
			len += this.__cbOnceReplaceSound.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnReplaceSound.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReplaceSound[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReplaceSound != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReplaceSound.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReplaceSound[ii];
						this.__cbOnceReplaceSound[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReplaceSound[ii];
						this.__cbOnceOwnerUnbindReplaceSound[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReplaceSound[ii]);
						newCbOnceArray.push(this.__cbOnceReplaceSound[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReplaceSound = newCbOnceOwnerUnbindArray;
				this.__cbOnceReplaceSound = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(newSound,prevSound);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReplaceSound: function(owner,handleNewSoundPrevSound) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceSound" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewSoundPrevSound != null) {
					_gthis.offReplaceSound(handleNewSoundPrevSound);
					handleNewSoundPrevSound = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReplaceSound == null) {
				this.__cbOnOwnerUnbindReplaceSound = [];
			}
			this.__cbOnOwnerUnbindReplaceSound.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewSoundPrevSound = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReplaceSound == null) {
				this.__cbOnOwnerUnbindReplaceSound = [];
			}
			this.__cbOnOwnerUnbindReplaceSound.push(null);
		}
		if(this.__cbOnReplaceSound == null) {
			this.__cbOnReplaceSound = [];
		}
		this.__cbOnReplaceSound.push(handleNewSoundPrevSound);
	}
	,onceReplaceSound: function(owner,handleNewSoundPrevSound) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "replaceSound" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleNewSoundPrevSound != null) {
					_gthis.offReplaceSound(handleNewSoundPrevSound);
					handleNewSoundPrevSound = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReplaceSound == null) {
				this.__cbOnceOwnerUnbindReplaceSound = [];
			}
			this.__cbOnceOwnerUnbindReplaceSound.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleNewSoundPrevSound = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReplaceSound == null) {
				this.__cbOnceOwnerUnbindReplaceSound = [];
			}
			this.__cbOnceOwnerUnbindReplaceSound.push(null);
		}
		if(this.__cbOnceReplaceSound == null) {
			this.__cbOnceReplaceSound = [];
		}
		this.__cbOnceReplaceSound.push(handleNewSoundPrevSound);
	}
	,offReplaceSound: function(handleNewSoundPrevSound) {
		if(handleNewSoundPrevSound != null) {
			var index;
			var unbind;
			if(this.__cbOnReplaceSound != null) {
				index = this.__cbOnReplaceSound.indexOf(handleNewSoundPrevSound);
				if(index != -1) {
					this.__cbOnReplaceSound.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReplaceSound[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReplaceSound.splice(index,1);
				}
			}
			if(this.__cbOnceReplaceSound != null) {
				index = this.__cbOnceReplaceSound.indexOf(handleNewSoundPrevSound);
				if(index != -1) {
					this.__cbOnceReplaceSound.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReplaceSound[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReplaceSound.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReplaceSound.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReplaceSound[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReplaceSound = null;
			}
			if(this.__cbOnceOwnerUnbindReplaceSound != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReplaceSound.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReplaceSound[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReplaceSound = null;
			}
			this.__cbOnReplaceSound = null;
			this.__cbOnceReplaceSound = null;
		}
	}
	,listensReplaceSound: function() {
		if(!(this.__cbOnReplaceSound != null && this.__cbOnReplaceSound.length > 0)) {
			if(this.__cbOnceReplaceSound != null) {
				return this.__cbOnceReplaceSound.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,stream: null
	,soundAutoruns: null
	,get_sound: function() {
		var value = this.unobservedSound;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.soundAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.soundAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_sound: function(sound) {
		var prevValue = this.unobservedSound;
		this.unobservedSound = sound;
		if(prevValue == sound) {
			return sound;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitSoundChange(sound,prevValue);
		var fieldAutoruns = this.soundAutoruns;
		if(fieldAutoruns != null) {
			this.soundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return sound;
	}
	,invalidateSound: function() {
		var value = this.unobservedSound;
		this.emitSoundChange(value,value);
		var fieldAutoruns = this.soundAutoruns;
		if(fieldAutoruns != null) {
			this.soundAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedSound: null
	,__cbOnSoundChange: null
	,__cbOnceSoundChange: null
	,__cbOnOwnerUnbindSoundChange: null
	,__cbOnceOwnerUnbindSoundChange: null
	,emitSoundChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnSoundChange != null) {
			len += this.__cbOnSoundChange.length;
		}
		if(this.__cbOnceSoundChange != null) {
			len += this.__cbOnceSoundChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnSoundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSoundChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSoundChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSoundChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSoundChange[ii];
						this.__cbOnceSoundChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSoundChange[ii];
						this.__cbOnceOwnerUnbindSoundChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSoundChange[ii]);
						newCbOnceArray.push(this.__cbOnceSoundChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSoundChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceSoundChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSoundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "soundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSoundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSoundChange == null) {
				this.__cbOnOwnerUnbindSoundChange = [];
			}
			this.__cbOnOwnerUnbindSoundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSoundChange == null) {
				this.__cbOnOwnerUnbindSoundChange = [];
			}
			this.__cbOnOwnerUnbindSoundChange.push(null);
		}
		if(this.__cbOnSoundChange == null) {
			this.__cbOnSoundChange = [];
		}
		this.__cbOnSoundChange.push(handleCurrentPrevious);
	}
	,onceSoundChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "soundChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSoundChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSoundChange == null) {
				this.__cbOnceOwnerUnbindSoundChange = [];
			}
			this.__cbOnceOwnerUnbindSoundChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSoundChange == null) {
				this.__cbOnceOwnerUnbindSoundChange = [];
			}
			this.__cbOnceOwnerUnbindSoundChange.push(null);
		}
		if(this.__cbOnceSoundChange == null) {
			this.__cbOnceSoundChange = [];
		}
		this.__cbOnceSoundChange.push(handleCurrentPrevious);
	}
	,offSoundChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnSoundChange != null) {
				index = this.__cbOnSoundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnSoundChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSoundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSoundChange.splice(index,1);
				}
			}
			if(this.__cbOnceSoundChange != null) {
				index = this.__cbOnceSoundChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceSoundChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSoundChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSoundChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSoundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSoundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSoundChange = null;
			}
			if(this.__cbOnceOwnerUnbindSoundChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSoundChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSoundChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSoundChange = null;
			}
			this.__cbOnSoundChange = null;
			this.__cbOnceSoundChange = null;
		}
	}
	,listensSoundChange: function() {
		if(!(this.__cbOnSoundChange != null && this.__cbOnSoundChange.length > 0)) {
			if(this.__cbOnceSoundChange != null) {
				return this.__cbOnceSoundChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load sound asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\SoundAsset.hx", lineNumber : 27, className : "ceramic.SoundAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		if(this.options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.options);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.options,key);
			}
		}
		var remainingPaths = [].concat(this.allPaths);
		var handleBackendResponse = function(audio) {
			if(audio != null) {
				var prevSound = _gthis.get_sound();
				var newSound = new ceramic_Sound(audio);
				newSound.asset = _gthis;
				_gthis.set_sound(newSound);
				if(prevSound != null) {
					_gthis.emitReplaceSound(_gthis.get_sound(),prevSound);
					prevSound.asset = null;
					prevSound.destroy();
				}
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load audio at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\SoundAsset.hx", lineNumber : 71, className : "ceramic.SoundAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		};
		var doLoad = null;
		doLoad = function(path) {
			var backendPath = path;
			var realPath = ceramic_Assets.realAssetPath(backendPath,_gthis.runtimeAssets);
			var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
			if(assetReloadedCount > 0) {
				realPath += "?hot=" + assetReloadedCount;
				backendPath += "?hot=" + assetReloadedCount;
			}
			ceramic_App.app.logger.info("Load sound " + backendPath,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\SoundAsset.hx", lineNumber : 87, className : "ceramic.SoundAsset", methodName : "load"});
			var ext = ceramic_Path.extension(realPath);
			if(ext != null) {
				ext = ext.toLowerCase();
			}
			ceramic_App.app.backend.audio.load(realPath,loadOptions,function(audio) {
				if(audio != null || remainingPaths.length == 0) {
					handleBackendResponse(audio);
				} else {
					var nextPath = remainingPaths.shift();
					ceramic_App.app.logger.warning("Failed to load " + path + ". Try " + nextPath + "...",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\SoundAsset.hx", lineNumber : 100, className : "ceramic.SoundAsset", methodName : "load"});
					doLoad(nextPath);
				}
			});
		};
		if(remainingPaths.length > 0) {
			doLoad(remainingPaths.shift());
		} else {
			this.set_status(ceramic_AssetStatus.BROKEN);
			ceramic_App.app.logger.error("Failed to load audio at path: " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\SoundAsset.hx", lineNumber : 112, className : "ceramic.SoundAsset", methodName : "load"});
			this.emitComplete(false);
		}
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload sound (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\SoundAsset.hx", lineNumber : 133, className : "ceramic.SoundAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_sound() != null) {
			this.get_sound().destroy();
			this.set_sound(null);
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offReplaceSound();
		this.offSoundChange();
	}
	,__class__: ceramic_SoundAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_sound:"set_sound",get_sound:"get_sound"})
});
var ceramic_SoundPlayer = {};
ceramic_SoundPlayer.__properties__ = {set_position:"set_position",get_position:"get_position",set_pitch:"set_pitch",get_pitch:"get_pitch",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume"};
ceramic_SoundPlayer.pause = function(this1) {
	ceramic_App.app.backend.audio.pause(this1);
};
ceramic_SoundPlayer.resume = function(this1) {
	ceramic_App.app.backend.audio.resume(this1);
};
ceramic_SoundPlayer.stop = function(this1) {
	ceramic_App.app.backend.audio.stop(this1);
};
ceramic_SoundPlayer.get_volume = function(this1) {
	return ceramic_App.app.backend.audio.getVolume(this1);
};
ceramic_SoundPlayer.set_volume = function(this1,volume) {
	ceramic_App.app.backend.audio.setVolume(this1,volume);
	return volume;
};
ceramic_SoundPlayer.get_pan = function(this1) {
	return ceramic_App.app.backend.audio.getPan(this1);
};
ceramic_SoundPlayer.set_pan = function(this1,pan) {
	ceramic_App.app.backend.audio.setPan(this1,pan);
	return pan;
};
ceramic_SoundPlayer.get_pitch = function(this1) {
	return ceramic_App.app.backend.audio.getPitch(this1);
};
ceramic_SoundPlayer.set_pitch = function(this1,pitch) {
	ceramic_App.app.backend.audio.setPitch(this1,pitch);
	return pitch;
};
ceramic_SoundPlayer.get_position = function(this1) {
	return ceramic_App.app.backend.audio.getPosition(this1);
};
ceramic_SoundPlayer.set_position = function(this1,position) {
	ceramic_App.app.backend.audio.setPosition(this1,position);
	return position;
};
ceramic_SoundPlayer.fadeOut = function(this1,duration) {
	if(ceramic_App.app.backend.audio.getVolume(this1) == 0) {
		ceramic_App.app.backend.audio.stop(this1);
		return;
	}
	var tween = ceramic_Tween.start(null,ceramic_Easing.LINEAR,duration,ceramic_App.app.backend.audio.getVolume(this1),0,function(value,time) {
		ceramic_App.app.backend.audio.setVolume(this1,value);
	});
	tween.onceComplete(null,function() {
		ceramic_App.app.backend.audio.stop(this1);
	});
};
var ceramic_Systems = function() {
	this._udpatingSystems = [];
	this.lateUpdateOrdered = [];
	this.earlyUpdateOrdered = [];
	this.lateUpdateOrderDirty = false;
	this.earlyUpdateOrderDirty = false;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.Systems"] = ceramic_Systems;
ceramic_Systems.__name__ = "ceramic.Systems";
ceramic_Systems.sortSystemsByEarlyUpdateOrder = function(a,b) {
	if(a.earlyUpdateOrder > b.earlyUpdateOrder) {
		return 1;
	} else if(a.earlyUpdateOrder < b.earlyUpdateOrder) {
		return -1;
	} else {
		return 0;
	}
};
ceramic_Systems.sortSystemsByLateUpdateOrder = function(a,b) {
	if(a.lateUpdateOrder > b.lateUpdateOrder) {
		return 1;
	} else if(a.lateUpdateOrder < b.lateUpdateOrder) {
		return -1;
	} else {
		return 0;
	}
};
ceramic_Systems.__super__ = ceramic_Entity;
ceramic_Systems.prototype = $extend(ceramic_Entity.prototype,{
	earlyUpdateOrderDirty: null
	,lateUpdateOrderDirty: null
	,earlyUpdateOrdered: null
	,lateUpdateOrdered: null
	,_udpatingSystems: null
	,addSystem: function(system) {
		this.earlyUpdateOrdered.push(system);
		this.earlyUpdateOrderDirty = true;
		this.lateUpdateOrdered.push(system);
		this.lateUpdateOrderDirty = true;
	}
	,removeSystem: function(system) {
		HxOverrides.remove(this.earlyUpdateOrdered,system);
		this.earlyUpdateOrderDirty = true;
		HxOverrides.remove(this.lateUpdateOrdered,system);
		this.lateUpdateOrderDirty = true;
	}
	,earlyUpdate: function(delta) {
		if(this.earlyUpdateOrderDirty) {
			haxe_ds_ArraySort.sort(this.earlyUpdateOrdered,ceramic_Systems.sortSystemsByEarlyUpdateOrder);
			this.earlyUpdateOrderDirty = false;
		}
		var len = this.earlyUpdateOrdered.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = this.earlyUpdateOrdered[i];
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var system = this._udpatingSystems[i];
			system.emitBeginEarlyUpdate(delta);
			system.earlyUpdate(delta);
			system.emitEndEarlyUpdate(delta);
			ceramic_App.app.flushImmediate();
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = null;
		}
	}
	,lateUpdate: function(delta) {
		if(this.lateUpdateOrderDirty) {
			haxe_ds_ArraySort.sort(this.lateUpdateOrdered,ceramic_Systems.sortSystemsByLateUpdateOrder);
			this.lateUpdateOrderDirty = false;
		}
		var len = this.lateUpdateOrdered.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = this.lateUpdateOrdered[i];
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var system = this._udpatingSystems[i];
			system.emitBeginLateUpdate(delta);
			system.lateUpdate(delta);
			system.emitEndLateUpdate(delta);
			ceramic_App.app.flushImmediate();
		}
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this._udpatingSystems[i] = null;
		}
	}
	,get: function(name) {
		var _g = 0;
		var _g1 = this.earlyUpdateOrdered.length;
		while(_g < _g1) {
			var i = _g++;
			var system = this.earlyUpdateOrdered[i];
			if(system.name == name) {
				return system;
			}
		}
		return null;
	}
	,__class__: ceramic_Systems
});
var ceramic_Text = function() {
	this.maxLineDiff = -1;
	this.fitWidth = -1;
	this.align = ceramic_TextAlign.LEFT;
	this.preRenderedSize = -1;
	this.clipTextHeight = -1;
	this.clipTextWidth = -1;
	this.clipTextY = -1;
	this.clipTextX = -1;
	this.letterSpacing = 0.0;
	this.lineHeight = 1.0;
	this.pointSize = 20;
	this.content = "";
	this.color = 16777215;
	this.numLines = 1;
	this.glyphQuads = [];
	ceramic_Visual.call(this);
	this.set_font(ceramic_App.app.defaultFont);
};
$hxClasses["ceramic.Text"] = ceramic_Text;
ceramic_Text.__name__ = "ceramic.Text";
ceramic_Text.__super__ = ceramic_Visual;
ceramic_Text.prototype = $extend(ceramic_Visual.prototype,{
	__cbOnGlyphQuadsChange: null
	,__cbOnceGlyphQuadsChange: null
	,__cbOnOwnerUnbindGlyphQuadsChange: null
	,__cbOnceOwnerUnbindGlyphQuadsChange: null
	,emitGlyphQuadsChange: function() {
		var len = 0;
		if(this.__cbOnGlyphQuadsChange != null) {
			len += this.__cbOnGlyphQuadsChange.length;
		}
		if(this.__cbOnceGlyphQuadsChange != null) {
			len += this.__cbOnceGlyphQuadsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnGlyphQuadsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGlyphQuadsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGlyphQuadsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGlyphQuadsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGlyphQuadsChange[ii];
						this.__cbOnceGlyphQuadsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGlyphQuadsChange[ii];
						this.__cbOnceOwnerUnbindGlyphQuadsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGlyphQuadsChange[ii]);
						newCbOnceArray.push(this.__cbOnceGlyphQuadsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGlyphQuadsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceGlyphQuadsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGlyphQuadsChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "glyphQuadsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offGlyphQuadsChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnOwnerUnbindGlyphQuadsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnOwnerUnbindGlyphQuadsChange.push(null);
		}
		if(this.__cbOnGlyphQuadsChange == null) {
			this.__cbOnGlyphQuadsChange = [];
		}
		this.__cbOnGlyphQuadsChange.push(handle);
	}
	,onceGlyphQuadsChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "glyphQuadsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offGlyphQuadsChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnceOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnceOwnerUnbindGlyphQuadsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGlyphQuadsChange == null) {
				this.__cbOnceOwnerUnbindGlyphQuadsChange = [];
			}
			this.__cbOnceOwnerUnbindGlyphQuadsChange.push(null);
		}
		if(this.__cbOnceGlyphQuadsChange == null) {
			this.__cbOnceGlyphQuadsChange = [];
		}
		this.__cbOnceGlyphQuadsChange.push(handle);
	}
	,offGlyphQuadsChange: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnGlyphQuadsChange != null) {
				index = this.__cbOnGlyphQuadsChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnGlyphQuadsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGlyphQuadsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGlyphQuadsChange.splice(index,1);
				}
			}
			if(this.__cbOnceGlyphQuadsChange != null) {
				index = this.__cbOnceGlyphQuadsChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnceGlyphQuadsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGlyphQuadsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGlyphQuadsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGlyphQuadsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGlyphQuadsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGlyphQuadsChange = null;
			}
			if(this.__cbOnceOwnerUnbindGlyphQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGlyphQuadsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGlyphQuadsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGlyphQuadsChange = null;
			}
			this.__cbOnGlyphQuadsChange = null;
			this.__cbOnceGlyphQuadsChange = null;
		}
	}
	,listensGlyphQuadsChange: function() {
		if(!(this.__cbOnGlyphQuadsChange != null && this.__cbOnGlyphQuadsChange.length > 0)) {
			if(this.__cbOnceGlyphQuadsChange != null) {
				return this.__cbOnceGlyphQuadsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,glyphQuads: null
	,numLines: null
	,get_numLines: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return this.numLines;
	}
	,color: null
	,set_color: function(color) {
		if(this.color == color) {
			return color;
		}
		this.color = color;
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var quad = this.glyphQuads[i];
				quad.color = color;
			}
		}
		return color;
	}
	,content: null
	,set_content: function(content) {
		if(content == null) {
			ceramic_App.app.logger.error("content != null" + (" (" + "Text.content should not be null" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Text.hx", lineNumber : 46, className : "ceramic.Text", methodName : "set_content"});
			throw haxe_Exception.thrown("content != null" + (" (" + "Text.content should not be null" + ")"));
		}
		if(this.content == content) {
			return content;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.content = content;
		return content;
	}
	,pointSize: null
	,set_pointSize: function(pointSize) {
		if(this.pointSize == pointSize) {
			return pointSize;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.pointSize = pointSize;
		return pointSize;
	}
	,lineHeight: null
	,set_lineHeight: function(lineHeight) {
		if(this.lineHeight == lineHeight) {
			return lineHeight;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.lineHeight = lineHeight;
		return lineHeight;
	}
	,letterSpacing: null
	,set_letterSpacing: function(letterSpacing) {
		if(this.letterSpacing == letterSpacing) {
			return letterSpacing;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.letterSpacing = letterSpacing;
		return letterSpacing;
	}
	,font: null
	,set_font: function(font) {
		if(font == null) {
			font = ceramic_App.app.defaultFont;
		}
		if(this.font == font) {
			return font;
		}
		if(this.font != null) {
			this.font.offDestroy($bind(this,this.fontDestroyed));
			if(this.font.asset != null) {
				this.font.asset.release();
			}
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.font = font;
		if(this.font != null) {
			this.font.onDestroy(this,$bind(this,this.fontDestroyed));
			if(this.font.asset != null) {
				this.font.asset.retain();
			}
		}
		return font;
	}
	,clipTextX: null
	,set_clipTextX: function(clipTextX) {
		if(this.clipTextX == clipTextX) {
			return clipTextX;
		}
		this.clipTextX = clipTextX;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextX;
	}
	,clipTextY: null
	,set_clipTextY: function(clipTextY) {
		if(this.clipTextY == clipTextY) {
			return clipTextY;
		}
		this.clipTextY = clipTextY;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextY;
	}
	,clipTextWidth: null
	,set_clipTextWidth: function(clipTextWidth) {
		if(this.clipTextWidth == clipTextWidth) {
			return clipTextWidth;
		}
		this.clipTextWidth = clipTextWidth;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextWidth;
	}
	,clipTextHeight: null
	,set_clipTextHeight: function(clipTextHeight) {
		if(this.clipTextHeight == clipTextHeight) {
			return clipTextHeight;
		}
		this.clipTextHeight = clipTextHeight;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return clipTextHeight;
	}
	,clipText: function(x,y,width,height) {
		this.set_clipTextX(x);
		this.set_clipTextY(y);
		this.set_clipTextWidth(width);
		this.set_clipTextHeight(height);
	}
	,preRenderedSize: null
	,set_preRenderedSize: function(preRenderedSize) {
		if(this.preRenderedSize == preRenderedSize) {
			return preRenderedSize;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		if(this.preRenderedSize <= 0 && preRenderedSize > 0) {
			ceramic_App.app.screen.onTexturesDensityChange(this,$bind(this,this.handleTexturesDensityChange));
		}
		if(this.preRenderedSize > 0 && preRenderedSize <= 0) {
			ceramic_App.app.screen.offTexturesDensityChange($bind(this,this.handleTexturesDensityChange));
		}
		this.preRenderedSize = preRenderedSize;
		return preRenderedSize;
	}
	,handleTexturesDensityChange: function(_,_1) {
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
	}
	,align: null
	,set_align: function(align) {
		if(this.align == align) {
			return align;
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		this.align = align;
		return align;
	}
	,fitWidth: null
	,set_fitWidth: function(fitWidth) {
		if(this.fitWidth == fitWidth) {
			return fitWidth;
		}
		this.fitWidth = fitWidth;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return fitWidth;
	}
	,maxLineDiff: null
	,set_maxLineDiff: function(maxLineDiff) {
		if(this.maxLineDiff == maxLineDiff) {
			return maxLineDiff;
		}
		this.maxLineDiff = maxLineDiff;
		if(this.fitWidth != -1) {
			this.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return maxLineDiff;
	}
	,set_depth: function(depth) {
		if(this.depth == depth) {
			return depth;
		}
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var quad = this.glyphQuads[i];
				quad.set_depth(depth);
			}
		}
		return ceramic_Visual.prototype.set_depth.call(this,depth);
	}
	,get_width: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Visual.prototype.get_width.call(this);
	}
	,scaleWidth: function(targetWidth) {
		if(this._width == targetWidth) {
			return;
		}
		this.set_scaleX(targetWidth / this._width);
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
	}
	,get_height: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Visual.prototype.get_height.call(this);
	}
	,scaleHeight: function(targetHeight) {
		if(this._height == targetHeight) {
			return;
		}
		this.set_scaleY(targetHeight / this._height);
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
	}
	,set_blending: function(blending) {
		if(this.blending == blending) {
			return blending;
		}
		this.blending = blending;
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var quad = this.glyphQuads[i];
				quad.set_blending(blending);
			}
		}
		return blending;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Visual.prototype.destroy.call(this);
		if(this.glyphQuads != null) {
			var _g = 0;
			var _g1 = this.glyphQuads.length;
			while(_g < _g1) {
				var i = _g++;
				this.glyphQuads[i].destroy();
			}
			this.glyphQuads = null;
		}
	}
	,computeContent: function() {
		var _gthis = this;
		if(this.font == null) {
			this.set_width(0);
			this.set_height(0);
			this.contentDirty = false;
			return;
		}
		this.numLines = this.computeGlyphQuads(this.fitWidth,this.maxLineDiff);
		this.contentDirty = false;
		this.matrixDirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var child = this.children[i];
				child.matrixDirty = true;
				if(child.children != null) {
					var _g2 = 0;
					var _g3 = child.children.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var child1 = child.children[i1];
						child1.set_matrixDirty(true);
					}
				}
			}
		}
		var scaledPreRenderedSize = this.preRenderedSize * ceramic_App.app.screen.get_texturesDensity() | 0;
		var tmp;
		if(scaledPreRenderedSize > 0) {
			var _this = this.font;
			tmp = _this.fontData.distanceField != null && _this.fontData.distanceField.fieldType == "msdf";
		} else {
			tmp = false;
		}
		if(tmp && this.font.needsToPreRenderAtSize(scaledPreRenderedSize)) {
			this.font.preRenderAtSize(scaledPreRenderedSize,function() {
				_gthis.contentDirty = true;
				ceramic_App.app.visualsContentDirty = true;
			});
		}
		this.emitGlyphQuadsChange();
	}
	,computeGlyphQuads: function(fitWidth,maxLineDiff,fixedNumLines) {
		if(fixedNumLines == null) {
			fixedNumLines = -1;
		}
		var x = 0.0;
		var y = 0.0;
		var xVisible = 0.0;
		var sizeFactor = this.pointSize / this.font.fontData.pointSize;
		var char = null;
		var code = -1;
		var prevChar = null;
		var prevCode = -1;
		var i = 0;
		var glyph = null;
		var lineWidths = [];
		var lineQuads = [[]];
		var usedQuads = 0;
		var isLineBreak = false;
		var isWhiteSpace = false;
		var justDidBreakToFit = false;
		var hasSpaceInLine = 0;
		var wasWhiteSpace = false;
		var numCharsBeforeLine = 0;
		var addTrailingSpace = false;
		var quadX = 0;
		var quadY = 0;
		var quadWidth = 0;
		var quadHeight = 0;
		var quadClip = 0;
		var hasClipping = false;
		if(this.clipTextX != -1 && this.clipTextY != -1 && this.clipTextWidth != -1 && this.clipTextHeight != -1) {
			hasClipping = true;
		}
		var scaledPreRenderedSize = this.preRenderedSize * ceramic_App.app.screen.get_texturesDensity() | 0;
		var usePrerenderedSize;
		if(scaledPreRenderedSize > 0) {
			var _this = this.font;
			usePrerenderedSize = _this.fontData.distanceField != null && _this.fontData.distanceField.fieldType == "msdf";
		} else {
			usePrerenderedSize = false;
		}
		var usePrerenderedSize1 = usePrerenderedSize && !this.font.needsToPreRenderAtSize(scaledPreRenderedSize);
		var content = this.content;
		if(content == "" || content.length > 0 && content.charAt(content.length - 1) == "\n") {
			addTrailingSpace = true;
			content += " ";
		}
		var len = content.length;
		while(i < len && usedQuads < len * 2) {
			prevChar = char;
			prevCode = code;
			char = content.charAt(i);
			code = HxOverrides.cca(char,0);
			isLineBreak = char == "\n";
			isWhiteSpace = char == " ";
			if(isWhiteSpace) {
				++hasSpaceInLine;
			}
			if(isLineBreak || isWhiteSpace || i == len - 1) {
				if(!justDidBreakToFit && fitWidth >= 0 && xVisible > 1 && xVisible > fitWidth - 1 && hasSpaceInLine > 0) {
					justDidBreakToFit = true;
					--hasSpaceInLine;
					while(i > 0) {
						--i;
						char = content.charAt(i);
						code = HxOverrides.cca(char,0);
						if(i > 0) {
							prevChar = content.charAt(i - 1);
							prevCode = HxOverrides.cca(prevChar,0);
						} else {
							prevChar = null;
							prevCode = -1;
						}
						glyph = this.font.fontData.chars.get(code);
						if(prevChar != null) {
							var map = this.font.fontData.kernings.get(prevCode);
							var x1;
							if(map != null && map.intMap.h.hasOwnProperty(code | 0)) {
								var value = map.intMap.h[code | 0];
								x1 = value != null ? value : 0;
							} else {
								x1 = 0;
							}
							x -= x1 * sizeFactor;
						}
						if(glyph != null) {
							x -= glyph.xAdvance * sizeFactor + this.letterSpacing;
						}
						if(lineQuads[lineQuads.length - 1].length > 0) {
							--usedQuads;
							lineQuads[lineQuads.length - 1].pop();
						} else {
							break;
						}
						if(char == " ") {
							char = "\n";
							glyph = this.font.fontData.chars.get(10);
							code = HxOverrides.cca(char,0);
							--hasSpaceInLine;
							isLineBreak = true;
							isWhiteSpace = false;
							break;
						}
					}
				} else {
					justDidBreakToFit = false;
				}
			}
			if(isLineBreak) {
				hasSpaceInLine = 0;
				prevChar = null;
				prevCode = -1;
				++i;
				numCharsBeforeLine = i;
				y += this.lineHeight * this.font.fontData.lineHeight * sizeFactor;
				lineWidths.push(x + (glyph != null ? (glyph.xOffset + glyph.width - glyph.xAdvance) * sizeFactor - this.letterSpacing : 0));
				lineQuads.push([]);
				x = 0;
				xVisible = 0;
				continue;
			}
			glyph = this.font.fontData.chars.get(code);
			if(glyph == null) {
				++i;
				continue;
			}
			if(prevChar != null) {
				var map1 = this.font.fontData.kernings.get(prevCode);
				var x2;
				if(map1 != null && map1.intMap.h.hasOwnProperty(code | 0)) {
					var value1 = map1.intMap.h[code | 0];
					x2 = value1 != null ? value1 : 0;
				} else {
					x2 = 0;
				}
				x += x2 * sizeFactor;
			}
			quadX = x + glyph.xOffset * sizeFactor;
			quadY = y + glyph.yOffset * sizeFactor;
			quadWidth = glyph.width * sizeFactor;
			quadHeight = glyph.height * sizeFactor;
			quadClip = 0;
			if(hasClipping) {
				if(quadX >= this.clipTextX + this.clipTextWidth) {
					quadClip = 2;
				} else if(quadX + quadWidth < this.clipTextX) {
					quadClip = 2;
				} else if(quadY >= this.clipTextY + this.clipTextHeight) {
					quadClip = 2;
				} else if(quadY + quadHeight < this.clipTextY) {
					quadClip = 2;
				} else if(this.clipTextX > quadX && this.clipTextX <= quadX + quadWidth) {
					quadClip = 1;
				} else if(this.clipTextY > quadY && this.clipTextY <= quadY + quadHeight) {
					quadClip = 1;
				} else if(this.clipTextX + this.clipTextWidth > quadX && this.clipTextX + this.clipTextWidth <= quadX + quadWidth) {
					quadClip = 1;
				} else if(this.clipTextY + this.clipTextHeight > quadY && this.clipTextY + this.clipTextHeight <= quadY + quadHeight) {
					quadClip = 1;
				}
			}
			var quad = usedQuads < this.glyphQuads.length ? this.glyphQuads[usedQuads] : null;
			if(quad == null) {
				quad = new ceramic_GlyphQuad();
				if(quad.inheritAlpha != true) {
					quad.inheritAlpha = true;
					quad.visibilityDirty = true;
					if(quad.children != null) {
						var _g = 0;
						var _g1 = quad.children.length;
						while(_g < _g1) {
							var i1 = _g++;
							var child = quad.children[i1];
							child.visibilityDirty = true;
							if(child.children != null) {
								var _g2 = 0;
								var _g3 = child.children.length;
								while(_g2 < _g3) {
									var i2 = _g2++;
									var child1 = child.children[i2];
									child1.set_visibilityDirty(true);
								}
							}
						}
					}
				}
				this.glyphQuads.push(quad);
				this.add(quad);
			}
			++usedQuads;
			quad.char = char;
			quad.code = code;
			quad.index = i;
			quad.set_visible(quadClip != 2);
			quad.flags &= -17;
			quad.posInLine = i - numCharsBeforeLine;
			quad.line = lineQuads.length - 1;
			var texture = usePrerenderedSize1 ? this.font.preRenderedPages.h[scaledPreRenderedSize].h[glyph.page] : this.font.pages.get(glyph.page);
			if(quad._texture != texture) {
				quad._set_texture(texture);
			}
			quad.set_shader(!usePrerenderedSize1 && this.font.pageShaders != null ? this.font.pageShaders.h[glyph.page] : null);
			quad.color = this.color;
			quad.set_depth(this.depth);
			quad.set_blending(this.blending);
			quad.glyphX = x;
			quad.glyphY = y;
			quad.glyphAdvance = glyph.xAdvance * sizeFactor + this.letterSpacing;
			quad.glyph = glyph;
			if(quadClip == 1) {
				var clippedQuadX = Math.max(this.clipTextX,quadX);
				var clippedQuadY = Math.max(this.clipTextY,quadY);
				var clippedQuadWidth = Math.min(this.clipTextX + this.clipTextWidth,quadX + quadWidth) - clippedQuadX;
				var clippedQuadHeight = Math.min(this.clipTextY + this.clipTextHeight,quadY + quadHeight) - clippedQuadY;
				var clippedFrameX;
				var clippedFrameY;
				var clippedFrameWidth;
				var clippedFrameHeight;
				if(usePrerenderedSize1) {
					var originalTexture = this.font.pages.get(glyph.page);
					clippedFrameX = glyph.x * quad._texture.width / originalTexture.width;
					clippedFrameY = glyph.y * quad._texture.height / originalTexture.height;
					clippedFrameWidth = glyph.width * quad._texture.width / originalTexture.width;
					clippedFrameHeight = glyph.height * quad._texture.height / originalTexture.height;
				} else {
					clippedFrameX = glyph.x / quad._texture.density;
					clippedFrameY = glyph.y / quad._texture.density;
					clippedFrameWidth = glyph.width / quad._texture.density;
					clippedFrameHeight = glyph.height / quad._texture.density;
				}
				var clippedFrameXOffset = (clippedQuadX - quadX) * clippedFrameWidth / quadWidth;
				clippedFrameX += clippedFrameXOffset;
				clippedFrameWidth -= clippedFrameXOffset + (quadX + quadWidth - clippedQuadX - clippedQuadWidth) * clippedFrameWidth / quadWidth;
				var clippedFrameYOffset = (clippedQuadY - quadY) * clippedFrameHeight / quadHeight;
				clippedFrameY += clippedFrameYOffset;
				clippedFrameHeight -= clippedFrameYOffset + (quadY + quadHeight - clippedQuadY - clippedQuadHeight) * clippedFrameHeight / quadHeight;
				quad.frameX = clippedFrameX;
				quad.frameY = clippedFrameY;
				if(quad.frameWidth != clippedFrameWidth) {
					quad.frameWidth = clippedFrameWidth;
					if(clippedFrameWidth != -1) {
						quad.set_width(clippedFrameWidth);
					}
				}
				if(quad.frameHeight != clippedFrameHeight) {
					quad.frameHeight = clippedFrameHeight;
					if(clippedFrameHeight != -1) {
						quad.set_height(clippedFrameHeight);
					}
				}
				quad.set_x(clippedQuadX);
				quad.set_y(clippedQuadY);
				quad.set_width(clippedQuadWidth);
				quad.set_height(clippedQuadHeight);
			} else {
				if(usePrerenderedSize1) {
					var originalTexture1 = this.font.pages.get(glyph.page);
					var frameWidth = glyph.width * quad._texture.width / originalTexture1.width;
					var frameHeight = glyph.height * quad._texture.height / originalTexture1.height;
					quad.frameX = glyph.x * quad._texture.width / originalTexture1.width;
					quad.frameY = glyph.y * quad._texture.height / originalTexture1.height;
					if(quad.frameWidth != frameWidth) {
						quad.frameWidth = frameWidth;
						if(frameWidth != -1) {
							quad.set_width(frameWidth);
						}
					}
					if(quad.frameHeight != frameHeight) {
						quad.frameHeight = frameHeight;
						if(frameHeight != -1) {
							quad.set_height(frameHeight);
						}
					}
				} else {
					var frameWidth1 = glyph.width / quad._texture.density;
					var frameHeight1 = glyph.height / quad._texture.density;
					quad.frameX = glyph.x / quad._texture.density;
					quad.frameY = glyph.y / quad._texture.density;
					if(quad.frameWidth != frameWidth1) {
						quad.frameWidth = frameWidth1;
						if(frameWidth1 != -1) {
							quad.set_width(frameWidth1);
						}
					}
					if(quad.frameHeight != frameHeight1) {
						quad.frameHeight = frameHeight1;
						if(frameHeight1 != -1) {
							quad.set_height(frameHeight1);
						}
					}
				}
				quad.set_x(quadX);
				quad.set_y(quadY);
				quad.set_width(quadWidth);
				quad.set_height(quadHeight);
			}
			quad.set_anchorX(0);
			quad.set_anchorY(0);
			lineQuads[lineQuads.length - 1].push(quad);
			xVisible = x + Math.max((glyph.xOffset + glyph.width) * sizeFactor,glyph.xAdvance * sizeFactor);
			x += glyph.xAdvance * sizeFactor + this.letterSpacing;
			++i;
		}
		if(x > 0) {
			lineWidths.push(x);
		}
		if(addTrailingSpace && usedQuads > 0) {
			var lastQuad = this.glyphQuads[usedQuads - 1];
			var lastLineWidth = lineWidths[lineWidths.length - 1];
			lastLineWidth -= lastQuad.glyphAdvance;
			lineWidths[lineWidths.length - 1] = lastLineWidth;
			lastQuad.glyphAdvance = 0;
			lastQuad.set_visible(false);
		}
		while(usedQuads < this.glyphQuads.length) {
			var quad = this.glyphQuads.pop();
			quad.destroy();
		}
		var maxLineWidth = 0.0;
		var _g = 0;
		var _g1 = lineWidths.length;
		while(_g < _g1) {
			var i = _g++;
			var lineWidth = lineWidths[i];
			maxLineWidth = Math.max(lineWidth,maxLineWidth);
		}
		this.set_width(Math.round(maxLineWidth * 1000) / 1000);
		this.set_height(Math.round(((lineWidths.length - 1) * this.lineHeight * this.font.fontData.lineHeight * sizeFactor + this.font.fontData.lineHeight * sizeFactor) * 1000) / 1000);
		switch(this.align._hx_index) {
		case 1:
			var _g = 0;
			var _g1 = lineWidths.length;
			while(_g < _g1) {
				var i = _g++;
				var diffX = maxLineWidth - lineWidths[i];
				var quads = lineQuads[i];
				var _g2 = 0;
				var _g3 = quads.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var quad = quads[j];
					quad.set_x(quad.x + diffX);
				}
			}
			break;
		case 2:
			var _g = 0;
			var _g1 = lineWidths.length;
			while(_g < _g1) {
				var i = _g++;
				var diffX = (maxLineWidth - lineWidths[i]) * 0.5;
				var quads = lineQuads[i];
				var _g2 = 0;
				var _g3 = quads.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var quad = quads[j];
					quad.set_x(quad.x + diffX);
				}
			}
			break;
		default:
		}
		if((fixedNumLines == -1 || fixedNumLines == lineWidths.length) && fitWidth > 0 && maxLineDiff != -1 && fitWidth > this.pointSize) {
			var lineDiff = 0.0;
			var maxLineDiffValue = this.fitWidth * maxLineDiff;
			var _g = 0;
			var _g1 = lineWidths.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = 0;
				var _g3 = lineWidths.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var newDiff = lineWidths[i] - lineWidths[j];
					if(newDiff < 0) {
						newDiff = -newDiff;
					}
					if(newDiff > lineDiff) {
						lineDiff = newDiff;
					}
					if(lineDiff > maxLineDiffValue) {
						break;
					}
				}
			}
			if(lineDiff > maxLineDiffValue) {
				var numLines = this.computeGlyphQuads(fitWidth - this.pointSize,maxLineDiff,lineWidths.length);
				if(numLines > lineWidths.length) {
					this.computeGlyphQuads(fitWidth,-1,lineWidths.length);
				}
			}
		}
		return lineWidths.length;
	}
	,lineForYPosition: function(y) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var computedLineHeight = this.lineHeight * this.font.fontData.lineHeight * this.pointSize / this.font.fontData.pointSize;
		var maxLine = 0;
		if(computedLineHeight <= 0) {
			return 0;
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length > 0) {
			maxLine = glyphQuads[glyphQuads.length - 1].line;
		}
		var line = Math.floor(y / computedLineHeight);
		if(line < 0) {
			line = 0;
		}
		if(line > maxLine) {
			line = maxLine;
		}
		return line;
	}
	,posInLineForX: function(line,x) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		var pos = 0;
		if(glyphQuads.length == 0 || x == 0) {
			return pos;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.line == line) {
				if(glyphQuad.glyphX >= x) {
					return pos;
				} else if(glyphQuad.glyphX + glyphQuad.glyphAdvance >= x) {
					var distanceAfter = glyphQuad.glyphX + glyphQuad.glyphAdvance - x;
					var distanceBefore = x - glyphQuad.glyphX;
					if(distanceBefore <= distanceAfter) {
						return pos;
					}
				}
				++pos;
			} else if(glyphQuad.line > line) {
				break;
			}
		}
		return pos;
	}
	,indexForPosInLine: function(line,posInLine) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.line == line && glyphQuad.posInLine >= posInLine) {
				return glyphQuad.index + posInLine - glyphQuad.posInLine;
			} else if(glyphQuad.line > line) {
				return glyphQuad.index - glyphQuad.posInLine - (glyphQuad.line - line);
			}
		}
		return this.content.length;
	}
	,xPositionAtIndex: function(index) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.index >= index) {
				if(glyphQuad.glyphX == 0 && glyphQuad.index > index) {
					if(i >= 1) {
						var glyphQuadBefore = glyphQuads[i - 1];
						return glyphQuadBefore.glyphX + glyphQuadBefore.glyphAdvance;
					} else {
						return 0;
					}
				} else {
					return glyphQuad.glyphX;
				}
			}
		}
		var lastGlyphQuad = glyphQuads[glyphQuads.length - 1];
		return lastGlyphQuad.glyphX + lastGlyphQuad.glyphAdvance;
	}
	,lineForIndex: function(index) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.index >= index) {
				if(glyphQuad.posInLine > index - glyphQuad.index) {
					var currentLineIndex = glyphQuad.index - glyphQuad.posInLine;
					var line = glyphQuad.line;
					while(currentLineIndex > index) {
						--currentLineIndex;
						--line;
					}
					return line;
				} else {
					return glyphQuad.line;
				}
			}
		}
		return glyphQuads[glyphQuads.length - 1].line;
	}
	,posInLineForIndex: function(index) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var glyphQuads = this.glyphQuads;
		if(glyphQuads.length == 0) {
			return 0;
		}
		var computedTargetLine = false;
		var targetLine = -1;
		var _g = 0;
		var _g1 = glyphQuads.length;
		while(_g < _g1) {
			var i = _g++;
			var glyphQuad = glyphQuads[i];
			if(glyphQuad.index >= index) {
				var pos = glyphQuad.posInLine + index - glyphQuad.index;
				if(pos < 0) {
					var j = i - 1;
					while(j >= 0) {
						var glyphQuadBefore = glyphQuads[j];
						if(!computedTargetLine) {
							computedTargetLine = true;
							targetLine = this.lineForIndex(index);
						}
						if(glyphQuadBefore.line == targetLine) {
							pos = glyphQuadBefore.posInLine + index - glyphQuadBefore.index;
							return pos;
						} else if(glyphQuadBefore.line < targetLine) {
							return 0;
						}
						--j;
					}
				}
				if(pos >= 0) {
					return pos;
				} else {
					return 0;
				}
			}
		}
		return 0;
	}
	,fontDestroyed: function(_) {
		this.set_font(ceramic_App.app.defaultFont);
	}
	,toString: function() {
		if(this.id != null) {
			return "Text(" + this.id + " " + this.content + ")";
		} else {
			return "Text(" + this.content + ")";
		}
	}
	,unbindEvents: function() {
		ceramic_Visual.prototype.unbindEvents.call(this);
		this.offGlyphQuadsChange();
	}
	,__class__: ceramic_Text
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_maxLineDiff:"set_maxLineDiff",set_fitWidth:"set_fitWidth",set_align:"set_align",set_preRenderedSize:"set_preRenderedSize",set_clipTextHeight:"set_clipTextHeight",set_clipTextWidth:"set_clipTextWidth",set_clipTextY:"set_clipTextY",set_clipTextX:"set_clipTextX",set_font:"set_font",set_letterSpacing:"set_letterSpacing",set_lineHeight:"set_lineHeight",set_pointSize:"set_pointSize",set_content:"set_content",set_color:"set_color",get_numLines:"get_numLines"})
});
var ceramic_TextAlign = $hxEnums["ceramic.TextAlign"] = { __ename__:"ceramic.TextAlign",__constructs__:null
	,LEFT: {_hx_name:"LEFT",_hx_index:0,__enum__:"ceramic.TextAlign",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:1,__enum__:"ceramic.TextAlign",toString:$estr}
	,CENTER: {_hx_name:"CENTER",_hx_index:2,__enum__:"ceramic.TextAlign",toString:$estr}
};
ceramic_TextAlign.__constructs__ = [ceramic_TextAlign.LEFT,ceramic_TextAlign.RIGHT,ceramic_TextAlign.CENTER];
var ceramic_TextAsset = function(name,options) {
	this.unobservedText = null;
	this.textAutoruns = null;
	ceramic_Asset.call(this,"text",name,options);
};
$hxClasses["ceramic.TextAsset"] = ceramic_TextAsset;
ceramic_TextAsset.__name__ = "ceramic.TextAsset";
ceramic_TextAsset.__super__ = ceramic_Asset;
ceramic_TextAsset.prototype = $extend(ceramic_Asset.prototype,{
	textAutoruns: null
	,get_text: function() {
		var value = this.unobservedText;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.textAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.textAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_text: function(text) {
		var prevValue = this.unobservedText;
		this.unobservedText = text;
		if(prevValue == text) {
			return text;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTextChange(text,prevValue);
		var fieldAutoruns = this.textAutoruns;
		if(fieldAutoruns != null) {
			this.textAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return text;
	}
	,invalidateText: function() {
		var value = this.unobservedText;
		this.emitTextChange(value,value);
		var fieldAutoruns = this.textAutoruns;
		if(fieldAutoruns != null) {
			this.textAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedText: null
	,__cbOnTextChange: null
	,__cbOnceTextChange: null
	,__cbOnOwnerUnbindTextChange: null
	,__cbOnceOwnerUnbindTextChange: null
	,emitTextChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTextChange != null) {
			len += this.__cbOnTextChange.length;
		}
		if(this.__cbOnceTextChange != null) {
			len += this.__cbOnceTextChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTextChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTextChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTextChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTextChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTextChange[ii];
						this.__cbOnceTextChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTextChange[ii];
						this.__cbOnceOwnerUnbindTextChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTextChange[ii]);
						newCbOnceArray.push(this.__cbOnceTextChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTextChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTextChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTextChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTextChange == null) {
				this.__cbOnOwnerUnbindTextChange = [];
			}
			this.__cbOnOwnerUnbindTextChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTextChange == null) {
				this.__cbOnOwnerUnbindTextChange = [];
			}
			this.__cbOnOwnerUnbindTextChange.push(null);
		}
		if(this.__cbOnTextChange == null) {
			this.__cbOnTextChange = [];
		}
		this.__cbOnTextChange.push(handleCurrentPrevious);
	}
	,onceTextChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTextChange == null) {
				this.__cbOnceOwnerUnbindTextChange = [];
			}
			this.__cbOnceOwnerUnbindTextChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTextChange == null) {
				this.__cbOnceOwnerUnbindTextChange = [];
			}
			this.__cbOnceOwnerUnbindTextChange.push(null);
		}
		if(this.__cbOnceTextChange == null) {
			this.__cbOnceTextChange = [];
		}
		this.__cbOnceTextChange.push(handleCurrentPrevious);
	}
	,offTextChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTextChange != null) {
				index = this.__cbOnTextChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTextChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTextChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTextChange.splice(index,1);
				}
			}
			if(this.__cbOnceTextChange != null) {
				index = this.__cbOnceTextChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTextChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTextChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTextChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTextChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTextChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTextChange = null;
			}
			if(this.__cbOnceOwnerUnbindTextChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTextChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTextChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTextChange = null;
			}
			this.__cbOnTextChange = null;
			this.__cbOnceTextChange = null;
		}
	}
	,listensTextChange: function() {
		if(!(this.__cbOnTextChange != null && this.__cbOnTextChange.length > 0)) {
			if(this.__cbOnceTextChange != null) {
				return this.__cbOnceTextChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		var _gthis = this;
		this.set_status(ceramic_AssetStatus.LOADING);
		if(this.path == null) {
			ceramic_App.app.logger.warning("Cannot load text asset if path is undefined.",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextAsset.hx", lineNumber : 20, className : "ceramic.TextAsset", methodName : "load"});
			this.set_status(ceramic_AssetStatus.BROKEN);
			this.emitComplete(false);
			return;
		}
		var loadOptions = { };
		if(this.owner != null) {
			loadOptions.immediate = this.owner.immediate;
			loadOptions.loadMethod = this.owner.loadMethod;
		}
		if(this.options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(this.options);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				loadOptions[key] = Reflect.field(this.options,key);
			}
		}
		var backendPath = this.path;
		var realPath = ceramic_Assets.realAssetPath(backendPath,this.runtimeAssets);
		var assetReloadedCount = ceramic_Assets.getReloadCount(realPath);
		if(assetReloadedCount > 0) {
			realPath += "?hot=" + assetReloadedCount;
			backendPath += "?hot=" + assetReloadedCount;
		}
		ceramic_App.app.logger.info("Load text " + backendPath,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextAsset.hx", lineNumber : 46, className : "ceramic.TextAsset", methodName : "load"});
		ceramic_App.app.backend.texts.load(realPath,loadOptions,function(text) {
			if(text != null) {
				_gthis.set_text(text);
				_gthis.set_status(ceramic_AssetStatus.READY);
				_gthis.emitComplete(true);
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load text at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextAsset.hx", lineNumber : 56, className : "ceramic.TextAsset", methodName : "load"});
				_gthis.emitComplete(false);
			}
		});
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload text (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextAsset.hx", lineNumber : 79, className : "ceramic.TextAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		this.set_text(null);
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offTextChange();
	}
	,__class__: ceramic_TextAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var ceramic_TextInput = function() {
	this.delegate = null;
	this.selectionEnd = -1;
	this.selectionStart = -1;
	this.text = "";
	this.multiline = false;
	this.allowMovingCursor = false;
	this.invertedSelection = false;
	this.rmetaPressed = false;
	this.lmetaPressed = false;
	this.rctrlPressed = false;
	this.lctrlPressed = false;
	this.rshiftPressed = false;
	this.lshiftPressed = false;
	this.explicitPosLine = 0;
	this.explicitPosInLine = 0;
	this.inputActive = false;
};
$hxClasses["ceramic.TextInput"] = ceramic_TextInput;
ceramic_TextInput.__name__ = "ceramic.TextInput";
ceramic_TextInput.__interfaces__ = [tracker_Events];
ceramic_TextInput.prototype = {
	__cbOnUpdate: null
	,__cbOnceUpdate: null
	,__cbOnOwnerUnbindUpdate: null
	,__cbOnceOwnerUnbindUpdate: null
	,emitUpdate: function(text) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceUpdate[ii];
						this.__cbOnceUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
						this.__cbOnceOwnerUnbindUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(text);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleText) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleText != null) {
					_gthis.offUpdate(handleText);
					handleText = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleText = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleText);
	}
	,onceUpdate: function(owner,handleText) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleText != null) {
					_gthis.offUpdate(handleText);
					handleText = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleText = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleText);
	}
	,offUpdate: function(handleText) {
		if(handleText != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleText);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleText);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnEnter: null
	,__cbOnceEnter: null
	,__cbOnOwnerUnbindEnter: null
	,__cbOnceOwnerUnbindEnter: null
	,emitEnter: function() {
		var len = 0;
		if(this.__cbOnEnter != null) {
			len += this.__cbOnEnter.length;
		}
		if(this.__cbOnceEnter != null) {
			len += this.__cbOnceEnter.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnEnter.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnEnter[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceEnter != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceEnter.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceEnter[ii];
						this.__cbOnceEnter[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindEnter[ii];
						this.__cbOnceOwnerUnbindEnter[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindEnter[ii]);
						newCbOnceArray.push(this.__cbOnceEnter[ii]);
					}
				}
				this.__cbOnceOwnerUnbindEnter = newCbOnceOwnerUnbindArray;
				this.__cbOnceEnter = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEnter: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "enter" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEnter(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEnter == null) {
				this.__cbOnOwnerUnbindEnter = [];
			}
			this.__cbOnOwnerUnbindEnter.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEnter == null) {
				this.__cbOnOwnerUnbindEnter = [];
			}
			this.__cbOnOwnerUnbindEnter.push(null);
		}
		if(this.__cbOnEnter == null) {
			this.__cbOnEnter = [];
		}
		this.__cbOnEnter.push(handle);
	}
	,onceEnter: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "enter" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEnter(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEnter == null) {
				this.__cbOnceOwnerUnbindEnter = [];
			}
			this.__cbOnceOwnerUnbindEnter.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEnter == null) {
				this.__cbOnceOwnerUnbindEnter = [];
			}
			this.__cbOnceOwnerUnbindEnter.push(null);
		}
		if(this.__cbOnceEnter == null) {
			this.__cbOnceEnter = [];
		}
		this.__cbOnceEnter.push(handle);
	}
	,offEnter: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnEnter != null) {
				index = this.__cbOnEnter.indexOf(handle);
				if(index != -1) {
					this.__cbOnEnter.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEnter[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEnter.splice(index,1);
				}
			}
			if(this.__cbOnceEnter != null) {
				index = this.__cbOnceEnter.indexOf(handle);
				if(index != -1) {
					this.__cbOnceEnter.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEnter[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEnter.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEnter.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEnter[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEnter = null;
			}
			if(this.__cbOnceOwnerUnbindEnter != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEnter.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEnter[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEnter = null;
			}
			this.__cbOnEnter = null;
			this.__cbOnceEnter = null;
		}
	}
	,listensEnter: function() {
		if(!(this.__cbOnEnter != null && this.__cbOnEnter.length > 0)) {
			if(this.__cbOnceEnter != null) {
				return this.__cbOnceEnter.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnEscape: null
	,__cbOnceEscape: null
	,__cbOnOwnerUnbindEscape: null
	,__cbOnceOwnerUnbindEscape: null
	,emitEscape: function() {
		var len = 0;
		if(this.__cbOnEscape != null) {
			len += this.__cbOnEscape.length;
		}
		if(this.__cbOnceEscape != null) {
			len += this.__cbOnceEscape.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnEscape.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnEscape[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceEscape != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceEscape.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceEscape[ii];
						this.__cbOnceEscape[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindEscape[ii];
						this.__cbOnceOwnerUnbindEscape[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindEscape[ii]);
						newCbOnceArray.push(this.__cbOnceEscape[ii]);
					}
				}
				this.__cbOnceOwnerUnbindEscape = newCbOnceOwnerUnbindArray;
				this.__cbOnceEscape = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onEscape: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "escape" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEscape(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEscape == null) {
				this.__cbOnOwnerUnbindEscape = [];
			}
			this.__cbOnOwnerUnbindEscape.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEscape == null) {
				this.__cbOnOwnerUnbindEscape = [];
			}
			this.__cbOnOwnerUnbindEscape.push(null);
		}
		if(this.__cbOnEscape == null) {
			this.__cbOnEscape = [];
		}
		this.__cbOnEscape.push(handle);
	}
	,onceEscape: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "escape" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offEscape(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEscape == null) {
				this.__cbOnceOwnerUnbindEscape = [];
			}
			this.__cbOnceOwnerUnbindEscape.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEscape == null) {
				this.__cbOnceOwnerUnbindEscape = [];
			}
			this.__cbOnceOwnerUnbindEscape.push(null);
		}
		if(this.__cbOnceEscape == null) {
			this.__cbOnceEscape = [];
		}
		this.__cbOnceEscape.push(handle);
	}
	,offEscape: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnEscape != null) {
				index = this.__cbOnEscape.indexOf(handle);
				if(index != -1) {
					this.__cbOnEscape.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEscape[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEscape.splice(index,1);
				}
			}
			if(this.__cbOnceEscape != null) {
				index = this.__cbOnceEscape.indexOf(handle);
				if(index != -1) {
					this.__cbOnceEscape.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEscape[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEscape.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEscape.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEscape[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEscape = null;
			}
			if(this.__cbOnceOwnerUnbindEscape != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEscape.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEscape[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEscape = null;
			}
			this.__cbOnEscape = null;
			this.__cbOnceEscape = null;
		}
	}
	,listensEscape: function() {
		if(!(this.__cbOnEscape != null && this.__cbOnEscape.length > 0)) {
			if(this.__cbOnceEscape != null) {
				return this.__cbOnceEscape.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnSelection: null
	,__cbOnceSelection: null
	,__cbOnOwnerUnbindSelection: null
	,__cbOnceOwnerUnbindSelection: null
	,emitSelection: function(selectionStart,selectionEnd) {
		var len = 0;
		if(this.__cbOnSelection != null) {
			len += this.__cbOnSelection.length;
		}
		if(this.__cbOnceSelection != null) {
			len += this.__cbOnceSelection.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnSelection.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSelection[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSelection != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSelection.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSelection[ii];
						this.__cbOnceSelection[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSelection[ii];
						this.__cbOnceOwnerUnbindSelection[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSelection[ii]);
						newCbOnceArray.push(this.__cbOnceSelection[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSelection = newCbOnceOwnerUnbindArray;
				this.__cbOnceSelection = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(selectionStart,selectionEnd);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSelection: function(owner,handleSelectionStartSelectionEnd) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "selection" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSelectionStartSelectionEnd != null) {
					_gthis.offSelection(handleSelectionStartSelectionEnd);
					handleSelectionStartSelectionEnd = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSelection == null) {
				this.__cbOnOwnerUnbindSelection = [];
			}
			this.__cbOnOwnerUnbindSelection.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSelectionStartSelectionEnd = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSelection == null) {
				this.__cbOnOwnerUnbindSelection = [];
			}
			this.__cbOnOwnerUnbindSelection.push(null);
		}
		if(this.__cbOnSelection == null) {
			this.__cbOnSelection = [];
		}
		this.__cbOnSelection.push(handleSelectionStartSelectionEnd);
	}
	,onceSelection: function(owner,handleSelectionStartSelectionEnd) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "selection" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleSelectionStartSelectionEnd != null) {
					_gthis.offSelection(handleSelectionStartSelectionEnd);
					handleSelectionStartSelectionEnd = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSelection == null) {
				this.__cbOnceOwnerUnbindSelection = [];
			}
			this.__cbOnceOwnerUnbindSelection.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleSelectionStartSelectionEnd = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSelection == null) {
				this.__cbOnceOwnerUnbindSelection = [];
			}
			this.__cbOnceOwnerUnbindSelection.push(null);
		}
		if(this.__cbOnceSelection == null) {
			this.__cbOnceSelection = [];
		}
		this.__cbOnceSelection.push(handleSelectionStartSelectionEnd);
	}
	,offSelection: function(handleSelectionStartSelectionEnd) {
		if(handleSelectionStartSelectionEnd != null) {
			var index;
			var unbind;
			if(this.__cbOnSelection != null) {
				index = this.__cbOnSelection.indexOf(handleSelectionStartSelectionEnd);
				if(index != -1) {
					this.__cbOnSelection.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSelection[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSelection.splice(index,1);
				}
			}
			if(this.__cbOnceSelection != null) {
				index = this.__cbOnceSelection.indexOf(handleSelectionStartSelectionEnd);
				if(index != -1) {
					this.__cbOnceSelection.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSelection[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSelection.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSelection.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSelection[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSelection = null;
			}
			if(this.__cbOnceOwnerUnbindSelection != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSelection.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSelection[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSelection = null;
			}
			this.__cbOnSelection = null;
			this.__cbOnceSelection = null;
		}
	}
	,listensSelection: function() {
		if(!(this.__cbOnSelection != null && this.__cbOnSelection.length > 0)) {
			if(this.__cbOnceSelection != null) {
				return this.__cbOnceSelection.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnStop: null
	,__cbOnceStop: null
	,__cbOnOwnerUnbindStop: null
	,__cbOnceOwnerUnbindStop: null
	,emitStop: function() {
		var len = 0;
		if(this.__cbOnStop != null) {
			len += this.__cbOnStop.length;
		}
		if(this.__cbOnceStop != null) {
			len += this.__cbOnceStop.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnStop.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnStop[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceStop != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceStop.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceStop[ii];
						this.__cbOnceStop[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindStop[ii];
						this.__cbOnceOwnerUnbindStop[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindStop[ii]);
						newCbOnceArray.push(this.__cbOnceStop[ii]);
					}
				}
				this.__cbOnceOwnerUnbindStop = newCbOnceOwnerUnbindArray;
				this.__cbOnceStop = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStop: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "stop" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offStop(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStop == null) {
				this.__cbOnOwnerUnbindStop = [];
			}
			this.__cbOnOwnerUnbindStop.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStop == null) {
				this.__cbOnOwnerUnbindStop = [];
			}
			this.__cbOnOwnerUnbindStop.push(null);
		}
		if(this.__cbOnStop == null) {
			this.__cbOnStop = [];
		}
		this.__cbOnStop.push(handle);
	}
	,onceStop: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "stop" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offStop(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStop == null) {
				this.__cbOnceOwnerUnbindStop = [];
			}
			this.__cbOnceOwnerUnbindStop.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStop == null) {
				this.__cbOnceOwnerUnbindStop = [];
			}
			this.__cbOnceOwnerUnbindStop.push(null);
		}
		if(this.__cbOnceStop == null) {
			this.__cbOnceStop = [];
		}
		this.__cbOnceStop.push(handle);
	}
	,offStop: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnStop != null) {
				index = this.__cbOnStop.indexOf(handle);
				if(index != -1) {
					this.__cbOnStop.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStop[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStop.splice(index,1);
				}
			}
			if(this.__cbOnceStop != null) {
				index = this.__cbOnceStop.indexOf(handle);
				if(index != -1) {
					this.__cbOnceStop.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStop[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStop.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStop.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStop[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStop = null;
			}
			if(this.__cbOnceOwnerUnbindStop != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStop.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStop[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStop = null;
			}
			this.__cbOnStop = null;
			this.__cbOnceStop = null;
		}
	}
	,listensStop: function() {
		if(!(this.__cbOnStop != null && this.__cbOnStop.length > 0)) {
			if(this.__cbOnceStop != null) {
				return this.__cbOnceStop.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,inputActive: null
	,explicitPosInLine: null
	,explicitPosLine: null
	,lshiftPressed: null
	,rshiftPressed: null
	,lctrlPressed: null
	,rctrlPressed: null
	,lmetaPressed: null
	,rmetaPressed: null
	,invertedSelection: null
	,allowMovingCursor: null
	,multiline: null
	,text: null
	,selectionStart: null
	,selectionEnd: null
	,delegate: null
	,start: function(text,x,y,w,h,multiline,selectionStart,selectionEnd,allowMovingCursor,delegate) {
		if(allowMovingCursor == null) {
			allowMovingCursor = false;
		}
		if(selectionEnd == null) {
			selectionEnd = -1;
		}
		if(selectionStart == null) {
			selectionStart = -1;
		}
		if(multiline == null) {
			multiline = false;
		}
		if(this.inputActive) {
			this.stop();
		}
		this.inputActive = true;
		this.set_text(text);
		this.multiline = multiline;
		this.allowMovingCursor = allowMovingCursor;
		this.delegate = delegate;
		this.explicitPosInLine = 0;
		this.explicitPosLine = 0;
		this.invertedSelection = false;
		if(selectionStart < 0) {
			selectionStart = text.length;
		}
		if(selectionEnd < selectionStart) {
			selectionEnd = selectionStart;
		}
		this.selectionStart = selectionStart;
		this.selectionEnd = selectionEnd;
		ceramic_App.app.backend.textInput.start(text,x,y,w,h);
		this.emitUpdate(text);
		this.emitSelection(selectionStart,selectionEnd);
	}
	,stop: function() {
		if(!this.inputActive) {
			return;
		}
		this.inputActive = false;
		this.selectionStart = -1;
		this.selectionEnd = -1;
		this.invertedSelection = false;
		this.delegate = null;
		ceramic_App.app.backend.textInput.stop();
		this.emitStop();
	}
	,updateSelection: function(selectionStart,selectionEnd,inverted) {
		if(this.selectionStart != selectionStart || this.selectionEnd != selectionEnd) {
			this.selectionStart = selectionStart;
			this.selectionEnd = selectionEnd;
			if(inverted != null) {
				this.invertedSelection = inverted;
			}
			this.emitSelection(selectionStart,selectionEnd);
		}
	}
	,appendText: function(text) {
		if(this.lctrlPressed || this.rctrlPressed) {
			return;
		}
		var newText = "";
		if(this.selectionStart > 0) {
			newText += this.text.substring(0,this.selectionStart);
		}
		newText += text;
		newText += this.text.substring(this.selectionEnd);
		this.selectionStart += text.length;
		this.selectionEnd = this.selectionStart;
		this.invertedSelection = false;
		this.set_text(newText);
		this.emitUpdate(this.text);
		this.emitSelection(this.selectionStart,this.selectionEnd);
		this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
		this.explicitPosLine = this.lineForPos(this.selectionStart);
	}
	,space: function() {
		this.appendText(" ");
	}
	,backspace: function() {
		var eraseSelection = this.selectionEnd > this.selectionStart;
		var newText = "";
		if(this.selectionStart > 1) {
			newText += this.text.substring(0,eraseSelection ? this.selectionStart : this.selectionStart - 1);
		}
		newText += this.text.substring(this.selectionEnd);
		if(this.selectionStart > 0 && !eraseSelection) {
			this.selectionStart--;
		}
		this.selectionEnd = this.selectionStart;
		this.set_text(newText);
		this.emitUpdate(this.text);
		this.emitSelection(this.selectionStart,this.selectionEnd);
		this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
		this.explicitPosLine = this.lineForPos(this.selectionStart);
	}
	,moveLeft: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		if(this.lshiftPressed || this.rshiftPressed) {
			if(this.invertedSelection) {
				if(this.selectionStart > 0) {
					this.selectionStart--;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
				this.explicitPosLine = this.lineForPos(this.selectionStart);
			} else if(this.selectionEnd > this.selectionStart) {
				this.selectionEnd--;
				this.emitSelection(this.selectionStart,this.selectionEnd);
				this.explicitPosInLine = this.posInCurrentLine(this.selectionEnd);
				this.explicitPosLine = this.lineForPos(this.selectionEnd);
			} else {
				if(this.selectionStart > 0) {
					this.invertedSelection = true;
					this.selectionStart--;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
				this.explicitPosLine = this.lineForPos(this.selectionStart);
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionEnd > this.selectionStart) {
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			} else if(this.selectionStart > 0) {
				this.selectionStart--;
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
			this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
			this.explicitPosLine = this.lineForPos(this.selectionStart);
		}
	}
	,moveRight: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		if(this.lshiftPressed || this.rshiftPressed) {
			var textLength = this.text.length;
			if(this.selectionStart == this.selectionEnd) {
				this.invertedSelection = false;
				if(this.selectionEnd < textLength) {
					this.selectionEnd++;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionEnd);
				this.explicitPosLine = this.lineForPos(this.selectionEnd);
			} else if(this.invertedSelection) {
				this.selectionStart++;
				this.emitSelection(this.selectionStart,this.selectionEnd);
				this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
				this.explicitPosLine = this.lineForPos(this.selectionStart);
			} else {
				if(this.selectionEnd < textLength) {
					this.selectionEnd++;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
				this.explicitPosInLine = this.posInCurrentLine(this.selectionEnd);
				this.explicitPosLine = this.lineForPos(this.selectionEnd);
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionEnd > this.selectionStart) {
				this.selectionStart = this.selectionEnd;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			} else if(this.selectionStart < this.text.length) {
				this.selectionStart++;
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
			this.explicitPosInLine = this.posInCurrentLine(this.selectionStart);
			this.explicitPosLine = this.lineForPos(this.selectionStart);
		}
	}
	,moveUp: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		if(this.lshiftPressed || this.rshiftPressed) {
			var startLine = this.lineForPos(this.selectionStart);
			var endLine = this.lineForPos(this.selectionEnd);
			if(!this.invertedSelection && endLine > startLine) {
				var offset = this.explicitPosInLine;
				var currentLine = endLine;
				if(this.delegate != null) {
					offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine - 1);
				}
				var newPos = this.globalPosForLine(currentLine - 1,offset);
				this.selectionEnd = Math.max(this.selectionStart,newPos) | 0;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			} else if(this.selectionStart > 0) {
				this.invertedSelection = true;
				if(startLine > 0) {
					var offset = this.explicitPosInLine;
					var currentLine = startLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine - 1);
					}
					this.selectionStart = this.globalPosForLine(currentLine - 1,offset);
				} else {
					this.selectionStart = 0;
				}
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionStart > 0) {
				var currentLine = this.lineForPos(this.selectionStart);
				if(currentLine > 0) {
					var offset = this.explicitPosInLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine - 1);
					}
					this.selectionStart = this.globalPosForLine(currentLine - 1,offset);
					this.selectionEnd = this.selectionStart;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else {
					this.selectionStart = 0;
					this.selectionEnd = 0;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			} else {
				this.selectionStart = 0;
				this.selectionEnd = 0;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
		}
	}
	,moveDown: function() {
		if(!this.allowMovingCursor) {
			return;
		}
		var textLength = this.text.length;
		if(this.lshiftPressed || this.rshiftPressed) {
			var startLine = this.lineForPos(this.selectionStart);
			var endLine = this.lineForPos(this.selectionEnd);
			if(!this.invertedSelection) {
				if(this.selectionEnd < textLength - 1) {
					var offset = this.explicitPosInLine;
					var currentLine = endLine;
					var numLines = this.numLines();
					if(currentLine < numLines - 1) {
						if(this.delegate != null) {
							offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
						}
						this.selectionEnd = this.globalPosForLine(currentLine + 1,offset);
					} else {
						this.selectionEnd = textLength;
					}
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else if(this.selectionEnd < textLength) {
					this.selectionEnd = textLength;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			} else if(this.invertedSelection) {
				if(endLine > startLine) {
					var offset = this.explicitPosInLine;
					var currentLine = startLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
					}
					var newPos = this.globalPosForLine(currentLine + 1,offset);
					this.selectionStart = Math.min(this.selectionEnd,newPos) | 0;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else if(this.selectionEnd < textLength - 1) {
					this.invertedSelection = false;
					var currentLine = startLine;
					var numLines = this.numLines();
					var offset = this.explicitPosInLine;
					if(currentLine < numLines - 1) {
						if(this.delegate != null) {
							offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
						}
						this.selectionEnd = this.globalPosForLine(currentLine + 1,offset);
					} else {
						this.selectionEnd = textLength;
					}
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else if(this.selectionEnd < textLength) {
					this.invertedSelection = false;
					this.selectionEnd = textLength;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			}
		} else {
			this.invertedSelection = false;
			if(this.selectionEnd < textLength - 1) {
				var currentLine = this.lineForPos(this.selectionEnd);
				var numLines = this.numLines();
				if(currentLine < numLines - 1) {
					var offset = this.explicitPosInLine;
					if(this.delegate != null) {
						offset = this.delegate.textInputClosestPositionInLine(this.explicitPosInLine,this.explicitPosLine,currentLine + 1);
					}
					this.selectionStart = this.globalPosForLine(currentLine + 1,offset);
					this.selectionEnd = this.selectionStart;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				} else {
					this.selectionStart = textLength;
					this.selectionEnd = this.selectionStart;
					this.emitSelection(this.selectionStart,this.selectionEnd);
				}
			} else {
				this.selectionStart = textLength;
				this.selectionEnd = this.selectionStart;
				this.emitSelection(this.selectionStart,this.selectionEnd);
			}
		}
	}
	,enter: function() {
		this.emitEnter();
		if(!this.inputActive) {
			return;
		}
		if(this.multiline) {
			this.appendText("\n");
		}
	}
	,escape: function() {
		this.emitEscape();
		this.stop();
	}
	,lshiftDown: function() {
		this.lshiftPressed = true;
	}
	,lshiftUp: function() {
		this.lshiftPressed = false;
	}
	,rshiftDown: function() {
		this.rshiftPressed = true;
	}
	,rshiftUp: function() {
		this.rshiftPressed = false;
	}
	,lctrlDown: function() {
		this.lctrlPressed = true;
	}
	,lctrlUp: function() {
		this.lctrlPressed = false;
	}
	,rctrlDown: function() {
		this.rctrlPressed = true;
	}
	,rctrlUp: function() {
		this.rctrlPressed = false;
	}
	,lmetaDown: function() {
		this.lmetaPressed = true;
	}
	,lmetaUp: function() {
		this.lmetaPressed = false;
	}
	,rmetaDown: function() {
		this.rmetaPressed = true;
	}
	,rmetaUp: function() {
		this.rmetaPressed = false;
	}
	,posInCurrentLine: function(globalPos) {
		if(this.delegate != null) {
			return this.delegate.textInputPosInLineForIndex(globalPos);
		}
		var text = this.text;
		var posInLine = 0;
		while(globalPos > 0) {
			var char = text.charAt(globalPos);
			if(char == "\n" && posInLine > 0) {
				--posInLine;
				break;
			}
			--globalPos;
			++posInLine;
		}
		return posInLine;
	}
	,lineForPos: function(globalPos) {
		if(this.delegate != null) {
			return this.delegate.textInputLineForIndex(globalPos);
		}
		var text = this.text;
		var lineNumber = 0;
		var i = 0;
		while(i < globalPos) {
			var char = text.charAt(i);
			if(char == "\n") {
				++lineNumber;
			}
			++i;
		}
		return lineNumber;
	}
	,numLines: function() {
		if(this.delegate != null) {
			return this.delegate.textInputNumberOfLines();
		}
		return this.text.split("\n").length;
	}
	,globalPosForLine: function(lineNumber,lineOffset) {
		if(this.delegate != null) {
			return this.delegate.textInputIndexForPosInLine(lineNumber,lineOffset);
		}
		var text = this.text;
		var i = 0;
		var numChars = text.length;
		var currentLine = 0;
		while(i < numChars) {
			var c = text.charAt(i);
			if(currentLine == lineNumber) {
				if(lineOffset > 0) {
					if(c == "\n") {
						break;
					}
					--lineOffset;
				} else {
					break;
				}
			} else if(c == "\n") {
				++currentLine;
			}
			++i;
		}
		return i;
	}
	,set_text: function(text) {
		if(this.text == text) {
			return text;
		}
		this.text = text;
		var len = text.length;
		var selectionStart = this.selectionStart;
		var selectionEnd = this.selectionEnd;
		if(selectionEnd > len) {
			selectionEnd = len;
		}
		if(selectionStart > selectionEnd) {
			selectionStart = selectionEnd;
		}
		this.updateSelection(selectionStart,selectionEnd);
		return text;
	}
	,unbindEvents: function() {
		this.offUpdate();
		this.offEnter();
		this.offEscape();
		this.offSelection();
		this.offStop();
	}
	,__class__: ceramic_TextInput
	,__properties__: {set_text:"set_text"}
};
var ceramic_TextInputDelegate = function() { };
$hxClasses["ceramic.TextInputDelegate"] = ceramic_TextInputDelegate;
ceramic_TextInputDelegate.__name__ = "ceramic.TextInputDelegate";
ceramic_TextInputDelegate.__isInterface__ = true;
ceramic_TextInputDelegate.prototype = {
	textInputClosestPositionInLine: null
	,textInputNumberOfLines: null
	,textInputIndexForPosInLine: null
	,textInputLineForIndex: null
	,textInputPosInLineForIndex: null
	,__class__: ceramic_TextInputDelegate
};
var ceramic_TextureAtlas = function() {
	this.asset = null;
	this.regions = [];
	this.pages = [];
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.TextureAtlas"] = ceramic_TextureAtlas;
ceramic_TextureAtlas.__name__ = "ceramic.TextureAtlas";
ceramic_TextureAtlas.__super__ = ceramic_Entity;
ceramic_TextureAtlas.prototype = $extend(ceramic_Entity.prototype,{
	pages: null
	,regions: null
	,asset: null
	,region: function(name) {
		var _g = 0;
		var _g1 = this.regions.length;
		while(_g < _g1) {
			var i = _g++;
			var region = this.regions[i];
			if(region.name == name) {
				return region;
			}
		}
		return null;
	}
	,computeFrames: function() {
		var _g = 0;
		var _g1 = this.regions.length;
		while(_g < _g1) {
			var i = _g++;
			var region = this.regions[i];
			region.computeFrame();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		while(this.pages.length > 0) {
			var page = this.pages.pop();
			var texture = page.get_texture();
			if(texture != null) {
				texture.destroy();
			}
		}
		if(this.asset != null) {
			this.asset.destroy();
		}
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,__class__: ceramic_TextureAtlas
});
var ceramic_TextureAtlasPacker = function() {
	this.pages = [];
	this.pendingRegions = [];
	this.filter = ceramic_TextureFilter.LINEAR;
	this.spacing = 1;
	this.atlas = null;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.TextureAtlasPacker"] = ceramic_TextureAtlasPacker;
ceramic_TextureAtlasPacker.__name__ = "ceramic.TextureAtlasPacker";
ceramic_TextureAtlasPacker.__super__ = ceramic_Entity;
ceramic_TextureAtlasPacker.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnFinishPack: null
	,__cbOnceFinishPack: null
	,__cbOnOwnerUnbindFinishPack: null
	,__cbOnceOwnerUnbindFinishPack: null
	,emitFinishPack: function() {
		var len = 0;
		if(this.__cbOnFinishPack != null) {
			len += this.__cbOnFinishPack.length;
		}
		if(this.__cbOnceFinishPack != null) {
			len += this.__cbOnceFinishPack.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFinishPack != null) {
				var _g = 0;
				var _g1 = this.__cbOnFinishPack.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFinishPack[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFinishPack != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFinishPack.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFinishPack[ii];
						this.__cbOnceFinishPack[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFinishPack[ii];
						this.__cbOnceOwnerUnbindFinishPack[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFinishPack[ii]);
						newCbOnceArray.push(this.__cbOnceFinishPack[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFinishPack = newCbOnceOwnerUnbindArray;
				this.__cbOnceFinishPack = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFinishPack: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishPack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishPack(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFinishPack == null) {
				this.__cbOnOwnerUnbindFinishPack = [];
			}
			this.__cbOnOwnerUnbindFinishPack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFinishPack == null) {
				this.__cbOnOwnerUnbindFinishPack = [];
			}
			this.__cbOnOwnerUnbindFinishPack.push(null);
		}
		if(this.__cbOnFinishPack == null) {
			this.__cbOnFinishPack = [];
		}
		this.__cbOnFinishPack.push(handle);
	}
	,onceFinishPack: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "finishPack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offFinishPack(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFinishPack == null) {
				this.__cbOnceOwnerUnbindFinishPack = [];
			}
			this.__cbOnceOwnerUnbindFinishPack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFinishPack == null) {
				this.__cbOnceOwnerUnbindFinishPack = [];
			}
			this.__cbOnceOwnerUnbindFinishPack.push(null);
		}
		if(this.__cbOnceFinishPack == null) {
			this.__cbOnceFinishPack = [];
		}
		this.__cbOnceFinishPack.push(handle);
	}
	,offFinishPack: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnFinishPack != null) {
				index = this.__cbOnFinishPack.indexOf(handle);
				if(index != -1) {
					this.__cbOnFinishPack.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFinishPack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFinishPack.splice(index,1);
				}
			}
			if(this.__cbOnceFinishPack != null) {
				index = this.__cbOnceFinishPack.indexOf(handle);
				if(index != -1) {
					this.__cbOnceFinishPack.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFinishPack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFinishPack.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFinishPack != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFinishPack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFinishPack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFinishPack = null;
			}
			if(this.__cbOnceOwnerUnbindFinishPack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFinishPack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFinishPack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFinishPack = null;
			}
			this.__cbOnFinishPack = null;
			this.__cbOnceFinishPack = null;
		}
	}
	,listensFinishPack: function() {
		if(!(this.__cbOnFinishPack != null && this.__cbOnFinishPack.length > 0)) {
			if(this.__cbOnceFinishPack != null) {
				return this.__cbOnceFinishPack.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,atlas: null
	,spacing: null
	,filter: null
	,pendingRegions: null
	,pages: null
	,hasPendingRegions: function() {
		if(this.pendingRegions != null) {
			return this.pendingRegions.length > 0;
		} else {
			return false;
		}
	}
	,region: function(name) {
		if(this.pendingRegions != null) {
			var _g = 0;
			var _g1 = this.pendingRegions.length;
			while(_g < _g1) {
				var i = _g++;
				var region = this.pendingRegions[i];
				if(region.name == name) {
					return region;
				}
			}
		}
		if(this.pages != null) {
			var _g = 0;
			var _g1 = this.pages.length;
			while(_g < _g1) {
				var p = _g++;
				var page = this.pages[p];
				var _g2 = 0;
				var _g3 = page.regions.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var region = page.regions[i];
					if(region.name == name) {
						return region;
					}
				}
			}
		}
		return null;
	}
	,removeRegionsWithMatcher: function(removeAtlasRegions,matcher) {
		if(removeAtlasRegions == null) {
			removeAtlasRegions = true;
		}
		if(this.pendingRegions != null) {
			var pendingToRemove = null;
			var _g = 0;
			var _g1 = this.pendingRegions.length;
			while(_g < _g1) {
				var i = _g++;
				var region = this.pendingRegions[i];
				if(matcher(region.name)) {
					if(pendingToRemove == null) {
						pendingToRemove = [];
					}
					pendingToRemove.push(region);
				}
			}
			if(pendingToRemove != null) {
				var _g = 0;
				var _g1 = pendingToRemove.length;
				while(_g < _g1) {
					var i = _g++;
					var region = pendingToRemove[i];
					HxOverrides.remove(this.pendingRegions,region);
				}
			}
		}
		if(this.pages != null) {
			var pagesToRemove = null;
			var _g = 0;
			var _g1 = this.pages.length;
			while(_g < _g1) {
				var p = _g++;
				var pendingToRemove = null;
				var page = this.pages[p];
				var _g2 = 0;
				var _g3 = page.regions.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var region = page.regions[i];
					if(matcher(region.name)) {
						if(pendingToRemove == null) {
							pendingToRemove = [];
						}
						pendingToRemove.push(region);
					}
				}
				if(pendingToRemove != null) {
					if(pagesToRemove == null) {
						pagesToRemove = [];
					}
					pagesToRemove.push(page);
					var _g4 = 0;
					var _g5 = pendingToRemove.length;
					while(_g4 < _g5) {
						var i1 = _g4++;
						var region1 = pendingToRemove[i1];
						HxOverrides.remove(page.regions,region1);
						page.shouldResetTexture = true;
					}
					if(this.pendingRegions != null) {
						this.pendingRegions = [];
					}
					var _g6 = 0;
					var _g7 = page.regions.length;
					while(_g6 < _g7) {
						var i2 = _g6++;
						var region2 = page.regions[i2];
						region2.rect = null;
						region2.rendered = false;
						this.pendingRegions.unshift(region2);
					}
				}
			}
			if(pagesToRemove != null) {
				var _g = 0;
				var _g1 = pagesToRemove.length;
				while(_g < _g1) {
					var p = _g++;
					HxOverrides.remove(this.pages,pagesToRemove[p]);
				}
			}
		}
		if(removeAtlasRegions && this.atlas != null) {
			var toRemoveInAtlas = null;
			var _g = 0;
			var _g1 = this.atlas.regions.length;
			while(_g < _g1) {
				var i = _g++;
				var atlasRegion = this.atlas.regions[i];
				if(matcher(atlasRegion.name)) {
					if(toRemoveInAtlas == null) {
						toRemoveInAtlas = [];
					}
					toRemoveInAtlas.push(atlasRegion);
				}
			}
			if(toRemoveInAtlas != null) {
				var _g = 0;
				var _g1 = toRemoveInAtlas.length;
				while(_g < _g1) {
					var i = _g++;
					HxOverrides.remove(this.atlas.regions,toRemoveInAtlas[i]);
				}
			}
		}
	}
	,removeRegionsWithPrefix: function(removeAtlasRegions,prefix) {
		if(removeAtlasRegions == null) {
			removeAtlasRegions = true;
		}
		this.removeRegionsWithMatcher(removeAtlasRegions,function(regionName) {
			return StringTools.startsWith(regionName,prefix);
		});
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		if(this.atlas != null) {
			if(this.atlas.pages != null) {
				var _g = 0;
				var _g1 = this.atlas.pages.length;
				while(_g < _g1) {
					var p = _g++;
					var page = this.atlas.pages[p];
					var texture = page.get_texture();
					if(texture != null) {
						page.set_texture(null);
						texture.destroy();
					}
				}
			}
			this.atlas.destroy();
			this.atlas = null;
		}
		this.pendingRegions = null;
		this.pages = null;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,_addRegionFromPixels: function(name,pixels,originalWidth,originalHeight,packedWidth,packedHeight,offsetX,offsetY) {
		if(packedHeight == -1) {
			packedHeight = Math.round(pixels.length / packedWidth);
		}
		this.pendingRegions.push(new ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion(name,originalWidth,originalHeight,packedWidth,packedHeight,offsetX,offsetY,pixels,null,null,null));
	}
	,_addVariantRegion: function(variantName,sourceName,originalWidth,originalHeight,offsetX,offsetY) {
		var sourceRegion = this.region(sourceName);
		if(sourceRegion == null) {
			throw haxe_Exception.thrown("Cannot add variant region: source region \"" + sourceName + "\" not found!");
		}
		this.pendingRegions.push(new ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion(variantName,originalWidth,originalHeight,sourceRegion.packedWidth,sourceRegion.packedHeight,offsetX,offsetY,null,sourceRegion,null,null));
	}
	,pack: function(done) {
		var _gthis = this;
		var pageSize = ceramic_TextureAtlasPacker.MIN_TEXTURE_SIZE;
		if(this.pages.length == 0) {
			this.pages.push(new ceramic__$TextureAtlasPacker_TextureAtlasPackerPage(this.spacing,"page" + this.pages.length,pageSize,pageSize,[],new binpacking_MaxRectsPacker(pageSize + this.spacing,pageSize + this.spacing,false),true));
		}
		var page = this.pages[this.pages.length - 1];
		pageSize = page.width;
		var variantRegions = [];
		while(this.pendingRegions.length > 0) {
			var region = this.pendingRegions.shift();
			if(region.pixels == null) {
				variantRegions.push(region);
				continue;
			}
			if(region.packedWidth > ceramic_TextureAtlasPacker.MAX_TEXTURE_SIZE || region.packedHeight > ceramic_TextureAtlasPacker.MAX_TEXTURE_SIZE) {
				throw haxe_Exception.thrown("Cannot insert region " + region.name + " with used size: " + region.packedWidth + " x " + region.packedHeight);
			}
			var rect = null;
			rect = page.binPacker.insert(region.packedWidth + page.spacing,region.packedHeight + page.spacing,3);
			if(rect == null) {
				if(pageSize < ceramic_TextureAtlasPacker.MAX_TEXTURE_SIZE) {
					pageSize *= 2;
					page.width = pageSize;
					page.height = pageSize;
					page.binPacker = new binpacking_MaxRectsPacker(pageSize + page.spacing,pageSize + page.spacing,false);
					var _g = 0;
					var _g1 = page.regions.length;
					while(_g < _g1) {
						var i = _g++;
						page.regions[i].rect = null;
						page.regions[i].rendered = false;
					}
					this.pendingRegions = [region].concat(page.regions.concat(this.pendingRegions));
					page.regions = [];
					page.shouldResetTexture = true;
				} else {
					pageSize = ceramic_TextureAtlasPacker.MIN_TEXTURE_SIZE;
					this.pages.push(new ceramic__$TextureAtlasPacker_TextureAtlasPackerPage(this.spacing,"page" + this.pages.length,pageSize,pageSize,[],new binpacking_MaxRectsPacker(pageSize + this.spacing,pageSize + this.spacing,false),true));
					this.pendingRegions.unshift(region);
				}
			} else {
				region.rect = rect;
				page.regions.push(region);
			}
		}
		var _g = 0;
		var _g1 = variantRegions.length;
		while(_g < _g1) {
			var r = _g++;
			var region = variantRegions[r];
			var sourceRegion = region.sourceRegion;
			while(sourceRegion != null && sourceRegion.sourceRegion != null) sourceRegion = sourceRegion.sourceRegion;
			if(sourceRegion != null) {
				var resolvedPage = null;
				var _g2 = 0;
				var _g3 = this.pages.length;
				while(_g2 < _g3) {
					var p = _g2++;
					var page = this.pages[p];
					var _g4 = 0;
					var _g5 = page.regions.length;
					while(_g4 < _g5) {
						var pr = _g4++;
						var pageRegion = page.regions[pr];
						if(pageRegion.name == sourceRegion.name) {
							resolvedPage = page;
							break;
						}
					}
					if(resolvedPage != null) {
						break;
					}
				}
				if(resolvedPage != null) {
					resolvedPage.regions.push(region);
				} else {
					throw haxe_Exception.thrown("Invalid variant region: " + region.name + " (source region not found in any page).");
				}
			} else {
				throw haxe_Exception.thrown("Invalid variant region: " + region.name + " (source region not found).");
			}
		}
		if(this.atlas == null) {
			this.atlas = new ceramic_TextureAtlas();
			this.atlas.onDestroy(this,function(_) {
				_gthis.destroy();
			});
		}
		var _g = 0;
		var _g1 = this.pages.length;
		while(_g < _g1) {
			var p = _g++;
			var page = this.pages[p];
			if(page.regions.length > 0) {
				var atlasPage = null;
				if(this.atlas.pages.length > p) {
					atlasPage = this.atlas.pages[p];
				}
				if(atlasPage == null) {
					atlasPage = new ceramic_TextureAtlasPage(page.name,page.width,page.height,this.filter);
					this.atlas.pages.push(atlasPage);
				}
				var pagePixels = null;
				if(page.shouldResetTexture || atlasPage.get_texture() == null) {
					pagePixels = ceramic_Pixels.create(page.width,page.height,0);
					atlasPage.set_width(page.width);
					atlasPage.set_height(page.height);
				} else {
					pagePixels = atlasPage.get_texture().fetchPixels();
				}
				var renderedRegionsWithPixels = [];
				var renderedVariantRegions = [];
				var _g2 = 0;
				var _g3 = page.regions.length;
				while(_g2 < _g3) {
					var r = _g2++;
					var region = page.regions[r];
					if(!region.rendered) {
						if(region.pixels != null) {
							ceramic_Pixels.copy(region.pixels,region.packedWidth,pagePixels,page.width,0,0,region.packedWidth,region.packedHeight,region.rect.x | 0,region.rect.y | 0);
							region.rendered = true;
							renderedRegionsWithPixels.push(region);
						} else if(region.sourceRegion != null) {
							region.rendered = true;
							renderedVariantRegions.push(region);
						} else {
							throw haxe_Exception.thrown("Cannot render region " + region.name + " because it doesn't have pixels");
						}
					}
				}
				if(renderedRegionsWithPixels.length > 0) {
					if(atlasPage.get_texture() != null) {
						if(atlasPage.get_texture().backendItem.width == page.width && atlasPage.get_texture().backendItem.height == page.height) {
							atlasPage.get_texture().submitPixels(pagePixels);
						} else {
							atlasPage.get_texture().destroy();
							atlasPage.set_texture(ceramic_Texture.fromPixels(page.width,page.height,pagePixels,1));
						}
					} else {
						atlasPage.set_texture(ceramic_Texture.fromPixels(page.width,page.height,pagePixels,1));
					}
					atlasPage.get_texture().set_filter(this.filter);
					var _g4 = 0;
					var _g5 = renderedRegionsWithPixels.length;
					while(_g4 < _g5) {
						var r1 = _g4++;
						var region1 = renderedRegionsWithPixels[r1];
						var atlasRegion = this.atlas.region(region1.name);
						if(atlasRegion == null) {
							atlasRegion = new ceramic_TextureAtlasRegion(region1.name,this.atlas,p);
						}
						atlasRegion.texture = atlasPage.get_texture();
						atlasRegion.originalWidth = region1.originalWidth;
						atlasRegion.originalHeight = region1.originalHeight;
						atlasRegion.packedWidth = region1.packedWidth;
						atlasRegion.packedHeight = region1.packedHeight;
						atlasRegion.offsetX = region1.offsetX;
						atlasRegion.offsetY = region1.offsetY;
						atlasRegion.x = Math.round(region1.rect.x + page.spacing);
						atlasRegion.y = Math.round(region1.rect.y + page.spacing);
						atlasRegion.width = region1.packedWidth;
						atlasRegion.height = region1.packedHeight;
						atlasRegion.computeFrame();
					}
				}
				if(renderedVariantRegions.length > 0) {
					var _g6 = 0;
					var _g7 = renderedVariantRegions.length;
					while(_g6 < _g7) {
						var r2 = _g6++;
						var region2 = renderedVariantRegions[r2];
						var sourceRegion = region2.sourceRegion;
						while(sourceRegion != null && sourceRegion.sourceRegion != null) sourceRegion = sourceRegion.sourceRegion;
						var sourceAtlasRegion = this.atlas.region(sourceRegion.name);
						if(sourceAtlasRegion == null) {
							throw haxe_Exception.thrown("Invalid variant region: " + region2.name + " (source atlas region not found).");
						}
						var atlasRegion1 = this.atlas.region(region2.name);
						if(atlasRegion1 == null) {
							atlasRegion1 = new ceramic_TextureAtlasRegion(region2.name,this.atlas,p);
						}
						atlasRegion1.texture = sourceAtlasRegion.texture;
						atlasRegion1.originalWidth = region2.originalWidth;
						atlasRegion1.originalHeight = region2.originalHeight;
						atlasRegion1.packedWidth = sourceRegion.packedWidth;
						atlasRegion1.packedHeight = sourceRegion.packedHeight;
						atlasRegion1.offsetX = region2.offsetX;
						atlasRegion1.offsetY = region2.offsetY;
						atlasRegion1.x = Math.round(sourceRegion.rect.x + page.spacing);
						atlasRegion1.y = Math.round(sourceRegion.rect.y + page.spacing);
						atlasRegion1.width = region2.packedWidth;
						atlasRegion1.height = region2.packedHeight;
						atlasRegion1.computeFrame();
					}
				}
			}
		}
		this.emitFinishPack();
		done(this.atlas);
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offFinishPack();
	}
	,__class__: ceramic_TextureAtlasPacker
});
var ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion = function(name,originalWidth,originalHeight,packedWidth,packedHeight,offsetX,offsetY,pixels,sourceRegion,rect,rendered) {
	this.rendered = false;
	this.rect = null;
	this.sourceRegion = null;
	this.pixels = null;
	this.offsetY = 0;
	this.offsetX = 0;
	this.originalHeight = 0;
	this.originalWidth = 0;
	this.name = name;
	if(originalWidth != null) {
		this.originalWidth = originalWidth;
	}
	if(originalHeight != null) {
		this.originalHeight = originalHeight;
	}
	this.packedWidth = packedWidth;
	this.packedHeight = packedHeight;
	if(offsetX != null) {
		this.offsetX = offsetX;
	}
	if(offsetY != null) {
		this.offsetY = offsetY;
	}
	if(pixels != null) {
		this.pixels = pixels;
	}
	if(sourceRegion != null) {
		this.sourceRegion = sourceRegion;
	}
	if(rect != null) {
		this.rect = rect;
	}
	if(rendered != null) {
		this.rendered = rendered;
	}
};
$hxClasses["ceramic._TextureAtlasPacker.TextureAtlasPackerRegion"] = ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion;
ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion.__name__ = "ceramic._TextureAtlasPacker.TextureAtlasPackerRegion";
ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion.prototype = {
	name: null
	,originalWidth: null
	,originalHeight: null
	,packedWidth: null
	,packedHeight: null
	,offsetX: null
	,offsetY: null
	,pixels: null
	,sourceRegion: null
	,rect: null
	,rendered: null
	,__class__: ceramic__$TextureAtlasPacker_TextureAtlasPackerRegion
};
var ceramic__$TextureAtlasPacker_TextureAtlasPackerPage = function(spacing,name,width,height,regions,binPacker,shouldResetTexture) {
	this.spacing = spacing;
	this.name = name;
	this.width = width;
	this.height = height;
	this.regions = regions;
	this.binPacker = binPacker;
	this.shouldResetTexture = shouldResetTexture;
};
$hxClasses["ceramic._TextureAtlasPacker.TextureAtlasPackerPage"] = ceramic__$TextureAtlasPacker_TextureAtlasPackerPage;
ceramic__$TextureAtlasPacker_TextureAtlasPackerPage.__name__ = "ceramic._TextureAtlasPacker.TextureAtlasPackerPage";
ceramic__$TextureAtlasPacker_TextureAtlasPackerPage.prototype = {
	spacing: null
	,name: null
	,width: null
	,height: null
	,regions: null
	,binPacker: null
	,shouldResetTexture: null
	,__class__: ceramic__$TextureAtlasPacker_TextureAtlasPackerPage
};
var ceramic_TextureAtlasPage = function(name,width,height,filter,texture) {
	if(filter == null) {
		filter = ceramic_TextureFilter.LINEAR;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.unobservedTexture = null;
	this.textureAutoruns = null;
	this.unobservedFilter = ceramic_TextureFilter.LINEAR;
	this.filterAutoruns = null;
	this.unobservedHeight = 0;
	this.heightAutoruns = null;
	this.unobservedWidth = 0;
	this.widthAutoruns = null;
	this.nameAutoruns = null;
	this.observedDirty = false;
	this.set_name(name);
	this.set_width(width);
	this.set_height(height);
	this.set_filter(filter);
	this.set_texture(texture);
};
$hxClasses["ceramic.TextureAtlasPage"] = ceramic_TextureAtlasPage;
ceramic_TextureAtlasPage.__name__ = "ceramic.TextureAtlasPage";
ceramic_TextureAtlasPage.__interfaces__ = [tracker_Observable];
ceramic_TextureAtlasPage.prototype = {
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,nameAutoruns: null
	,get_name: function() {
		var value = this.unobservedName;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.nameAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.nameAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_name: function(name) {
		var prevValue = this.unobservedName;
		this.unobservedName = name;
		if(prevValue == name) {
			return name;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitNameChange(name,prevValue);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return name;
	}
	,invalidateName: function() {
		var value = this.unobservedName;
		this.emitNameChange(value,value);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedName: null
	,__cbOnNameChange: null
	,__cbOnceNameChange: null
	,__cbOnOwnerUnbindNameChange: null
	,__cbOnceOwnerUnbindNameChange: null
	,emitNameChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnNameChange != null) {
			len += this.__cbOnNameChange.length;
		}
		if(this.__cbOnceNameChange != null) {
			len += this.__cbOnceNameChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnNameChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceNameChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceNameChange[ii];
						this.__cbOnceNameChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindNameChange[ii];
						this.__cbOnceOwnerUnbindNameChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindNameChange[ii]);
						newCbOnceArray.push(this.__cbOnceNameChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindNameChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceNameChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnNameChange == null) {
			this.__cbOnNameChange = [];
		}
		this.__cbOnNameChange.push(handleCurrentPrevious);
	}
	,onceNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnceNameChange == null) {
			this.__cbOnceNameChange = [];
		}
		this.__cbOnceNameChange.push(handleCurrentPrevious);
	}
	,offNameChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnNameChange != null) {
				index = this.__cbOnNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnNameChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindNameChange.splice(index,1);
				}
			}
			if(this.__cbOnceNameChange != null) {
				index = this.__cbOnceNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceNameChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindNameChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindNameChange = null;
			}
			if(this.__cbOnceOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindNameChange = null;
			}
			this.__cbOnNameChange = null;
			this.__cbOnceNameChange = null;
		}
	}
	,listensNameChange: function() {
		if(!(this.__cbOnNameChange != null && this.__cbOnNameChange.length > 0)) {
			if(this.__cbOnceNameChange != null) {
				return this.__cbOnceNameChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,widthAutoruns: null
	,get_width: function() {
		var value = this.unobservedWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.widthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.widthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_width: function(width) {
		var prevValue = this.unobservedWidth;
		this.unobservedWidth = width;
		if(prevValue == width) {
			return width;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitWidthChange(width,prevValue);
		var fieldAutoruns = this.widthAutoruns;
		if(fieldAutoruns != null) {
			this.widthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return width;
	}
	,invalidateWidth: function() {
		var value = this.unobservedWidth;
		this.emitWidthChange(value,value);
		var fieldAutoruns = this.widthAutoruns;
		if(fieldAutoruns != null) {
			this.widthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedWidth: null
	,__cbOnWidthChange: null
	,__cbOnceWidthChange: null
	,__cbOnOwnerUnbindWidthChange: null
	,__cbOnceOwnerUnbindWidthChange: null
	,emitWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWidthChange != null) {
			len += this.__cbOnWidthChange.length;
		}
		if(this.__cbOnceWidthChange != null) {
			len += this.__cbOnceWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceWidthChange[ii];
						this.__cbOnceWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindWidthChange[ii];
						this.__cbOnceOwnerUnbindWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "widthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWidthChange == null) {
				this.__cbOnOwnerUnbindWidthChange = [];
			}
			this.__cbOnOwnerUnbindWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWidthChange == null) {
				this.__cbOnOwnerUnbindWidthChange = [];
			}
			this.__cbOnOwnerUnbindWidthChange.push(null);
		}
		if(this.__cbOnWidthChange == null) {
			this.__cbOnWidthChange = [];
		}
		this.__cbOnWidthChange.push(handleCurrentPrevious);
	}
	,onceWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "widthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWidthChange == null) {
				this.__cbOnceOwnerUnbindWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWidthChange == null) {
				this.__cbOnceOwnerUnbindWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWidthChange.push(null);
		}
		if(this.__cbOnceWidthChange == null) {
			this.__cbOnceWidthChange = [];
		}
		this.__cbOnceWidthChange.push(handleCurrentPrevious);
	}
	,offWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWidthChange != null) {
				index = this.__cbOnWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceWidthChange != null) {
				index = this.__cbOnceWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWidthChange = null;
			}
			this.__cbOnWidthChange = null;
			this.__cbOnceWidthChange = null;
		}
	}
	,listensWidthChange: function() {
		if(!(this.__cbOnWidthChange != null && this.__cbOnWidthChange.length > 0)) {
			if(this.__cbOnceWidthChange != null) {
				return this.__cbOnceWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,heightAutoruns: null
	,get_height: function() {
		var value = this.unobservedHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.heightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.heightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_height: function(height) {
		var prevValue = this.unobservedHeight;
		this.unobservedHeight = height;
		if(prevValue == height) {
			return height;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitHeightChange(height,prevValue);
		var fieldAutoruns = this.heightAutoruns;
		if(fieldAutoruns != null) {
			this.heightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return height;
	}
	,invalidateHeight: function() {
		var value = this.unobservedHeight;
		this.emitHeightChange(value,value);
		var fieldAutoruns = this.heightAutoruns;
		if(fieldAutoruns != null) {
			this.heightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedHeight: null
	,__cbOnHeightChange: null
	,__cbOnceHeightChange: null
	,__cbOnOwnerUnbindHeightChange: null
	,__cbOnceOwnerUnbindHeightChange: null
	,emitHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnHeightChange != null) {
			len += this.__cbOnHeightChange.length;
		}
		if(this.__cbOnceHeightChange != null) {
			len += this.__cbOnceHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceHeightChange[ii];
						this.__cbOnceHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindHeightChange[ii];
						this.__cbOnceOwnerUnbindHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "heightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindHeightChange == null) {
				this.__cbOnOwnerUnbindHeightChange = [];
			}
			this.__cbOnOwnerUnbindHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindHeightChange == null) {
				this.__cbOnOwnerUnbindHeightChange = [];
			}
			this.__cbOnOwnerUnbindHeightChange.push(null);
		}
		if(this.__cbOnHeightChange == null) {
			this.__cbOnHeightChange = [];
		}
		this.__cbOnHeightChange.push(handleCurrentPrevious);
	}
	,onceHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "heightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindHeightChange == null) {
				this.__cbOnceOwnerUnbindHeightChange = [];
			}
			this.__cbOnceOwnerUnbindHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindHeightChange == null) {
				this.__cbOnceOwnerUnbindHeightChange = [];
			}
			this.__cbOnceOwnerUnbindHeightChange.push(null);
		}
		if(this.__cbOnceHeightChange == null) {
			this.__cbOnceHeightChange = [];
		}
		this.__cbOnceHeightChange.push(handleCurrentPrevious);
	}
	,offHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnHeightChange != null) {
				index = this.__cbOnHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceHeightChange != null) {
				index = this.__cbOnceHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindHeightChange = null;
			}
			this.__cbOnHeightChange = null;
			this.__cbOnceHeightChange = null;
		}
	}
	,listensHeightChange: function() {
		if(!(this.__cbOnHeightChange != null && this.__cbOnHeightChange.length > 0)) {
			if(this.__cbOnceHeightChange != null) {
				return this.__cbOnceHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,filterAutoruns: null
	,get_filter: function() {
		var value = this.unobservedFilter;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.filterAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.filterAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_filter: function(filter) {
		var prevValue = this.unobservedFilter;
		this.set_unobservedFilter(filter);
		if(prevValue == filter) {
			return filter;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitFilterChange(filter,prevValue);
		var fieldAutoruns = this.filterAutoruns;
		if(fieldAutoruns != null) {
			this.filterAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return filter;
	}
	,invalidateFilter: function() {
		var value = this.unobservedFilter;
		this.emitFilterChange(value,value);
		var fieldAutoruns = this.filterAutoruns;
		if(fieldAutoruns != null) {
			this.filterAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedFilter: null
	,__cbOnFilterChange: null
	,__cbOnceFilterChange: null
	,__cbOnOwnerUnbindFilterChange: null
	,__cbOnceOwnerUnbindFilterChange: null
	,emitFilterChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFilterChange != null) {
			len += this.__cbOnFilterChange.length;
		}
		if(this.__cbOnceFilterChange != null) {
			len += this.__cbOnceFilterChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFilterChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFilterChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFilterChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFilterChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFilterChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFilterChange[ii];
						this.__cbOnceFilterChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFilterChange[ii];
						this.__cbOnceOwnerUnbindFilterChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFilterChange[ii]);
						newCbOnceArray.push(this.__cbOnceFilterChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFilterChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFilterChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFilterChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "filterChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFilterChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFilterChange == null) {
				this.__cbOnOwnerUnbindFilterChange = [];
			}
			this.__cbOnOwnerUnbindFilterChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFilterChange == null) {
				this.__cbOnOwnerUnbindFilterChange = [];
			}
			this.__cbOnOwnerUnbindFilterChange.push(null);
		}
		if(this.__cbOnFilterChange == null) {
			this.__cbOnFilterChange = [];
		}
		this.__cbOnFilterChange.push(handleCurrentPrevious);
	}
	,onceFilterChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "filterChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFilterChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFilterChange == null) {
				this.__cbOnceOwnerUnbindFilterChange = [];
			}
			this.__cbOnceOwnerUnbindFilterChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFilterChange == null) {
				this.__cbOnceOwnerUnbindFilterChange = [];
			}
			this.__cbOnceOwnerUnbindFilterChange.push(null);
		}
		if(this.__cbOnceFilterChange == null) {
			this.__cbOnceFilterChange = [];
		}
		this.__cbOnceFilterChange.push(handleCurrentPrevious);
	}
	,offFilterChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFilterChange != null) {
				index = this.__cbOnFilterChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFilterChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFilterChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFilterChange.splice(index,1);
				}
			}
			if(this.__cbOnceFilterChange != null) {
				index = this.__cbOnceFilterChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFilterChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFilterChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFilterChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFilterChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFilterChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFilterChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFilterChange = null;
			}
			if(this.__cbOnceOwnerUnbindFilterChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFilterChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFilterChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFilterChange = null;
			}
			this.__cbOnFilterChange = null;
			this.__cbOnceFilterChange = null;
		}
	}
	,listensFilterChange: function() {
		if(!(this.__cbOnFilterChange != null && this.__cbOnFilterChange.length > 0)) {
			if(this.__cbOnceFilterChange != null) {
				return this.__cbOnceFilterChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_unobservedFilter: function(filter) {
		if(this.unobservedFilter != filter) {
			this.unobservedFilter = filter;
			if(this.get_texture() != null) {
				this.get_texture().set_filter(filter);
			}
		}
		return filter;
	}
	,textureAutoruns: null
	,get_texture: function() {
		var value = this.unobservedTexture;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.textureAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.textureAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_texture: function(texture) {
		var prevValue = this.unobservedTexture;
		this.set_unobservedTexture(texture);
		if(prevValue == texture) {
			return texture;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTextureChange(texture,prevValue);
		var fieldAutoruns = this.textureAutoruns;
		if(fieldAutoruns != null) {
			this.textureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return texture;
	}
	,invalidateTexture: function() {
		var value = this.unobservedTexture;
		this.emitTextureChange(value,value);
		var fieldAutoruns = this.textureAutoruns;
		if(fieldAutoruns != null) {
			this.textureAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTexture: null
	,__cbOnTextureChange: null
	,__cbOnceTextureChange: null
	,__cbOnOwnerUnbindTextureChange: null
	,__cbOnceOwnerUnbindTextureChange: null
	,emitTextureChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTextureChange != null) {
			len += this.__cbOnTextureChange.length;
		}
		if(this.__cbOnceTextureChange != null) {
			len += this.__cbOnceTextureChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTextureChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTextureChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTextureChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTextureChange[ii];
						this.__cbOnceTextureChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTextureChange[ii];
						this.__cbOnceOwnerUnbindTextureChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTextureChange[ii]);
						newCbOnceArray.push(this.__cbOnceTextureChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTextureChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTextureChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTextureChange == null) {
				this.__cbOnOwnerUnbindTextureChange = [];
			}
			this.__cbOnOwnerUnbindTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTextureChange == null) {
				this.__cbOnOwnerUnbindTextureChange = [];
			}
			this.__cbOnOwnerUnbindTextureChange.push(null);
		}
		if(this.__cbOnTextureChange == null) {
			this.__cbOnTextureChange = [];
		}
		this.__cbOnTextureChange.push(handleCurrentPrevious);
	}
	,onceTextureChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "textureChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTextureChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTextureChange == null) {
				this.__cbOnceOwnerUnbindTextureChange = [];
			}
			this.__cbOnceOwnerUnbindTextureChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTextureChange == null) {
				this.__cbOnceOwnerUnbindTextureChange = [];
			}
			this.__cbOnceOwnerUnbindTextureChange.push(null);
		}
		if(this.__cbOnceTextureChange == null) {
			this.__cbOnceTextureChange = [];
		}
		this.__cbOnceTextureChange.push(handleCurrentPrevious);
	}
	,offTextureChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTextureChange != null) {
				index = this.__cbOnTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTextureChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTextureChange.splice(index,1);
				}
			}
			if(this.__cbOnceTextureChange != null) {
				index = this.__cbOnceTextureChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTextureChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTextureChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTextureChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTextureChange = null;
			}
			if(this.__cbOnceOwnerUnbindTextureChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTextureChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTextureChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTextureChange = null;
			}
			this.__cbOnTextureChange = null;
			this.__cbOnceTextureChange = null;
		}
	}
	,listensTextureChange: function() {
		if(!(this.__cbOnTextureChange != null && this.__cbOnTextureChange.length > 0)) {
			if(this.__cbOnceTextureChange != null) {
				return this.__cbOnceTextureChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_unobservedTexture: function(texture) {
		if(this.unobservedTexture != texture) {
			this.unobservedTexture = texture;
			if(texture != null) {
				if(this.get_width() <= 0) {
					this.set_width(texture.backendItem.width);
				}
				if(this.get_height() <= 0) {
					this.set_height(texture.backendItem.height);
				}
			}
		}
		return texture;
	}
	,unbindEvents: function() {
		this.offObservedDirty();
		this.offNameChange();
		this.offWidthChange();
		this.offHeightChange();
		this.offFilterChange();
		this.offTextureChange();
	}
	,__class__: ceramic_TextureAtlasPage
	,__properties__: {set_unobservedTexture:"set_unobservedTexture",set_texture:"set_texture",get_texture:"get_texture",set_unobservedFilter:"set_unobservedFilter",set_filter:"set_filter",get_filter:"get_filter",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_name:"set_name",get_name:"get_name"}
};
var ceramic_TextureAtlasParser = function() { };
$hxClasses["ceramic.TextureAtlasParser"] = ceramic_TextureAtlasParser;
ceramic_TextureAtlasParser.__name__ = "ceramic.TextureAtlasParser";
ceramic_TextureAtlasParser.parse = function(rawTextureAtlas) {
	if(StringTools.startsWith(StringTools.trim(rawTextureAtlas),"<")) {
		try {
			rawTextureAtlas = ceramic_TextureAtlasParser.convertXmlTextureAtlas(rawTextureAtlas);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown("TextureAtlas: invalid xml atlas data specified for parser: " + Std.string(e));
		}
	}
	var reader = new ceramic__$TextureAtlasParser_TextureAtlasReader(rawTextureAtlas);
	var tuple = [null,null,null,null];
	var page = null;
	var atlas = new ceramic_TextureAtlas();
	while(true) {
		var line = reader.readLine();
		if(line == null) {
			break;
		}
		line = reader.trim(line);
		if(line.length == 0) {
			page = null;
		} else if(page == null) {
			page = new ceramic_TextureAtlasPage(line);
			var key = reader.nextLineKey();
			while(key != null) {
				switch(key) {
				case "filter":
					reader.readTuple(tuple);
					page.set_filter(tuple[0] != null && tuple[0].toLowerCase() == "nearest" ? ceramic_TextureFilter.NEAREST : ceramic_TextureFilter.LINEAR);
					break;
				case "size":
					reader.readTuple(tuple);
					page.set_width(Std.parseInt(tuple[0]));
					page.set_height(Std.parseInt(tuple[1]));
					break;
				default:
					reader.readLine();
				}
				key = reader.nextLineKey();
			}
			atlas.pages.push(page);
		} else {
			var name = line;
			var lowerCaseName = name.toLowerCase();
			if(StringTools.endsWith(lowerCaseName,".png") || StringTools.endsWith(lowerCaseName,".gif") || StringTools.endsWith(lowerCaseName,".jpg")) {
				name = HxOverrides.substr(name,0,name.length - 4);
			} else if(StringTools.endsWith(lowerCaseName,".jpeg")) {
				name = HxOverrides.substr(name,0,name.length - 5);
			}
			var region = new ceramic_TextureAtlasRegion(name,atlas,atlas.pages.length - 1);
			var x = 0;
			var y = 0;
			var width = 0;
			var height = 0;
			var originalWidth = 0;
			var originalHeight = 0;
			var key1 = reader.nextLineKey();
			while(key1 != null) {
				switch(key1) {
				case "bounds":
					reader.readTuple(tuple);
					x = Std.parseInt(tuple[0]);
					y = Std.parseInt(tuple[1]);
					width = Std.parseInt(tuple[2]);
					height = Std.parseInt(tuple[3]);
					break;
				case "offset":
					reader.readTuple(tuple);
					region.offsetX = Std.parseInt(tuple[0]);
					region.offsetY = Std.parseInt(tuple[1]);
					break;
				case "offsets":
					reader.readTuple(tuple);
					region.offsetX = Std.parseInt(tuple[0]);
					region.offsetY = Std.parseInt(tuple[1]);
					originalWidth = Std.parseInt(tuple[2]);
					originalHeight = Std.parseInt(tuple[3]);
					break;
				case "orig":
					reader.readTuple(tuple);
					originalWidth = Std.parseInt(tuple[0]);
					originalHeight = Std.parseInt(tuple[1]);
					break;
				case "rotate":
					var value = reader.readValue();
					region.rotateFrame = value == "true" || value == "90";
					break;
				case "size":
					reader.readTuple(tuple);
					width = Std.parseInt(tuple[0]);
					height = Std.parseInt(tuple[1]);
					break;
				case "xy":
					reader.readTuple(tuple);
					x = Std.parseInt(tuple[0]);
					y = Std.parseInt(tuple[1]);
					break;
				default:
					reader.readLine();
				}
				key1 = reader.nextLineKey();
			}
			region.x = x;
			region.y = y;
			region.width = Math.abs(width) | 0;
			region.height = Math.abs(height) | 0;
			region.originalWidth = originalWidth != 0 ? originalWidth : region.width;
			region.originalHeight = originalHeight != 0 ? originalHeight : region.height;
			if(region.rotateFrame) {
				region.packedWidth = region.height;
				region.packedHeight = region.width;
			} else {
				region.packedWidth = region.width;
				region.packedHeight = region.height;
			}
		}
	}
	return atlas;
};
ceramic_TextureAtlasParser.convertXmlTextureAtlas = function(rawTextureAtlas) {
	var result_b = "";
	var xml = Xml.parse(rawTextureAtlas).firstElement();
	result_b += Std.string(xml.get("imagePath"));
	result_b += "\n";
	var el = xml.elements();
	while(el.hasNext()) {
		var el1 = el.next();
		if(el1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (el1.nodeType == null ? "null" : XmlType.toString(el1.nodeType)));
		}
		if(el1.nodeName == "SubTexture") {
			result_b += Std.string(el1.get("name"));
			result_b += "\n";
			if(el1.exists("frameX") && el1.exists("frameY") && el1.exists("frameWidth") && el1.exists("frameHeight")) {
				result_b += "offsets:";
				result_b += Std.string(-parseFloat(el1.get("frameX")));
				result_b += ",";
				result_b += Std.string(-parseFloat(el1.get("frameY")));
				result_b += ",";
				result_b += Std.string(parseFloat(el1.get("frameWidth")));
				result_b += ",";
				result_b += Std.string(parseFloat(el1.get("frameHeight")));
				result_b += "\n";
			}
			result_b += "bounds:";
			result_b += Std.string(parseFloat(el1.get("x")));
			result_b += ",";
			result_b += Std.string(parseFloat(el1.get("y")));
			result_b += ",";
			result_b += Std.string(parseFloat(el1.get("width")));
			result_b += ",";
			result_b += Std.string(parseFloat(el1.get("height")));
			result_b += "\n";
			if(el1.exists("rotate")) {
				result_b += "rotate:";
				result_b += Std.string(el1.get("rotate"));
				result_b += "\n";
			}
		}
	}
	return result_b;
};
var ceramic__$TextureAtlasParser_TextureAtlasReader = function(text) {
	this.lines = StringTools.replace(StringTools.replace(StringTools.trim(text),"\r\n","\n"),"\r","\n").split("\n");
	this.index = 0;
};
$hxClasses["ceramic._TextureAtlasParser.TextureAtlasReader"] = ceramic__$TextureAtlasParser_TextureAtlasReader;
ceramic__$TextureAtlasParser_TextureAtlasReader.__name__ = "ceramic._TextureAtlasParser.TextureAtlasReader";
ceramic__$TextureAtlasParser_TextureAtlasReader.prototype = {
	lines: null
	,index: null
	,trim: function(value) {
		return StringTools.trim(value);
	}
	,readLine: function() {
		if(this.index >= this.lines.length) {
			return null;
		}
		return this.lines[this.index++];
	}
	,nextLineKey: function() {
		if(this.index >= this.lines.length) {
			return null;
		} else {
			var line = this.lines[this.index];
			var colon = line.indexOf(":");
			if(colon != -1) {
				return StringTools.trim(line.substring(0,colon));
			} else {
				return null;
			}
		}
	}
	,readValue: function() {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw haxe_Exception.thrown("Invalid line: " + line);
		}
		return this.trim(line.substring(colon + 1));
	}
	,readTuple: function(tuple) {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw haxe_Exception.thrown("Invalid line: " + line);
		}
		var i = 0;
		var lastMatch = colon + 1;
		while(i < 3) {
			var comma = line.indexOf(",",lastMatch);
			if(comma == -1) {
				break;
			}
			tuple[i] = this.trim(HxOverrides.substr(line,lastMatch,comma - lastMatch));
			lastMatch = comma + 1;
			++i;
		}
		tuple[i] = this.trim(line.substring(lastMatch));
		return i + 1;
	}
	,__class__: ceramic__$TextureAtlasParser_TextureAtlasReader
};
var ceramic_TextureTile = function(texture,frameX,frameY,frameWidth,frameHeight,rotateFrame,edgeInset) {
	if(edgeInset == null) {
		edgeInset = 0;
	}
	if(rotateFrame == null) {
		rotateFrame = false;
	}
	this.texture = texture;
	this.frameX = frameX;
	this.frameY = frameY;
	this.frameWidth = frameWidth;
	this.frameHeight = frameHeight;
	this.rotateFrame = rotateFrame;
	this.edgeInset = edgeInset;
};
$hxClasses["ceramic.TextureTile"] = ceramic_TextureTile;
ceramic_TextureTile.__name__ = "ceramic.TextureTile";
ceramic_TextureTile.prototype = {
	texture: null
	,frameX: null
	,frameY: null
	,frameWidth: null
	,frameHeight: null
	,rotateFrame: null
	,edgeInset: null
	,frame: function(frameX,frameY,frameWidth,frameHeight) {
		this.frameX = frameX;
		this.frameY = frameY;
		this.frameWidth = frameWidth;
		this.frameHeight = frameHeight;
	}
	,toString: function() {
		return "" + Std.string({ texture : this.texture, frameX : this.frameX, frameY : this.frameY, frameWidth : this.frameWidth, frameHeight : this.frameHeight});
	}
	,__class__: ceramic_TextureTile
};
var ceramic_TextureAtlasRegion = function(name,atlas,page) {
	this.originalHeight = 0;
	this.originalWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.packedHeight = 0;
	this.packedWidth = 0;
	this.page = 0;
	this.atlas = null;
	this.name = null;
	this.name = name;
	this.atlas = atlas;
	this.page = page;
	var pageInfo = atlas.pages[page];
	ceramic_TextureTile.call(this,pageInfo != null ? pageInfo.get_texture() : null,0,0,0,0,false,0);
	atlas.regions.push(this);
};
$hxClasses["ceramic.TextureAtlasRegion"] = ceramic_TextureAtlasRegion;
ceramic_TextureAtlasRegion.__name__ = "ceramic.TextureAtlasRegion";
ceramic_TextureAtlasRegion.__super__ = ceramic_TextureTile;
ceramic_TextureAtlasRegion.prototype = $extend(ceramic_TextureTile.prototype,{
	name: null
	,atlas: null
	,page: null
	,packedWidth: null
	,packedHeight: null
	,x: null
	,y: null
	,width: null
	,height: null
	,offsetX: null
	,offsetY: null
	,originalWidth: null
	,originalHeight: null
	,computeFrame: function() {
		var pageInfo = this.atlas.pages[this.page];
		if(pageInfo != null) {
			this.texture = pageInfo.get_texture();
			if(this.texture != null) {
				var pageWidth = pageInfo.get_width();
				var pageHeight = pageInfo.get_height();
				var ratioX = this.texture.width / pageWidth;
				var ratioY = this.texture.height / pageHeight;
				this.frameX = this.x * ratioX;
				this.frameY = this.y * ratioY;
				this.frameWidth = this.width * ratioX;
				this.frameHeight = this.height * ratioY;
			} else {
				ceramic_App.app.logger.warning("Failed to compute region frame because there is no texture at page " + this.page,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextureAtlasRegion.hx", lineNumber : 85, className : "ceramic.TextureAtlasRegion", methodName : "computeFrame"});
			}
		} else {
			ceramic_App.app.logger.warning("Failed to compute region frame because there is no page " + this.page,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextureAtlasRegion.hx", lineNumber : 89, className : "ceramic.TextureAtlasRegion", methodName : "computeFrame"});
		}
	}
	,toString: function() {
		return "" + Std.string({ name : this.name, page : this.page, texture : this.texture, packedWidth : this.packedWidth, packedHeight : this.packedHeight, originalWidth : this.originalWidth, originalHeight : this.originalHeight, width : this.width, height : this.height, offsetX : this.offsetX, offsetY : this.offsetY, frameX : this.frameX, frameY : this.frameY, frameWidth : this.frameWidth, frameHeight : this.frameHeight});
	}
	,__class__: ceramic_TextureAtlasRegion
});
var ceramic_TextureFilter = $hxEnums["ceramic.TextureFilter"] = { __ename__:"ceramic.TextureFilter",__constructs__:null
	,LINEAR: {_hx_name:"LINEAR",_hx_index:0,__enum__:"ceramic.TextureFilter",toString:$estr}
	,NEAREST: {_hx_name:"NEAREST",_hx_index:1,__enum__:"ceramic.TextureFilter",toString:$estr}
};
ceramic_TextureFilter.__constructs__ = [ceramic_TextureFilter.LINEAR,ceramic_TextureFilter.NEAREST];
var ceramic_TextureTilePacker = function(autoRender,maxPixelTextureWidth,maxPixelTextureHeight,padWidth,padHeight,margin) {
	if(margin == null) {
		margin = 1;
	}
	if(padHeight == null) {
		padHeight = 16;
	}
	if(padWidth == null) {
		padWidth = 16;
	}
	if(maxPixelTextureHeight == null) {
		maxPixelTextureHeight = -1;
	}
	if(maxPixelTextureWidth == null) {
		maxPixelTextureWidth = -1;
	}
	this.maxPixelTextureHeight = 0;
	this.maxPixelTextureWidth = 0;
	this.numRows = 0;
	this.numCols = 0;
	this.nextPacker = null;
	ceramic_Entity.call(this);
	this.padWidth = padWidth;
	this.padHeight = padHeight;
	this.margin = margin;
	this.maxPixelTextureWidth = maxPixelTextureWidth;
	this.maxPixelTextureHeight = maxPixelTextureHeight;
	if(maxPixelTextureWidth == -1) {
		maxPixelTextureWidth = 2048 / ceramic_App.app.screen.get_texturesDensity() | 0;
	}
	if(maxPixelTextureHeight == -1) {
		maxPixelTextureHeight = 2048 / ceramic_App.app.screen.get_texturesDensity() | 0;
	}
	var textureWidth = Math.min(maxPixelTextureWidth,2048 / ceramic_App.app.screen.get_texturesDensity()) | 0;
	var textureHeight = Math.min(maxPixelTextureHeight,2048 / ceramic_App.app.screen.get_texturesDensity()) | 0;
	this.texture = new ceramic_RenderTexture(textureWidth,textureHeight);
	if(autoRender) {
		this.texture.autoRender = true;
		this.texture.clearOnRender = true;
	} else {
		this.texture.autoRender = false;
		this.texture.clearOnRender = false;
	}
	this.areas = [];
	var texWidth = this.texture.width;
	var texHeight = this.texture.height;
	var x = margin;
	var y = margin;
	while(y + padHeight < texHeight) {
		while(x + padWidth < texWidth) {
			this.areas.push(null);
			x += padWidth + margin * 2;
			if(this.numRows == 0) {
				this.numCols++;
			}
		}
		x = 0;
		y += padHeight + margin * 2;
		this.numRows++;
	}
};
$hxClasses["ceramic.TextureTilePacker"] = ceramic_TextureTilePacker;
ceramic_TextureTilePacker.__name__ = "ceramic.TextureTilePacker";
ceramic_TextureTilePacker.__super__ = ceramic_Entity;
ceramic_TextureTilePacker.prototype = $extend(ceramic_Entity.prototype,{
	texture: null
	,padWidth: null
	,padHeight: null
	,margin: null
	,nextPacker: null
	,areas: null
	,numCols: null
	,numRows: null
	,maxPixelTextureWidth: null
	,maxPixelTextureHeight: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
		if(this.nextPacker != null) {
			this.nextPacker.destroy();
			this.nextPacker = null;
		}
		this.texture.destroy();
		this.texture = null;
		this.areas = null;
	}
	,getTileAtPosition: function(col,row) {
		return this.areas[row * this.numCols + col];
	}
	,setTileAtPosition: function(col,row,tile) {
		this.areas[row * this.numCols + col] = tile;
	}
	,allocTile: function(width,height) {
		var texWidth = this.texture.width;
		var texHeight = this.texture.height;
		var padWidthWithMargin = this.padWidth + this.margin * 2;
		var padHeightWithMargin = this.padHeight + this.margin * 2;
		var maxWidth = padWidthWithMargin * this.numCols - this.margin * 2;
		var maxHeight = padHeightWithMargin * this.numRows - this.margin * 2;
		if(width > maxWidth || height > maxHeight) {
			ceramic_App.app.logger.warning("Cannot alloc tile of " + width + " x " + height + " because this is bigger than " + maxWidth + " x " + maxHeight,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextureTilePacker.hx", lineNumber : 123, className : "ceramic.TextureTilePacker", methodName : "allocTile"});
			return null;
		}
		var widthInCols = this.padWidth;
		var requiredCols = 1;
		while(widthInCols < width) {
			++requiredCols;
			widthInCols += this.padWidth + this.margin * 2;
		}
		var heightInRows = this.padHeight;
		var requiredRows = 1;
		while(heightInRows < height) {
			++requiredRows;
			heightInRows += this.padHeight + this.margin * 2;
		}
		var _g = 0;
		var _g1 = this.numRows - requiredRows + 1;
		while(_g < _g1) {
			var row = _g++;
			var _g2 = 0;
			var _g3 = this.numCols - requiredCols + 1;
			while(_g2 < _g3) {
				var col = _g2++;
				var areaAvailable = true;
				var _g4 = row;
				var _g5 = row + requiredRows;
				while(_g4 < _g5) {
					var r = _g4++;
					var _g6 = col;
					var _g7 = col + requiredCols;
					while(_g6 < _g7) {
						var c = _g6++;
						if(this.areas[r * this.numCols + c] != null) {
							areaAvailable = false;
							break;
						}
					}
					if(!areaAvailable) {
						break;
					}
				}
				if(areaAvailable) {
					var tile = new ceramic__$TextureTilePacker_PackedTextureTile(this.texture,col * padWidthWithMargin,row * padHeightWithMargin,width,height);
					tile.col = col;
					tile.row = row;
					tile.usedCols = requiredCols;
					tile.usedRows = requiredRows;
					var _g8 = row;
					var _g9 = row + requiredRows;
					while(_g8 < _g9) {
						var r1 = _g8++;
						var _g10 = col;
						var _g11 = col + requiredCols;
						while(_g10 < _g11) {
							var c1 = _g10++;
							this.areas[r1 * this.numCols + c1] = tile;
						}
					}
					return tile;
				}
			}
		}
		if(this.nextPacker == null) {
			this.nextPacker = new ceramic_TextureTilePacker(this.texture.autoRender,this.maxPixelTextureWidth,this.maxPixelTextureHeight,this.padWidth,this.padHeight,this.margin);
		}
		return this.nextPacker.allocTile(width,height);
	}
	,releaseTile: function(tile) {
		var _gthis = this;
		ceramic_App.app.logger.info("release tile " + Std.string(tile),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextureTilePacker.hx", lineNumber : 198, className : "ceramic.TextureTilePacker", methodName : "releaseTile"});
		if(!((tile) instanceof ceramic__$TextureTilePacker_PackedTextureTile)) {
			throw haxe_Exception.thrown("Cannot release tile: " + Std.string(tile) + ".");
		}
		var packedTile = tile;
		var packer = this;
		while(packer != null && packer.texture != packedTile.texture) packer = packer.nextPacker;
		if(packer == null) {
			ceramic_App.app.logger.warning("Failed to release tile: " + Std.string(packedTile) + " (it doesn't belong to this packer)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextureTilePacker.hx", lineNumber : 213, className : "ceramic.TextureTilePacker", methodName : "releaseTile"});
			return;
		}
		ceramic_App.app.onceUpdate(this,function(_) {
			ceramic_App.app.onceUpdate(_gthis,function(_) {
				var didRelease = false;
				var _g = packedTile.row;
				var _g1 = packedTile.row + packedTile.usedRows;
				while(_g < _g1) {
					var r = _g++;
					var _g2 = packedTile.col;
					var _g3 = packedTile.col + packedTile.usedCols;
					while(_g2 < _g3) {
						var c = _g2++;
						if(packer.areas[r * packer.numCols + c] == packedTile) {
							didRelease = true;
							packer.areas[r * packer.numCols + c] = null;
						}
					}
				}
				packedTile.texture = null;
				if(!didRelease) {
					ceramic_App.app.logger.warning("Failed to release tile: " + Std.string(packedTile) + " (did not find it)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TextureTilePacker.hx", lineNumber : 234, className : "ceramic.TextureTilePacker", methodName : "releaseTile"});
				}
			});
		});
	}
	,stamp: function(tile,visual,done) {
		var stampVisual = new ceramic_Quad();
		stampVisual.set_anchorX(0);
		stampVisual.set_anchorY(0);
		var height = tile.frameHeight + this.margin * 2;
		stampVisual.set_width(tile.frameWidth + this.margin * 2);
		stampVisual.set_height(height);
		var y = tile.frameY - this.margin;
		stampVisual.set_x(tile.frameX - this.margin);
		stampVisual.set_y(y);
		stampVisual.set_blending(4);
		if(stampVisual.inheritAlpha != false) {
			stampVisual.inheritAlpha = false;
			stampVisual.visibilityDirty = true;
			if(stampVisual.children != null) {
				var _g = 0;
				var _g1 = stampVisual.children.length;
				while(_g < _g1) {
					var i = _g++;
					var child = stampVisual.children[i];
					child.visibilityDirty = true;
					if(child.children != null) {
						var _g2 = 0;
						var _g3 = child.children.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var child1 = child.children[i1];
							child1.set_visibilityDirty(true);
						}
					}
				}
			}
		}
		stampVisual.set_alpha(0);
		stampVisual.color = 16777215;
		var prevTransform = visual.transform;
		var prevParent = visual.parent;
		if(prevParent != null) {
			prevParent.remove(visual);
		}
		stampVisual.add(visual);
		visual.set_transform(new ceramic_Transform());
		var _this = visual.transform;
		_this.tx += this.margin;
		_this.ty += this.margin;
		_this.changedDirty = true;
		var dynTexture = tile.texture;
		dynTexture.stamp(stampVisual,function() {
			stampVisual.remove(visual);
			if(prevParent != null) {
				prevParent.add(visual);
			}
			stampVisual.destroy();
			stampVisual = null;
			visual.set_transform(prevTransform);
			visual = null;
			done();
			done = null;
		});
	}
	,managesTexture: function(texture) {
		if(this.texture != texture) {
			if(this.nextPacker != null) {
				return this.nextPacker.managesTexture(texture);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: ceramic_TextureTilePacker
});
var ceramic__$TextureTilePacker_PackedTextureTile = function(texture,frameX,frameY,frameWidth,frameHeight) {
	this.usedRows = 1;
	this.usedCols = 1;
	this.row = -1;
	this.col = -1;
	ceramic_TextureTile.call(this,texture,frameX,frameY,frameWidth,frameHeight);
};
$hxClasses["ceramic._TextureTilePacker.PackedTextureTile"] = ceramic__$TextureTilePacker_PackedTextureTile;
ceramic__$TextureTilePacker_PackedTextureTile.__name__ = "ceramic._TextureTilePacker.PackedTextureTile";
ceramic__$TextureTilePacker_PackedTextureTile.__super__ = ceramic_TextureTile;
ceramic__$TextureTilePacker_PackedTextureTile.prototype = $extend(ceramic_TextureTile.prototype,{
	col: null
	,row: null
	,usedCols: null
	,usedRows: null
	,__class__: ceramic__$TextureTilePacker_PackedTextureTile
});
var ceramic_TileSlope = function(index,rotation,y0,y1) {
	this.index = index;
	this.rotation = rotation;
	this.y0 = y0;
	this.y1 = y1;
};
$hxClasses["ceramic.TileSlope"] = ceramic_TileSlope;
ceramic_TileSlope.__name__ = "ceramic.TileSlope";
ceramic_TileSlope.prototype = {
	index: null
	,rotation: null
	,y0: null
	,y1: null
	,__class__: ceramic_TileSlope
};
var ceramic_Tilemap = function() {
	this.layers = [];
	this.clipTilesHeight = -1;
	this.clipTilesWidth = -1;
	this.clipTilesY = -1;
	this.clipTilesX = -1;
	this.tileScale = 1.0;
	this.tilemapData = null;
	this.roundTilesTranslation = 1;
	ceramic_Quad.call(this);
	this.flags |= 16;
};
$hxClasses["ceramic.Tilemap"] = ceramic_Tilemap;
ceramic_Tilemap.__name__ = "ceramic.Tilemap";
ceramic_Tilemap.__super__ = ceramic_Quad;
ceramic_Tilemap.prototype = $extend(ceramic_Quad.prototype,{
	__cbOnCreateLayer: null
	,__cbOnceCreateLayer: null
	,__cbOnOwnerUnbindCreateLayer: null
	,__cbOnceOwnerUnbindCreateLayer: null
	,emitCreateLayer: function(tilemap,layer) {
		var len = 0;
		if(this.__cbOnCreateLayer != null) {
			len += this.__cbOnCreateLayer.length;
		}
		if(this.__cbOnceCreateLayer != null) {
			len += this.__cbOnceCreateLayer.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCreateLayer != null) {
				var _g = 0;
				var _g1 = this.__cbOnCreateLayer.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnCreateLayer[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceCreateLayer != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceCreateLayer.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceCreateLayer[ii];
						this.__cbOnceCreateLayer[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindCreateLayer[ii];
						this.__cbOnceOwnerUnbindCreateLayer[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindCreateLayer[ii]);
						newCbOnceArray.push(this.__cbOnceCreateLayer[ii]);
					}
				}
				this.__cbOnceOwnerUnbindCreateLayer = newCbOnceOwnerUnbindArray;
				this.__cbOnceCreateLayer = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(tilemap,layer);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCreateLayer: function(owner,handleTilemapLayer) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createLayer" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTilemapLayer != null) {
					_gthis.offCreateLayer(handleTilemapLayer);
					handleTilemapLayer = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCreateLayer == null) {
				this.__cbOnOwnerUnbindCreateLayer = [];
			}
			this.__cbOnOwnerUnbindCreateLayer.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTilemapLayer = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCreateLayer == null) {
				this.__cbOnOwnerUnbindCreateLayer = [];
			}
			this.__cbOnOwnerUnbindCreateLayer.push(null);
		}
		if(this.__cbOnCreateLayer == null) {
			this.__cbOnCreateLayer = [];
		}
		this.__cbOnCreateLayer.push(handleTilemapLayer);
	}
	,onceCreateLayer: function(owner,handleTilemapLayer) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createLayer" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTilemapLayer != null) {
					_gthis.offCreateLayer(handleTilemapLayer);
					handleTilemapLayer = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCreateLayer == null) {
				this.__cbOnceOwnerUnbindCreateLayer = [];
			}
			this.__cbOnceOwnerUnbindCreateLayer.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTilemapLayer = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCreateLayer == null) {
				this.__cbOnceOwnerUnbindCreateLayer = [];
			}
			this.__cbOnceOwnerUnbindCreateLayer.push(null);
		}
		if(this.__cbOnceCreateLayer == null) {
			this.__cbOnceCreateLayer = [];
		}
		this.__cbOnceCreateLayer.push(handleTilemapLayer);
	}
	,offCreateLayer: function(handleTilemapLayer) {
		if(handleTilemapLayer != null) {
			var index;
			var unbind;
			if(this.__cbOnCreateLayer != null) {
				index = this.__cbOnCreateLayer.indexOf(handleTilemapLayer);
				if(index != -1) {
					this.__cbOnCreateLayer.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCreateLayer[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCreateLayer.splice(index,1);
				}
			}
			if(this.__cbOnceCreateLayer != null) {
				index = this.__cbOnceCreateLayer.indexOf(handleTilemapLayer);
				if(index != -1) {
					this.__cbOnceCreateLayer.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCreateLayer[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCreateLayer.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCreateLayer != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCreateLayer.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCreateLayer[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCreateLayer = null;
			}
			if(this.__cbOnceOwnerUnbindCreateLayer != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCreateLayer.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCreateLayer[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCreateLayer = null;
			}
			this.__cbOnCreateLayer = null;
			this.__cbOnceCreateLayer = null;
		}
	}
	,listensCreateLayer: function() {
		if(!(this.__cbOnCreateLayer != null && this.__cbOnCreateLayer.length > 0)) {
			if(this.__cbOnceCreateLayer != null) {
				return this.__cbOnceCreateLayer.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,roundTilesTranslation: null
	,set_roundTilesTranslation: function(roundTilesTranslation) {
		if(this.roundTilesTranslation == roundTilesTranslation) {
			return roundTilesTranslation;
		}
		this.roundTilesTranslation = roundTilesTranslation;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			layer.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return roundTilesTranslation;
	}
	,tilemapData: null
	,set_tilemapData: function(tilemapData) {
		if(this.tilemapData == tilemapData) {
			return tilemapData;
		}
		this.tilemapData = tilemapData;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			layer.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return tilemapData;
	}
	,tileScale: null
	,set_tileScale: function(tileScale) {
		if(this.tileScale == tileScale) {
			return tileScale;
		}
		this.tileScale = tileScale;
		if(tileScale != -1) {
			var _g = 0;
			var _g1 = this.layers.length;
			while(_g < _g1) {
				var i = _g++;
				this.layers[i].set_tileScale(tileScale);
			}
		}
		return tileScale;
	}
	,clipTilesX: null
	,set_clipTilesX: function(clipTilesX) {
		if(this.clipTilesX == clipTilesX) {
			return clipTilesX;
		}
		this.clipTilesX = clipTilesX;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			layer.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return clipTilesX;
	}
	,clipTilesY: null
	,set_clipTilesY: function(clipTilesY) {
		if(this.clipTilesY == clipTilesY) {
			return clipTilesY;
		}
		this.clipTilesY = clipTilesY;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			layer.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return clipTilesY;
	}
	,clipTilesWidth: null
	,set_clipTilesWidth: function(clipTilesWidth) {
		if(this.clipTilesWidth == clipTilesWidth) {
			return clipTilesWidth;
		}
		this.clipTilesWidth = clipTilesWidth;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			layer.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return clipTilesWidth;
	}
	,clipTilesHeight: null
	,set_clipTilesHeight: function(clipTilesHeight) {
		if(this.clipTilesHeight == clipTilesHeight) {
			return clipTilesHeight;
		}
		this.clipTilesHeight = clipTilesHeight;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			layer.contentDirty = true;
			ceramic_App.app.visualsContentDirty = true;
		}
		return clipTilesHeight;
	}
	,layers: null
	,get_width: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Quad.prototype.get_width.call(this);
	}
	,get_height: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Quad.prototype.get_height.call(this);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		var layers = this.layers;
		if(layers != null) {
			layers = [].concat(layers);
			var _g = 0;
			var _g1 = layers.length;
			while(_g < _g1) {
				var i = _g++;
				var layer = layers[i];
				layer.destroy();
			}
		}
		this._lifecycleState = -1;
		ceramic_Quad.prototype.destroy.call(this);
	}
	,computeContent: function() {
		if(this.tilemapData == null) {
			this.set_width(0);
			this.set_height(0);
			this.flags |= 16;
			this.color = 16777215;
			this.contentDirty = false;
			return;
		}
		var width = this.tilemapData.get_width();
		var height = this.tilemapData.get_height();
		this.set_width(width);
		this.set_height(height);
		if(this.tilemapData.get_backgroundColor() != -1 && (this.tilemapData.get_backgroundColor() >> 24 & 255) > 0) {
			this.flags &= -17;
			this.set_alpha((this.tilemapData.get_backgroundColor() >> 24 & 255) / 255);
			var this1 = this.tilemapData.get_backgroundColor();
			var red = this1 >> 16 & 255;
			var green = this1 >> 8 & 255;
			var blue = this1 & 255;
			var color = 0;
			color &= 65535;
			color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
			color &= 16711935;
			color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
			color &= 16776960;
			color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
			this.color = color;
		} else {
			this.flags |= 16;
			this.color = 16777215;
		}
		this.computeLayers();
		this.contentDirty = false;
	}
	,computeLayers: function() {
		var usedLayers = 0;
		var tileScale = this.tileScale;
		var _g = 0;
		var _g1 = this.tilemapData.get_layers().length;
		while(_g < _g1) {
			var l = _g++;
			var layerData = this.tilemapData.get_layers()[l];
			var isNew = false;
			var layer = usedLayers < this.layers.length ? this.layers[usedLayers] : null;
			if(layer == null) {
				isNew = true;
				layer = new ceramic_TilemapLayer();
				layer.tilemap = this;
				if(tileScale != -1) {
					layer.set_tileScale(tileScale);
				}
				layer.set_depthRange(1);
				this.layers.push(layer);
				this.add(layer);
			}
			++usedLayers;
			if(layerData.get_explicitDepth() != null) {
				layer.set_depth(layerData.get_explicitDepth());
			} else {
				layer.set_depth(l + 1);
			}
			layer.set_layerData(layerData);
			if(isNew) {
				this.emitCreateLayer(this,layer);
			}
		}
		while(usedLayers < this.layers.length) {
			var layer = this.layers.pop();
			layer.destroy();
		}
	}
	,clipTiles: function(clipTilesX,clipTilesY,clipTilesWidth,clipTilesHeight) {
		this.set_clipTilesX(clipTilesX);
		this.set_clipTilesY(clipTilesY);
		this.set_clipTilesWidth(clipTilesWidth);
		this.set_clipTilesHeight(clipTilesHeight);
	}
	,layer: function(name) {
		if(this.contentDirty) {
			this.computeContent();
		}
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = this.layers[i];
			var layerData = layer.layerData;
			if(layerData != null && layerData.get_name() == name) {
				return layer;
			}
		}
		return null;
	}
	,unbindEvents: function() {
		ceramic_Quad.prototype.unbindEvents.call(this);
		this.offCreateLayer();
	}
	,__class__: ceramic_Tilemap
	,__properties__: $extend(ceramic_Quad.prototype.__properties__,{set_clipTilesHeight:"set_clipTilesHeight",set_clipTilesWidth:"set_clipTilesWidth",set_clipTilesY:"set_clipTilesY",set_clipTilesX:"set_clipTilesX",set_tileScale:"set_tileScale",set_tilemapData:"set_tilemapData",set_roundTilesTranslation:"set_roundTilesTranslation"})
});
var ceramic_TilemapAsset = function(name,options) {
	this.tsxRawData = null;
	this.unobservedTilemapData = null;
	this.tilemapDataAutoruns = null;
	this.unobservedTmxMap = null;
	this.tmxMapAutoruns = null;
	ceramic_Asset.call(this,"tilemap",name,options);
	this.set_handleTexturesDensityChange(false);
	this.assets = new ceramic_Assets();
};
$hxClasses["ceramic.TilemapAsset"] = ceramic_TilemapAsset;
ceramic_TilemapAsset.__name__ = "ceramic.TilemapAsset";
ceramic_TilemapAsset.__super__ = ceramic_Asset;
ceramic_TilemapAsset.prototype = $extend(ceramic_Asset.prototype,{
	tmxMapAutoruns: null
	,get_tmxMap: function() {
		var value = this.unobservedTmxMap;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tmxMapAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tmxMapAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tmxMap: function(tmxMap) {
		var prevValue = this.unobservedTmxMap;
		this.unobservedTmxMap = tmxMap;
		if(prevValue == tmxMap) {
			return tmxMap;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTmxMapChange(tmxMap,prevValue);
		var fieldAutoruns = this.tmxMapAutoruns;
		if(fieldAutoruns != null) {
			this.tmxMapAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tmxMap;
	}
	,invalidateTmxMap: function() {
		var value = this.unobservedTmxMap;
		this.emitTmxMapChange(value,value);
		var fieldAutoruns = this.tmxMapAutoruns;
		if(fieldAutoruns != null) {
			this.tmxMapAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTmxMap: null
	,__cbOnTmxMapChange: null
	,__cbOnceTmxMapChange: null
	,__cbOnOwnerUnbindTmxMapChange: null
	,__cbOnceOwnerUnbindTmxMapChange: null
	,emitTmxMapChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTmxMapChange != null) {
			len += this.__cbOnTmxMapChange.length;
		}
		if(this.__cbOnceTmxMapChange != null) {
			len += this.__cbOnceTmxMapChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTmxMapChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTmxMapChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTmxMapChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTmxMapChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTmxMapChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTmxMapChange[ii];
						this.__cbOnceTmxMapChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTmxMapChange[ii];
						this.__cbOnceOwnerUnbindTmxMapChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTmxMapChange[ii]);
						newCbOnceArray.push(this.__cbOnceTmxMapChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTmxMapChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTmxMapChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTmxMapChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tmxMapChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTmxMapChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTmxMapChange == null) {
				this.__cbOnOwnerUnbindTmxMapChange = [];
			}
			this.__cbOnOwnerUnbindTmxMapChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTmxMapChange == null) {
				this.__cbOnOwnerUnbindTmxMapChange = [];
			}
			this.__cbOnOwnerUnbindTmxMapChange.push(null);
		}
		if(this.__cbOnTmxMapChange == null) {
			this.__cbOnTmxMapChange = [];
		}
		this.__cbOnTmxMapChange.push(handleCurrentPrevious);
	}
	,onceTmxMapChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tmxMapChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTmxMapChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTmxMapChange == null) {
				this.__cbOnceOwnerUnbindTmxMapChange = [];
			}
			this.__cbOnceOwnerUnbindTmxMapChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTmxMapChange == null) {
				this.__cbOnceOwnerUnbindTmxMapChange = [];
			}
			this.__cbOnceOwnerUnbindTmxMapChange.push(null);
		}
		if(this.__cbOnceTmxMapChange == null) {
			this.__cbOnceTmxMapChange = [];
		}
		this.__cbOnceTmxMapChange.push(handleCurrentPrevious);
	}
	,offTmxMapChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTmxMapChange != null) {
				index = this.__cbOnTmxMapChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTmxMapChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTmxMapChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTmxMapChange.splice(index,1);
				}
			}
			if(this.__cbOnceTmxMapChange != null) {
				index = this.__cbOnceTmxMapChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTmxMapChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTmxMapChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTmxMapChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTmxMapChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTmxMapChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTmxMapChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTmxMapChange = null;
			}
			if(this.__cbOnceOwnerUnbindTmxMapChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTmxMapChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTmxMapChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTmxMapChange = null;
			}
			this.__cbOnTmxMapChange = null;
			this.__cbOnceTmxMapChange = null;
		}
	}
	,listensTmxMapChange: function() {
		if(!(this.__cbOnTmxMapChange != null && this.__cbOnTmxMapChange.length > 0)) {
			if(this.__cbOnceTmxMapChange != null) {
				return this.__cbOnceTmxMapChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tilemapDataAutoruns: null
	,get_tilemapData: function() {
		var value = this.unobservedTilemapData;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tilemapDataAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tilemapDataAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tilemapData: function(tilemapData) {
		var prevValue = this.unobservedTilemapData;
		this.unobservedTilemapData = tilemapData;
		if(prevValue == tilemapData) {
			return tilemapData;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitTilemapDataChange(tilemapData,prevValue);
		var fieldAutoruns = this.tilemapDataAutoruns;
		if(fieldAutoruns != null) {
			this.tilemapDataAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tilemapData;
	}
	,invalidateTilemapData: function() {
		var value = this.unobservedTilemapData;
		this.emitTilemapDataChange(value,value);
		var fieldAutoruns = this.tilemapDataAutoruns;
		if(fieldAutoruns != null) {
			this.tilemapDataAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTilemapData: null
	,__cbOnTilemapDataChange: null
	,__cbOnceTilemapDataChange: null
	,__cbOnOwnerUnbindTilemapDataChange: null
	,__cbOnceOwnerUnbindTilemapDataChange: null
	,emitTilemapDataChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTilemapDataChange != null) {
			len += this.__cbOnTilemapDataChange.length;
		}
		if(this.__cbOnceTilemapDataChange != null) {
			len += this.__cbOnceTilemapDataChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTilemapDataChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTilemapDataChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTilemapDataChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTilemapDataChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTilemapDataChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTilemapDataChange[ii];
						this.__cbOnceTilemapDataChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTilemapDataChange[ii];
						this.__cbOnceOwnerUnbindTilemapDataChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTilemapDataChange[ii]);
						newCbOnceArray.push(this.__cbOnceTilemapDataChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTilemapDataChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTilemapDataChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTilemapDataChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tilemapDataChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTilemapDataChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTilemapDataChange == null) {
				this.__cbOnOwnerUnbindTilemapDataChange = [];
			}
			this.__cbOnOwnerUnbindTilemapDataChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTilemapDataChange == null) {
				this.__cbOnOwnerUnbindTilemapDataChange = [];
			}
			this.__cbOnOwnerUnbindTilemapDataChange.push(null);
		}
		if(this.__cbOnTilemapDataChange == null) {
			this.__cbOnTilemapDataChange = [];
		}
		this.__cbOnTilemapDataChange.push(handleCurrentPrevious);
	}
	,onceTilemapDataChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tilemapDataChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTilemapDataChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTilemapDataChange == null) {
				this.__cbOnceOwnerUnbindTilemapDataChange = [];
			}
			this.__cbOnceOwnerUnbindTilemapDataChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTilemapDataChange == null) {
				this.__cbOnceOwnerUnbindTilemapDataChange = [];
			}
			this.__cbOnceOwnerUnbindTilemapDataChange.push(null);
		}
		if(this.__cbOnceTilemapDataChange == null) {
			this.__cbOnceTilemapDataChange = [];
		}
		this.__cbOnceTilemapDataChange.push(handleCurrentPrevious);
	}
	,offTilemapDataChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTilemapDataChange != null) {
				index = this.__cbOnTilemapDataChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTilemapDataChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTilemapDataChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTilemapDataChange.splice(index,1);
				}
			}
			if(this.__cbOnceTilemapDataChange != null) {
				index = this.__cbOnceTilemapDataChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTilemapDataChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTilemapDataChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTilemapDataChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTilemapDataChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTilemapDataChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTilemapDataChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTilemapDataChange = null;
			}
			if(this.__cbOnceOwnerUnbindTilemapDataChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTilemapDataChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTilemapDataChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTilemapDataChange = null;
			}
			this.__cbOnTilemapDataChange = null;
			this.__cbOnceTilemapDataChange = null;
		}
	}
	,listensTilemapDataChange: function() {
		if(!(this.__cbOnTilemapDataChange != null && this.__cbOnTilemapDataChange.length > 0)) {
			if(this.__cbOnceTilemapDataChange != null) {
				return this.__cbOnceTilemapDataChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tsxRawData: null
	,load: function() {
		if(this.owner != null) {
			this.assets.inheritRuntimeAssetsFromAssets(this.owner);
			this.assets.loadMethod = this.owner.loadMethod;
			this.assets.scheduleMethod = this.owner.scheduleMethod;
			this.assets.delayBetweenXAssets = this.owner.delayBetweenXAssets;
		}
		this.set_status(ceramic_AssetStatus.LOADING);
		ceramic_App.app.logger.info("Load tilemap " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 76, className : "ceramic.TilemapAsset", methodName : "load"});
		this.assets.runtimeAssets = this.runtimeAssets;
		var isTiledMap = StringTools.endsWith(this.path.toLowerCase(),".tmx");
		if(isTiledMap) {
			this.loadTmxTiledMap();
		} else {
			this.set_status(ceramic_AssetStatus.BROKEN);
			ceramic_App.app.logger.error("Unknown format for tilemap data at path: " + this.path,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 97, className : "ceramic.TilemapAsset", methodName : "load"});
			this.emitComplete(false);
		}
	}
	,loadTmxTiledMap: function() {
		var _gthis = this;
		var tmxAsset = new ceramic_TextAsset(this.path);
		var prevAsset = this.assets.addAsset(tmxAsset);
		tmxAsset.computePath(["tmx"],false,this.runtimeAssets);
		if(prevAsset != null) {
			prevAsset.destroy();
		}
		this.assets.onceComplete(this,function(success) {
			var rawTmxData = tmxAsset.get_text();
			tmxAsset.destroy();
			if(rawTmxData != null && rawTmxData.length > 0) {
				_gthis.loadExternalTsxTilesetData(rawTmxData,function(isSuccess) {
					if(isSuccess) {
						var tilemapParser = ceramic_TilemapPlugin.getTilemapParser(_gthis.owner);
						_gthis.set_tmxMap(tilemapParser.parseTmx(rawTmxData,ceramic_Path.directory(_gthis.path),$bind(_gthis,_gthis.resolveTsxRawData)));
						_gthis.set_tilemapData(tilemapParser.tmxMapToTilemapData(_gthis.get_tmxMap(),$bind(_gthis,_gthis.loadTextureFromSource)));
						if(_gthis.get_tilemapData() != null) {
							_gthis.get_tilemapData().asset = _gthis;
							_gthis.assets.onceComplete(_gthis,function(isSuccess) {
								if(isSuccess) {
									_gthis.set_status(ceramic_AssetStatus.READY);
									_gthis.emitComplete(true);
									if(_gthis.handleTexturesDensityChange) {
										_gthis.checkTexturesDensity();
									}
								} else {
									_gthis.set_status(ceramic_AssetStatus.BROKEN);
									ceramic_App.app.logger.error("Failed to load tilemap textures at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 152, className : "ceramic.TilemapAsset", methodName : "loadTmxTiledMap"});
									_gthis.emitComplete(false);
								}
							});
							_gthis.assets.load(false,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 158, className : "ceramic.TilemapAsset", methodName : "loadTmxTiledMap"});
						} else {
							_gthis.set_status(ceramic_AssetStatus.BROKEN);
							ceramic_App.app.logger.error("Failed to load tilemap data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 163, className : "ceramic.TilemapAsset", methodName : "loadTmxTiledMap"});
							_gthis.emitComplete(false);
						}
					} else {
						_gthis.set_status(ceramic_AssetStatus.BROKEN);
						ceramic_App.app.logger.error("Failed to load external tilesets of map: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 170, className : "ceramic.TilemapAsset", methodName : "loadTmxTiledMap"});
						_gthis.emitComplete(false);
					}
				});
			} else {
				_gthis.set_status(ceramic_AssetStatus.BROKEN);
				ceramic_App.app.logger.error("Failed to load raw tilemap data at path: " + _gthis.path,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 179, className : "ceramic.TilemapAsset", methodName : "loadTmxTiledMap"});
				_gthis.emitComplete(false);
			}
		});
		this.assets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 185, className : "ceramic.TilemapAsset", methodName : "loadTmxTiledMap"});
	}
	,loadExternalTsxTilesetData: function(rawTmxData,done) {
		var _gthis = this;
		var tilemapParser = ceramic_TilemapPlugin.getTilemapParser(this.owner);
		var rawTsxCache = ceramic_TilemapPlugin.getRawTsxCache(this.owner);
		var sources = tilemapParser.parseExternalTilesetNames(rawTmxData);
		if(sources == null || sources.length == 0) {
			done(true);
			return;
		}
		var textAssets = null;
		if(this.tsxRawData == null) {
			this.tsxRawData = new haxe_ds_StringMap();
		}
		var _g = 0;
		while(_g < sources.length) {
			var source = sources[_g];
			++_g;
			var existingData = null;
			var key = ceramic_Path.join([ceramic_Path.directory(_gthis.path),source]);
			existingData = rawTsxCache.h[key];
			if(existingData != null) {
				this.tsxRawData.h[source] = existingData;
			} else {
				if(textAssets == null) {
					textAssets = new ceramic_Assets();
				}
				this.addTilesetTextAsset(textAssets,source);
			}
		}
		if(textAssets != null) {
			textAssets.onceComplete(this,function(isSuccess) {
				if(!isSuccess) {
					textAssets.destroy();
					done(false);
					return;
				}
				var _g = 0;
				while(_g < sources.length) {
					var source = sources[_g];
					++_g;
					var pathInfo = ceramic_Assets.decodePath(ceramic_Path.join([ceramic_Path.directory(_gthis.path),source]));
					var data = textAssets.text(pathInfo.name);
					var key = ceramic_Path.join([ceramic_Path.directory(_gthis.path),source]);
					_gthis.tsxRawData.h[source] = data;
					rawTsxCache.h[key] = data;
				}
				textAssets.destroy();
				done(true);
			});
			textAssets.load(null,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 245, className : "ceramic.TilemapAsset", methodName : "loadExternalTsxTilesetData"});
		} else {
			done(true);
		}
	}
	,addTilesetTextAsset: function(textAssets,source) {
		var path = ceramic_Path.join([ceramic_Path.directory(this.path),source]);
		var pathInfo = ceramic_Assets.decodePath(path);
		var asset = new ceramic_TextAsset(pathInfo.name);
		asset.set_path(pathInfo.path);
		textAssets.addAsset(asset);
	}
	,resolveTsxRawData: function(name,cwd) {
		if(this.tsxRawData != null) {
			return this.tsxRawData.h[name];
		}
		return null;
	}
	,loadTextureFromSource: function(source,configureAsset,done) {
		var _gthis = this;
		if(source != null) {
			var pathInfo = ceramic_Assets.decodePath(ceramic_Path.join([ceramic_Path.directory(this.path),source]));
			var texture = this.owner.texture(pathInfo.name);
			if(texture == null) {
				var asset = this.owner.imageAsset(pathInfo.name);
				if(asset != null) {
					switch(asset.get_status()._hx_index) {
					case 0:case 1:
						asset.onceComplete(this,function(isSuccess) {
							if(isSuccess) {
								var texture = _gthis.owner.texture(asset.name);
								done(texture);
							} else {
								done(null);
							}
						});
						break;
					case 2:case 3:
						done(null);
						break;
					}
				} else {
					var asset1 = new ceramic_ImageAsset(pathInfo.name);
					if(configureAsset != null) {
						configureAsset(asset1);
					}
					asset1.set_handleTexturesDensityChange(true);
					asset1.onDestroy(this,function(_) {
					});
					this.assets.addAsset(asset1);
					this.assets.onceComplete(this,function(isSuccess) {
						if(isSuccess) {
							var texture = _gthis.assets.texture(asset1.name);
							texture.set_filter(ceramic_TextureFilter.NEAREST);
							_gthis.owner.addAsset(asset1);
							done(texture);
						}
					});
				}
			} else {
				done(texture);
			}
		} else {
			ceramic_App.app.logger.warning("Cannot load texture for source: " + source,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 342, className : "ceramic.TilemapAsset", methodName : "loadTextureFromSource"});
		}
	}
	,texturesDensityDidChange: function(newDensity,prevDensity) {
		if(this.get_status() == ceramic_AssetStatus.READY) {
			this.checkTexturesDensity();
		}
	}
	,checkTexturesDensity: function() {
	}
	,assetFilesDidChange: function(newFiles,previousFiles) {
		var previousTime = -1;
		if(Object.prototype.hasOwnProperty.call(previousFiles.h,this.path)) {
			previousTime = previousFiles.h[this.path];
		}
		var newTime = -1;
		if(Object.prototype.hasOwnProperty.call(newFiles.h,this.path)) {
			newTime = newFiles.h[this.path];
		}
		if(newTime > previousTime) {
			ceramic_App.app.logger.info("Reload tilemap (file has changed)",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapAsset.hx", lineNumber : 514, className : "ceramic.TilemapAsset", methodName : "assetFilesDidChange"});
			this.load();
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		ceramic_Asset.prototype.destroy.call(this);
		if(this.get_tilemapData() != null) {
			this.get_tilemapData().destroy();
			this.set_tilemapData(null);
		}
		if(this.get_tmxMap() != null) {
			this.set_tmxMap(null);
		}
	}
	,unbindEvents: function() {
		ceramic_Asset.prototype.unbindEvents.call(this);
		this.offTmxMapChange();
		this.offTilemapDataChange();
	}
	,__class__: ceramic_TilemapAsset
	,__properties__: $extend(ceramic_Asset.prototype.__properties__,{set_tilemapData:"set_tilemapData",get_tilemapData:"get_tilemapData",set_tmxMap:"set_tmxMap",get_tmxMap:"get_tmxMap"})
});
var tracker_Serializable = function() { };
$hxClasses["tracker.Serializable"] = tracker_Serializable;
tracker_Serializable.__name__ = "tracker.Serializable";
tracker_Serializable.__isInterface__ = true;
tracker_Serializable.prototype = {
	_serializeId: null
	,willSerialize: null
	,didDeserialize: null
	,serializeShouldDestroy: null
	,__class__: tracker_Serializable
};
var tracker_Model = function() {
	this._serializeId = tracker_Utils.uniqueId();
	this.dirty = false;
	this.observedDirty = false;
	ceramic_Entity.call(this);
};
$hxClasses["tracker.Model"] = tracker_Model;
tracker_Model.__name__ = "tracker.Model";
tracker_Model.__interfaces__ = [tracker_Serializable,tracker_Observable];
tracker_Model.__super__ = ceramic_Entity;
tracker_Model.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnObservedDirty: null
	,__cbOnceObservedDirty: null
	,__cbOnOwnerUnbindObservedDirty: null
	,__cbOnceOwnerUnbindObservedDirty: null
	,emitObservedDirty: function(instance,fromSerializedField) {
		var len = 0;
		if(this.__cbOnObservedDirty != null) {
			len += this.__cbOnObservedDirty.length;
		}
		if(this.__cbOnceObservedDirty != null) {
			len += this.__cbOnceObservedDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnObservedDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceObservedDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceObservedDirty[ii];
						this.__cbOnceObservedDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindObservedDirty[ii];
						this.__cbOnceOwnerUnbindObservedDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindObservedDirty[ii]);
						newCbOnceArray.push(this.__cbOnceObservedDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceObservedDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(instance,fromSerializedField);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty == null) {
				this.__cbOnOwnerUnbindObservedDirty = [];
			}
			this.__cbOnOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnObservedDirty == null) {
			this.__cbOnObservedDirty = [];
		}
		this.__cbOnObservedDirty.push(handleInstanceFromSerializedField);
	}
	,onceObservedDirty: function(owner,handleInstanceFromSerializedField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "observedDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleInstanceFromSerializedField != null) {
					_gthis.offObservedDirty(handleInstanceFromSerializedField);
					handleInstanceFromSerializedField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleInstanceFromSerializedField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindObservedDirty == null) {
				this.__cbOnceOwnerUnbindObservedDirty = [];
			}
			this.__cbOnceOwnerUnbindObservedDirty.push(null);
		}
		if(this.__cbOnceObservedDirty == null) {
			this.__cbOnceObservedDirty = [];
		}
		this.__cbOnceObservedDirty.push(handleInstanceFromSerializedField);
	}
	,offObservedDirty: function(handleInstanceFromSerializedField) {
		if(handleInstanceFromSerializedField != null) {
			var index;
			var unbind;
			if(this.__cbOnObservedDirty != null) {
				index = this.__cbOnObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnObservedDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindObservedDirty.splice(index,1);
				}
			}
			if(this.__cbOnceObservedDirty != null) {
				index = this.__cbOnceObservedDirty.indexOf(handleInstanceFromSerializedField);
				if(index != -1) {
					this.__cbOnceObservedDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindObservedDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindObservedDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindObservedDirty = null;
			}
			if(this.__cbOnceOwnerUnbindObservedDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindObservedDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindObservedDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindObservedDirty = null;
			}
			this.__cbOnObservedDirty = null;
			this.__cbOnceObservedDirty = null;
		}
	}
	,listensObservedDirty: function() {
		if(!(this.__cbOnObservedDirty != null && this.__cbOnObservedDirty.length > 0)) {
			if(this.__cbOnceObservedDirty != null) {
				return this.__cbOnceObservedDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,observedDirty: null
	,__cbOnModelDirty: null
	,__cbOnceModelDirty: null
	,__cbOnOwnerUnbindModelDirty: null
	,__cbOnceOwnerUnbindModelDirty: null
	,emitModelDirty: function(model) {
		var len = 0;
		if(this.__cbOnModelDirty != null) {
			len += this.__cbOnModelDirty.length;
		}
		if(this.__cbOnceModelDirty != null) {
			len += this.__cbOnceModelDirty.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnModelDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnModelDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnModelDirty[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceModelDirty != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceModelDirty.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceModelDirty[ii];
						this.__cbOnceModelDirty[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindModelDirty[ii];
						this.__cbOnceOwnerUnbindModelDirty[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindModelDirty[ii]);
						newCbOnceArray.push(this.__cbOnceModelDirty[ii]);
					}
				}
				this.__cbOnceOwnerUnbindModelDirty = newCbOnceOwnerUnbindArray;
				this.__cbOnceModelDirty = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(model);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onModelDirty: function(owner,handleModel) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "modelDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleModel != null) {
					_gthis.offModelDirty(handleModel);
					handleModel = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindModelDirty == null) {
				this.__cbOnOwnerUnbindModelDirty = [];
			}
			this.__cbOnOwnerUnbindModelDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleModel = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindModelDirty == null) {
				this.__cbOnOwnerUnbindModelDirty = [];
			}
			this.__cbOnOwnerUnbindModelDirty.push(null);
		}
		if(this.__cbOnModelDirty == null) {
			this.__cbOnModelDirty = [];
		}
		this.__cbOnModelDirty.push(handleModel);
	}
	,onceModelDirty: function(owner,handleModel) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "modelDirty" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleModel != null) {
					_gthis.offModelDirty(handleModel);
					handleModel = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindModelDirty == null) {
				this.__cbOnceOwnerUnbindModelDirty = [];
			}
			this.__cbOnceOwnerUnbindModelDirty.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleModel = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindModelDirty == null) {
				this.__cbOnceOwnerUnbindModelDirty = [];
			}
			this.__cbOnceOwnerUnbindModelDirty.push(null);
		}
		if(this.__cbOnceModelDirty == null) {
			this.__cbOnceModelDirty = [];
		}
		this.__cbOnceModelDirty.push(handleModel);
	}
	,offModelDirty: function(handleModel) {
		if(handleModel != null) {
			var index;
			var unbind;
			if(this.__cbOnModelDirty != null) {
				index = this.__cbOnModelDirty.indexOf(handleModel);
				if(index != -1) {
					this.__cbOnModelDirty.splice(index,1);
					unbind = this.__cbOnOwnerUnbindModelDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindModelDirty.splice(index,1);
				}
			}
			if(this.__cbOnceModelDirty != null) {
				index = this.__cbOnceModelDirty.indexOf(handleModel);
				if(index != -1) {
					this.__cbOnceModelDirty.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindModelDirty[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindModelDirty.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindModelDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindModelDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindModelDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindModelDirty = null;
			}
			if(this.__cbOnceOwnerUnbindModelDirty != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindModelDirty.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindModelDirty[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindModelDirty = null;
			}
			this.__cbOnModelDirty = null;
			this.__cbOnceModelDirty = null;
		}
	}
	,listensModelDirty: function() {
		if(!(this.__cbOnModelDirty != null && this.__cbOnModelDirty.length > 0)) {
			if(this.__cbOnceModelDirty != null) {
				return this.__cbOnceModelDirty.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,serializer: null
	,set_serializer: function(serializer) {
		if(this.serializer == serializer) {
			return this.serializer;
		}
		if(this.serializer != null) {
			this.serializer.destroy();
		}
		this.serializer = serializer;
		if(this.serializer != null) {
			this.component("serializer",this.serializer);
			return this.serializer;
		}
		this.removeComponent("serializer");
		return null;
	}
	,dirty: null
	,set_dirty: function(dirty) {
		if(dirty == this.dirty) {
			return dirty;
		}
		this.dirty = dirty;
		if(dirty) {
			this.emitModelDirty(this);
		}
		return dirty;
	}
	,willSerialize: function() {
	}
	,didDeserialize: function() {
	}
	,serializeShouldDestroy: function() {
		return true;
	}
	,hxSerialize: function(s) {
		s.serialize(tracker_Serialize.serializeValue(this));
	}
	,hxUnserialize: function(u) {
		tracker_Serialize.deserializeValue(u.unserialize(),this);
	}
	,_default_dirty: function() {
		return false;
	}
	,_serializeId: null
	,__cbOnSerialize: null
	,__cbOnceSerialize: null
	,__cbOnOwnerUnbindSerialize: null
	,__cbOnceOwnerUnbindSerialize: null
	,emitSerialize: function() {
		var len = 0;
		if(this.__cbOnSerialize != null) {
			len += this.__cbOnSerialize.length;
		}
		if(this.__cbOnceSerialize != null) {
			len += this.__cbOnceSerialize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSerialize != null) {
				var _g = 0;
				var _g1 = this.__cbOnSerialize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSerialize[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSerialize != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSerialize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSerialize[ii];
						this.__cbOnceSerialize[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSerialize[ii];
						this.__cbOnceOwnerUnbindSerialize[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSerialize[ii]);
						newCbOnceArray.push(this.__cbOnceSerialize[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSerialize = newCbOnceOwnerUnbindArray;
				this.__cbOnceSerialize = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSerialize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "serialize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offSerialize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSerialize == null) {
				this.__cbOnOwnerUnbindSerialize = [];
			}
			this.__cbOnOwnerUnbindSerialize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSerialize == null) {
				this.__cbOnOwnerUnbindSerialize = [];
			}
			this.__cbOnOwnerUnbindSerialize.push(null);
		}
		if(this.__cbOnSerialize == null) {
			this.__cbOnSerialize = [];
		}
		this.__cbOnSerialize.push(handle);
	}
	,onceSerialize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "serialize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offSerialize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSerialize == null) {
				this.__cbOnceOwnerUnbindSerialize = [];
			}
			this.__cbOnceOwnerUnbindSerialize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSerialize == null) {
				this.__cbOnceOwnerUnbindSerialize = [];
			}
			this.__cbOnceOwnerUnbindSerialize.push(null);
		}
		if(this.__cbOnceSerialize == null) {
			this.__cbOnceSerialize = [];
		}
		this.__cbOnceSerialize.push(handle);
	}
	,offSerialize: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnSerialize != null) {
				index = this.__cbOnSerialize.indexOf(handle);
				if(index != -1) {
					this.__cbOnSerialize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSerialize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSerialize.splice(index,1);
				}
			}
			if(this.__cbOnceSerialize != null) {
				index = this.__cbOnceSerialize.indexOf(handle);
				if(index != -1) {
					this.__cbOnceSerialize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSerialize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSerialize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSerialize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSerialize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSerialize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSerialize = null;
			}
			if(this.__cbOnceOwnerUnbindSerialize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSerialize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSerialize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSerialize = null;
			}
			this.__cbOnSerialize = null;
			this.__cbOnceSerialize = null;
		}
	}
	,listensSerialize: function() {
		if(!(this.__cbOnSerialize != null && this.__cbOnSerialize.length > 0)) {
			if(this.__cbOnceSerialize != null) {
				return this.__cbOnceSerialize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offSerialize();
		this.offDeserialize();
		this.offObservedDirty();
		this.offModelDirty();
	}
	,__cbOnDeserialize: null
	,__cbOnceDeserialize: null
	,__cbOnOwnerUnbindDeserialize: null
	,__cbOnceOwnerUnbindDeserialize: null
	,emitDeserialize: function() {
		var len = 0;
		if(this.__cbOnDeserialize != null) {
			len += this.__cbOnDeserialize.length;
		}
		if(this.__cbOnceDeserialize != null) {
			len += this.__cbOnceDeserialize.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDeserialize != null) {
				var _g = 0;
				var _g1 = this.__cbOnDeserialize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDeserialize[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDeserialize != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDeserialize.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDeserialize[ii];
						this.__cbOnceDeserialize[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDeserialize[ii];
						this.__cbOnceOwnerUnbindDeserialize[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDeserialize[ii]);
						newCbOnceArray.push(this.__cbOnceDeserialize[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDeserialize = newCbOnceOwnerUnbindArray;
				this.__cbOnceDeserialize = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDeserialize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "deserialize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offDeserialize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDeserialize == null) {
				this.__cbOnOwnerUnbindDeserialize = [];
			}
			this.__cbOnOwnerUnbindDeserialize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDeserialize == null) {
				this.__cbOnOwnerUnbindDeserialize = [];
			}
			this.__cbOnOwnerUnbindDeserialize.push(null);
		}
		if(this.__cbOnDeserialize == null) {
			this.__cbOnDeserialize = [];
		}
		this.__cbOnDeserialize.push(handle);
	}
	,onceDeserialize: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "deserialize" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offDeserialize(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDeserialize == null) {
				this.__cbOnceOwnerUnbindDeserialize = [];
			}
			this.__cbOnceOwnerUnbindDeserialize.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDeserialize == null) {
				this.__cbOnceOwnerUnbindDeserialize = [];
			}
			this.__cbOnceOwnerUnbindDeserialize.push(null);
		}
		if(this.__cbOnceDeserialize == null) {
			this.__cbOnceDeserialize = [];
		}
		this.__cbOnceDeserialize.push(handle);
	}
	,offDeserialize: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnDeserialize != null) {
				index = this.__cbOnDeserialize.indexOf(handle);
				if(index != -1) {
					this.__cbOnDeserialize.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDeserialize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDeserialize.splice(index,1);
				}
			}
			if(this.__cbOnceDeserialize != null) {
				index = this.__cbOnceDeserialize.indexOf(handle);
				if(index != -1) {
					this.__cbOnceDeserialize.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDeserialize[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDeserialize.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDeserialize != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDeserialize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDeserialize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDeserialize = null;
			}
			if(this.__cbOnceOwnerUnbindDeserialize != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDeserialize.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDeserialize[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDeserialize = null;
			}
			this.__cbOnDeserialize = null;
			this.__cbOnceDeserialize = null;
		}
	}
	,listensDeserialize: function() {
		if(!(this.__cbOnDeserialize != null && this.__cbOnDeserialize.length > 0)) {
			if(this.__cbOnceDeserialize != null) {
				return this.__cbOnceDeserialize.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: tracker_Model
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_dirty:"set_dirty",set_serializer:"set_serializer"})
});
var ceramic_TilemapData = function() {
	this.unobservedLayers = [];
	this.layersAutoruns = null;
	this.unobservedTilesets = [];
	this.tilesetsAutoruns = null;
	this.computedOnceMaxTileHeight = false;
	this.maxTileHeightAutoruns = null;
	this.computedOnceMaxTileWidth = false;
	this.maxTileWidthAutoruns = null;
	var alpha = 0;
	if(alpha == null) {
		alpha = 255;
	}
	var value = (16777215 | 0) + (-16777216);
	value &= 16777215;
	value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	this.unobservedBackgroundColor = value;
	this.backgroundColorAutoruns = null;
	this.unobservedStaggerIndex = ceramic_TilemapStaggerIndex.ODD;
	this.staggerIndexAutoruns = null;
	this.unobservedStaggerAxis = ceramic_TilemapStaggerAxis.AXIS_X;
	this.staggerAxisAutoruns = null;
	this.unobservedHexSideLength = -1;
	this.hexSideLengthAutoruns = null;
	this.unobservedRenderOrder = ceramic_TilemapRenderOrder.RIGHT_DOWN;
	this.renderOrderAutoruns = null;
	this.unobservedHeight = -1;
	this.heightAutoruns = null;
	this.unobservedWidth = -1;
	this.widthAutoruns = null;
	this.unobservedOrientation = ceramic_TilemapOrientation.ORTHOGONAL;
	this.orientationAutoruns = null;
	this.unobservedName = null;
	this.nameAutoruns = null;
	tracker_Model.call(this);
};
$hxClasses["ceramic.TilemapData"] = ceramic_TilemapData;
ceramic_TilemapData.__name__ = "ceramic.TilemapData";
ceramic_TilemapData.__super__ = tracker_Model;
ceramic_TilemapData.prototype = $extend(tracker_Model.prototype,{
	nameAutoruns: null
	,get_name: function() {
		var value = this.unobservedName;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.nameAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.nameAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_name: function(name) {
		var prevValue = this.unobservedName;
		this.unobservedName = name;
		if(prevValue == name) {
			return name;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitNameChange(name,prevValue);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return name;
	}
	,invalidateName: function() {
		var value = this.unobservedName;
		this.emitNameChange(value,value);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedName: null
	,__cbOnNameChange: null
	,__cbOnceNameChange: null
	,__cbOnOwnerUnbindNameChange: null
	,__cbOnceOwnerUnbindNameChange: null
	,emitNameChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnNameChange != null) {
			len += this.__cbOnNameChange.length;
		}
		if(this.__cbOnceNameChange != null) {
			len += this.__cbOnceNameChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnNameChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceNameChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceNameChange[ii];
						this.__cbOnceNameChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindNameChange[ii];
						this.__cbOnceOwnerUnbindNameChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindNameChange[ii]);
						newCbOnceArray.push(this.__cbOnceNameChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindNameChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceNameChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnNameChange == null) {
			this.__cbOnNameChange = [];
		}
		this.__cbOnNameChange.push(handleCurrentPrevious);
	}
	,onceNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnceNameChange == null) {
			this.__cbOnceNameChange = [];
		}
		this.__cbOnceNameChange.push(handleCurrentPrevious);
	}
	,offNameChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnNameChange != null) {
				index = this.__cbOnNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnNameChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindNameChange.splice(index,1);
				}
			}
			if(this.__cbOnceNameChange != null) {
				index = this.__cbOnceNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceNameChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindNameChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindNameChange = null;
			}
			if(this.__cbOnceOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindNameChange = null;
			}
			this.__cbOnNameChange = null;
			this.__cbOnceNameChange = null;
		}
	}
	,listensNameChange: function() {
		if(!(this.__cbOnNameChange != null && this.__cbOnNameChange.length > 0)) {
			if(this.__cbOnceNameChange != null) {
				return this.__cbOnceNameChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,orientationAutoruns: null
	,get_orientation: function() {
		var value = this.unobservedOrientation;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.orientationAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.orientationAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_orientation: function(orientation) {
		var prevValue = this.unobservedOrientation;
		this.unobservedOrientation = orientation;
		if(prevValue == orientation) {
			return orientation;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitOrientationChange(orientation,prevValue);
		var fieldAutoruns = this.orientationAutoruns;
		if(fieldAutoruns != null) {
			this.orientationAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return orientation;
	}
	,invalidateOrientation: function() {
		var value = this.unobservedOrientation;
		this.emitOrientationChange(value,value);
		var fieldAutoruns = this.orientationAutoruns;
		if(fieldAutoruns != null) {
			this.orientationAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedOrientation: null
	,__cbOnOrientationChange: null
	,__cbOnceOrientationChange: null
	,__cbOnOwnerUnbindOrientationChange: null
	,__cbOnceOwnerUnbindOrientationChange: null
	,emitOrientationChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnOrientationChange != null) {
			len += this.__cbOnOrientationChange.length;
		}
		if(this.__cbOnceOrientationChange != null) {
			len += this.__cbOnceOrientationChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnOrientationChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOrientationChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnOrientationChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceOrientationChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceOrientationChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceOrientationChange[ii];
						this.__cbOnceOrientationChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindOrientationChange[ii];
						this.__cbOnceOwnerUnbindOrientationChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindOrientationChange[ii]);
						newCbOnceArray.push(this.__cbOnceOrientationChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindOrientationChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceOrientationChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onOrientationChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "orientationChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOrientationChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindOrientationChange == null) {
				this.__cbOnOwnerUnbindOrientationChange = [];
			}
			this.__cbOnOwnerUnbindOrientationChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindOrientationChange == null) {
				this.__cbOnOwnerUnbindOrientationChange = [];
			}
			this.__cbOnOwnerUnbindOrientationChange.push(null);
		}
		if(this.__cbOnOrientationChange == null) {
			this.__cbOnOrientationChange = [];
		}
		this.__cbOnOrientationChange.push(handleCurrentPrevious);
	}
	,onceOrientationChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "orientationChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOrientationChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindOrientationChange == null) {
				this.__cbOnceOwnerUnbindOrientationChange = [];
			}
			this.__cbOnceOwnerUnbindOrientationChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindOrientationChange == null) {
				this.__cbOnceOwnerUnbindOrientationChange = [];
			}
			this.__cbOnceOwnerUnbindOrientationChange.push(null);
		}
		if(this.__cbOnceOrientationChange == null) {
			this.__cbOnceOrientationChange = [];
		}
		this.__cbOnceOrientationChange.push(handleCurrentPrevious);
	}
	,offOrientationChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnOrientationChange != null) {
				index = this.__cbOnOrientationChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnOrientationChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindOrientationChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindOrientationChange.splice(index,1);
				}
			}
			if(this.__cbOnceOrientationChange != null) {
				index = this.__cbOnceOrientationChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceOrientationChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindOrientationChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindOrientationChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindOrientationChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindOrientationChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindOrientationChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindOrientationChange = null;
			}
			if(this.__cbOnceOwnerUnbindOrientationChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindOrientationChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindOrientationChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindOrientationChange = null;
			}
			this.__cbOnOrientationChange = null;
			this.__cbOnceOrientationChange = null;
		}
	}
	,listensOrientationChange: function() {
		if(!(this.__cbOnOrientationChange != null && this.__cbOnOrientationChange.length > 0)) {
			if(this.__cbOnceOrientationChange != null) {
				return this.__cbOnceOrientationChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,widthAutoruns: null
	,get_width: function() {
		var value = this.unobservedWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.widthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.widthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_width: function(width) {
		var prevValue = this.unobservedWidth;
		this.unobservedWidth = width;
		if(prevValue == width) {
			return width;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitWidthChange(width,prevValue);
		var fieldAutoruns = this.widthAutoruns;
		if(fieldAutoruns != null) {
			this.widthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return width;
	}
	,invalidateWidth: function() {
		var value = this.unobservedWidth;
		this.emitWidthChange(value,value);
		var fieldAutoruns = this.widthAutoruns;
		if(fieldAutoruns != null) {
			this.widthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedWidth: null
	,__cbOnWidthChange: null
	,__cbOnceWidthChange: null
	,__cbOnOwnerUnbindWidthChange: null
	,__cbOnceOwnerUnbindWidthChange: null
	,emitWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWidthChange != null) {
			len += this.__cbOnWidthChange.length;
		}
		if(this.__cbOnceWidthChange != null) {
			len += this.__cbOnceWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceWidthChange[ii];
						this.__cbOnceWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindWidthChange[ii];
						this.__cbOnceOwnerUnbindWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "widthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWidthChange == null) {
				this.__cbOnOwnerUnbindWidthChange = [];
			}
			this.__cbOnOwnerUnbindWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWidthChange == null) {
				this.__cbOnOwnerUnbindWidthChange = [];
			}
			this.__cbOnOwnerUnbindWidthChange.push(null);
		}
		if(this.__cbOnWidthChange == null) {
			this.__cbOnWidthChange = [];
		}
		this.__cbOnWidthChange.push(handleCurrentPrevious);
	}
	,onceWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "widthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWidthChange == null) {
				this.__cbOnceOwnerUnbindWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWidthChange == null) {
				this.__cbOnceOwnerUnbindWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWidthChange.push(null);
		}
		if(this.__cbOnceWidthChange == null) {
			this.__cbOnceWidthChange = [];
		}
		this.__cbOnceWidthChange.push(handleCurrentPrevious);
	}
	,offWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWidthChange != null) {
				index = this.__cbOnWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceWidthChange != null) {
				index = this.__cbOnceWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWidthChange = null;
			}
			this.__cbOnWidthChange = null;
			this.__cbOnceWidthChange = null;
		}
	}
	,listensWidthChange: function() {
		if(!(this.__cbOnWidthChange != null && this.__cbOnWidthChange.length > 0)) {
			if(this.__cbOnceWidthChange != null) {
				return this.__cbOnceWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,heightAutoruns: null
	,get_height: function() {
		var value = this.unobservedHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.heightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.heightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_height: function(height) {
		var prevValue = this.unobservedHeight;
		this.unobservedHeight = height;
		if(prevValue == height) {
			return height;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitHeightChange(height,prevValue);
		var fieldAutoruns = this.heightAutoruns;
		if(fieldAutoruns != null) {
			this.heightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return height;
	}
	,invalidateHeight: function() {
		var value = this.unobservedHeight;
		this.emitHeightChange(value,value);
		var fieldAutoruns = this.heightAutoruns;
		if(fieldAutoruns != null) {
			this.heightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedHeight: null
	,__cbOnHeightChange: null
	,__cbOnceHeightChange: null
	,__cbOnOwnerUnbindHeightChange: null
	,__cbOnceOwnerUnbindHeightChange: null
	,emitHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnHeightChange != null) {
			len += this.__cbOnHeightChange.length;
		}
		if(this.__cbOnceHeightChange != null) {
			len += this.__cbOnceHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceHeightChange[ii];
						this.__cbOnceHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindHeightChange[ii];
						this.__cbOnceOwnerUnbindHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "heightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindHeightChange == null) {
				this.__cbOnOwnerUnbindHeightChange = [];
			}
			this.__cbOnOwnerUnbindHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindHeightChange == null) {
				this.__cbOnOwnerUnbindHeightChange = [];
			}
			this.__cbOnOwnerUnbindHeightChange.push(null);
		}
		if(this.__cbOnHeightChange == null) {
			this.__cbOnHeightChange = [];
		}
		this.__cbOnHeightChange.push(handleCurrentPrevious);
	}
	,onceHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "heightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindHeightChange == null) {
				this.__cbOnceOwnerUnbindHeightChange = [];
			}
			this.__cbOnceOwnerUnbindHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindHeightChange == null) {
				this.__cbOnceOwnerUnbindHeightChange = [];
			}
			this.__cbOnceOwnerUnbindHeightChange.push(null);
		}
		if(this.__cbOnceHeightChange == null) {
			this.__cbOnceHeightChange = [];
		}
		this.__cbOnceHeightChange.push(handleCurrentPrevious);
	}
	,offHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnHeightChange != null) {
				index = this.__cbOnHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceHeightChange != null) {
				index = this.__cbOnceHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindHeightChange = null;
			}
			this.__cbOnHeightChange = null;
			this.__cbOnceHeightChange = null;
		}
	}
	,listensHeightChange: function() {
		if(!(this.__cbOnHeightChange != null && this.__cbOnHeightChange.length > 0)) {
			if(this.__cbOnceHeightChange != null) {
				return this.__cbOnceHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,renderOrderAutoruns: null
	,get_renderOrder: function() {
		var value = this.unobservedRenderOrder;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.renderOrderAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.renderOrderAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_renderOrder: function(renderOrder) {
		var prevValue = this.unobservedRenderOrder;
		this.unobservedRenderOrder = renderOrder;
		if(prevValue == renderOrder) {
			return renderOrder;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitRenderOrderChange(renderOrder,prevValue);
		var fieldAutoruns = this.renderOrderAutoruns;
		if(fieldAutoruns != null) {
			this.renderOrderAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return renderOrder;
	}
	,invalidateRenderOrder: function() {
		var value = this.unobservedRenderOrder;
		this.emitRenderOrderChange(value,value);
		var fieldAutoruns = this.renderOrderAutoruns;
		if(fieldAutoruns != null) {
			this.renderOrderAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedRenderOrder: null
	,__cbOnRenderOrderChange: null
	,__cbOnceRenderOrderChange: null
	,__cbOnOwnerUnbindRenderOrderChange: null
	,__cbOnceOwnerUnbindRenderOrderChange: null
	,emitRenderOrderChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnRenderOrderChange != null) {
			len += this.__cbOnRenderOrderChange.length;
		}
		if(this.__cbOnceRenderOrderChange != null) {
			len += this.__cbOnceRenderOrderChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnRenderOrderChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnRenderOrderChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnRenderOrderChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceRenderOrderChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceRenderOrderChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceRenderOrderChange[ii];
						this.__cbOnceRenderOrderChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindRenderOrderChange[ii];
						this.__cbOnceOwnerUnbindRenderOrderChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindRenderOrderChange[ii]);
						newCbOnceArray.push(this.__cbOnceRenderOrderChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindRenderOrderChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceRenderOrderChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onRenderOrderChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "renderOrderChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRenderOrderChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindRenderOrderChange == null) {
				this.__cbOnOwnerUnbindRenderOrderChange = [];
			}
			this.__cbOnOwnerUnbindRenderOrderChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindRenderOrderChange == null) {
				this.__cbOnOwnerUnbindRenderOrderChange = [];
			}
			this.__cbOnOwnerUnbindRenderOrderChange.push(null);
		}
		if(this.__cbOnRenderOrderChange == null) {
			this.__cbOnRenderOrderChange = [];
		}
		this.__cbOnRenderOrderChange.push(handleCurrentPrevious);
	}
	,onceRenderOrderChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "renderOrderChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRenderOrderChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindRenderOrderChange == null) {
				this.__cbOnceOwnerUnbindRenderOrderChange = [];
			}
			this.__cbOnceOwnerUnbindRenderOrderChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindRenderOrderChange == null) {
				this.__cbOnceOwnerUnbindRenderOrderChange = [];
			}
			this.__cbOnceOwnerUnbindRenderOrderChange.push(null);
		}
		if(this.__cbOnceRenderOrderChange == null) {
			this.__cbOnceRenderOrderChange = [];
		}
		this.__cbOnceRenderOrderChange.push(handleCurrentPrevious);
	}
	,offRenderOrderChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnRenderOrderChange != null) {
				index = this.__cbOnRenderOrderChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnRenderOrderChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindRenderOrderChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindRenderOrderChange.splice(index,1);
				}
			}
			if(this.__cbOnceRenderOrderChange != null) {
				index = this.__cbOnceRenderOrderChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceRenderOrderChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindRenderOrderChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindRenderOrderChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindRenderOrderChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindRenderOrderChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindRenderOrderChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindRenderOrderChange = null;
			}
			if(this.__cbOnceOwnerUnbindRenderOrderChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindRenderOrderChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindRenderOrderChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindRenderOrderChange = null;
			}
			this.__cbOnRenderOrderChange = null;
			this.__cbOnceRenderOrderChange = null;
		}
	}
	,listensRenderOrderChange: function() {
		if(!(this.__cbOnRenderOrderChange != null && this.__cbOnRenderOrderChange.length > 0)) {
			if(this.__cbOnceRenderOrderChange != null) {
				return this.__cbOnceRenderOrderChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,hexSideLengthAutoruns: null
	,get_hexSideLength: function() {
		var value = this.unobservedHexSideLength;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.hexSideLengthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.hexSideLengthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_hexSideLength: function(hexSideLength) {
		var prevValue = this.unobservedHexSideLength;
		this.unobservedHexSideLength = hexSideLength;
		if(prevValue == hexSideLength) {
			return hexSideLength;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitHexSideLengthChange(hexSideLength,prevValue);
		var fieldAutoruns = this.hexSideLengthAutoruns;
		if(fieldAutoruns != null) {
			this.hexSideLengthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return hexSideLength;
	}
	,invalidateHexSideLength: function() {
		var value = this.unobservedHexSideLength;
		this.emitHexSideLengthChange(value,value);
		var fieldAutoruns = this.hexSideLengthAutoruns;
		if(fieldAutoruns != null) {
			this.hexSideLengthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedHexSideLength: null
	,__cbOnHexSideLengthChange: null
	,__cbOnceHexSideLengthChange: null
	,__cbOnOwnerUnbindHexSideLengthChange: null
	,__cbOnceOwnerUnbindHexSideLengthChange: null
	,emitHexSideLengthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnHexSideLengthChange != null) {
			len += this.__cbOnHexSideLengthChange.length;
		}
		if(this.__cbOnceHexSideLengthChange != null) {
			len += this.__cbOnceHexSideLengthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnHexSideLengthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnHexSideLengthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnHexSideLengthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceHexSideLengthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceHexSideLengthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceHexSideLengthChange[ii];
						this.__cbOnceHexSideLengthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindHexSideLengthChange[ii];
						this.__cbOnceOwnerUnbindHexSideLengthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindHexSideLengthChange[ii]);
						newCbOnceArray.push(this.__cbOnceHexSideLengthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindHexSideLengthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceHexSideLengthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onHexSideLengthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "hexSideLengthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHexSideLengthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindHexSideLengthChange == null) {
				this.__cbOnOwnerUnbindHexSideLengthChange = [];
			}
			this.__cbOnOwnerUnbindHexSideLengthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindHexSideLengthChange == null) {
				this.__cbOnOwnerUnbindHexSideLengthChange = [];
			}
			this.__cbOnOwnerUnbindHexSideLengthChange.push(null);
		}
		if(this.__cbOnHexSideLengthChange == null) {
			this.__cbOnHexSideLengthChange = [];
		}
		this.__cbOnHexSideLengthChange.push(handleCurrentPrevious);
	}
	,onceHexSideLengthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "hexSideLengthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHexSideLengthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindHexSideLengthChange == null) {
				this.__cbOnceOwnerUnbindHexSideLengthChange = [];
			}
			this.__cbOnceOwnerUnbindHexSideLengthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindHexSideLengthChange == null) {
				this.__cbOnceOwnerUnbindHexSideLengthChange = [];
			}
			this.__cbOnceOwnerUnbindHexSideLengthChange.push(null);
		}
		if(this.__cbOnceHexSideLengthChange == null) {
			this.__cbOnceHexSideLengthChange = [];
		}
		this.__cbOnceHexSideLengthChange.push(handleCurrentPrevious);
	}
	,offHexSideLengthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnHexSideLengthChange != null) {
				index = this.__cbOnHexSideLengthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnHexSideLengthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindHexSideLengthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindHexSideLengthChange.splice(index,1);
				}
			}
			if(this.__cbOnceHexSideLengthChange != null) {
				index = this.__cbOnceHexSideLengthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceHexSideLengthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindHexSideLengthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindHexSideLengthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindHexSideLengthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindHexSideLengthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindHexSideLengthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindHexSideLengthChange = null;
			}
			if(this.__cbOnceOwnerUnbindHexSideLengthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindHexSideLengthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindHexSideLengthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindHexSideLengthChange = null;
			}
			this.__cbOnHexSideLengthChange = null;
			this.__cbOnceHexSideLengthChange = null;
		}
	}
	,listensHexSideLengthChange: function() {
		if(!(this.__cbOnHexSideLengthChange != null && this.__cbOnHexSideLengthChange.length > 0)) {
			if(this.__cbOnceHexSideLengthChange != null) {
				return this.__cbOnceHexSideLengthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,staggerAxisAutoruns: null
	,get_staggerAxis: function() {
		var value = this.unobservedStaggerAxis;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.staggerAxisAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.staggerAxisAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_staggerAxis: function(staggerAxis) {
		var prevValue = this.unobservedStaggerAxis;
		this.unobservedStaggerAxis = staggerAxis;
		if(prevValue == staggerAxis) {
			return staggerAxis;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitStaggerAxisChange(staggerAxis,prevValue);
		var fieldAutoruns = this.staggerAxisAutoruns;
		if(fieldAutoruns != null) {
			this.staggerAxisAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return staggerAxis;
	}
	,invalidateStaggerAxis: function() {
		var value = this.unobservedStaggerAxis;
		this.emitStaggerAxisChange(value,value);
		var fieldAutoruns = this.staggerAxisAutoruns;
		if(fieldAutoruns != null) {
			this.staggerAxisAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedStaggerAxis: null
	,__cbOnStaggerAxisChange: null
	,__cbOnceStaggerAxisChange: null
	,__cbOnOwnerUnbindStaggerAxisChange: null
	,__cbOnceOwnerUnbindStaggerAxisChange: null
	,emitStaggerAxisChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnStaggerAxisChange != null) {
			len += this.__cbOnStaggerAxisChange.length;
		}
		if(this.__cbOnceStaggerAxisChange != null) {
			len += this.__cbOnceStaggerAxisChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStaggerAxisChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnStaggerAxisChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnStaggerAxisChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceStaggerAxisChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceStaggerAxisChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceStaggerAxisChange[ii];
						this.__cbOnceStaggerAxisChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindStaggerAxisChange[ii];
						this.__cbOnceOwnerUnbindStaggerAxisChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindStaggerAxisChange[ii]);
						newCbOnceArray.push(this.__cbOnceStaggerAxisChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindStaggerAxisChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceStaggerAxisChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStaggerAxisChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "staggerAxisChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStaggerAxisChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStaggerAxisChange == null) {
				this.__cbOnOwnerUnbindStaggerAxisChange = [];
			}
			this.__cbOnOwnerUnbindStaggerAxisChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStaggerAxisChange == null) {
				this.__cbOnOwnerUnbindStaggerAxisChange = [];
			}
			this.__cbOnOwnerUnbindStaggerAxisChange.push(null);
		}
		if(this.__cbOnStaggerAxisChange == null) {
			this.__cbOnStaggerAxisChange = [];
		}
		this.__cbOnStaggerAxisChange.push(handleCurrentPrevious);
	}
	,onceStaggerAxisChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "staggerAxisChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStaggerAxisChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStaggerAxisChange == null) {
				this.__cbOnceOwnerUnbindStaggerAxisChange = [];
			}
			this.__cbOnceOwnerUnbindStaggerAxisChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStaggerAxisChange == null) {
				this.__cbOnceOwnerUnbindStaggerAxisChange = [];
			}
			this.__cbOnceOwnerUnbindStaggerAxisChange.push(null);
		}
		if(this.__cbOnceStaggerAxisChange == null) {
			this.__cbOnceStaggerAxisChange = [];
		}
		this.__cbOnceStaggerAxisChange.push(handleCurrentPrevious);
	}
	,offStaggerAxisChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnStaggerAxisChange != null) {
				index = this.__cbOnStaggerAxisChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnStaggerAxisChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStaggerAxisChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStaggerAxisChange.splice(index,1);
				}
			}
			if(this.__cbOnceStaggerAxisChange != null) {
				index = this.__cbOnceStaggerAxisChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceStaggerAxisChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStaggerAxisChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStaggerAxisChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStaggerAxisChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStaggerAxisChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStaggerAxisChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStaggerAxisChange = null;
			}
			if(this.__cbOnceOwnerUnbindStaggerAxisChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStaggerAxisChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStaggerAxisChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStaggerAxisChange = null;
			}
			this.__cbOnStaggerAxisChange = null;
			this.__cbOnceStaggerAxisChange = null;
		}
	}
	,listensStaggerAxisChange: function() {
		if(!(this.__cbOnStaggerAxisChange != null && this.__cbOnStaggerAxisChange.length > 0)) {
			if(this.__cbOnceStaggerAxisChange != null) {
				return this.__cbOnceStaggerAxisChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,staggerIndexAutoruns: null
	,get_staggerIndex: function() {
		var value = this.unobservedStaggerIndex;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.staggerIndexAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.staggerIndexAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_staggerIndex: function(staggerIndex) {
		var prevValue = this.unobservedStaggerIndex;
		this.unobservedStaggerIndex = staggerIndex;
		if(prevValue == staggerIndex) {
			return staggerIndex;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitStaggerIndexChange(staggerIndex,prevValue);
		var fieldAutoruns = this.staggerIndexAutoruns;
		if(fieldAutoruns != null) {
			this.staggerIndexAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return staggerIndex;
	}
	,invalidateStaggerIndex: function() {
		var value = this.unobservedStaggerIndex;
		this.emitStaggerIndexChange(value,value);
		var fieldAutoruns = this.staggerIndexAutoruns;
		if(fieldAutoruns != null) {
			this.staggerIndexAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedStaggerIndex: null
	,__cbOnStaggerIndexChange: null
	,__cbOnceStaggerIndexChange: null
	,__cbOnOwnerUnbindStaggerIndexChange: null
	,__cbOnceOwnerUnbindStaggerIndexChange: null
	,emitStaggerIndexChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnStaggerIndexChange != null) {
			len += this.__cbOnStaggerIndexChange.length;
		}
		if(this.__cbOnceStaggerIndexChange != null) {
			len += this.__cbOnceStaggerIndexChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStaggerIndexChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnStaggerIndexChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnStaggerIndexChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceStaggerIndexChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceStaggerIndexChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceStaggerIndexChange[ii];
						this.__cbOnceStaggerIndexChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindStaggerIndexChange[ii];
						this.__cbOnceOwnerUnbindStaggerIndexChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindStaggerIndexChange[ii]);
						newCbOnceArray.push(this.__cbOnceStaggerIndexChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindStaggerIndexChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceStaggerIndexChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStaggerIndexChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "staggerIndexChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStaggerIndexChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStaggerIndexChange == null) {
				this.__cbOnOwnerUnbindStaggerIndexChange = [];
			}
			this.__cbOnOwnerUnbindStaggerIndexChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStaggerIndexChange == null) {
				this.__cbOnOwnerUnbindStaggerIndexChange = [];
			}
			this.__cbOnOwnerUnbindStaggerIndexChange.push(null);
		}
		if(this.__cbOnStaggerIndexChange == null) {
			this.__cbOnStaggerIndexChange = [];
		}
		this.__cbOnStaggerIndexChange.push(handleCurrentPrevious);
	}
	,onceStaggerIndexChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "staggerIndexChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offStaggerIndexChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStaggerIndexChange == null) {
				this.__cbOnceOwnerUnbindStaggerIndexChange = [];
			}
			this.__cbOnceOwnerUnbindStaggerIndexChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStaggerIndexChange == null) {
				this.__cbOnceOwnerUnbindStaggerIndexChange = [];
			}
			this.__cbOnceOwnerUnbindStaggerIndexChange.push(null);
		}
		if(this.__cbOnceStaggerIndexChange == null) {
			this.__cbOnceStaggerIndexChange = [];
		}
		this.__cbOnceStaggerIndexChange.push(handleCurrentPrevious);
	}
	,offStaggerIndexChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnStaggerIndexChange != null) {
				index = this.__cbOnStaggerIndexChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnStaggerIndexChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStaggerIndexChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStaggerIndexChange.splice(index,1);
				}
			}
			if(this.__cbOnceStaggerIndexChange != null) {
				index = this.__cbOnceStaggerIndexChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceStaggerIndexChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStaggerIndexChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStaggerIndexChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStaggerIndexChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStaggerIndexChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStaggerIndexChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStaggerIndexChange = null;
			}
			if(this.__cbOnceOwnerUnbindStaggerIndexChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStaggerIndexChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStaggerIndexChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStaggerIndexChange = null;
			}
			this.__cbOnStaggerIndexChange = null;
			this.__cbOnceStaggerIndexChange = null;
		}
	}
	,listensStaggerIndexChange: function() {
		if(!(this.__cbOnStaggerIndexChange != null && this.__cbOnStaggerIndexChange.length > 0)) {
			if(this.__cbOnceStaggerIndexChange != null) {
				return this.__cbOnceStaggerIndexChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,backgroundColorAutoruns: null
	,get_backgroundColor: function() {
		var value = this.unobservedBackgroundColor;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.backgroundColorAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.backgroundColorAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_backgroundColor: function(backgroundColor) {
		var prevValue = this.unobservedBackgroundColor;
		this.unobservedBackgroundColor = backgroundColor;
		if(prevValue == backgroundColor) {
			return backgroundColor;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitBackgroundColorChange(backgroundColor,prevValue);
		var fieldAutoruns = this.backgroundColorAutoruns;
		if(fieldAutoruns != null) {
			this.backgroundColorAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return backgroundColor;
	}
	,invalidateBackgroundColor: function() {
		var value = this.unobservedBackgroundColor;
		this.emitBackgroundColorChange(value,value);
		var fieldAutoruns = this.backgroundColorAutoruns;
		if(fieldAutoruns != null) {
			this.backgroundColorAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedBackgroundColor: null
	,__cbOnBackgroundColorChange: null
	,__cbOnceBackgroundColorChange: null
	,__cbOnOwnerUnbindBackgroundColorChange: null
	,__cbOnceOwnerUnbindBackgroundColorChange: null
	,emitBackgroundColorChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnBackgroundColorChange != null) {
			len += this.__cbOnBackgroundColorChange.length;
		}
		if(this.__cbOnceBackgroundColorChange != null) {
			len += this.__cbOnceBackgroundColorChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBackgroundColorChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnBackgroundColorChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBackgroundColorChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBackgroundColorChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBackgroundColorChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBackgroundColorChange[ii];
						this.__cbOnceBackgroundColorChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBackgroundColorChange[ii];
						this.__cbOnceOwnerUnbindBackgroundColorChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBackgroundColorChange[ii]);
						newCbOnceArray.push(this.__cbOnceBackgroundColorChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBackgroundColorChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceBackgroundColorChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBackgroundColorChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "backgroundColorChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBackgroundColorChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBackgroundColorChange == null) {
				this.__cbOnOwnerUnbindBackgroundColorChange = [];
			}
			this.__cbOnOwnerUnbindBackgroundColorChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBackgroundColorChange == null) {
				this.__cbOnOwnerUnbindBackgroundColorChange = [];
			}
			this.__cbOnOwnerUnbindBackgroundColorChange.push(null);
		}
		if(this.__cbOnBackgroundColorChange == null) {
			this.__cbOnBackgroundColorChange = [];
		}
		this.__cbOnBackgroundColorChange.push(handleCurrentPrevious);
	}
	,onceBackgroundColorChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "backgroundColorChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBackgroundColorChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBackgroundColorChange == null) {
				this.__cbOnceOwnerUnbindBackgroundColorChange = [];
			}
			this.__cbOnceOwnerUnbindBackgroundColorChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBackgroundColorChange == null) {
				this.__cbOnceOwnerUnbindBackgroundColorChange = [];
			}
			this.__cbOnceOwnerUnbindBackgroundColorChange.push(null);
		}
		if(this.__cbOnceBackgroundColorChange == null) {
			this.__cbOnceBackgroundColorChange = [];
		}
		this.__cbOnceBackgroundColorChange.push(handleCurrentPrevious);
	}
	,offBackgroundColorChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnBackgroundColorChange != null) {
				index = this.__cbOnBackgroundColorChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnBackgroundColorChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBackgroundColorChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBackgroundColorChange.splice(index,1);
				}
			}
			if(this.__cbOnceBackgroundColorChange != null) {
				index = this.__cbOnceBackgroundColorChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceBackgroundColorChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBackgroundColorChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBackgroundColorChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBackgroundColorChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBackgroundColorChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBackgroundColorChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBackgroundColorChange = null;
			}
			if(this.__cbOnceOwnerUnbindBackgroundColorChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBackgroundColorChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBackgroundColorChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBackgroundColorChange = null;
			}
			this.__cbOnBackgroundColorChange = null;
			this.__cbOnceBackgroundColorChange = null;
		}
	}
	,listensBackgroundColorChange: function() {
		if(!(this.__cbOnBackgroundColorChange != null && this.__cbOnBackgroundColorChange.length > 0)) {
			if(this.__cbOnceBackgroundColorChange != null) {
				return this.__cbOnceBackgroundColorChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,willListenMaxTileWidthChange: function() {
		this.get_unobservedMaxTileWidth();
	}
	,get_unobservedMaxTileWidth: function() {
		if(this._lifecycleState >= 0) {
			if(this.computeAutorunMaxTileWidth == null) {
				var _that = this;
				var _autorun = new tracker_Autorun(null);
				this.computedOnceMaxTileWidth = true;
				this.computeAutorunMaxTileWidth = _autorun;
				_autorun.onRun = function() {
					var result = _that.computeMaxTileWidth();
					tracker_Autorun.unobserve();
					_that.set_maxTileWidth(result);
					tracker_Autorun.reobserve();
				};
				_autorun.onDestroy(this,function(_) {
					if(_that.computeAutorunMaxTileWidth == _autorun) {
						_that.computeAutorunMaxTileWidth = null;
					}
					_autorun = null;
					_that = null;
				});
				this.onDestroy(_autorun,function(_) {
					if(_autorun != null) {
						_autorun.destroy();
						_autorun = null;
					}
					_that = null;
				});
				_autorun.run();
			} else if(this.computeAutorunMaxTileWidth.invalidated) {
				this.computeAutorunMaxTileWidth.run();
			}
		} else if(!this.computedOnceMaxTileWidth) {
			tracker_Autorun.unobserve();
			this.computedOnceMaxTileWidth = true;
			this.unobservedMaxTileWidth = this.computeMaxTileWidth();
			tracker_Autorun.reobserve();
		}
		return this.unobservedMaxTileWidth;
	}
	,maxTileWidthAutoruns: null
	,get_maxTileWidth: function() {
		var value = this.get_unobservedMaxTileWidth();
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.maxTileWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.maxTileWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_maxTileWidth: function(maxTileWidth) {
		var prevValue = this.get_unobservedMaxTileWidth();
		this.unobservedMaxTileWidth = maxTileWidth;
		if(prevValue == maxTileWidth) {
			return maxTileWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitMaxTileWidthChange(maxTileWidth,prevValue);
		var fieldAutoruns = this.maxTileWidthAutoruns;
		if(fieldAutoruns != null) {
			this.maxTileWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return maxTileWidth;
	}
	,invalidateMaxTileWidth: function() {
		var value = this.get_unobservedMaxTileWidth();
		this.emitMaxTileWidthChange(value,value);
		var fieldAutoruns = this.maxTileWidthAutoruns;
		if(fieldAutoruns != null) {
			this.maxTileWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedMaxTileWidth: null
	,__cbOnMaxTileWidthChange: null
	,__cbOnceMaxTileWidthChange: null
	,__cbOnOwnerUnbindMaxTileWidthChange: null
	,__cbOnceOwnerUnbindMaxTileWidthChange: null
	,emitMaxTileWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnMaxTileWidthChange != null) {
			len += this.__cbOnMaxTileWidthChange.length;
		}
		if(this.__cbOnceMaxTileWidthChange != null) {
			len += this.__cbOnceMaxTileWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMaxTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnMaxTileWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMaxTileWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMaxTileWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMaxTileWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMaxTileWidthChange[ii];
						this.__cbOnceMaxTileWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMaxTileWidthChange[ii];
						this.__cbOnceOwnerUnbindMaxTileWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMaxTileWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceMaxTileWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMaxTileWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceMaxTileWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMaxTileWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnMaxTileWidthChange == null && this.__cbOnceMaxTileWidthChange == null) {
			this.willListenMaxTileWidthChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxTileWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxTileWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMaxTileWidthChange == null) {
				this.__cbOnOwnerUnbindMaxTileWidthChange = [];
			}
			this.__cbOnOwnerUnbindMaxTileWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMaxTileWidthChange == null) {
				this.__cbOnOwnerUnbindMaxTileWidthChange = [];
			}
			this.__cbOnOwnerUnbindMaxTileWidthChange.push(null);
		}
		if(this.__cbOnMaxTileWidthChange == null) {
			this.__cbOnMaxTileWidthChange = [];
		}
		this.__cbOnMaxTileWidthChange.push(handleCurrentPrevious);
	}
	,onceMaxTileWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnMaxTileWidthChange == null && this.__cbOnceMaxTileWidthChange == null) {
			this.willListenMaxTileWidthChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxTileWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxTileWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMaxTileWidthChange == null) {
				this.__cbOnceOwnerUnbindMaxTileWidthChange = [];
			}
			this.__cbOnceOwnerUnbindMaxTileWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMaxTileWidthChange == null) {
				this.__cbOnceOwnerUnbindMaxTileWidthChange = [];
			}
			this.__cbOnceOwnerUnbindMaxTileWidthChange.push(null);
		}
		if(this.__cbOnceMaxTileWidthChange == null) {
			this.__cbOnceMaxTileWidthChange = [];
		}
		this.__cbOnceMaxTileWidthChange.push(handleCurrentPrevious);
	}
	,offMaxTileWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnMaxTileWidthChange != null) {
				index = this.__cbOnMaxTileWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnMaxTileWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMaxTileWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMaxTileWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceMaxTileWidthChange != null) {
				index = this.__cbOnceMaxTileWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceMaxTileWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMaxTileWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMaxTileWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMaxTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMaxTileWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMaxTileWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMaxTileWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindMaxTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMaxTileWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMaxTileWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMaxTileWidthChange = null;
			}
			this.__cbOnMaxTileWidthChange = null;
			this.__cbOnceMaxTileWidthChange = null;
		}
	}
	,listensMaxTileWidthChange: function() {
		if(!(this.__cbOnMaxTileWidthChange != null && this.__cbOnMaxTileWidthChange.length > 0)) {
			if(this.__cbOnceMaxTileWidthChange != null) {
				return this.__cbOnceMaxTileWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computeMaxTileWidth: function() {
		var result = -1;
		var layers = this.get_layers();
		if(layers != null) {
			var _g = 0;
			var _g1 = layers.length;
			while(_g < _g1) {
				var i = _g++;
				var layer = layers[i];
				var tileWidth = layer.get_tileWidth();
				if(tileWidth > result) {
					result = tileWidth;
				}
			}
		}
		return result;
	}
	,computeAutorunMaxTileWidth: null
	,computedOnceMaxTileWidth: null
	,willListenMaxTileHeightChange: function() {
		this.get_unobservedMaxTileHeight();
	}
	,get_unobservedMaxTileHeight: function() {
		if(this._lifecycleState >= 0) {
			if(this.computeAutorunMaxTileHeight == null) {
				var _that = this;
				var _autorun = new tracker_Autorun(null);
				this.computedOnceMaxTileHeight = true;
				this.computeAutorunMaxTileHeight = _autorun;
				_autorun.onRun = function() {
					var result = _that.computeMaxTileHeight();
					tracker_Autorun.unobserve();
					_that.set_maxTileHeight(result);
					tracker_Autorun.reobserve();
				};
				_autorun.onDestroy(this,function(_) {
					if(_that.computeAutorunMaxTileHeight == _autorun) {
						_that.computeAutorunMaxTileHeight = null;
					}
					_autorun = null;
					_that = null;
				});
				this.onDestroy(_autorun,function(_) {
					if(_autorun != null) {
						_autorun.destroy();
						_autorun = null;
					}
					_that = null;
				});
				_autorun.run();
			} else if(this.computeAutorunMaxTileHeight.invalidated) {
				this.computeAutorunMaxTileHeight.run();
			}
		} else if(!this.computedOnceMaxTileHeight) {
			tracker_Autorun.unobserve();
			this.computedOnceMaxTileHeight = true;
			this.unobservedMaxTileHeight = this.computeMaxTileHeight();
			tracker_Autorun.reobserve();
		}
		return this.unobservedMaxTileHeight;
	}
	,maxTileHeightAutoruns: null
	,get_maxTileHeight: function() {
		var value = this.get_unobservedMaxTileHeight();
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.maxTileHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.maxTileHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_maxTileHeight: function(maxTileHeight) {
		var prevValue = this.get_unobservedMaxTileHeight();
		this.unobservedMaxTileHeight = maxTileHeight;
		if(prevValue == maxTileHeight) {
			return maxTileHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitMaxTileHeightChange(maxTileHeight,prevValue);
		var fieldAutoruns = this.maxTileHeightAutoruns;
		if(fieldAutoruns != null) {
			this.maxTileHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return maxTileHeight;
	}
	,invalidateMaxTileHeight: function() {
		var value = this.get_unobservedMaxTileHeight();
		this.emitMaxTileHeightChange(value,value);
		var fieldAutoruns = this.maxTileHeightAutoruns;
		if(fieldAutoruns != null) {
			this.maxTileHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedMaxTileHeight: null
	,__cbOnMaxTileHeightChange: null
	,__cbOnceMaxTileHeightChange: null
	,__cbOnOwnerUnbindMaxTileHeightChange: null
	,__cbOnceOwnerUnbindMaxTileHeightChange: null
	,emitMaxTileHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnMaxTileHeightChange != null) {
			len += this.__cbOnMaxTileHeightChange.length;
		}
		if(this.__cbOnceMaxTileHeightChange != null) {
			len += this.__cbOnceMaxTileHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMaxTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnMaxTileHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMaxTileHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMaxTileHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMaxTileHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMaxTileHeightChange[ii];
						this.__cbOnceMaxTileHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMaxTileHeightChange[ii];
						this.__cbOnceOwnerUnbindMaxTileHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMaxTileHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceMaxTileHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMaxTileHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceMaxTileHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMaxTileHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnMaxTileHeightChange == null && this.__cbOnceMaxTileHeightChange == null) {
			this.willListenMaxTileHeightChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxTileHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxTileHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMaxTileHeightChange == null) {
				this.__cbOnOwnerUnbindMaxTileHeightChange = [];
			}
			this.__cbOnOwnerUnbindMaxTileHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMaxTileHeightChange == null) {
				this.__cbOnOwnerUnbindMaxTileHeightChange = [];
			}
			this.__cbOnOwnerUnbindMaxTileHeightChange.push(null);
		}
		if(this.__cbOnMaxTileHeightChange == null) {
			this.__cbOnMaxTileHeightChange = [];
		}
		this.__cbOnMaxTileHeightChange.push(handleCurrentPrevious);
	}
	,onceMaxTileHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnMaxTileHeightChange == null && this.__cbOnceMaxTileHeightChange == null) {
			this.willListenMaxTileHeightChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "maxTileHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMaxTileHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMaxTileHeightChange == null) {
				this.__cbOnceOwnerUnbindMaxTileHeightChange = [];
			}
			this.__cbOnceOwnerUnbindMaxTileHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMaxTileHeightChange == null) {
				this.__cbOnceOwnerUnbindMaxTileHeightChange = [];
			}
			this.__cbOnceOwnerUnbindMaxTileHeightChange.push(null);
		}
		if(this.__cbOnceMaxTileHeightChange == null) {
			this.__cbOnceMaxTileHeightChange = [];
		}
		this.__cbOnceMaxTileHeightChange.push(handleCurrentPrevious);
	}
	,offMaxTileHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnMaxTileHeightChange != null) {
				index = this.__cbOnMaxTileHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnMaxTileHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMaxTileHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMaxTileHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceMaxTileHeightChange != null) {
				index = this.__cbOnceMaxTileHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceMaxTileHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMaxTileHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMaxTileHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMaxTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMaxTileHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMaxTileHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMaxTileHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindMaxTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMaxTileHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMaxTileHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMaxTileHeightChange = null;
			}
			this.__cbOnMaxTileHeightChange = null;
			this.__cbOnceMaxTileHeightChange = null;
		}
	}
	,listensMaxTileHeightChange: function() {
		if(!(this.__cbOnMaxTileHeightChange != null && this.__cbOnMaxTileHeightChange.length > 0)) {
			if(this.__cbOnceMaxTileHeightChange != null) {
				return this.__cbOnceMaxTileHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computeMaxTileHeight: function() {
		var result = -1;
		var layers = this.get_layers();
		if(layers != null) {
			var _g = 0;
			var _g1 = layers.length;
			while(_g < _g1) {
				var i = _g++;
				var layer = layers[i];
				var tileHeight = layer.get_tileHeight();
				if(tileHeight > result) {
					result = tileHeight;
				}
			}
		}
		return result;
	}
	,computeAutorunMaxTileHeight: null
	,computedOnceMaxTileHeight: null
	,tilesetsAutoruns: null
	,get_tilesets: function() {
		var value = this.unobservedTilesets;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tilesetsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tilesetsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tilesets: function(tilesets) {
		var prevValue = this.unobservedTilesets;
		this.unobservedTilesets = tilesets;
		if(prevValue == tilesets) {
			return tilesets;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTilesetsChange(tilesets,prevValue);
		var fieldAutoruns = this.tilesetsAutoruns;
		if(fieldAutoruns != null) {
			this.tilesetsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tilesets;
	}
	,invalidateTilesets: function() {
		var value = this.unobservedTilesets;
		this.emitTilesetsChange(value,value);
		var fieldAutoruns = this.tilesetsAutoruns;
		if(fieldAutoruns != null) {
			this.tilesetsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTilesets: null
	,__cbOnTilesetsChange: null
	,__cbOnceTilesetsChange: null
	,__cbOnOwnerUnbindTilesetsChange: null
	,__cbOnceOwnerUnbindTilesetsChange: null
	,emitTilesetsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTilesetsChange != null) {
			len += this.__cbOnTilesetsChange.length;
		}
		if(this.__cbOnceTilesetsChange != null) {
			len += this.__cbOnceTilesetsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTilesetsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTilesetsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTilesetsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTilesetsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTilesetsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTilesetsChange[ii];
						this.__cbOnceTilesetsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTilesetsChange[ii];
						this.__cbOnceOwnerUnbindTilesetsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTilesetsChange[ii]);
						newCbOnceArray.push(this.__cbOnceTilesetsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTilesetsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTilesetsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTilesetsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tilesetsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTilesetsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTilesetsChange == null) {
				this.__cbOnOwnerUnbindTilesetsChange = [];
			}
			this.__cbOnOwnerUnbindTilesetsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTilesetsChange == null) {
				this.__cbOnOwnerUnbindTilesetsChange = [];
			}
			this.__cbOnOwnerUnbindTilesetsChange.push(null);
		}
		if(this.__cbOnTilesetsChange == null) {
			this.__cbOnTilesetsChange = [];
		}
		this.__cbOnTilesetsChange.push(handleCurrentPrevious);
	}
	,onceTilesetsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tilesetsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTilesetsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTilesetsChange == null) {
				this.__cbOnceOwnerUnbindTilesetsChange = [];
			}
			this.__cbOnceOwnerUnbindTilesetsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTilesetsChange == null) {
				this.__cbOnceOwnerUnbindTilesetsChange = [];
			}
			this.__cbOnceOwnerUnbindTilesetsChange.push(null);
		}
		if(this.__cbOnceTilesetsChange == null) {
			this.__cbOnceTilesetsChange = [];
		}
		this.__cbOnceTilesetsChange.push(handleCurrentPrevious);
	}
	,offTilesetsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTilesetsChange != null) {
				index = this.__cbOnTilesetsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTilesetsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTilesetsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTilesetsChange.splice(index,1);
				}
			}
			if(this.__cbOnceTilesetsChange != null) {
				index = this.__cbOnceTilesetsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTilesetsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTilesetsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTilesetsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTilesetsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTilesetsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTilesetsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTilesetsChange = null;
			}
			if(this.__cbOnceOwnerUnbindTilesetsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTilesetsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTilesetsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTilesetsChange = null;
			}
			this.__cbOnTilesetsChange = null;
			this.__cbOnceTilesetsChange = null;
		}
	}
	,listensTilesetsChange: function() {
		if(!(this.__cbOnTilesetsChange != null && this.__cbOnTilesetsChange.length > 0)) {
			if(this.__cbOnceTilesetsChange != null) {
				return this.__cbOnceTilesetsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,layersAutoruns: null
	,get_layers: function() {
		var value = this.unobservedLayers;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.layersAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.layersAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_layers: function(layers) {
		var prevValue = this.unobservedLayers;
		this.unobservedLayers = layers;
		if(prevValue == layers) {
			return layers;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitLayersChange(layers,prevValue);
		var fieldAutoruns = this.layersAutoruns;
		if(fieldAutoruns != null) {
			this.layersAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return layers;
	}
	,invalidateLayers: function() {
		var value = this.unobservedLayers;
		this.emitLayersChange(value,value);
		var fieldAutoruns = this.layersAutoruns;
		if(fieldAutoruns != null) {
			this.layersAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedLayers: null
	,__cbOnLayersChange: null
	,__cbOnceLayersChange: null
	,__cbOnOwnerUnbindLayersChange: null
	,__cbOnceOwnerUnbindLayersChange: null
	,emitLayersChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnLayersChange != null) {
			len += this.__cbOnLayersChange.length;
		}
		if(this.__cbOnceLayersChange != null) {
			len += this.__cbOnceLayersChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnLayersChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnLayersChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnLayersChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceLayersChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceLayersChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceLayersChange[ii];
						this.__cbOnceLayersChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindLayersChange[ii];
						this.__cbOnceOwnerUnbindLayersChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindLayersChange[ii]);
						newCbOnceArray.push(this.__cbOnceLayersChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindLayersChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceLayersChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onLayersChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "layersChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offLayersChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindLayersChange == null) {
				this.__cbOnOwnerUnbindLayersChange = [];
			}
			this.__cbOnOwnerUnbindLayersChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindLayersChange == null) {
				this.__cbOnOwnerUnbindLayersChange = [];
			}
			this.__cbOnOwnerUnbindLayersChange.push(null);
		}
		if(this.__cbOnLayersChange == null) {
			this.__cbOnLayersChange = [];
		}
		this.__cbOnLayersChange.push(handleCurrentPrevious);
	}
	,onceLayersChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "layersChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offLayersChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindLayersChange == null) {
				this.__cbOnceOwnerUnbindLayersChange = [];
			}
			this.__cbOnceOwnerUnbindLayersChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindLayersChange == null) {
				this.__cbOnceOwnerUnbindLayersChange = [];
			}
			this.__cbOnceOwnerUnbindLayersChange.push(null);
		}
		if(this.__cbOnceLayersChange == null) {
			this.__cbOnceLayersChange = [];
		}
		this.__cbOnceLayersChange.push(handleCurrentPrevious);
	}
	,offLayersChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnLayersChange != null) {
				index = this.__cbOnLayersChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnLayersChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindLayersChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindLayersChange.splice(index,1);
				}
			}
			if(this.__cbOnceLayersChange != null) {
				index = this.__cbOnceLayersChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceLayersChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindLayersChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindLayersChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindLayersChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindLayersChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindLayersChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindLayersChange = null;
			}
			if(this.__cbOnceOwnerUnbindLayersChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindLayersChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindLayersChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindLayersChange = null;
			}
			this.__cbOnLayersChange = null;
			this.__cbOnceLayersChange = null;
		}
	}
	,listensLayersChange: function() {
		if(!(this.__cbOnLayersChange != null && this.__cbOnLayersChange.length > 0)) {
			if(this.__cbOnceLayersChange != null) {
				return this.__cbOnceLayersChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,asset: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		tracker_Model.prototype.destroy.call(this);
		if(this.asset != null) {
			this.asset.destroy();
			this.asset = null;
		}
		var _g = 0;
		var _g1 = this.get_layers().length;
		while(_g < _g1) {
			var i = _g++;
			this.get_layers()[i].destroy();
		}
		this.set_layers(null);
	}
	,tilesetForGid: function(gid) {
		var t = this.get_tilesets().length - 1;
		var result = null;
		while(t >= 0) {
			var tileset = this.get_tilesets()[t];
			if(gid >= tileset.get_firstGid()) {
				result = tileset;
				break;
			}
			--t;
		}
		return result;
	}
	,layer: function(name) {
		var layers = this.get_layers();
		var _g = 0;
		var _g1 = layers.length;
		while(_g < _g1) {
			var i = _g++;
			var layer = layers[i];
			if(layer.get_name() == name) {
				return layer;
			}
		}
		return null;
	}
	,setTexturesFilter: function(filter) {
		var _g = 0;
		var _g1 = this.get_tilesets().length;
		while(_g < _g1) {
			var i = _g++;
			var tileset = this.get_tilesets()[i];
			if(tileset.get_image() != null) {
				if(tileset.get_image().texture != null) {
					tileset.get_image().texture.set_filter(filter);
				}
			}
		}
	}
	,size: function(width,height) {
		this.set_width(width);
		this.set_height(height);
	}
	,tileset: function(name) {
		var _g = 0;
		var _g1 = this.get_tilesets().length;
		while(_g < _g1) {
			var i = _g++;
			var tileset = this.get_tilesets()[i];
			if(tileset.get_name() == name) {
				return tileset;
			}
		}
		return null;
	}
	,toString: function() {
		var tmp = this.get_orientation();
		var tmp1 = this.get_width();
		var tmp2 = this.get_height();
		var tmp3 = this.get_renderOrder();
		var tmp4 = this.get_hexSideLength();
		var tmp5 = this.get_staggerAxis();
		var tmp6 = this.get_staggerIndex();
		var this1 = this.get_backgroundColor();
		return "" + Std.string({ orientation : tmp, width : tmp1, height : tmp2, renderOrder : tmp3, hexSideLength : tmp4, staggerAxis : tmp5, staggerIndex : tmp6, backgroundColor : this1 == -1 ? "NONE" : "0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2), tilesets : this.get_tilesets(), layers : this.get_layers()});
	}
	,unbindEvents: function() {
		tracker_Model.prototype.unbindEvents.call(this);
		this.offNameChange();
		this.offOrientationChange();
		this.offWidthChange();
		this.offHeightChange();
		this.offRenderOrderChange();
		this.offHexSideLengthChange();
		this.offStaggerAxisChange();
		this.offStaggerIndexChange();
		this.offBackgroundColorChange();
		this.offMaxTileWidthChange();
		this.offMaxTileHeightChange();
		this.offTilesetsChange();
		this.offLayersChange();
	}
	,_default_nameAutoruns: function() {
		return null;
	}
	,_default_name: function() {
		return null;
	}
	,_default_orientationAutoruns: function() {
		return null;
	}
	,_default_orientation: function() {
		return ceramic_TilemapOrientation.ORTHOGONAL;
	}
	,_default_widthAutoruns: function() {
		return null;
	}
	,_default_width: function() {
		return -1;
	}
	,_default_heightAutoruns: function() {
		return null;
	}
	,_default_height: function() {
		return -1;
	}
	,_default_renderOrderAutoruns: function() {
		return null;
	}
	,_default_renderOrder: function() {
		return ceramic_TilemapRenderOrder.RIGHT_DOWN;
	}
	,_default_hexSideLengthAutoruns: function() {
		return null;
	}
	,_default_hexSideLength: function() {
		return -1;
	}
	,_default_staggerAxisAutoruns: function() {
		return null;
	}
	,_default_staggerAxis: function() {
		return ceramic_TilemapStaggerAxis.AXIS_X;
	}
	,_default_staggerIndexAutoruns: function() {
		return null;
	}
	,_default_staggerIndex: function() {
		return ceramic_TilemapStaggerIndex.ODD;
	}
	,_default_backgroundColorAutoruns: function() {
		return null;
	}
	,_default_backgroundColor: function() {
		var alpha = 0;
		if(alpha == null) {
			alpha = 255;
		}
		var value = (16777215 | 0) + (-16777216);
		value &= 16777215;
		value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
		return value;
	}
	,_default_maxTileWidthAutoruns: function() {
		return null;
	}
	,_default_computedOnceMaxTileWidth: function() {
		return false;
	}
	,_default_maxTileHeightAutoruns: function() {
		return null;
	}
	,_default_computedOnceMaxTileHeight: function() {
		return false;
	}
	,_default_tilesetsAutoruns: function() {
		return null;
	}
	,_default_tilesets: function() {
		return [];
	}
	,_default_layersAutoruns: function() {
		return null;
	}
	,_default_layers: function() {
		return [];
	}
	,__class__: ceramic_TilemapData
	,__properties__: $extend(tracker_Model.prototype.__properties__,{set_layers:"set_layers",get_layers:"get_layers",set_tilesets:"set_tilesets",get_tilesets:"get_tilesets",get_unobservedMaxTileHeight:"get_unobservedMaxTileHeight",set_maxTileHeight:"set_maxTileHeight",get_maxTileHeight:"get_maxTileHeight",get_unobservedMaxTileWidth:"get_unobservedMaxTileWidth",set_maxTileWidth:"set_maxTileWidth",get_maxTileWidth:"get_maxTileWidth",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_staggerIndex:"set_staggerIndex",get_staggerIndex:"get_staggerIndex",set_staggerAxis:"set_staggerAxis",get_staggerAxis:"get_staggerAxis",set_hexSideLength:"set_hexSideLength",get_hexSideLength:"get_hexSideLength",set_renderOrder:"set_renderOrder",get_renderOrder:"get_renderOrder",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_orientation:"set_orientation",get_orientation:"get_orientation",set_name:"set_name",get_name:"get_name"})
});
var ceramic_TilemapLayer = function() {
	this.tileQuadMapping = new ceramic_IntIntMap();
	this.tilesFilter = null;
	this.autoSizeTilesFilter = true;
	this.destroyTilesFilterOnRemove = true;
	this.tilesColor = 16777215;
	this.tileQuads = [];
	this.tileScale = 1.0;
	this.layerData = null;
	this.tilemap = null;
	ceramic_Visual.call(this);
};
$hxClasses["ceramic.TilemapLayer"] = ceramic_TilemapLayer;
ceramic_TilemapLayer.__name__ = "ceramic.TilemapLayer";
ceramic_TilemapLayer.__super__ = ceramic_Visual;
ceramic_TilemapLayer.prototype = $extend(ceramic_Visual.prototype,{
	__cbOnTileQuadsChange: null
	,__cbOnceTileQuadsChange: null
	,__cbOnOwnerUnbindTileQuadsChange: null
	,__cbOnceOwnerUnbindTileQuadsChange: null
	,emitTileQuadsChange: function() {
		var len = 0;
		if(this.__cbOnTileQuadsChange != null) {
			len += this.__cbOnTileQuadsChange.length;
		}
		if(this.__cbOnceTileQuadsChange != null) {
			len += this.__cbOnceTileQuadsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTileQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTileQuadsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTileQuadsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTileQuadsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTileQuadsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTileQuadsChange[ii];
						this.__cbOnceTileQuadsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTileQuadsChange[ii];
						this.__cbOnceOwnerUnbindTileQuadsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTileQuadsChange[ii]);
						newCbOnceArray.push(this.__cbOnceTileQuadsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTileQuadsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTileQuadsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTileQuadsChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileQuadsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offTileQuadsChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTileQuadsChange == null) {
				this.__cbOnOwnerUnbindTileQuadsChange = [];
			}
			this.__cbOnOwnerUnbindTileQuadsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTileQuadsChange == null) {
				this.__cbOnOwnerUnbindTileQuadsChange = [];
			}
			this.__cbOnOwnerUnbindTileQuadsChange.push(null);
		}
		if(this.__cbOnTileQuadsChange == null) {
			this.__cbOnTileQuadsChange = [];
		}
		this.__cbOnTileQuadsChange.push(handle);
	}
	,onceTileQuadsChange: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileQuadsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offTileQuadsChange(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTileQuadsChange == null) {
				this.__cbOnceOwnerUnbindTileQuadsChange = [];
			}
			this.__cbOnceOwnerUnbindTileQuadsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTileQuadsChange == null) {
				this.__cbOnceOwnerUnbindTileQuadsChange = [];
			}
			this.__cbOnceOwnerUnbindTileQuadsChange.push(null);
		}
		if(this.__cbOnceTileQuadsChange == null) {
			this.__cbOnceTileQuadsChange = [];
		}
		this.__cbOnceTileQuadsChange.push(handle);
	}
	,offTileQuadsChange: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnTileQuadsChange != null) {
				index = this.__cbOnTileQuadsChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnTileQuadsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTileQuadsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTileQuadsChange.splice(index,1);
				}
			}
			if(this.__cbOnceTileQuadsChange != null) {
				index = this.__cbOnceTileQuadsChange.indexOf(handle);
				if(index != -1) {
					this.__cbOnceTileQuadsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTileQuadsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTileQuadsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTileQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTileQuadsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTileQuadsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTileQuadsChange = null;
			}
			if(this.__cbOnceOwnerUnbindTileQuadsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTileQuadsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTileQuadsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTileQuadsChange = null;
			}
			this.__cbOnTileQuadsChange = null;
			this.__cbOnceTileQuadsChange = null;
		}
	}
	,listensTileQuadsChange: function() {
		if(!(this.__cbOnTileQuadsChange != null && this.__cbOnTileQuadsChange.length > 0)) {
			if(this.__cbOnceTileQuadsChange != null) {
				return this.__cbOnceTileQuadsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tilemap: null
	,layerData: null
	,set_layerData: function(layerData) {
		if(this.layerData == layerData) {
			return layerData;
		}
		this.layerData = layerData;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return layerData;
	}
	,tileScale: null
	,set_tileScale: function(tileScale) {
		if(this.tileScale == tileScale) {
			return tileScale;
		}
		this.tileScale = tileScale;
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return tileScale;
	}
	,tileQuads: null
	,tilesColor: null
	,set_tilesColor: function(tilesColor) {
		if(this.tilesColor != tilesColor) {
			this.tilesColor = tilesColor;
			var layerColor = this.layerData != null ? this.layerData.get_color() : 16777215;
			var red = (tilesColor >> 16 & 255) / 255 * ((layerColor >> 16 & 255) / 255);
			var green = (tilesColor >> 8 & 255) / 255 * ((layerColor >> 8 & 255) / 255);
			var blue = (tilesColor & 255) / 255 * ((layerColor & 255) / 255);
			var color = 0;
			var value = Math.round(red * 255);
			color &= 65535;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
			var value = Math.round(green * 255);
			color &= 16711935;
			color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 8;
			var value = Math.round(blue * 255);
			color &= 16776960;
			color |= value > 255 ? 255 : value < 0 ? 0 : value;
			var mergedColor = color;
			var _g = 0;
			var _g1 = this.tileQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var tileQuad = this.tileQuads[i];
				tileQuad.color = mergedColor;
			}
		}
		return tilesColor;
	}
	,destroyTilesFilterOnRemove: null
	,autoSizeTilesFilter: null
	,tilesFilter: null
	,set_tilesFilter: function(tilesFilter) {
		if(this.tilesFilter == tilesFilter) {
			return tilesFilter;
		}
		if(this.tilesFilter != null) {
			var tilesFilterContent = this.tilesFilter.content;
			var _g = 0;
			var _g1 = this.tileQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var tileQuad = this.tileQuads[i];
				if(tileQuad.parent == tilesFilterContent) {
					tilesFilterContent.remove(tileQuad);
				}
			}
			if(this.destroyTilesFilterOnRemove) {
				this.tilesFilter.destroy();
			} else if(this.tilesFilter.parent == this) {
				this.remove(this.tilesFilter);
			}
			this.tilesFilter = null;
		}
		this.tilesFilter = tilesFilter;
		if(tilesFilter != null) {
			var tilesFilterContent = tilesFilter.content;
			var _g = 0;
			var _g1 = this.tileQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var tileQuad = this.tileQuads[i];
				tilesFilterContent.add(tileQuad);
			}
			this.add(tilesFilter);
		} else {
			var _g = 0;
			var _g1 = this.tileQuads.length;
			while(_g < _g1) {
				var i = _g++;
				var tileQuad = this.tileQuads[i];
				this.add(tileQuad);
			}
		}
		this.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
		return tilesFilter;
	}
	,tileQuadMapping: null
	,get_width: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Visual.prototype.get_width.call(this);
	}
	,get_height: function() {
		if(this.contentDirty) {
			this.computeContent();
		}
		return ceramic_Visual.prototype.get_height.call(this);
	}
	,computeContent: function() {
		if(this.layerData == null) {
			this.set_width(0);
			this.set_height(0);
			this.contentDirty = false;
			return;
		}
		var tilemap = this.tilemap;
		var tilemapData = tilemap.tilemapData;
		this.computePosAndSize();
		this.computeTileQuads(tilemap,tilemapData);
		this.contentDirty = false;
	}
	,computePosAndSize: function() {
		var layerData = this.layerData;
		var x = layerData.get_x() * layerData.get_tileWidth() + layerData.get_offsetX();
		var y = layerData.get_y() * layerData.get_tileHeight() + layerData.get_offsetY();
		this.set_x(x);
		this.set_y(y);
		var width = layerData.get_columns() * layerData.get_tileWidth();
		var height = layerData.get_rows() * layerData.get_tileHeight();
		this.set_width(width);
		this.set_height(height);
	}
	,computeTileQuads: function(tilemap,tilemapData) {
		var usedQuads = 0;
		var roundTilesTranslation = tilemap.roundTilesTranslation;
		var layerData = this.layerData;
		if(layerData.get_shouldRenderTiles() && layerData.get_hasTiles()) {
			var width = this._width;
			var height = this._height;
			var layerColumns = layerData.get_columns();
			var layerRows = layerData.get_rows();
			var hasClipping = false;
			var clipTilesX = tilemap.clipTilesX;
			var clipTilesY = tilemap.clipTilesY;
			var clipTilesWidth = tilemap.clipTilesWidth;
			var clipTilesHeight = tilemap.clipTilesHeight;
			if(clipTilesX != -1 || clipTilesY != -1 || clipTilesWidth != -1 || clipTilesHeight != -1) {
				hasClipping = true;
			}
			var startDepthX = 0;
			var startDepthY = 0;
			var depthXStep = 1;
			var depthYStep = layerColumns;
			switch(tilemapData.get_renderOrder()._hx_index) {
			case 0:
				break;
			case 1:
				startDepthY = layerColumns * (layerRows - 1);
				depthYStep = -layerColumns;
				break;
			case 2:
				startDepthX = layerColumns - 1;
				depthXStep = -1;
				break;
			case 3:
				startDepthX = layerColumns - 1;
				depthXStep = -1;
				startDepthY = layerColumns * (layerRows - 1);
				depthYStep = -layerColumns;
				break;
			}
			var offsetX = layerData.get_offsetX() + layerData.get_x() * layerData.get_tileWidth();
			var offsetY = layerData.get_offsetY() + layerData.get_y() * layerData.get_tileHeight();
			var filterX = 0.0;
			var filterY = 0.0;
			if(this.tilesFilter != null) {
				var filterWidth = width;
				var filterHeight = height;
				if(hasClipping) {
					filterX = Math.floor(clipTilesX / layerData.get_tileWidth()) * layerData.get_tileWidth() - offsetX;
					filterY = Math.floor(clipTilesY / layerData.get_tileHeight()) * layerData.get_tileHeight() - offsetY;
					var _this = this.tilesFilter;
					_this.set_x(filterX);
					_this.set_y(filterY);
					filterWidth = Math.ceil(clipTilesWidth / layerData.get_tileWidth()) * layerData.get_tileWidth() + layerData.get_tileWidth();
					filterHeight = Math.ceil(clipTilesHeight / layerData.get_tileHeight()) * layerData.get_tileHeight() + layerData.get_tileHeight();
				} else {
					var _this = this.tilesFilter;
					_this.set_x(0);
					_this.set_y(0);
				}
				if(this.autoSizeTilesFilter && filterWidth > 0 && filterHeight > 0) {
					var _this = this.tilesFilter;
					_this.set_width(filterWidth);
					_this.set_height(filterHeight);
				}
			}
			if(layerData.get_visible()) {
				var tiles = layerData.get_computedTiles();
				if(tiles == null) {
					tiles = layerData.get_tiles();
				}
				if(tiles != null) {
					var minColumn = 0;
					var maxColumn = layerColumns - 1;
					var minRow = 0;
					var maxRow = layerRows - 1;
					var tilesPerLayer = layerColumns * layerRows;
					if(hasClipping) {
						minColumn = Math.floor((clipTilesX - offsetX) / layerData.get_tileWidth());
						maxColumn = Math.ceil((clipTilesX + clipTilesWidth - offsetX) / layerData.get_tileWidth());
						minRow = Math.floor((clipTilesY - offsetY) / layerData.get_tileHeight());
						maxRow = Math.ceil((clipTilesY + clipTilesHeight - offsetY) / layerData.get_tileHeight());
					}
					var numTiles = tiles.length;
					var c = minColumn;
					while(c <= maxColumn) {
						var r = minRow;
						while(r <= maxRow) {
							var t = r * layerColumns + c;
							if(t < 0 || t >= numTiles) {
								++r;
								continue;
							}
							while(t < numTiles) {
								var tile = tiles[t];
								if(tile == 0) {
									t += tilesPerLayer;
									continue;
								}
								var gid = tile & 536870911;
								var t1 = tilemapData.get_tilesets().length - 1;
								var result = null;
								while(t1 >= 0) {
									var tileset = tilemapData.get_tilesets()[t1];
									if(gid >= tileset.get_firstGid()) {
										result = tileset;
										break;
									}
									--t1;
								}
								var tileset1 = result;
								if(tileset1 != null && tileset1.get_image() != null && tileset1.get_columns() > 0) {
									var index = gid - tileset1.get_firstGid();
									var column = t % layerColumns;
									var row = Math.floor(t / layerColumns);
									var depthExtra = 0.0;
									var lhs = layerData.get_color();
									var rhs = this.tilesColor;
									var red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
									var green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
									var blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
									var color = 0;
									var value = Math.round(red * 255);
									color &= 65535;
									color |= (value > 255 ? 255 : value < 0 ? 0 : value) << 16;
									var value1 = Math.round(green * 255);
									color &= 16711935;
									color |= (value1 > 255 ? 255 : value1 < 0 ? 0 : value1) << 8;
									var value2 = Math.round(blue * 255);
									color &= 16776960;
									color |= value2 > 255 ? 255 : value2 < 0 ? 0 : value2;
									var color1 = color;
									var alpha = layerData.get_opacity();
									var blending = layerData.get_blending();
									if(row >= layerRows) {
										row -= layerRows;
										depthExtra += 0.1;
										blending = layerData.get_extraBlending();
										alpha = layerData.get_extraOpacity();
									}
									while(row >= layerRows) {
										row -= layerRows;
										depthExtra += 0.1;
									}
									var tileLeft = column * tileset1.get_tileWidth();
									var tileTop = row * tileset1.get_tileWidth();
									var tileWidth = tileset1.get_tileWidth();
									var tileHeight = tileset1.get_tileHeight();
									var tileRight = tileLeft + tileWidth;
									var tileBottom = tileTop + tileHeight;
									var quad = usedQuads < this.tileQuads.length ? this.tileQuads[usedQuads] : null;
									if(quad == null) {
										quad = ceramic_TilemapQuad.get();
										quad.set_anchorX(0.5);
										quad.set_anchorY(0.5);
										if(quad.inheritAlpha != true) {
											quad.inheritAlpha = true;
											quad.visibilityDirty = true;
											if(quad.children != null) {
												var _g = 0;
												var _g1 = quad.children.length;
												while(_g < _g1) {
													var i = _g++;
													var child = quad.children[i];
													child.visibilityDirty = true;
													if(child.children != null) {
														var _g2 = 0;
														var _g3 = child.children.length;
														while(_g2 < _g3) {
															var i1 = _g2++;
															var child1 = child.children[i1];
															child1.set_visibilityDirty(true);
														}
													}
												}
											}
										}
										this.tileQuads.push(quad);
										if(this.tilesFilter != null) {
											this.tilesFilter.content.add(quad);
										} else {
											this.add(quad);
										}
									}
									++usedQuads;
									var tmp;
									if(quad.index != -1 && quad.index != t) {
										var value3 = this.tileQuadMapping.intMap.h[quad.index | 0];
										tmp = (value3 != null ? value3 : 0) == usedQuads;
									} else {
										tmp = false;
									}
									if(tmp) {
										this.tileQuadMapping.set(quad.index,0);
									}
									this.tileQuadMapping.set(t,usedQuads);
									quad.tilemapTile = tile;
									quad.set_roundTranslation(roundTilesTranslation);
									quad.color = color1;
									quad.index = t;
									quad.column = column;
									quad.row = row;
									quad.set_alpha(alpha);
									quad.set_blending(blending);
									quad.set_visible(true);
									var texture = tileset1.get_image().texture;
									if(quad._texture != texture) {
										quad._set_texture(texture);
									}
									quad.frameX = index % tileset1.get_columns() * (tileset1.get_tileWidth() + tileset1.get_margin() * 2 + tileset1.get_spacing()) + tileset1.get_margin();
									quad.frameY = Math.floor(index / tileset1.get_columns()) * (tileset1.get_tileHeight() + tileset1.get_margin() * 2) + tileset1.get_spacing();
									var frameWidth = tileset1.get_tileWidth();
									if(quad.frameWidth != frameWidth) {
										quad.frameWidth = frameWidth;
										if(frameWidth != -1) {
											quad.set_width(frameWidth);
										}
									}
									var frameHeight = tileset1.get_tileHeight();
									if(quad.frameHeight != frameHeight) {
										quad.frameHeight = frameHeight;
										if(frameHeight != -1) {
											quad.set_height(frameHeight);
										}
									}
									quad.set_depth(startDepthX + column * depthXStep + startDepthY + row * depthYStep + depthExtra);
									quad.set_x(tileWidth * 0.5 + tileLeft - filterX);
									quad.set_y(tileHeight * 0.5 + tileTop - filterY);
									if((tile & 536870912) != 0) {
										if((tile & 1073741824) != 0) {
											quad.set_scaleX(-1.0 * this.tileScale);
										} else {
											quad.set_scaleX(this.tileScale);
										}
										if((tile & -2147483648) != 0) {
											quad.set_scaleY(this.tileScale);
										} else {
											quad.set_scaleY(-1.0 * this.tileScale);
										}
										quad.flags |= 32;
									} else {
										if((tile & -2147483648) != 0) {
											quad.set_scaleX(-1.0 * this.tileScale);
										} else {
											quad.set_scaleX(this.tileScale);
										}
										if((tile & 1073741824) != 0) {
											quad.set_scaleY(-1.0 * this.tileScale);
										} else {
											quad.set_scaleY(this.tileScale);
										}
										quad.flags &= -33;
									}
								}
								t += tilesPerLayer;
							}
							++r;
						}
						++c;
					}
				}
			}
		}
		while(usedQuads < this.tileQuads.length) {
			var quad = this.tileQuads.pop();
			quad.recycle();
		}
		this.emitTileQuadsChange();
	}
	,tileQuadByColumnAndRow: function(column,row) {
		var index = row * this.layerData.get_columns() + column;
		var value = this.tileQuadMapping.intMap.h[index | 0];
		var arrayIndex = value != null ? value : 0;
		if(arrayIndex != -1) {
			return this.tileQuads[arrayIndex - 1];
		} else {
			return null;
		}
	}
	,tileQuadByIndex: function(index) {
		var value = this.tileQuadMapping.intMap.h[index | 0];
		var arrayIndex = value != null ? value : 0;
		if(arrayIndex != -1) {
			return this.tileQuads[arrayIndex - 1];
		} else {
			return null;
		}
	}
	,surroundingTileQuads: function(left,top,right,bottom,result) {
		if(result == null) {
			result = [];
		}
		if(this.parent != null) {
			var layerData = this.layerData;
			var tileWidth = layerData.get_tileWidth();
			var tileHeight = layerData.get_tileHeight();
			var minColumn = Math.floor(left / tileWidth);
			var maxColumn = Math.ceil(right / tileWidth);
			var minRow = Math.floor(top / tileHeight);
			var maxRow = Math.ceil(bottom / tileHeight);
			var column = minColumn;
			while(column <= maxColumn) {
				var row = minRow;
				while(row <= maxRow) {
					var index = row * this.layerData.get_columns() + column;
					var value = this.tileQuadMapping.intMap.h[index | 0];
					var arrayIndex = value != null ? value : 0;
					var tileQuad = arrayIndex != -1 ? this.tileQuads[arrayIndex - 1] : null;
					if(tileQuad != null) {
						result.push(tileQuad);
					}
					++row;
				}
				++column;
			}
		}
		return result;
	}
	,unbindEvents: function() {
		ceramic_Visual.prototype.unbindEvents.call(this);
		this.offTileQuadsChange();
	}
	,__class__: ceramic_TilemapLayer
	,__properties__: $extend(ceramic_Visual.prototype.__properties__,{set_tilesFilter:"set_tilesFilter",set_tilesColor:"set_tilesColor",set_tileScale:"set_tileScale",set_layerData:"set_layerData"})
});
var ceramic_TilemapLayerData = function() {
	this.unobservedTileHeight = -1;
	this.tileHeightAutoruns = null;
	this.unobservedTileWidth = -1;
	this.tileWidthAutoruns = null;
	this.unobservedShouldRenderTiles = true;
	this.shouldRenderTilesAutoruns = null;
	this.computedOnceHasTiles = false;
	this.hasTilesAutoruns = null;
	this.unobservedComputedTiles = null;
	this.computedTilesAutoruns = null;
	this.unobservedTiles = null;
	this.tilesAutoruns = null;
	this.unobservedExtraOpacity = 1;
	this.extraOpacityAutoruns = null;
	this.unobservedExtraBlending = 0;
	this.extraBlendingAutoruns = null;
	this.unobservedColor = 16777215;
	this.colorAutoruns = null;
	this.unobservedBlending = 0;
	this.blendingAutoruns = null;
	this.unobservedExplicitDepth = null;
	this.explicitDepthAutoruns = null;
	this.unobservedOffsetY = 0;
	this.offsetYAutoruns = null;
	this.unobservedOffsetX = 0;
	this.offsetXAutoruns = null;
	this.unobservedVisible = true;
	this.visibleAutoruns = null;
	this.unobservedOpacity = 1;
	this.opacityAutoruns = null;
	this.unobservedRows = 0;
	this.rowsAutoruns = null;
	this.unobservedColumns = 0;
	this.columnsAutoruns = null;
	this.unobservedY = 0;
	this.yAutoruns = null;
	this.unobservedX = 0;
	this.xAutoruns = null;
	this.unobservedName = null;
	this.nameAutoruns = null;
	tracker_Model.call(this);
};
$hxClasses["ceramic.TilemapLayerData"] = ceramic_TilemapLayerData;
ceramic_TilemapLayerData.__name__ = "ceramic.TilemapLayerData";
ceramic_TilemapLayerData.__super__ = tracker_Model;
ceramic_TilemapLayerData.prototype = $extend(tracker_Model.prototype,{
	nameAutoruns: null
	,get_name: function() {
		var value = this.unobservedName;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.nameAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.nameAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_name: function(name) {
		var prevValue = this.unobservedName;
		this.unobservedName = name;
		if(prevValue == name) {
			return name;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitNameChange(name,prevValue);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return name;
	}
	,invalidateName: function() {
		var value = this.unobservedName;
		this.emitNameChange(value,value);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedName: null
	,__cbOnNameChange: null
	,__cbOnceNameChange: null
	,__cbOnOwnerUnbindNameChange: null
	,__cbOnceOwnerUnbindNameChange: null
	,emitNameChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnNameChange != null) {
			len += this.__cbOnNameChange.length;
		}
		if(this.__cbOnceNameChange != null) {
			len += this.__cbOnceNameChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnNameChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceNameChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceNameChange[ii];
						this.__cbOnceNameChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindNameChange[ii];
						this.__cbOnceOwnerUnbindNameChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindNameChange[ii]);
						newCbOnceArray.push(this.__cbOnceNameChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindNameChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceNameChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnNameChange == null) {
			this.__cbOnNameChange = [];
		}
		this.__cbOnNameChange.push(handleCurrentPrevious);
	}
	,onceNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnceNameChange == null) {
			this.__cbOnceNameChange = [];
		}
		this.__cbOnceNameChange.push(handleCurrentPrevious);
	}
	,offNameChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnNameChange != null) {
				index = this.__cbOnNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnNameChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindNameChange.splice(index,1);
				}
			}
			if(this.__cbOnceNameChange != null) {
				index = this.__cbOnceNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceNameChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindNameChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindNameChange = null;
			}
			if(this.__cbOnceOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindNameChange = null;
			}
			this.__cbOnNameChange = null;
			this.__cbOnceNameChange = null;
		}
	}
	,listensNameChange: function() {
		if(!(this.__cbOnNameChange != null && this.__cbOnNameChange.length > 0)) {
			if(this.__cbOnceNameChange != null) {
				return this.__cbOnceNameChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,xAutoruns: null
	,get_x: function() {
		var value = this.unobservedX;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.xAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.xAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_x: function(x) {
		var prevValue = this.unobservedX;
		this.unobservedX = x;
		if(prevValue == x) {
			return x;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitXChange(x,prevValue);
		var fieldAutoruns = this.xAutoruns;
		if(fieldAutoruns != null) {
			this.xAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return x;
	}
	,invalidateX: function() {
		var value = this.unobservedX;
		this.emitXChange(value,value);
		var fieldAutoruns = this.xAutoruns;
		if(fieldAutoruns != null) {
			this.xAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedX: null
	,__cbOnXChange: null
	,__cbOnceXChange: null
	,__cbOnOwnerUnbindXChange: null
	,__cbOnceOwnerUnbindXChange: null
	,emitXChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnXChange != null) {
			len += this.__cbOnXChange.length;
		}
		if(this.__cbOnceXChange != null) {
			len += this.__cbOnceXChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnXChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnXChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnXChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceXChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceXChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceXChange[ii];
						this.__cbOnceXChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindXChange[ii];
						this.__cbOnceOwnerUnbindXChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindXChange[ii]);
						newCbOnceArray.push(this.__cbOnceXChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindXChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceXChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onXChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "xChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offXChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindXChange == null) {
				this.__cbOnOwnerUnbindXChange = [];
			}
			this.__cbOnOwnerUnbindXChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindXChange == null) {
				this.__cbOnOwnerUnbindXChange = [];
			}
			this.__cbOnOwnerUnbindXChange.push(null);
		}
		if(this.__cbOnXChange == null) {
			this.__cbOnXChange = [];
		}
		this.__cbOnXChange.push(handleCurrentPrevious);
	}
	,onceXChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "xChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offXChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindXChange == null) {
				this.__cbOnceOwnerUnbindXChange = [];
			}
			this.__cbOnceOwnerUnbindXChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindXChange == null) {
				this.__cbOnceOwnerUnbindXChange = [];
			}
			this.__cbOnceOwnerUnbindXChange.push(null);
		}
		if(this.__cbOnceXChange == null) {
			this.__cbOnceXChange = [];
		}
		this.__cbOnceXChange.push(handleCurrentPrevious);
	}
	,offXChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnXChange != null) {
				index = this.__cbOnXChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnXChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindXChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindXChange.splice(index,1);
				}
			}
			if(this.__cbOnceXChange != null) {
				index = this.__cbOnceXChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceXChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindXChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindXChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindXChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindXChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindXChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindXChange = null;
			}
			if(this.__cbOnceOwnerUnbindXChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindXChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindXChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindXChange = null;
			}
			this.__cbOnXChange = null;
			this.__cbOnceXChange = null;
		}
	}
	,listensXChange: function() {
		if(!(this.__cbOnXChange != null && this.__cbOnXChange.length > 0)) {
			if(this.__cbOnceXChange != null) {
				return this.__cbOnceXChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,yAutoruns: null
	,get_y: function() {
		var value = this.unobservedY;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.yAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.yAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_y: function(y) {
		var prevValue = this.unobservedY;
		this.unobservedY = y;
		if(prevValue == y) {
			return y;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitYChange(y,prevValue);
		var fieldAutoruns = this.yAutoruns;
		if(fieldAutoruns != null) {
			this.yAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return y;
	}
	,invalidateY: function() {
		var value = this.unobservedY;
		this.emitYChange(value,value);
		var fieldAutoruns = this.yAutoruns;
		if(fieldAutoruns != null) {
			this.yAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedY: null
	,__cbOnYChange: null
	,__cbOnceYChange: null
	,__cbOnOwnerUnbindYChange: null
	,__cbOnceOwnerUnbindYChange: null
	,emitYChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnYChange != null) {
			len += this.__cbOnYChange.length;
		}
		if(this.__cbOnceYChange != null) {
			len += this.__cbOnceYChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnYChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnYChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnYChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceYChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceYChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceYChange[ii];
						this.__cbOnceYChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindYChange[ii];
						this.__cbOnceOwnerUnbindYChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindYChange[ii]);
						newCbOnceArray.push(this.__cbOnceYChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindYChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceYChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onYChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "yChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offYChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindYChange == null) {
				this.__cbOnOwnerUnbindYChange = [];
			}
			this.__cbOnOwnerUnbindYChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindYChange == null) {
				this.__cbOnOwnerUnbindYChange = [];
			}
			this.__cbOnOwnerUnbindYChange.push(null);
		}
		if(this.__cbOnYChange == null) {
			this.__cbOnYChange = [];
		}
		this.__cbOnYChange.push(handleCurrentPrevious);
	}
	,onceYChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "yChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offYChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindYChange == null) {
				this.__cbOnceOwnerUnbindYChange = [];
			}
			this.__cbOnceOwnerUnbindYChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindYChange == null) {
				this.__cbOnceOwnerUnbindYChange = [];
			}
			this.__cbOnceOwnerUnbindYChange.push(null);
		}
		if(this.__cbOnceYChange == null) {
			this.__cbOnceYChange = [];
		}
		this.__cbOnceYChange.push(handleCurrentPrevious);
	}
	,offYChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnYChange != null) {
				index = this.__cbOnYChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnYChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindYChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindYChange.splice(index,1);
				}
			}
			if(this.__cbOnceYChange != null) {
				index = this.__cbOnceYChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceYChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindYChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindYChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindYChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindYChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindYChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindYChange = null;
			}
			if(this.__cbOnceOwnerUnbindYChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindYChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindYChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindYChange = null;
			}
			this.__cbOnYChange = null;
			this.__cbOnceYChange = null;
		}
	}
	,listensYChange: function() {
		if(!(this.__cbOnYChange != null && this.__cbOnYChange.length > 0)) {
			if(this.__cbOnceYChange != null) {
				return this.__cbOnceYChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,columnsAutoruns: null
	,get_columns: function() {
		var value = this.unobservedColumns;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.columnsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.columnsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_columns: function(columns) {
		var prevValue = this.unobservedColumns;
		this.unobservedColumns = columns;
		if(prevValue == columns) {
			return columns;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitColumnsChange(columns,prevValue);
		var fieldAutoruns = this.columnsAutoruns;
		if(fieldAutoruns != null) {
			this.columnsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return columns;
	}
	,invalidateColumns: function() {
		var value = this.unobservedColumns;
		this.emitColumnsChange(value,value);
		var fieldAutoruns = this.columnsAutoruns;
		if(fieldAutoruns != null) {
			this.columnsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedColumns: null
	,__cbOnColumnsChange: null
	,__cbOnceColumnsChange: null
	,__cbOnOwnerUnbindColumnsChange: null
	,__cbOnceOwnerUnbindColumnsChange: null
	,emitColumnsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnColumnsChange != null) {
			len += this.__cbOnColumnsChange.length;
		}
		if(this.__cbOnceColumnsChange != null) {
			len += this.__cbOnceColumnsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnColumnsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnColumnsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnColumnsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceColumnsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceColumnsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceColumnsChange[ii];
						this.__cbOnceColumnsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindColumnsChange[ii];
						this.__cbOnceOwnerUnbindColumnsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindColumnsChange[ii]);
						newCbOnceArray.push(this.__cbOnceColumnsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindColumnsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceColumnsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onColumnsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "columnsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offColumnsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindColumnsChange == null) {
				this.__cbOnOwnerUnbindColumnsChange = [];
			}
			this.__cbOnOwnerUnbindColumnsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindColumnsChange == null) {
				this.__cbOnOwnerUnbindColumnsChange = [];
			}
			this.__cbOnOwnerUnbindColumnsChange.push(null);
		}
		if(this.__cbOnColumnsChange == null) {
			this.__cbOnColumnsChange = [];
		}
		this.__cbOnColumnsChange.push(handleCurrentPrevious);
	}
	,onceColumnsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "columnsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offColumnsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindColumnsChange == null) {
				this.__cbOnceOwnerUnbindColumnsChange = [];
			}
			this.__cbOnceOwnerUnbindColumnsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindColumnsChange == null) {
				this.__cbOnceOwnerUnbindColumnsChange = [];
			}
			this.__cbOnceOwnerUnbindColumnsChange.push(null);
		}
		if(this.__cbOnceColumnsChange == null) {
			this.__cbOnceColumnsChange = [];
		}
		this.__cbOnceColumnsChange.push(handleCurrentPrevious);
	}
	,offColumnsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnColumnsChange != null) {
				index = this.__cbOnColumnsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnColumnsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindColumnsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindColumnsChange.splice(index,1);
				}
			}
			if(this.__cbOnceColumnsChange != null) {
				index = this.__cbOnceColumnsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceColumnsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindColumnsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindColumnsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindColumnsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindColumnsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindColumnsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindColumnsChange = null;
			}
			if(this.__cbOnceOwnerUnbindColumnsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindColumnsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindColumnsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindColumnsChange = null;
			}
			this.__cbOnColumnsChange = null;
			this.__cbOnceColumnsChange = null;
		}
	}
	,listensColumnsChange: function() {
		if(!(this.__cbOnColumnsChange != null && this.__cbOnColumnsChange.length > 0)) {
			if(this.__cbOnceColumnsChange != null) {
				return this.__cbOnceColumnsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,rowsAutoruns: null
	,get_rows: function() {
		var value = this.unobservedRows;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.rowsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.rowsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_rows: function(rows) {
		var prevValue = this.unobservedRows;
		this.unobservedRows = rows;
		if(prevValue == rows) {
			return rows;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitRowsChange(rows,prevValue);
		var fieldAutoruns = this.rowsAutoruns;
		if(fieldAutoruns != null) {
			this.rowsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return rows;
	}
	,invalidateRows: function() {
		var value = this.unobservedRows;
		this.emitRowsChange(value,value);
		var fieldAutoruns = this.rowsAutoruns;
		if(fieldAutoruns != null) {
			this.rowsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedRows: null
	,__cbOnRowsChange: null
	,__cbOnceRowsChange: null
	,__cbOnOwnerUnbindRowsChange: null
	,__cbOnceOwnerUnbindRowsChange: null
	,emitRowsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnRowsChange != null) {
			len += this.__cbOnRowsChange.length;
		}
		if(this.__cbOnceRowsChange != null) {
			len += this.__cbOnceRowsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnRowsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnRowsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnRowsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceRowsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceRowsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceRowsChange[ii];
						this.__cbOnceRowsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindRowsChange[ii];
						this.__cbOnceOwnerUnbindRowsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindRowsChange[ii]);
						newCbOnceArray.push(this.__cbOnceRowsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindRowsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceRowsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onRowsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "rowsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRowsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindRowsChange == null) {
				this.__cbOnOwnerUnbindRowsChange = [];
			}
			this.__cbOnOwnerUnbindRowsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindRowsChange == null) {
				this.__cbOnOwnerUnbindRowsChange = [];
			}
			this.__cbOnOwnerUnbindRowsChange.push(null);
		}
		if(this.__cbOnRowsChange == null) {
			this.__cbOnRowsChange = [];
		}
		this.__cbOnRowsChange.push(handleCurrentPrevious);
	}
	,onceRowsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "rowsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRowsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindRowsChange == null) {
				this.__cbOnceOwnerUnbindRowsChange = [];
			}
			this.__cbOnceOwnerUnbindRowsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindRowsChange == null) {
				this.__cbOnceOwnerUnbindRowsChange = [];
			}
			this.__cbOnceOwnerUnbindRowsChange.push(null);
		}
		if(this.__cbOnceRowsChange == null) {
			this.__cbOnceRowsChange = [];
		}
		this.__cbOnceRowsChange.push(handleCurrentPrevious);
	}
	,offRowsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnRowsChange != null) {
				index = this.__cbOnRowsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnRowsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindRowsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindRowsChange.splice(index,1);
				}
			}
			if(this.__cbOnceRowsChange != null) {
				index = this.__cbOnceRowsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceRowsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindRowsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindRowsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindRowsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindRowsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindRowsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindRowsChange = null;
			}
			if(this.__cbOnceOwnerUnbindRowsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindRowsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindRowsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindRowsChange = null;
			}
			this.__cbOnRowsChange = null;
			this.__cbOnceRowsChange = null;
		}
	}
	,listensRowsChange: function() {
		if(!(this.__cbOnRowsChange != null && this.__cbOnRowsChange.length > 0)) {
			if(this.__cbOnceRowsChange != null) {
				return this.__cbOnceRowsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,opacityAutoruns: null
	,get_opacity: function() {
		var value = this.unobservedOpacity;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.opacityAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.opacityAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_opacity: function(opacity) {
		var prevValue = this.unobservedOpacity;
		this.unobservedOpacity = opacity;
		if(prevValue == opacity) {
			return opacity;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitOpacityChange(opacity,prevValue);
		var fieldAutoruns = this.opacityAutoruns;
		if(fieldAutoruns != null) {
			this.opacityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return opacity;
	}
	,invalidateOpacity: function() {
		var value = this.unobservedOpacity;
		this.emitOpacityChange(value,value);
		var fieldAutoruns = this.opacityAutoruns;
		if(fieldAutoruns != null) {
			this.opacityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedOpacity: null
	,__cbOnOpacityChange: null
	,__cbOnceOpacityChange: null
	,__cbOnOwnerUnbindOpacityChange: null
	,__cbOnceOwnerUnbindOpacityChange: null
	,emitOpacityChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnOpacityChange != null) {
			len += this.__cbOnOpacityChange.length;
		}
		if(this.__cbOnceOpacityChange != null) {
			len += this.__cbOnceOpacityChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnOpacityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOpacityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnOpacityChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceOpacityChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceOpacityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceOpacityChange[ii];
						this.__cbOnceOpacityChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindOpacityChange[ii];
						this.__cbOnceOwnerUnbindOpacityChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindOpacityChange[ii]);
						newCbOnceArray.push(this.__cbOnceOpacityChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindOpacityChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceOpacityChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onOpacityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "opacityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOpacityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindOpacityChange == null) {
				this.__cbOnOwnerUnbindOpacityChange = [];
			}
			this.__cbOnOwnerUnbindOpacityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindOpacityChange == null) {
				this.__cbOnOwnerUnbindOpacityChange = [];
			}
			this.__cbOnOwnerUnbindOpacityChange.push(null);
		}
		if(this.__cbOnOpacityChange == null) {
			this.__cbOnOpacityChange = [];
		}
		this.__cbOnOpacityChange.push(handleCurrentPrevious);
	}
	,onceOpacityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "opacityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOpacityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindOpacityChange == null) {
				this.__cbOnceOwnerUnbindOpacityChange = [];
			}
			this.__cbOnceOwnerUnbindOpacityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindOpacityChange == null) {
				this.__cbOnceOwnerUnbindOpacityChange = [];
			}
			this.__cbOnceOwnerUnbindOpacityChange.push(null);
		}
		if(this.__cbOnceOpacityChange == null) {
			this.__cbOnceOpacityChange = [];
		}
		this.__cbOnceOpacityChange.push(handleCurrentPrevious);
	}
	,offOpacityChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnOpacityChange != null) {
				index = this.__cbOnOpacityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnOpacityChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindOpacityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindOpacityChange.splice(index,1);
				}
			}
			if(this.__cbOnceOpacityChange != null) {
				index = this.__cbOnceOpacityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceOpacityChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindOpacityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindOpacityChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindOpacityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindOpacityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindOpacityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindOpacityChange = null;
			}
			if(this.__cbOnceOwnerUnbindOpacityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindOpacityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindOpacityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindOpacityChange = null;
			}
			this.__cbOnOpacityChange = null;
			this.__cbOnceOpacityChange = null;
		}
	}
	,listensOpacityChange: function() {
		if(!(this.__cbOnOpacityChange != null && this.__cbOnOpacityChange.length > 0)) {
			if(this.__cbOnceOpacityChange != null) {
				return this.__cbOnceOpacityChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,visibleAutoruns: null
	,get_visible: function() {
		var value = this.unobservedVisible;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.visibleAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.visibleAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_visible: function(visible) {
		var prevValue = this.unobservedVisible;
		this.unobservedVisible = visible;
		if(prevValue == visible) {
			return visible;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitVisibleChange(visible,prevValue);
		var fieldAutoruns = this.visibleAutoruns;
		if(fieldAutoruns != null) {
			this.visibleAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return visible;
	}
	,invalidateVisible: function() {
		var value = this.unobservedVisible;
		this.emitVisibleChange(value,value);
		var fieldAutoruns = this.visibleAutoruns;
		if(fieldAutoruns != null) {
			this.visibleAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedVisible: null
	,__cbOnVisibleChange: null
	,__cbOnceVisibleChange: null
	,__cbOnOwnerUnbindVisibleChange: null
	,__cbOnceOwnerUnbindVisibleChange: null
	,emitVisibleChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnVisibleChange != null) {
			len += this.__cbOnVisibleChange.length;
		}
		if(this.__cbOnceVisibleChange != null) {
			len += this.__cbOnceVisibleChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnVisibleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnVisibleChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnVisibleChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceVisibleChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceVisibleChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceVisibleChange[ii];
						this.__cbOnceVisibleChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindVisibleChange[ii];
						this.__cbOnceOwnerUnbindVisibleChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindVisibleChange[ii]);
						newCbOnceArray.push(this.__cbOnceVisibleChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindVisibleChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceVisibleChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onVisibleChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "visibleChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offVisibleChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindVisibleChange == null) {
				this.__cbOnOwnerUnbindVisibleChange = [];
			}
			this.__cbOnOwnerUnbindVisibleChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindVisibleChange == null) {
				this.__cbOnOwnerUnbindVisibleChange = [];
			}
			this.__cbOnOwnerUnbindVisibleChange.push(null);
		}
		if(this.__cbOnVisibleChange == null) {
			this.__cbOnVisibleChange = [];
		}
		this.__cbOnVisibleChange.push(handleCurrentPrevious);
	}
	,onceVisibleChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "visibleChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offVisibleChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindVisibleChange == null) {
				this.__cbOnceOwnerUnbindVisibleChange = [];
			}
			this.__cbOnceOwnerUnbindVisibleChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindVisibleChange == null) {
				this.__cbOnceOwnerUnbindVisibleChange = [];
			}
			this.__cbOnceOwnerUnbindVisibleChange.push(null);
		}
		if(this.__cbOnceVisibleChange == null) {
			this.__cbOnceVisibleChange = [];
		}
		this.__cbOnceVisibleChange.push(handleCurrentPrevious);
	}
	,offVisibleChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnVisibleChange != null) {
				index = this.__cbOnVisibleChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnVisibleChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindVisibleChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindVisibleChange.splice(index,1);
				}
			}
			if(this.__cbOnceVisibleChange != null) {
				index = this.__cbOnceVisibleChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceVisibleChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindVisibleChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindVisibleChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindVisibleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindVisibleChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindVisibleChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindVisibleChange = null;
			}
			if(this.__cbOnceOwnerUnbindVisibleChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindVisibleChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindVisibleChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindVisibleChange = null;
			}
			this.__cbOnVisibleChange = null;
			this.__cbOnceVisibleChange = null;
		}
	}
	,listensVisibleChange: function() {
		if(!(this.__cbOnVisibleChange != null && this.__cbOnVisibleChange.length > 0)) {
			if(this.__cbOnceVisibleChange != null) {
				return this.__cbOnceVisibleChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,offsetXAutoruns: null
	,get_offsetX: function() {
		var value = this.unobservedOffsetX;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.offsetXAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.offsetXAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_offsetX: function(offsetX) {
		var prevValue = this.unobservedOffsetX;
		this.unobservedOffsetX = offsetX;
		if(prevValue == offsetX) {
			return offsetX;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitOffsetXChange(offsetX,prevValue);
		var fieldAutoruns = this.offsetXAutoruns;
		if(fieldAutoruns != null) {
			this.offsetXAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return offsetX;
	}
	,invalidateOffsetX: function() {
		var value = this.unobservedOffsetX;
		this.emitOffsetXChange(value,value);
		var fieldAutoruns = this.offsetXAutoruns;
		if(fieldAutoruns != null) {
			this.offsetXAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedOffsetX: null
	,__cbOnOffsetXChange: null
	,__cbOnceOffsetXChange: null
	,__cbOnOwnerUnbindOffsetXChange: null
	,__cbOnceOwnerUnbindOffsetXChange: null
	,emitOffsetXChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnOffsetXChange != null) {
			len += this.__cbOnOffsetXChange.length;
		}
		if(this.__cbOnceOffsetXChange != null) {
			len += this.__cbOnceOffsetXChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnOffsetXChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOffsetXChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnOffsetXChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceOffsetXChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceOffsetXChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceOffsetXChange[ii];
						this.__cbOnceOffsetXChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindOffsetXChange[ii];
						this.__cbOnceOwnerUnbindOffsetXChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindOffsetXChange[ii]);
						newCbOnceArray.push(this.__cbOnceOffsetXChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindOffsetXChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceOffsetXChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onOffsetXChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "offsetXChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOffsetXChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindOffsetXChange == null) {
				this.__cbOnOwnerUnbindOffsetXChange = [];
			}
			this.__cbOnOwnerUnbindOffsetXChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindOffsetXChange == null) {
				this.__cbOnOwnerUnbindOffsetXChange = [];
			}
			this.__cbOnOwnerUnbindOffsetXChange.push(null);
		}
		if(this.__cbOnOffsetXChange == null) {
			this.__cbOnOffsetXChange = [];
		}
		this.__cbOnOffsetXChange.push(handleCurrentPrevious);
	}
	,onceOffsetXChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "offsetXChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOffsetXChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindOffsetXChange == null) {
				this.__cbOnceOwnerUnbindOffsetXChange = [];
			}
			this.__cbOnceOwnerUnbindOffsetXChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindOffsetXChange == null) {
				this.__cbOnceOwnerUnbindOffsetXChange = [];
			}
			this.__cbOnceOwnerUnbindOffsetXChange.push(null);
		}
		if(this.__cbOnceOffsetXChange == null) {
			this.__cbOnceOffsetXChange = [];
		}
		this.__cbOnceOffsetXChange.push(handleCurrentPrevious);
	}
	,offOffsetXChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnOffsetXChange != null) {
				index = this.__cbOnOffsetXChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnOffsetXChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindOffsetXChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindOffsetXChange.splice(index,1);
				}
			}
			if(this.__cbOnceOffsetXChange != null) {
				index = this.__cbOnceOffsetXChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceOffsetXChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindOffsetXChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindOffsetXChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindOffsetXChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindOffsetXChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindOffsetXChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindOffsetXChange = null;
			}
			if(this.__cbOnceOwnerUnbindOffsetXChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindOffsetXChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindOffsetXChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindOffsetXChange = null;
			}
			this.__cbOnOffsetXChange = null;
			this.__cbOnceOffsetXChange = null;
		}
	}
	,listensOffsetXChange: function() {
		if(!(this.__cbOnOffsetXChange != null && this.__cbOnOffsetXChange.length > 0)) {
			if(this.__cbOnceOffsetXChange != null) {
				return this.__cbOnceOffsetXChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,offsetYAutoruns: null
	,get_offsetY: function() {
		var value = this.unobservedOffsetY;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.offsetYAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.offsetYAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_offsetY: function(offsetY) {
		var prevValue = this.unobservedOffsetY;
		this.unobservedOffsetY = offsetY;
		if(prevValue == offsetY) {
			return offsetY;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitOffsetYChange(offsetY,prevValue);
		var fieldAutoruns = this.offsetYAutoruns;
		if(fieldAutoruns != null) {
			this.offsetYAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return offsetY;
	}
	,invalidateOffsetY: function() {
		var value = this.unobservedOffsetY;
		this.emitOffsetYChange(value,value);
		var fieldAutoruns = this.offsetYAutoruns;
		if(fieldAutoruns != null) {
			this.offsetYAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedOffsetY: null
	,__cbOnOffsetYChange: null
	,__cbOnceOffsetYChange: null
	,__cbOnOwnerUnbindOffsetYChange: null
	,__cbOnceOwnerUnbindOffsetYChange: null
	,emitOffsetYChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnOffsetYChange != null) {
			len += this.__cbOnOffsetYChange.length;
		}
		if(this.__cbOnceOffsetYChange != null) {
			len += this.__cbOnceOffsetYChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnOffsetYChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOffsetYChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnOffsetYChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceOffsetYChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceOffsetYChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceOffsetYChange[ii];
						this.__cbOnceOffsetYChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindOffsetYChange[ii];
						this.__cbOnceOwnerUnbindOffsetYChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindOffsetYChange[ii]);
						newCbOnceArray.push(this.__cbOnceOffsetYChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindOffsetYChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceOffsetYChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onOffsetYChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "offsetYChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOffsetYChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindOffsetYChange == null) {
				this.__cbOnOwnerUnbindOffsetYChange = [];
			}
			this.__cbOnOwnerUnbindOffsetYChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindOffsetYChange == null) {
				this.__cbOnOwnerUnbindOffsetYChange = [];
			}
			this.__cbOnOwnerUnbindOffsetYChange.push(null);
		}
		if(this.__cbOnOffsetYChange == null) {
			this.__cbOnOffsetYChange = [];
		}
		this.__cbOnOffsetYChange.push(handleCurrentPrevious);
	}
	,onceOffsetYChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "offsetYChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offOffsetYChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindOffsetYChange == null) {
				this.__cbOnceOwnerUnbindOffsetYChange = [];
			}
			this.__cbOnceOwnerUnbindOffsetYChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindOffsetYChange == null) {
				this.__cbOnceOwnerUnbindOffsetYChange = [];
			}
			this.__cbOnceOwnerUnbindOffsetYChange.push(null);
		}
		if(this.__cbOnceOffsetYChange == null) {
			this.__cbOnceOffsetYChange = [];
		}
		this.__cbOnceOffsetYChange.push(handleCurrentPrevious);
	}
	,offOffsetYChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnOffsetYChange != null) {
				index = this.__cbOnOffsetYChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnOffsetYChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindOffsetYChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindOffsetYChange.splice(index,1);
				}
			}
			if(this.__cbOnceOffsetYChange != null) {
				index = this.__cbOnceOffsetYChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceOffsetYChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindOffsetYChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindOffsetYChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindOffsetYChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindOffsetYChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindOffsetYChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindOffsetYChange = null;
			}
			if(this.__cbOnceOwnerUnbindOffsetYChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindOffsetYChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindOffsetYChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindOffsetYChange = null;
			}
			this.__cbOnOffsetYChange = null;
			this.__cbOnceOffsetYChange = null;
		}
	}
	,listensOffsetYChange: function() {
		if(!(this.__cbOnOffsetYChange != null && this.__cbOnOffsetYChange.length > 0)) {
			if(this.__cbOnceOffsetYChange != null) {
				return this.__cbOnceOffsetYChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,explicitDepthAutoruns: null
	,get_explicitDepth: function() {
		var value = this.unobservedExplicitDepth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.explicitDepthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.explicitDepthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_explicitDepth: function(explicitDepth) {
		var prevValue = this.unobservedExplicitDepth;
		this.unobservedExplicitDepth = explicitDepth;
		if(prevValue == explicitDepth) {
			return explicitDepth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitExplicitDepthChange(explicitDepth,prevValue);
		var fieldAutoruns = this.explicitDepthAutoruns;
		if(fieldAutoruns != null) {
			this.explicitDepthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return explicitDepth;
	}
	,invalidateExplicitDepth: function() {
		var value = this.unobservedExplicitDepth;
		this.emitExplicitDepthChange(value,value);
		var fieldAutoruns = this.explicitDepthAutoruns;
		if(fieldAutoruns != null) {
			this.explicitDepthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedExplicitDepth: null
	,__cbOnExplicitDepthChange: null
	,__cbOnceExplicitDepthChange: null
	,__cbOnOwnerUnbindExplicitDepthChange: null
	,__cbOnceOwnerUnbindExplicitDepthChange: null
	,emitExplicitDepthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnExplicitDepthChange != null) {
			len += this.__cbOnExplicitDepthChange.length;
		}
		if(this.__cbOnceExplicitDepthChange != null) {
			len += this.__cbOnceExplicitDepthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnExplicitDepthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnExplicitDepthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnExplicitDepthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceExplicitDepthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceExplicitDepthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceExplicitDepthChange[ii];
						this.__cbOnceExplicitDepthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindExplicitDepthChange[ii];
						this.__cbOnceOwnerUnbindExplicitDepthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindExplicitDepthChange[ii]);
						newCbOnceArray.push(this.__cbOnceExplicitDepthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindExplicitDepthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceExplicitDepthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onExplicitDepthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "explicitDepthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offExplicitDepthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindExplicitDepthChange == null) {
				this.__cbOnOwnerUnbindExplicitDepthChange = [];
			}
			this.__cbOnOwnerUnbindExplicitDepthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindExplicitDepthChange == null) {
				this.__cbOnOwnerUnbindExplicitDepthChange = [];
			}
			this.__cbOnOwnerUnbindExplicitDepthChange.push(null);
		}
		if(this.__cbOnExplicitDepthChange == null) {
			this.__cbOnExplicitDepthChange = [];
		}
		this.__cbOnExplicitDepthChange.push(handleCurrentPrevious);
	}
	,onceExplicitDepthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "explicitDepthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offExplicitDepthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindExplicitDepthChange == null) {
				this.__cbOnceOwnerUnbindExplicitDepthChange = [];
			}
			this.__cbOnceOwnerUnbindExplicitDepthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindExplicitDepthChange == null) {
				this.__cbOnceOwnerUnbindExplicitDepthChange = [];
			}
			this.__cbOnceOwnerUnbindExplicitDepthChange.push(null);
		}
		if(this.__cbOnceExplicitDepthChange == null) {
			this.__cbOnceExplicitDepthChange = [];
		}
		this.__cbOnceExplicitDepthChange.push(handleCurrentPrevious);
	}
	,offExplicitDepthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnExplicitDepthChange != null) {
				index = this.__cbOnExplicitDepthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnExplicitDepthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindExplicitDepthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindExplicitDepthChange.splice(index,1);
				}
			}
			if(this.__cbOnceExplicitDepthChange != null) {
				index = this.__cbOnceExplicitDepthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceExplicitDepthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindExplicitDepthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindExplicitDepthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindExplicitDepthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindExplicitDepthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindExplicitDepthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindExplicitDepthChange = null;
			}
			if(this.__cbOnceOwnerUnbindExplicitDepthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindExplicitDepthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindExplicitDepthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindExplicitDepthChange = null;
			}
			this.__cbOnExplicitDepthChange = null;
			this.__cbOnceExplicitDepthChange = null;
		}
	}
	,listensExplicitDepthChange: function() {
		if(!(this.__cbOnExplicitDepthChange != null && this.__cbOnExplicitDepthChange.length > 0)) {
			if(this.__cbOnceExplicitDepthChange != null) {
				return this.__cbOnceExplicitDepthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,blendingAutoruns: null
	,get_blending: function() {
		var value = this.unobservedBlending;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.blendingAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.blendingAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_blending: function(blending) {
		var prevValue = this.unobservedBlending;
		this.unobservedBlending = blending;
		if(prevValue == blending) {
			return blending;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitBlendingChange(blending,prevValue);
		var fieldAutoruns = this.blendingAutoruns;
		if(fieldAutoruns != null) {
			this.blendingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return blending;
	}
	,invalidateBlending: function() {
		var value = this.unobservedBlending;
		this.emitBlendingChange(value,value);
		var fieldAutoruns = this.blendingAutoruns;
		if(fieldAutoruns != null) {
			this.blendingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedBlending: null
	,__cbOnBlendingChange: null
	,__cbOnceBlendingChange: null
	,__cbOnOwnerUnbindBlendingChange: null
	,__cbOnceOwnerUnbindBlendingChange: null
	,emitBlendingChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnBlendingChange != null) {
			len += this.__cbOnBlendingChange.length;
		}
		if(this.__cbOnceBlendingChange != null) {
			len += this.__cbOnceBlendingChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBlendingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnBlendingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBlendingChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBlendingChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBlendingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBlendingChange[ii];
						this.__cbOnceBlendingChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBlendingChange[ii];
						this.__cbOnceOwnerUnbindBlendingChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBlendingChange[ii]);
						newCbOnceArray.push(this.__cbOnceBlendingChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBlendingChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceBlendingChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBlendingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blendingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBlendingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBlendingChange == null) {
				this.__cbOnOwnerUnbindBlendingChange = [];
			}
			this.__cbOnOwnerUnbindBlendingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBlendingChange == null) {
				this.__cbOnOwnerUnbindBlendingChange = [];
			}
			this.__cbOnOwnerUnbindBlendingChange.push(null);
		}
		if(this.__cbOnBlendingChange == null) {
			this.__cbOnBlendingChange = [];
		}
		this.__cbOnBlendingChange.push(handleCurrentPrevious);
	}
	,onceBlendingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "blendingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offBlendingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBlendingChange == null) {
				this.__cbOnceOwnerUnbindBlendingChange = [];
			}
			this.__cbOnceOwnerUnbindBlendingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBlendingChange == null) {
				this.__cbOnceOwnerUnbindBlendingChange = [];
			}
			this.__cbOnceOwnerUnbindBlendingChange.push(null);
		}
		if(this.__cbOnceBlendingChange == null) {
			this.__cbOnceBlendingChange = [];
		}
		this.__cbOnceBlendingChange.push(handleCurrentPrevious);
	}
	,offBlendingChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnBlendingChange != null) {
				index = this.__cbOnBlendingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnBlendingChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBlendingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBlendingChange.splice(index,1);
				}
			}
			if(this.__cbOnceBlendingChange != null) {
				index = this.__cbOnceBlendingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceBlendingChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBlendingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBlendingChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBlendingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBlendingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBlendingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBlendingChange = null;
			}
			if(this.__cbOnceOwnerUnbindBlendingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBlendingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBlendingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBlendingChange = null;
			}
			this.__cbOnBlendingChange = null;
			this.__cbOnceBlendingChange = null;
		}
	}
	,listensBlendingChange: function() {
		if(!(this.__cbOnBlendingChange != null && this.__cbOnBlendingChange.length > 0)) {
			if(this.__cbOnceBlendingChange != null) {
				return this.__cbOnceBlendingChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,colorAutoruns: null
	,get_color: function() {
		var value = this.unobservedColor;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.colorAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.colorAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_color: function(color) {
		var prevValue = this.unobservedColor;
		this.unobservedColor = color;
		if(prevValue == color) {
			return color;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitColorChange(color,prevValue);
		var fieldAutoruns = this.colorAutoruns;
		if(fieldAutoruns != null) {
			this.colorAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return color;
	}
	,invalidateColor: function() {
		var value = this.unobservedColor;
		this.emitColorChange(value,value);
		var fieldAutoruns = this.colorAutoruns;
		if(fieldAutoruns != null) {
			this.colorAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedColor: null
	,__cbOnColorChange: null
	,__cbOnceColorChange: null
	,__cbOnOwnerUnbindColorChange: null
	,__cbOnceOwnerUnbindColorChange: null
	,emitColorChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnColorChange != null) {
			len += this.__cbOnColorChange.length;
		}
		if(this.__cbOnceColorChange != null) {
			len += this.__cbOnceColorChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnColorChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnColorChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnColorChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceColorChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceColorChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceColorChange[ii];
						this.__cbOnceColorChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindColorChange[ii];
						this.__cbOnceOwnerUnbindColorChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindColorChange[ii]);
						newCbOnceArray.push(this.__cbOnceColorChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindColorChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceColorChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onColorChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "colorChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offColorChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindColorChange == null) {
				this.__cbOnOwnerUnbindColorChange = [];
			}
			this.__cbOnOwnerUnbindColorChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindColorChange == null) {
				this.__cbOnOwnerUnbindColorChange = [];
			}
			this.__cbOnOwnerUnbindColorChange.push(null);
		}
		if(this.__cbOnColorChange == null) {
			this.__cbOnColorChange = [];
		}
		this.__cbOnColorChange.push(handleCurrentPrevious);
	}
	,onceColorChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "colorChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offColorChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindColorChange == null) {
				this.__cbOnceOwnerUnbindColorChange = [];
			}
			this.__cbOnceOwnerUnbindColorChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindColorChange == null) {
				this.__cbOnceOwnerUnbindColorChange = [];
			}
			this.__cbOnceOwnerUnbindColorChange.push(null);
		}
		if(this.__cbOnceColorChange == null) {
			this.__cbOnceColorChange = [];
		}
		this.__cbOnceColorChange.push(handleCurrentPrevious);
	}
	,offColorChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnColorChange != null) {
				index = this.__cbOnColorChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnColorChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindColorChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindColorChange.splice(index,1);
				}
			}
			if(this.__cbOnceColorChange != null) {
				index = this.__cbOnceColorChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceColorChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindColorChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindColorChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindColorChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindColorChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindColorChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindColorChange = null;
			}
			if(this.__cbOnceOwnerUnbindColorChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindColorChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindColorChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindColorChange = null;
			}
			this.__cbOnColorChange = null;
			this.__cbOnceColorChange = null;
		}
	}
	,listensColorChange: function() {
		if(!(this.__cbOnColorChange != null && this.__cbOnColorChange.length > 0)) {
			if(this.__cbOnceColorChange != null) {
				return this.__cbOnceColorChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,extraBlendingAutoruns: null
	,get_extraBlending: function() {
		var value = this.unobservedExtraBlending;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.extraBlendingAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.extraBlendingAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_extraBlending: function(extraBlending) {
		var prevValue = this.unobservedExtraBlending;
		this.unobservedExtraBlending = extraBlending;
		if(prevValue == extraBlending) {
			return extraBlending;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitExtraBlendingChange(extraBlending,prevValue);
		var fieldAutoruns = this.extraBlendingAutoruns;
		if(fieldAutoruns != null) {
			this.extraBlendingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return extraBlending;
	}
	,invalidateExtraBlending: function() {
		var value = this.unobservedExtraBlending;
		this.emitExtraBlendingChange(value,value);
		var fieldAutoruns = this.extraBlendingAutoruns;
		if(fieldAutoruns != null) {
			this.extraBlendingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedExtraBlending: null
	,__cbOnExtraBlendingChange: null
	,__cbOnceExtraBlendingChange: null
	,__cbOnOwnerUnbindExtraBlendingChange: null
	,__cbOnceOwnerUnbindExtraBlendingChange: null
	,emitExtraBlendingChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnExtraBlendingChange != null) {
			len += this.__cbOnExtraBlendingChange.length;
		}
		if(this.__cbOnceExtraBlendingChange != null) {
			len += this.__cbOnceExtraBlendingChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnExtraBlendingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnExtraBlendingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnExtraBlendingChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceExtraBlendingChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceExtraBlendingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceExtraBlendingChange[ii];
						this.__cbOnceExtraBlendingChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindExtraBlendingChange[ii];
						this.__cbOnceOwnerUnbindExtraBlendingChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindExtraBlendingChange[ii]);
						newCbOnceArray.push(this.__cbOnceExtraBlendingChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindExtraBlendingChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceExtraBlendingChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onExtraBlendingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "extraBlendingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offExtraBlendingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindExtraBlendingChange == null) {
				this.__cbOnOwnerUnbindExtraBlendingChange = [];
			}
			this.__cbOnOwnerUnbindExtraBlendingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindExtraBlendingChange == null) {
				this.__cbOnOwnerUnbindExtraBlendingChange = [];
			}
			this.__cbOnOwnerUnbindExtraBlendingChange.push(null);
		}
		if(this.__cbOnExtraBlendingChange == null) {
			this.__cbOnExtraBlendingChange = [];
		}
		this.__cbOnExtraBlendingChange.push(handleCurrentPrevious);
	}
	,onceExtraBlendingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "extraBlendingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offExtraBlendingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindExtraBlendingChange == null) {
				this.__cbOnceOwnerUnbindExtraBlendingChange = [];
			}
			this.__cbOnceOwnerUnbindExtraBlendingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindExtraBlendingChange == null) {
				this.__cbOnceOwnerUnbindExtraBlendingChange = [];
			}
			this.__cbOnceOwnerUnbindExtraBlendingChange.push(null);
		}
		if(this.__cbOnceExtraBlendingChange == null) {
			this.__cbOnceExtraBlendingChange = [];
		}
		this.__cbOnceExtraBlendingChange.push(handleCurrentPrevious);
	}
	,offExtraBlendingChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnExtraBlendingChange != null) {
				index = this.__cbOnExtraBlendingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnExtraBlendingChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindExtraBlendingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindExtraBlendingChange.splice(index,1);
				}
			}
			if(this.__cbOnceExtraBlendingChange != null) {
				index = this.__cbOnceExtraBlendingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceExtraBlendingChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindExtraBlendingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindExtraBlendingChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindExtraBlendingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindExtraBlendingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindExtraBlendingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindExtraBlendingChange = null;
			}
			if(this.__cbOnceOwnerUnbindExtraBlendingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindExtraBlendingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindExtraBlendingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindExtraBlendingChange = null;
			}
			this.__cbOnExtraBlendingChange = null;
			this.__cbOnceExtraBlendingChange = null;
		}
	}
	,listensExtraBlendingChange: function() {
		if(!(this.__cbOnExtraBlendingChange != null && this.__cbOnExtraBlendingChange.length > 0)) {
			if(this.__cbOnceExtraBlendingChange != null) {
				return this.__cbOnceExtraBlendingChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,extraOpacityAutoruns: null
	,get_extraOpacity: function() {
		var value = this.unobservedExtraOpacity;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.extraOpacityAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.extraOpacityAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_extraOpacity: function(extraOpacity) {
		var prevValue = this.unobservedExtraOpacity;
		this.unobservedExtraOpacity = extraOpacity;
		if(prevValue == extraOpacity) {
			return extraOpacity;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitExtraOpacityChange(extraOpacity,prevValue);
		var fieldAutoruns = this.extraOpacityAutoruns;
		if(fieldAutoruns != null) {
			this.extraOpacityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return extraOpacity;
	}
	,invalidateExtraOpacity: function() {
		var value = this.unobservedExtraOpacity;
		this.emitExtraOpacityChange(value,value);
		var fieldAutoruns = this.extraOpacityAutoruns;
		if(fieldAutoruns != null) {
			this.extraOpacityAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedExtraOpacity: null
	,__cbOnExtraOpacityChange: null
	,__cbOnceExtraOpacityChange: null
	,__cbOnOwnerUnbindExtraOpacityChange: null
	,__cbOnceOwnerUnbindExtraOpacityChange: null
	,emitExtraOpacityChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnExtraOpacityChange != null) {
			len += this.__cbOnExtraOpacityChange.length;
		}
		if(this.__cbOnceExtraOpacityChange != null) {
			len += this.__cbOnceExtraOpacityChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnExtraOpacityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnExtraOpacityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnExtraOpacityChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceExtraOpacityChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceExtraOpacityChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceExtraOpacityChange[ii];
						this.__cbOnceExtraOpacityChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindExtraOpacityChange[ii];
						this.__cbOnceOwnerUnbindExtraOpacityChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindExtraOpacityChange[ii]);
						newCbOnceArray.push(this.__cbOnceExtraOpacityChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindExtraOpacityChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceExtraOpacityChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onExtraOpacityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "extraOpacityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offExtraOpacityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindExtraOpacityChange == null) {
				this.__cbOnOwnerUnbindExtraOpacityChange = [];
			}
			this.__cbOnOwnerUnbindExtraOpacityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindExtraOpacityChange == null) {
				this.__cbOnOwnerUnbindExtraOpacityChange = [];
			}
			this.__cbOnOwnerUnbindExtraOpacityChange.push(null);
		}
		if(this.__cbOnExtraOpacityChange == null) {
			this.__cbOnExtraOpacityChange = [];
		}
		this.__cbOnExtraOpacityChange.push(handleCurrentPrevious);
	}
	,onceExtraOpacityChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "extraOpacityChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offExtraOpacityChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindExtraOpacityChange == null) {
				this.__cbOnceOwnerUnbindExtraOpacityChange = [];
			}
			this.__cbOnceOwnerUnbindExtraOpacityChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindExtraOpacityChange == null) {
				this.__cbOnceOwnerUnbindExtraOpacityChange = [];
			}
			this.__cbOnceOwnerUnbindExtraOpacityChange.push(null);
		}
		if(this.__cbOnceExtraOpacityChange == null) {
			this.__cbOnceExtraOpacityChange = [];
		}
		this.__cbOnceExtraOpacityChange.push(handleCurrentPrevious);
	}
	,offExtraOpacityChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnExtraOpacityChange != null) {
				index = this.__cbOnExtraOpacityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnExtraOpacityChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindExtraOpacityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindExtraOpacityChange.splice(index,1);
				}
			}
			if(this.__cbOnceExtraOpacityChange != null) {
				index = this.__cbOnceExtraOpacityChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceExtraOpacityChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindExtraOpacityChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindExtraOpacityChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindExtraOpacityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindExtraOpacityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindExtraOpacityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindExtraOpacityChange = null;
			}
			if(this.__cbOnceOwnerUnbindExtraOpacityChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindExtraOpacityChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindExtraOpacityChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindExtraOpacityChange = null;
			}
			this.__cbOnExtraOpacityChange = null;
			this.__cbOnceExtraOpacityChange = null;
		}
	}
	,listensExtraOpacityChange: function() {
		if(!(this.__cbOnExtraOpacityChange != null && this.__cbOnExtraOpacityChange.length > 0)) {
			if(this.__cbOnceExtraOpacityChange != null) {
				return this.__cbOnceExtraOpacityChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tilesAutoruns: null
	,get_tiles: function() {
		var value = this.unobservedTiles;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tilesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tilesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tiles: function(tiles) {
		var prevValue = this.unobservedTiles;
		this.unobservedTiles = tiles;
		if(prevValue == tiles) {
			return tiles;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTilesChange(tiles,prevValue);
		var fieldAutoruns = this.tilesAutoruns;
		if(fieldAutoruns != null) {
			this.tilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tiles;
	}
	,invalidateTiles: function() {
		var value = this.unobservedTiles;
		this.emitTilesChange(value,value);
		var fieldAutoruns = this.tilesAutoruns;
		if(fieldAutoruns != null) {
			this.tilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTiles: null
	,__cbOnTilesChange: null
	,__cbOnceTilesChange: null
	,__cbOnOwnerUnbindTilesChange: null
	,__cbOnceOwnerUnbindTilesChange: null
	,emitTilesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTilesChange != null) {
			len += this.__cbOnTilesChange.length;
		}
		if(this.__cbOnceTilesChange != null) {
			len += this.__cbOnceTilesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTilesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTilesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTilesChange[ii];
						this.__cbOnceTilesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTilesChange[ii];
						this.__cbOnceOwnerUnbindTilesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTilesChange[ii]);
						newCbOnceArray.push(this.__cbOnceTilesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTilesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTilesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTilesChange == null) {
				this.__cbOnOwnerUnbindTilesChange = [];
			}
			this.__cbOnOwnerUnbindTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTilesChange == null) {
				this.__cbOnOwnerUnbindTilesChange = [];
			}
			this.__cbOnOwnerUnbindTilesChange.push(null);
		}
		if(this.__cbOnTilesChange == null) {
			this.__cbOnTilesChange = [];
		}
		this.__cbOnTilesChange.push(handleCurrentPrevious);
	}
	,onceTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTilesChange == null) {
				this.__cbOnceOwnerUnbindTilesChange = [];
			}
			this.__cbOnceOwnerUnbindTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTilesChange == null) {
				this.__cbOnceOwnerUnbindTilesChange = [];
			}
			this.__cbOnceOwnerUnbindTilesChange.push(null);
		}
		if(this.__cbOnceTilesChange == null) {
			this.__cbOnceTilesChange = [];
		}
		this.__cbOnceTilesChange.push(handleCurrentPrevious);
	}
	,offTilesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTilesChange != null) {
				index = this.__cbOnTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTilesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTilesChange.splice(index,1);
				}
			}
			if(this.__cbOnceTilesChange != null) {
				index = this.__cbOnceTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTilesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTilesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTilesChange = null;
			}
			if(this.__cbOnceOwnerUnbindTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTilesChange = null;
			}
			this.__cbOnTilesChange = null;
			this.__cbOnceTilesChange = null;
		}
	}
	,listensTilesChange: function() {
		if(!(this.__cbOnTilesChange != null && this.__cbOnTilesChange.length > 0)) {
			if(this.__cbOnceTilesChange != null) {
				return this.__cbOnceTilesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computedTilesAutoruns: null
	,get_computedTiles: function() {
		var value = this.unobservedComputedTiles;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.computedTilesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.computedTilesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_computedTiles: function(computedTiles) {
		var prevValue = this.unobservedComputedTiles;
		this.unobservedComputedTiles = computedTiles;
		if(prevValue == computedTiles) {
			return computedTiles;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitComputedTilesChange(computedTiles,prevValue);
		var fieldAutoruns = this.computedTilesAutoruns;
		if(fieldAutoruns != null) {
			this.computedTilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return computedTiles;
	}
	,invalidateComputedTiles: function() {
		var value = this.unobservedComputedTiles;
		this.emitComputedTilesChange(value,value);
		var fieldAutoruns = this.computedTilesAutoruns;
		if(fieldAutoruns != null) {
			this.computedTilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedComputedTiles: null
	,__cbOnComputedTilesChange: null
	,__cbOnceComputedTilesChange: null
	,__cbOnOwnerUnbindComputedTilesChange: null
	,__cbOnceOwnerUnbindComputedTilesChange: null
	,emitComputedTilesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnComputedTilesChange != null) {
			len += this.__cbOnComputedTilesChange.length;
		}
		if(this.__cbOnceComputedTilesChange != null) {
			len += this.__cbOnceComputedTilesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComputedTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnComputedTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnComputedTilesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceComputedTilesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceComputedTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceComputedTilesChange[ii];
						this.__cbOnceComputedTilesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindComputedTilesChange[ii];
						this.__cbOnceOwnerUnbindComputedTilesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindComputedTilesChange[ii]);
						newCbOnceArray.push(this.__cbOnceComputedTilesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindComputedTilesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceComputedTilesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComputedTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "computedTilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offComputedTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComputedTilesChange == null) {
				this.__cbOnOwnerUnbindComputedTilesChange = [];
			}
			this.__cbOnOwnerUnbindComputedTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComputedTilesChange == null) {
				this.__cbOnOwnerUnbindComputedTilesChange = [];
			}
			this.__cbOnOwnerUnbindComputedTilesChange.push(null);
		}
		if(this.__cbOnComputedTilesChange == null) {
			this.__cbOnComputedTilesChange = [];
		}
		this.__cbOnComputedTilesChange.push(handleCurrentPrevious);
	}
	,onceComputedTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "computedTilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offComputedTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComputedTilesChange == null) {
				this.__cbOnceOwnerUnbindComputedTilesChange = [];
			}
			this.__cbOnceOwnerUnbindComputedTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComputedTilesChange == null) {
				this.__cbOnceOwnerUnbindComputedTilesChange = [];
			}
			this.__cbOnceOwnerUnbindComputedTilesChange.push(null);
		}
		if(this.__cbOnceComputedTilesChange == null) {
			this.__cbOnceComputedTilesChange = [];
		}
		this.__cbOnceComputedTilesChange.push(handleCurrentPrevious);
	}
	,offComputedTilesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnComputedTilesChange != null) {
				index = this.__cbOnComputedTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnComputedTilesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComputedTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComputedTilesChange.splice(index,1);
				}
			}
			if(this.__cbOnceComputedTilesChange != null) {
				index = this.__cbOnceComputedTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceComputedTilesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComputedTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComputedTilesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComputedTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComputedTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComputedTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComputedTilesChange = null;
			}
			if(this.__cbOnceOwnerUnbindComputedTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComputedTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComputedTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComputedTilesChange = null;
			}
			this.__cbOnComputedTilesChange = null;
			this.__cbOnceComputedTilesChange = null;
		}
	}
	,listensComputedTilesChange: function() {
		if(!(this.__cbOnComputedTilesChange != null && this.__cbOnComputedTilesChange.length > 0)) {
			if(this.__cbOnceComputedTilesChange != null) {
				return this.__cbOnceComputedTilesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,willListenHasTilesChange: function() {
		this.get_unobservedHasTiles();
	}
	,get_unobservedHasTiles: function() {
		if(this._lifecycleState >= 0) {
			if(this.computeAutorunHasTiles == null) {
				var _that = this;
				var _autorun = new tracker_Autorun(null);
				this.computedOnceHasTiles = true;
				this.computeAutorunHasTiles = _autorun;
				_autorun.onRun = function() {
					var result = _that.computeHasTiles();
					tracker_Autorun.unobserve();
					_that.set_hasTiles(result);
					tracker_Autorun.reobserve();
				};
				_autorun.onDestroy(this,function(_) {
					if(_that.computeAutorunHasTiles == _autorun) {
						_that.computeAutorunHasTiles = null;
					}
					_autorun = null;
					_that = null;
				});
				this.onDestroy(_autorun,function(_) {
					if(_autorun != null) {
						_autorun.destroy();
						_autorun = null;
					}
					_that = null;
				});
				_autorun.run();
			} else if(this.computeAutorunHasTiles.invalidated) {
				this.computeAutorunHasTiles.run();
			}
		} else if(!this.computedOnceHasTiles) {
			tracker_Autorun.unobserve();
			this.computedOnceHasTiles = true;
			this.unobservedHasTiles = this.computeHasTiles();
			tracker_Autorun.reobserve();
		}
		return this.unobservedHasTiles;
	}
	,hasTilesAutoruns: null
	,get_hasTiles: function() {
		var value = this.get_unobservedHasTiles();
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.hasTilesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.hasTilesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_hasTiles: function(hasTiles) {
		var prevValue = this.get_unobservedHasTiles();
		this.unobservedHasTiles = hasTiles;
		if(prevValue == hasTiles) {
			return hasTiles;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitHasTilesChange(hasTiles,prevValue);
		var fieldAutoruns = this.hasTilesAutoruns;
		if(fieldAutoruns != null) {
			this.hasTilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return hasTiles;
	}
	,invalidateHasTiles: function() {
		var value = this.get_unobservedHasTiles();
		this.emitHasTilesChange(value,value);
		var fieldAutoruns = this.hasTilesAutoruns;
		if(fieldAutoruns != null) {
			this.hasTilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedHasTiles: null
	,__cbOnHasTilesChange: null
	,__cbOnceHasTilesChange: null
	,__cbOnOwnerUnbindHasTilesChange: null
	,__cbOnceOwnerUnbindHasTilesChange: null
	,emitHasTilesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnHasTilesChange != null) {
			len += this.__cbOnHasTilesChange.length;
		}
		if(this.__cbOnceHasTilesChange != null) {
			len += this.__cbOnceHasTilesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnHasTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnHasTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnHasTilesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceHasTilesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceHasTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceHasTilesChange[ii];
						this.__cbOnceHasTilesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindHasTilesChange[ii];
						this.__cbOnceOwnerUnbindHasTilesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindHasTilesChange[ii]);
						newCbOnceArray.push(this.__cbOnceHasTilesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindHasTilesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceHasTilesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onHasTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnHasTilesChange == null && this.__cbOnceHasTilesChange == null) {
			this.willListenHasTilesChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "hasTilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHasTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindHasTilesChange == null) {
				this.__cbOnOwnerUnbindHasTilesChange = [];
			}
			this.__cbOnOwnerUnbindHasTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindHasTilesChange == null) {
				this.__cbOnOwnerUnbindHasTilesChange = [];
			}
			this.__cbOnOwnerUnbindHasTilesChange.push(null);
		}
		if(this.__cbOnHasTilesChange == null) {
			this.__cbOnHasTilesChange = [];
		}
		this.__cbOnHasTilesChange.push(handleCurrentPrevious);
	}
	,onceHasTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnHasTilesChange == null && this.__cbOnceHasTilesChange == null) {
			this.willListenHasTilesChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "hasTilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHasTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindHasTilesChange == null) {
				this.__cbOnceOwnerUnbindHasTilesChange = [];
			}
			this.__cbOnceOwnerUnbindHasTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindHasTilesChange == null) {
				this.__cbOnceOwnerUnbindHasTilesChange = [];
			}
			this.__cbOnceOwnerUnbindHasTilesChange.push(null);
		}
		if(this.__cbOnceHasTilesChange == null) {
			this.__cbOnceHasTilesChange = [];
		}
		this.__cbOnceHasTilesChange.push(handleCurrentPrevious);
	}
	,offHasTilesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnHasTilesChange != null) {
				index = this.__cbOnHasTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnHasTilesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindHasTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindHasTilesChange.splice(index,1);
				}
			}
			if(this.__cbOnceHasTilesChange != null) {
				index = this.__cbOnceHasTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceHasTilesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindHasTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindHasTilesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindHasTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindHasTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindHasTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindHasTilesChange = null;
			}
			if(this.__cbOnceOwnerUnbindHasTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindHasTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindHasTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindHasTilesChange = null;
			}
			this.__cbOnHasTilesChange = null;
			this.__cbOnceHasTilesChange = null;
		}
	}
	,listensHasTilesChange: function() {
		if(!(this.__cbOnHasTilesChange != null && this.__cbOnHasTilesChange.length > 0)) {
			if(this.__cbOnceHasTilesChange != null) {
				return this.__cbOnceHasTilesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computeHasTiles: function() {
		if(!(this.get_tiles() != null && this.get_tiles().length > 0)) {
			if(this.get_computedTiles() != null) {
				return this.get_computedTiles().length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computeAutorunHasTiles: null
	,computedOnceHasTiles: null
	,shouldRenderTilesAutoruns: null
	,get_shouldRenderTiles: function() {
		var value = this.unobservedShouldRenderTiles;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.shouldRenderTilesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.shouldRenderTilesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_shouldRenderTiles: function(shouldRenderTiles) {
		var prevValue = this.unobservedShouldRenderTiles;
		this.unobservedShouldRenderTiles = shouldRenderTiles;
		if(prevValue == shouldRenderTiles) {
			return shouldRenderTiles;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitShouldRenderTilesChange(shouldRenderTiles,prevValue);
		var fieldAutoruns = this.shouldRenderTilesAutoruns;
		if(fieldAutoruns != null) {
			this.shouldRenderTilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return shouldRenderTiles;
	}
	,invalidateShouldRenderTiles: function() {
		var value = this.unobservedShouldRenderTiles;
		this.emitShouldRenderTilesChange(value,value);
		var fieldAutoruns = this.shouldRenderTilesAutoruns;
		if(fieldAutoruns != null) {
			this.shouldRenderTilesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedShouldRenderTiles: null
	,__cbOnShouldRenderTilesChange: null
	,__cbOnceShouldRenderTilesChange: null
	,__cbOnOwnerUnbindShouldRenderTilesChange: null
	,__cbOnceOwnerUnbindShouldRenderTilesChange: null
	,emitShouldRenderTilesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnShouldRenderTilesChange != null) {
			len += this.__cbOnShouldRenderTilesChange.length;
		}
		if(this.__cbOnceShouldRenderTilesChange != null) {
			len += this.__cbOnceShouldRenderTilesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnShouldRenderTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnShouldRenderTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnShouldRenderTilesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceShouldRenderTilesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceShouldRenderTilesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceShouldRenderTilesChange[ii];
						this.__cbOnceShouldRenderTilesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindShouldRenderTilesChange[ii];
						this.__cbOnceOwnerUnbindShouldRenderTilesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindShouldRenderTilesChange[ii]);
						newCbOnceArray.push(this.__cbOnceShouldRenderTilesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindShouldRenderTilesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceShouldRenderTilesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onShouldRenderTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "shouldRenderTilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offShouldRenderTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindShouldRenderTilesChange == null) {
				this.__cbOnOwnerUnbindShouldRenderTilesChange = [];
			}
			this.__cbOnOwnerUnbindShouldRenderTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindShouldRenderTilesChange == null) {
				this.__cbOnOwnerUnbindShouldRenderTilesChange = [];
			}
			this.__cbOnOwnerUnbindShouldRenderTilesChange.push(null);
		}
		if(this.__cbOnShouldRenderTilesChange == null) {
			this.__cbOnShouldRenderTilesChange = [];
		}
		this.__cbOnShouldRenderTilesChange.push(handleCurrentPrevious);
	}
	,onceShouldRenderTilesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "shouldRenderTilesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offShouldRenderTilesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindShouldRenderTilesChange == null) {
				this.__cbOnceOwnerUnbindShouldRenderTilesChange = [];
			}
			this.__cbOnceOwnerUnbindShouldRenderTilesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindShouldRenderTilesChange == null) {
				this.__cbOnceOwnerUnbindShouldRenderTilesChange = [];
			}
			this.__cbOnceOwnerUnbindShouldRenderTilesChange.push(null);
		}
		if(this.__cbOnceShouldRenderTilesChange == null) {
			this.__cbOnceShouldRenderTilesChange = [];
		}
		this.__cbOnceShouldRenderTilesChange.push(handleCurrentPrevious);
	}
	,offShouldRenderTilesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnShouldRenderTilesChange != null) {
				index = this.__cbOnShouldRenderTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnShouldRenderTilesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindShouldRenderTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindShouldRenderTilesChange.splice(index,1);
				}
			}
			if(this.__cbOnceShouldRenderTilesChange != null) {
				index = this.__cbOnceShouldRenderTilesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceShouldRenderTilesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindShouldRenderTilesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindShouldRenderTilesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindShouldRenderTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindShouldRenderTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindShouldRenderTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindShouldRenderTilesChange = null;
			}
			if(this.__cbOnceOwnerUnbindShouldRenderTilesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindShouldRenderTilesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindShouldRenderTilesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindShouldRenderTilesChange = null;
			}
			this.__cbOnShouldRenderTilesChange = null;
			this.__cbOnceShouldRenderTilesChange = null;
		}
	}
	,listensShouldRenderTilesChange: function() {
		if(!(this.__cbOnShouldRenderTilesChange != null && this.__cbOnShouldRenderTilesChange.length > 0)) {
			if(this.__cbOnceShouldRenderTilesChange != null) {
				return this.__cbOnceShouldRenderTilesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tileWidthAutoruns: null
	,get_tileWidth: function() {
		var value = this.unobservedTileWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tileWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tileWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tileWidth: function(tileWidth) {
		var prevValue = this.unobservedTileWidth;
		this.unobservedTileWidth = tileWidth;
		if(prevValue == tileWidth) {
			return tileWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTileWidthChange(tileWidth,prevValue);
		var fieldAutoruns = this.tileWidthAutoruns;
		if(fieldAutoruns != null) {
			this.tileWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tileWidth;
	}
	,invalidateTileWidth: function() {
		var value = this.unobservedTileWidth;
		this.emitTileWidthChange(value,value);
		var fieldAutoruns = this.tileWidthAutoruns;
		if(fieldAutoruns != null) {
			this.tileWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTileWidth: null
	,__cbOnTileWidthChange: null
	,__cbOnceTileWidthChange: null
	,__cbOnOwnerUnbindTileWidthChange: null
	,__cbOnceOwnerUnbindTileWidthChange: null
	,emitTileWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTileWidthChange != null) {
			len += this.__cbOnTileWidthChange.length;
		}
		if(this.__cbOnceTileWidthChange != null) {
			len += this.__cbOnceTileWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTileWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTileWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTileWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTileWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTileWidthChange[ii];
						this.__cbOnceTileWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTileWidthChange[ii];
						this.__cbOnceOwnerUnbindTileWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTileWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceTileWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTileWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTileWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTileWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTileWidthChange == null) {
				this.__cbOnOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnOwnerUnbindTileWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTileWidthChange == null) {
				this.__cbOnOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnOwnerUnbindTileWidthChange.push(null);
		}
		if(this.__cbOnTileWidthChange == null) {
			this.__cbOnTileWidthChange = [];
		}
		this.__cbOnTileWidthChange.push(handleCurrentPrevious);
	}
	,onceTileWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTileWidthChange == null) {
				this.__cbOnceOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTileWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTileWidthChange == null) {
				this.__cbOnceOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTileWidthChange.push(null);
		}
		if(this.__cbOnceTileWidthChange == null) {
			this.__cbOnceTileWidthChange = [];
		}
		this.__cbOnceTileWidthChange.push(handleCurrentPrevious);
	}
	,offTileWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTileWidthChange != null) {
				index = this.__cbOnTileWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTileWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTileWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTileWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceTileWidthChange != null) {
				index = this.__cbOnceTileWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTileWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTileWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTileWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTileWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTileWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTileWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTileWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTileWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTileWidthChange = null;
			}
			this.__cbOnTileWidthChange = null;
			this.__cbOnceTileWidthChange = null;
		}
	}
	,listensTileWidthChange: function() {
		if(!(this.__cbOnTileWidthChange != null && this.__cbOnTileWidthChange.length > 0)) {
			if(this.__cbOnceTileWidthChange != null) {
				return this.__cbOnceTileWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tileHeightAutoruns: null
	,get_tileHeight: function() {
		var value = this.unobservedTileHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tileHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tileHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tileHeight: function(tileHeight) {
		var prevValue = this.unobservedTileHeight;
		this.unobservedTileHeight = tileHeight;
		if(prevValue == tileHeight) {
			return tileHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTileHeightChange(tileHeight,prevValue);
		var fieldAutoruns = this.tileHeightAutoruns;
		if(fieldAutoruns != null) {
			this.tileHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tileHeight;
	}
	,invalidateTileHeight: function() {
		var value = this.unobservedTileHeight;
		this.emitTileHeightChange(value,value);
		var fieldAutoruns = this.tileHeightAutoruns;
		if(fieldAutoruns != null) {
			this.tileHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTileHeight: null
	,__cbOnTileHeightChange: null
	,__cbOnceTileHeightChange: null
	,__cbOnOwnerUnbindTileHeightChange: null
	,__cbOnceOwnerUnbindTileHeightChange: null
	,emitTileHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTileHeightChange != null) {
			len += this.__cbOnTileHeightChange.length;
		}
		if(this.__cbOnceTileHeightChange != null) {
			len += this.__cbOnceTileHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTileHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTileHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTileHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTileHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTileHeightChange[ii];
						this.__cbOnceTileHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTileHeightChange[ii];
						this.__cbOnceOwnerUnbindTileHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTileHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceTileHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTileHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTileHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTileHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTileHeightChange == null) {
				this.__cbOnOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnOwnerUnbindTileHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTileHeightChange == null) {
				this.__cbOnOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnOwnerUnbindTileHeightChange.push(null);
		}
		if(this.__cbOnTileHeightChange == null) {
			this.__cbOnTileHeightChange = [];
		}
		this.__cbOnTileHeightChange.push(handleCurrentPrevious);
	}
	,onceTileHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTileHeightChange == null) {
				this.__cbOnceOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTileHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTileHeightChange == null) {
				this.__cbOnceOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTileHeightChange.push(null);
		}
		if(this.__cbOnceTileHeightChange == null) {
			this.__cbOnceTileHeightChange = [];
		}
		this.__cbOnceTileHeightChange.push(handleCurrentPrevious);
	}
	,offTileHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTileHeightChange != null) {
				index = this.__cbOnTileHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTileHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTileHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTileHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceTileHeightChange != null) {
				index = this.__cbOnceTileHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTileHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTileHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTileHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTileHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTileHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTileHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTileHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTileHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTileHeightChange = null;
			}
			this.__cbOnTileHeightChange = null;
			this.__cbOnceTileHeightChange = null;
		}
	}
	,listensTileHeightChange: function() {
		if(!(this.__cbOnTileHeightChange != null && this.__cbOnTileHeightChange.length > 0)) {
			if(this.__cbOnceTileHeightChange != null) {
				return this.__cbOnceTileHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,grid: function(columns,rows) {
		this.set_columns(columns);
		this.set_rows(rows);
	}
	,pos: function(x,y) {
		this.set_x(x);
		this.set_y(y);
	}
	,offset: function(offsetX,offsetY) {
		this.set_offsetX(offsetX);
		this.set_offsetY(offsetY);
	}
	,tileSize: function(tileWidth,tileHeight) {
		this.set_tileWidth(tileWidth);
		this.set_tileHeight(tileHeight);
	}
	,indexFromColumnAndRow: function(column,row) {
		return row * this.get_columns() + column;
	}
	,tileByColumnAndRow: function(column,row) {
		var index = row * this.get_columns() + column;
		return this.get_tiles()[index];
	}
	,computedTileByColumnAndRow: function(column,row) {
		var index = row * this.get_columns() + column;
		return this.get_computedTiles()[index];
	}
	,columnAtIndex: function(index) {
		return index % this.get_columns();
	}
	,rowAtIndex: function(index) {
		return Math.floor(index / this.get_columns());
	}
	,unbindEvents: function() {
		tracker_Model.prototype.unbindEvents.call(this);
		this.offNameChange();
		this.offXChange();
		this.offYChange();
		this.offColumnsChange();
		this.offRowsChange();
		this.offOpacityChange();
		this.offVisibleChange();
		this.offOffsetXChange();
		this.offOffsetYChange();
		this.offExplicitDepthChange();
		this.offBlendingChange();
		this.offColorChange();
		this.offExtraBlendingChange();
		this.offExtraOpacityChange();
		this.offTilesChange();
		this.offComputedTilesChange();
		this.offHasTilesChange();
		this.offShouldRenderTilesChange();
		this.offTileWidthChange();
		this.offTileHeightChange();
	}
	,_default_nameAutoruns: function() {
		return null;
	}
	,_default_name: function() {
		return null;
	}
	,_default_xAutoruns: function() {
		return null;
	}
	,_default_x: function() {
		return 0;
	}
	,_default_yAutoruns: function() {
		return null;
	}
	,_default_y: function() {
		return 0;
	}
	,_default_columnsAutoruns: function() {
		return null;
	}
	,_default_columns: function() {
		return 0;
	}
	,_default_rowsAutoruns: function() {
		return null;
	}
	,_default_rows: function() {
		return 0;
	}
	,_default_opacityAutoruns: function() {
		return null;
	}
	,_default_opacity: function() {
		return 1;
	}
	,_default_visibleAutoruns: function() {
		return null;
	}
	,_default_visible: function() {
		return true;
	}
	,_default_offsetXAutoruns: function() {
		return null;
	}
	,_default_offsetX: function() {
		return 0;
	}
	,_default_offsetYAutoruns: function() {
		return null;
	}
	,_default_offsetY: function() {
		return 0;
	}
	,_default_explicitDepthAutoruns: function() {
		return null;
	}
	,_default_explicitDepth: function() {
		return null;
	}
	,_default_blendingAutoruns: function() {
		return null;
	}
	,_default_blending: function() {
		return 0;
	}
	,_default_colorAutoruns: function() {
		return null;
	}
	,_default_color: function() {
		return 16777215;
	}
	,_default_extraBlendingAutoruns: function() {
		return null;
	}
	,_default_extraBlending: function() {
		return 0;
	}
	,_default_extraOpacityAutoruns: function() {
		return null;
	}
	,_default_extraOpacity: function() {
		return 1;
	}
	,_default_tilesAutoruns: function() {
		return null;
	}
	,_default_tiles: function() {
		return null;
	}
	,_default_computedTilesAutoruns: function() {
		return null;
	}
	,_default_computedTiles: function() {
		return null;
	}
	,_default_hasTilesAutoruns: function() {
		return null;
	}
	,_default_computedOnceHasTiles: function() {
		return false;
	}
	,_default_shouldRenderTilesAutoruns: function() {
		return null;
	}
	,_default_shouldRenderTiles: function() {
		return true;
	}
	,_default_tileWidthAutoruns: function() {
		return null;
	}
	,_default_tileWidth: function() {
		return -1;
	}
	,_default_tileHeightAutoruns: function() {
		return null;
	}
	,_default_tileHeight: function() {
		return -1;
	}
	,__class__: ceramic_TilemapLayerData
	,__properties__: $extend(tracker_Model.prototype.__properties__,{set_tileHeight:"set_tileHeight",get_tileHeight:"get_tileHeight",set_tileWidth:"set_tileWidth",get_tileWidth:"get_tileWidth",set_shouldRenderTiles:"set_shouldRenderTiles",get_shouldRenderTiles:"get_shouldRenderTiles",get_unobservedHasTiles:"get_unobservedHasTiles",set_hasTiles:"set_hasTiles",get_hasTiles:"get_hasTiles",set_computedTiles:"set_computedTiles",get_computedTiles:"get_computedTiles",set_tiles:"set_tiles",get_tiles:"get_tiles",set_extraOpacity:"set_extraOpacity",get_extraOpacity:"get_extraOpacity",set_extraBlending:"set_extraBlending",get_extraBlending:"get_extraBlending",set_color:"set_color",get_color:"get_color",set_blending:"set_blending",get_blending:"get_blending",set_explicitDepth:"set_explicitDepth",get_explicitDepth:"get_explicitDepth",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_visible:"set_visible",get_visible:"get_visible",set_opacity:"set_opacity",get_opacity:"get_opacity",set_rows:"set_rows",get_rows:"get_rows",set_columns:"set_columns",get_columns:"get_columns",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_name:"set_name",get_name:"get_name"})
});
var ceramic_TilemapOrientation = $hxEnums["ceramic.TilemapOrientation"] = { __ename__:"ceramic.TilemapOrientation",__constructs__:null
	,ORTHOGONAL: {_hx_name:"ORTHOGONAL",_hx_index:0,__enum__:"ceramic.TilemapOrientation",toString:$estr}
	,ISOMETRIC: {_hx_name:"ISOMETRIC",_hx_index:1,__enum__:"ceramic.TilemapOrientation",toString:$estr}
	,STAGGERED: {_hx_name:"STAGGERED",_hx_index:2,__enum__:"ceramic.TilemapOrientation",toString:$estr}
	,HEXAGONAL: {_hx_name:"HEXAGONAL",_hx_index:3,__enum__:"ceramic.TilemapOrientation",toString:$estr}
};
ceramic_TilemapOrientation.__constructs__ = [ceramic_TilemapOrientation.ORTHOGONAL,ceramic_TilemapOrientation.ISOMETRIC,ceramic_TilemapOrientation.STAGGERED,ceramic_TilemapOrientation.HEXAGONAL];
var ceramic_TilemapParser = function() {
	this.tmxParser = null;
};
$hxClasses["ceramic.TilemapParser"] = ceramic_TilemapParser;
ceramic_TilemapParser.__name__ = "ceramic.TilemapParser";
ceramic_TilemapParser.prototype = {
	tmxParser: null
	,clearCache: function() {
		if(this.tmxParser != null) {
			this.tmxParser.clearCache();
		}
	}
	,parseTmx: function(rawTmxData,cwd,resolveTsxRawData) {
		if(this.tmxParser == null) {
			this.tmxParser = new ceramic_TilemapTmxParser();
		}
		if(cwd == null) {
			cwd = ".";
		}
		var tmxMap = this.tmxParser.parseTmx(rawTmxData,cwd,resolveTsxRawData);
		if(tmxMap == null) {
			ceramic_App.app.logger.warning("Failed to parse TMX data: result is null!",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 57, className : "ceramic.TilemapParser", methodName : "parseTmx"});
			return null;
		}
		return tmxMap;
	}
	,parseExternalTilesetNames: function(rawTmxData) {
		var xml = Xml.parse(rawTmxData);
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var map = haxe_xml__$Access_NodeAccess.resolve(xml,"map");
		var result = [];
		var element = map.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			var _g;
			if(element1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(element1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
				}
				_g = element1.nodeName;
			}
			if(_g == "tileset") {
				var input = element1;
				if(haxe_xml__$Access_HasAttribAccess.resolve(input,"source")) {
					var source = haxe_xml__$Access_AttribAccess.resolve(input,"source");
					if(result.indexOf(source) == -1) {
						result.push(source);
					}
				}
			}
		}
		return result;
	}
	,tmxMapToTilemapData: function(tmxMap,loadTexture) {
		var tilemapData = new ceramic_TilemapData();
		tilemapData.set_width(tmxMap.width * tmxMap.tileWidth);
		tilemapData.set_height(tmxMap.height * tmxMap.tileHeight);
		var _g = tmxMap.orientation;
		switch(_g._hx_index) {
		case 0:
			tilemapData.set_orientation(ceramic_TilemapOrientation.ORTHOGONAL);
			break;
		case 1:
			tilemapData.set_orientation(ceramic_TilemapOrientation.ISOMETRIC);
			break;
		case 2:
			tilemapData.set_orientation(ceramic_TilemapOrientation.STAGGERED);
			break;
		case 3:
			tilemapData.set_orientation(ceramic_TilemapOrientation.HEXAGONAL);
			break;
		case 4:
			var value = _g.value;
			tilemapData.set_orientation(ceramic_TilemapOrientation.ORTHOGONAL);
			ceramic_App.app.logger.warning("TMX map orientation is Unknown(" + value + "), using ORTHOGONAL in TilemapData",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 110, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
			break;
		}
		tilemapData.set_backgroundColor(tmxMap.backgroundColor);
		if(tmxMap.renderOrder != null) {
			var _g = tmxMap.renderOrder;
			switch(_g._hx_index) {
			case 0:
				tilemapData.set_renderOrder(ceramic_TilemapRenderOrder.RIGHT_DOWN);
				break;
			case 1:
				tilemapData.set_renderOrder(ceramic_TilemapRenderOrder.RIGHT_UP);
				break;
			case 2:
				tilemapData.set_renderOrder(ceramic_TilemapRenderOrder.LEFT_DOWN);
				break;
			case 3:
				tilemapData.set_renderOrder(ceramic_TilemapRenderOrder.LEFT_UP);
				break;
			case 4:
				var value = _g.value;
				tilemapData.set_renderOrder(ceramic_TilemapRenderOrder.RIGHT_DOWN);
				ceramic_App.app.logger.warning("TMX map render order is Unknown(" + value + "), using RIGHT_DOWN in TilemapData",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 127, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
				break;
			}
		}
		if(tmxMap.staggerAxis != null) {
			var _g = tmxMap.staggerAxis;
			switch(_g._hx_index) {
			case 0:
				tilemapData.set_staggerAxis(ceramic_TilemapStaggerAxis.AXIS_X);
				break;
			case 1:
				tilemapData.set_staggerAxis(ceramic_TilemapStaggerAxis.AXIS_Y);
				break;
			case 2:
				var value = _g.value;
				tilemapData.set_staggerAxis(ceramic_TilemapStaggerAxis.AXIS_X);
				ceramic_App.app.logger.warning("TMX map stagger axis is Unknown(" + value + "), using AXIS_X in TilemapData",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 139, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
				break;
			}
		}
		tilemapData.set_hexSideLength(tmxMap.hexSideLength);
		if(tmxMap.tilesets != null && tmxMap.tilesets.length > 0) {
			var _g = 0;
			var _g1 = tmxMap.tilesets.length;
			while(_g < _g1) {
				var i = _g++;
				var tmxTileset = tmxMap.tilesets[i];
				var tileset = [new ceramic_Tileset()];
				tilemapData.onDestroy(tileset[0],(function(tileset) {
					return function(_) {
						tileset[0].destroy();
					};
				})(tileset));
				if(tmxTileset.firstGID != null) {
					tileset[0].set_firstGid(tmxTileset.firstGID);
				}
				if(tmxTileset.name != null) {
					tileset[0].set_name(tmxTileset.name);
				}
				if(tmxTileset.tileWidth != null) {
					tileset[0].set_tileWidth(tmxTileset.tileWidth);
				}
				if(tmxTileset.tileHeight != null) {
					tileset[0].set_tileHeight(tmxTileset.tileHeight);
				}
				if(tmxTileset.spacing != null) {
					tileset[0].set_spacing(tmxTileset.spacing);
				}
				if(tmxTileset.margin != null) {
					tileset[0].set_margin(tmxTileset.margin);
				}
				tileset[0].set_tileCount(tmxTileset.tileCount);
				tileset[0].set_columns(tmxTileset.columns);
				if(tmxTileset.image != null) {
					var tmxImage = tmxTileset.image;
					var image = [new ceramic_TilesetImage()];
					tileset[0].onDestroy(image[0],(function(image) {
						return function(_) {
							image[0].destroy();
						};
					})(image));
					if(tmxImage.width != null) {
						image[0].set_width(tmxImage.width);
					}
					if(tmxImage.height != null) {
						image[0].set_height(tmxImage.height);
					}
					if(tmxImage.source != null) {
						image[0].set_source(tmxImage.source);
						if(loadTexture != null) {
							loadTexture(tmxImage.source,null,(function(image) {
								return function(texture) {
									image[0].set_texture(texture);
								};
							})([image[0]]));
						}
					} else if(tmxImage.data != null) {
						ceramic_App.app.logger.warning("Loading TMX embedded images is not supported.",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 210, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
					}
					tileset[0].set_image(image[0]);
					if(tileset[0].get_columns() <= 0) {
						var cols = 0;
						var usedWidth = 0;
						var computedTileWidth = tileset[0].get_tileWidth() + tileset[0].get_margin() * 2;
						if(computedTileWidth > 0) {
							while(usedWidth + computedTileWidth <= image[0].get_width()) {
								++cols;
								usedWidth += computedTileWidth + tileset[0].get_spacing();
							}
						}
						tileset[0].set_columns(cols);
					}
				}
				tilemapData.get_tilesets().push(tileset[0]);
			}
		} else {
			ceramic_App.app.logger.warning("TMX map has no tileset",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 234, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
		}
		if(tmxMap.layers != null && tmxMap.layers.length > 0) {
			var _g = 0;
			var _g1 = tmxMap.layers.length;
			while(_g < _g1) {
				var i = _g++;
				var tmxLayer = tmxMap.layers[i];
				switch(tmxLayer._hx_index) {
				case 0:
					var _layer = tmxLayer.layer;
					var layer = new ceramic_TilemapLayerData();
					layer.set_tileWidth(tmxMap.tileWidth);
					layer.set_tileHeight(tmxMap.tileHeight);
					layer.set_name(_layer.name);
					if(_layer.x != null) {
						layer.set_x(_layer.x | 0);
					}
					if(_layer.y != null) {
						layer.set_y(_layer.y | 0);
					}
					if(_layer.width != null) {
						layer.set_columns(_layer.width);
					}
					if(_layer.height != null) {
						layer.set_rows(_layer.height);
					}
					if(_layer.opacity != null) {
						layer.set_opacity(_layer.opacity);
					}
					if(_layer.visible != null) {
						layer.set_visible(_layer.visible);
					}
					if(_layer.offsetX != null) {
						layer.set_offsetX(_layer.offsetX);
					}
					if(_layer.offsetY != null) {
						layer.set_offsetY(_layer.offsetY);
					}
					if(_layer.data != null && _layer.data.tiles != null) {
						layer.set_tiles([].concat(_layer.data.tiles));
					} else {
						ceramic_App.app.logger.warning("TMX tile layer " + _layer.name + " has no tile",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 270, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
					}
					tilemapData.get_layers().push(layer);
					break;
				case 1:
					var group = tmxLayer.group;
					break;
				case 2:
					var layer1 = tmxLayer.layer;
					break;
				case 3:
					var group1 = tmxLayer.group;
					break;
				}
			}
		} else {
			ceramic_App.app.logger.warning("TMX map has no layer",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapParser.hx", lineNumber : 281, className : "ceramic.TilemapParser", methodName : "tmxMapToTilemapData"});
		}
		return tilemapData;
	}
	,__class__: ceramic_TilemapParser
};
var ceramic_TilemapPlugin = function() { };
$hxClasses["ceramic.TilemapPlugin"] = ceramic_TilemapPlugin;
ceramic_TilemapPlugin.__name__ = "ceramic.TilemapPlugin";
ceramic_TilemapPlugin.pluginInit = function() {
	ceramic_App.oncePreInit(function() {
		ceramic_App.app.logger.info("Init tilemap plugin",{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapPlugin.hx", lineNumber : 27, className : "ceramic.TilemapPlugin", methodName : "pluginInit"});
		ceramic_Assets.addAssetKind("tilemap",ceramic_TilemapPlugin.addTilemap,["tmx"],false,["ceramic.TilemapData"]);
		var convertTilemapData = new ceramic_ConvertTilemapData();
		ceramic_App.app.converters.h["ceramic.TilemapData"] = convertTilemapData;
	});
};
ceramic_TilemapPlugin.addTilemap = function(assets,name,options) {
	if(StringTools.startsWith(name,"tilemap:")) {
		name = HxOverrides.substr(name,8,null);
	}
	assets.addAsset(new ceramic_TilemapAsset(name,options));
};
ceramic_TilemapPlugin.ensureTilemap = function(assets,name,options,done) {
	if(!StringTools.startsWith(name,"tilemap:")) {
		name = "tilemap:" + name;
	}
	assets.ensure(name,options,function(asset) {
		done(((asset) instanceof ceramic_TilemapAsset) ? asset : null);
	});
};
ceramic_TilemapPlugin.tilemap = function(assets,name) {
	var asset = ceramic_TilemapPlugin.tilemapAsset(assets,name);
	if(asset == null) {
		return null;
	}
	return asset.get_tilemapData();
};
ceramic_TilemapPlugin.tilemapAsset = function(assets,name) {
	var nameStr = name;
	if(StringTools.startsWith(nameStr,"tilemap:")) {
		nameStr = HxOverrides.substr(nameStr,8,null);
	}
	if(!Object.prototype.hasOwnProperty.call(assets.assetsByKindAndName.h,"tilemap")) {
		if(assets.parent != null) {
			return ceramic_TilemapPlugin.tilemapAsset(assets.parent,name);
		} else {
			return null;
		}
	}
	var asset = assets.assetsByKindAndName.h["tilemap"].h[nameStr];
	if(asset == null) {
		if(assets.parent != null) {
			return ceramic_TilemapPlugin.tilemapAsset(assets.parent,name);
		} else {
			return null;
		}
	}
	return asset;
};
ceramic_TilemapPlugin.getTilemapParser = function(assets) {
	var tilemapParser = assets.get_data().tilemapParser;
	if(tilemapParser == null) {
		tilemapParser = new ceramic_TilemapParser();
		assets.get_data().tilemapParser = tilemapParser;
	}
	return tilemapParser;
};
ceramic_TilemapPlugin.getRawTsxCache = function(assets) {
	var rawTsxCache = assets.get_data().rawTsxCache;
	if(rawTsxCache == null) {
		rawTsxCache = new haxe_ds_StringMap();
		assets.get_data().rawTsxCache = rawTsxCache;
	}
	return rawTsxCache;
};
var ceramic_TilemapQuad = function() {
	this.tilemapTile = 0;
	this.row = -1;
	this.column = -1;
	this.index = -1;
	ceramic_Quad.call(this);
};
$hxClasses["ceramic.TilemapQuad"] = ceramic_TilemapQuad;
ceramic_TilemapQuad.__name__ = "ceramic.TilemapQuad";
ceramic_TilemapQuad.get = function() {
	var result = null;
	if(ceramic_TilemapQuad.pool != null) {
		var _this = ceramic_TilemapQuad.pool;
		result = _this.availableItems.length > 0 ? _this.availableItems.pop() : null;
	}
	if(result == null) {
		result = new ceramic_TilemapQuad();
	} else {
		result.set_active(true);
	}
	return result;
};
ceramic_TilemapQuad.__super__ = ceramic_Quad;
ceramic_TilemapQuad.prototype = $extend(ceramic_Quad.prototype,{
	index: null
	,column: null
	,row: null
	,tilemapTile: null
	,recycle: function() {
		if(this.parent != null) {
			this.parent.remove(this);
		}
		this.set_active(false);
		this.index = -1;
		this.column = -1;
		this.row = -1;
		this.tilemapTile = 0;
		if(ceramic_TilemapQuad.pool == null) {
			ceramic_TilemapQuad.pool = new ceramic_Pool();
		}
		ceramic_TilemapQuad.pool.recycle(this);
	}
	,__class__: ceramic_TilemapQuad
});
var ceramic_TilemapRenderOrder = $hxEnums["ceramic.TilemapRenderOrder"] = { __ename__:"ceramic.TilemapRenderOrder",__constructs__:null
	,RIGHT_DOWN: {_hx_name:"RIGHT_DOWN",_hx_index:0,__enum__:"ceramic.TilemapRenderOrder",toString:$estr}
	,RIGHT_UP: {_hx_name:"RIGHT_UP",_hx_index:1,__enum__:"ceramic.TilemapRenderOrder",toString:$estr}
	,LEFT_DOWN: {_hx_name:"LEFT_DOWN",_hx_index:2,__enum__:"ceramic.TilemapRenderOrder",toString:$estr}
	,LEFT_UP: {_hx_name:"LEFT_UP",_hx_index:3,__enum__:"ceramic.TilemapRenderOrder",toString:$estr}
};
ceramic_TilemapRenderOrder.__constructs__ = [ceramic_TilemapRenderOrder.RIGHT_DOWN,ceramic_TilemapRenderOrder.RIGHT_UP,ceramic_TilemapRenderOrder.LEFT_DOWN,ceramic_TilemapRenderOrder.LEFT_UP];
var ceramic_TilemapStaggerAxis = $hxEnums["ceramic.TilemapStaggerAxis"] = { __ename__:"ceramic.TilemapStaggerAxis",__constructs__:null
	,AXIS_X: {_hx_name:"AXIS_X",_hx_index:0,__enum__:"ceramic.TilemapStaggerAxis",toString:$estr}
	,AXIS_Y: {_hx_name:"AXIS_Y",_hx_index:1,__enum__:"ceramic.TilemapStaggerAxis",toString:$estr}
};
ceramic_TilemapStaggerAxis.__constructs__ = [ceramic_TilemapStaggerAxis.AXIS_X,ceramic_TilemapStaggerAxis.AXIS_Y];
var ceramic_TilemapStaggerIndex = $hxEnums["ceramic.TilemapStaggerIndex"] = { __ename__:"ceramic.TilemapStaggerIndex",__constructs__:null
	,ODD: {_hx_name:"ODD",_hx_index:0,__enum__:"ceramic.TilemapStaggerIndex",toString:$estr}
	,EVEN: {_hx_name:"EVEN",_hx_index:1,__enum__:"ceramic.TilemapStaggerIndex",toString:$estr}
};
ceramic_TilemapStaggerIndex.__constructs__ = [ceramic_TilemapStaggerIndex.ODD,ceramic_TilemapStaggerIndex.EVEN];
var ceramic_TilemapTile = {};
ceramic_TilemapTile.__properties__ = {set_diagonalFlip:"set_diagonalFlip",get_diagonalFlip:"get_diagonalFlip",set_verticalFlip:"set_verticalFlip",get_verticalFlip:"get_verticalFlip",set_horizontalFlip:"set_horizontalFlip",get_horizontalFlip:"get_horizontalFlip",set_gid:"set_gid",get_gid:"get_gid"};
ceramic_TilemapTile._new = function(value) {
	return value;
};
ceramic_TilemapTile.flipX = function(this1) {
	if((this1 & 536870912) != 0) {
		var value = (this1 & 1073741824) == 0;
		this1 = value ? this1 | 1073741824 : this1 & -1073741825;
	} else {
		var value = (this1 & -2147483648) == 0;
		this1 = value ? this1 | -2147483648 : this1 & 2147483647;
	}
};
ceramic_TilemapTile.flipY = function(this1) {
	if((this1 & 536870912) != 0) {
		var value = (this1 & -2147483648) == 0;
		this1 = value ? this1 | -2147483648 : this1 & 2147483647;
	} else {
		var value = (this1 & 1073741824) == 0;
		this1 = value ? this1 | 1073741824 : this1 & -1073741825;
	}
};
ceramic_TilemapTile.rotateRight = function(this1) {
	var hFlip = (this1 & -2147483648) != 0;
	var vFlip = (this1 & 1073741824) != 0;
	var dFlip = (this1 & 536870912) != 0;
	if(hFlip) {
		if(vFlip) {
			if(dFlip) {
				this1 = this1 & -536870913;
			} else {
				this1 = this1 & 2147483647;
				this1 = this1 & -536870913;
			}
		} else if(dFlip) {
			this1 = this1 | 1073741824;
			this1 = this1 & -536870913;
		} else {
			this1 = this1 | 1073741824;
			this1 = this1 | 536870912;
		}
	} else if(vFlip) {
		if(dFlip) {
			this1 = this1 & -1073741825;
			this1 = this1 & -536870913;
		} else {
			this1 = this1 | 536870912;
		}
	} else if(dFlip) {
		this1 = this1 | -2147483648;
		this1 = this1 & -536870913;
	} else {
		this1 = this1 | -2147483648;
		this1 = this1 | 536870912;
	}
};
ceramic_TilemapTile.rotateLeft = function(this1) {
	var hFlip = (this1 & -2147483648) != 0;
	var vFlip = (this1 & 1073741824) != 0;
	var dFlip = (this1 & 536870912) != 0;
	if(hFlip) {
		if(vFlip) {
			if(dFlip) {
				this1 = this1 & -1073741825;
				this1 = this1 & -536870913;
			} else {
				this1 = this1 & -1073741825;
				this1 = this1 | 536870912;
			}
		} else if(dFlip) {
			this1 = this1 & 2147483647;
			this1 = this1 & -536870913;
		} else {
			this1 = this1 & 2147483647;
			this1 = this1 | 536870912;
		}
	} else if(vFlip) {
		if(dFlip) {
			this1 = this1 | -2147483648;
			this1 = this1 & -536870913;
		} else {
			this1 = this1 | -2147483648;
			this1 = this1 & -1073741825;
			this1 = this1 | 536870912;
		}
	} else if(dFlip) {
		this1 = this1 | -2147483648;
		this1 = this1 | 1073741824;
		this1 = this1 & -536870913;
	} else {
		this1 = this1 | 1073741824;
		this1 = this1 | 536870912;
	}
};
ceramic_TilemapTile.get_gid = function(this1) {
	return this1 & 536870911;
};
ceramic_TilemapTile.set_gid = function(this1,gid) {
	this1 = this1 & -536870912 | gid & 536870911;
	return this1;
};
ceramic_TilemapTile.get_horizontalFlip = function(this1) {
	return (this1 & -2147483648) != 0;
};
ceramic_TilemapTile.set_horizontalFlip = function(this1,value) {
	if(value) {
		this1 |= -2147483648;
	} else {
		this1 &= 2147483647;
	}
	return value;
};
ceramic_TilemapTile.get_verticalFlip = function(this1) {
	return (this1 & 1073741824) != 0;
};
ceramic_TilemapTile.set_verticalFlip = function(this1,value) {
	if(value) {
		this1 |= 1073741824;
	} else {
		this1 &= -1073741825;
	}
	return value;
};
ceramic_TilemapTile.get_diagonalFlip = function(this1) {
	return (this1 & 536870912) != 0;
};
ceramic_TilemapTile.set_diagonalFlip = function(this1,value) {
	if(value) {
		this1 |= 536870912;
	} else {
		this1 &= -536870913;
	}
	return value;
};
var ceramic_TilemapTmxParser = function() {
	this.resolveTsxRawData = null;
	this.r = null;
	this.tsxCache = null;
};
$hxClasses["ceramic.TilemapTmxParser"] = ceramic_TilemapTmxParser;
ceramic_TilemapTmxParser.__name__ = "ceramic.TilemapTmxParser";
ceramic_TilemapTmxParser.prototype = {
	tsxCache: null
	,r: null
	,resolveTsxRawData: null
	,cwd: null
	,parseTmx: function(rawTmxData,cwd,resolveTsxRawData) {
		if(rawTmxData.length == 0) {
			throw haxe_Exception.thrown("Tilemap: rawTmxData is 0 length");
		}
		this.resolveTsxRawData = resolveTsxRawData != null ? resolveTsxRawData : function(_,_1) {
			return null;
		};
		if(this.tsxCache == null) {
			this.tsxCache = new haxe_ds_StringMap();
		}
		try {
			this.r = new format_tmx_Reader();
			this.r.resolveTSX = $bind(this,this.getTsx);
			this.cwd = cwd;
			var result = this.r.read(Xml.parse(rawTmxData));
			this.cwd = null;
			return result;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ceramic_App.app.logger.error(e,{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\TilemapTmxParser.hx", lineNumber : 46, className : "ceramic.TilemapTmxParser", methodName : "parseTmx"});
		}
		return null;
	}
	,clearCache: function() {
		this.tsxCache = null;
	}
	,getTsx: function(name) {
		var cacheKey = this.cwd + ":" + name;
		var cached = this.tsxCache.h[cacheKey];
		if(cached != null) {
			return cached;
		}
		var _this = this.r;
		var xml = Xml.parse(this.resolveTsxRawData(name,this.cwd));
		var root = null;
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var input = haxe_xml__$Access_NodeAccess.resolve(xml,"tileset");
		var properties = _this.resolveProperties(input);
		var terrains = [];
		var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input,"terraintypes");
		var tiles = [];
		var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input,"tile");
		var tileOffset = null;
		var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input,"tileoffset");
		var wangSets = [];
		var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input,"wangsets");
		var grid = null;
		var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input,"grid");
		if(hasTileOffset) {
			var node = haxe_xml__$Access_NodeAccess.resolve(input,"tileoffset");
			tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
		}
		if(hasTerrains) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"terraintypes"),"terrain");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),_this.resolveProperties(node)));
			}
		}
		if(hasWangSets) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"wangsets"),"wangset");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				wangSets.push(_this.resolveWangSet(node));
			}
		}
		if(hasGrid) {
			var gnode = haxe_xml__$Access_NodeAccess.resolve(input,"grid");
			var _g = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
			var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
			var input1 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
			var grid1;
			switch(input1) {
			case "hexagonal":
				grid1 = format_tmx_TmxOrientation.Hexagonal;
				break;
			case "isometric":
				grid1 = format_tmx_TmxOrientation.Isometric;
				break;
			case "orthogonal":
				grid1 = format_tmx_TmxOrientation.Orthogonal;
				break;
			case "staggered":
				grid1 = format_tmx_TmxOrientation.Staggered;
				break;
			default:
				grid1 = format_tmx_TmxOrientation.Unknown(input1);
			}
			grid = new format_tmx_TmxTilesetGrid(grid1,_g,_g1);
		}
		if(hasTiles) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var animation = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
					animation = [];
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
					while(_g2 < _g3.length) {
						var frameInfo = _g3[_g2];
						++_g2;
						animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
					}
				}
				var _g4 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
				var _g7 = _this.resolveProperties(node);
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? _this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
				var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? _this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
				tiles.push(new format_tmx_TmxTilesetTile(_g4,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g5,_g6,_g7,_g8,_g9,animation));
			}
		}
		if(root != null) {
			root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : root.firstGID;
			root.source = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : root.source;
			root.name = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : root.name;
			root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : root.tileWidth;
			root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : root.tileHeight;
			root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : root.spacing;
			root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : root.margin;
			root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input,"properties") ? properties : root.properties;
			root.image = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? _this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : root.image;
			root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0;
			root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0;
			if(hasTerrains) {
				root.terrainTypes = terrains;
			}
			if(hasTiles) {
				root.tiles = tiles;
			}
			if(hasTileOffset) {
				root.tileOffset = tileOffset;
			}
			if(hasWangSets) {
				root.wangSets = wangSets;
			}
			if(hasGrid) {
				root.grid = grid;
			}
			cached = root;
		} else {
			var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : null;
			var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : null;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
			var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : 0;
			var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : 0;
			var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : 0;
			var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : 0;
			var _g7 = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? _this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null;
			var tset = new format_tmx_TmxTileset(_g,_g1,_g2,_g3,_g4,_g5,_g6,haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0,tileOffset,properties,_g7,terrains,tiles,grid,wangSets);
			if(tset.source != null && _this.resolveTSX != null) {
				var tsx = _this.resolveTSX(tset.source);
				format_tmx_Tools.applyTSX(tsx,tset);
			}
			cached = tset;
		}
		this.tsxCache.h[cacheKey] = cached;
		return cached;
	}
	,__class__: ceramic_TilemapTmxParser
};
var ceramic_Tileset = function() {
	this.unobservedSlopes = null;
	this.slopesAutoruns = null;
	this.implicitImage = false;
	this.slopesMapping = null;
	this.unobservedGridCellHeight = 0;
	this.gridCellHeightAutoruns = null;
	this.unobservedGridCellWidth = 0;
	this.gridCellWidthAutoruns = null;
	this.unobservedGridOrientation = ceramic_TilesetGridOrientation.ORTHOGONAL;
	this.gridOrientationAutoruns = null;
	this.unobservedImage = null;
	this.imageAutoruns = null;
	this.computedOnceRows = false;
	this.rowsAutoruns = null;
	this.unobservedColumns = 0;
	this.columnsAutoruns = null;
	this.unobservedTileCount = 0;
	this.tileCountAutoruns = null;
	this.unobservedMargin = 0;
	this.marginAutoruns = null;
	this.unobservedSpacing = 0;
	this.spacingAutoruns = null;
	this.unobservedTileHeight = -1;
	this.tileHeightAutoruns = null;
	this.unobservedTileWidth = -1;
	this.tileWidthAutoruns = null;
	this.unobservedName = null;
	this.nameAutoruns = null;
	this.unobservedFirstGid = 0;
	this.firstGidAutoruns = null;
	tracker_Model.call(this);
};
$hxClasses["ceramic.Tileset"] = ceramic_Tileset;
ceramic_Tileset.__name__ = "ceramic.Tileset";
ceramic_Tileset.__super__ = tracker_Model;
ceramic_Tileset.prototype = $extend(tracker_Model.prototype,{
	firstGidAutoruns: null
	,get_firstGid: function() {
		var value = this.unobservedFirstGid;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.firstGidAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.firstGidAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_firstGid: function(firstGid) {
		var prevValue = this.unobservedFirstGid;
		this.unobservedFirstGid = firstGid;
		if(prevValue == firstGid) {
			return firstGid;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitFirstGidChange(firstGid,prevValue);
		var fieldAutoruns = this.firstGidAutoruns;
		if(fieldAutoruns != null) {
			this.firstGidAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return firstGid;
	}
	,invalidateFirstGid: function() {
		var value = this.unobservedFirstGid;
		this.emitFirstGidChange(value,value);
		var fieldAutoruns = this.firstGidAutoruns;
		if(fieldAutoruns != null) {
			this.firstGidAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedFirstGid: null
	,__cbOnFirstGidChange: null
	,__cbOnceFirstGidChange: null
	,__cbOnOwnerUnbindFirstGidChange: null
	,__cbOnceOwnerUnbindFirstGidChange: null
	,emitFirstGidChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnFirstGidChange != null) {
			len += this.__cbOnFirstGidChange.length;
		}
		if(this.__cbOnceFirstGidChange != null) {
			len += this.__cbOnceFirstGidChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnFirstGidChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnFirstGidChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnFirstGidChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceFirstGidChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceFirstGidChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceFirstGidChange[ii];
						this.__cbOnceFirstGidChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindFirstGidChange[ii];
						this.__cbOnceOwnerUnbindFirstGidChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindFirstGidChange[ii]);
						newCbOnceArray.push(this.__cbOnceFirstGidChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindFirstGidChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceFirstGidChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onFirstGidChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "firstGidChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFirstGidChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindFirstGidChange == null) {
				this.__cbOnOwnerUnbindFirstGidChange = [];
			}
			this.__cbOnOwnerUnbindFirstGidChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindFirstGidChange == null) {
				this.__cbOnOwnerUnbindFirstGidChange = [];
			}
			this.__cbOnOwnerUnbindFirstGidChange.push(null);
		}
		if(this.__cbOnFirstGidChange == null) {
			this.__cbOnFirstGidChange = [];
		}
		this.__cbOnFirstGidChange.push(handleCurrentPrevious);
	}
	,onceFirstGidChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "firstGidChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offFirstGidChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindFirstGidChange == null) {
				this.__cbOnceOwnerUnbindFirstGidChange = [];
			}
			this.__cbOnceOwnerUnbindFirstGidChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindFirstGidChange == null) {
				this.__cbOnceOwnerUnbindFirstGidChange = [];
			}
			this.__cbOnceOwnerUnbindFirstGidChange.push(null);
		}
		if(this.__cbOnceFirstGidChange == null) {
			this.__cbOnceFirstGidChange = [];
		}
		this.__cbOnceFirstGidChange.push(handleCurrentPrevious);
	}
	,offFirstGidChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnFirstGidChange != null) {
				index = this.__cbOnFirstGidChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnFirstGidChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindFirstGidChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindFirstGidChange.splice(index,1);
				}
			}
			if(this.__cbOnceFirstGidChange != null) {
				index = this.__cbOnceFirstGidChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceFirstGidChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindFirstGidChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindFirstGidChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindFirstGidChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindFirstGidChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindFirstGidChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindFirstGidChange = null;
			}
			if(this.__cbOnceOwnerUnbindFirstGidChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindFirstGidChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindFirstGidChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindFirstGidChange = null;
			}
			this.__cbOnFirstGidChange = null;
			this.__cbOnceFirstGidChange = null;
		}
	}
	,listensFirstGidChange: function() {
		if(!(this.__cbOnFirstGidChange != null && this.__cbOnFirstGidChange.length > 0)) {
			if(this.__cbOnceFirstGidChange != null) {
				return this.__cbOnceFirstGidChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,nameAutoruns: null
	,get_name: function() {
		var value = this.unobservedName;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.nameAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.nameAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_name: function(name) {
		var prevValue = this.unobservedName;
		this.unobservedName = name;
		if(prevValue == name) {
			return name;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitNameChange(name,prevValue);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return name;
	}
	,invalidateName: function() {
		var value = this.unobservedName;
		this.emitNameChange(value,value);
		var fieldAutoruns = this.nameAutoruns;
		if(fieldAutoruns != null) {
			this.nameAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedName: null
	,__cbOnNameChange: null
	,__cbOnceNameChange: null
	,__cbOnOwnerUnbindNameChange: null
	,__cbOnceOwnerUnbindNameChange: null
	,emitNameChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnNameChange != null) {
			len += this.__cbOnNameChange.length;
		}
		if(this.__cbOnceNameChange != null) {
			len += this.__cbOnceNameChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnNameChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceNameChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceNameChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceNameChange[ii];
						this.__cbOnceNameChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindNameChange[ii];
						this.__cbOnceOwnerUnbindNameChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindNameChange[ii]);
						newCbOnceArray.push(this.__cbOnceNameChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindNameChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceNameChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindNameChange == null) {
				this.__cbOnOwnerUnbindNameChange = [];
			}
			this.__cbOnOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnNameChange == null) {
			this.__cbOnNameChange = [];
		}
		this.__cbOnNameChange.push(handleCurrentPrevious);
	}
	,onceNameChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "nameChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offNameChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindNameChange == null) {
				this.__cbOnceOwnerUnbindNameChange = [];
			}
			this.__cbOnceOwnerUnbindNameChange.push(null);
		}
		if(this.__cbOnceNameChange == null) {
			this.__cbOnceNameChange = [];
		}
		this.__cbOnceNameChange.push(handleCurrentPrevious);
	}
	,offNameChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnNameChange != null) {
				index = this.__cbOnNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnNameChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindNameChange.splice(index,1);
				}
			}
			if(this.__cbOnceNameChange != null) {
				index = this.__cbOnceNameChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceNameChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindNameChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindNameChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindNameChange = null;
			}
			if(this.__cbOnceOwnerUnbindNameChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindNameChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindNameChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindNameChange = null;
			}
			this.__cbOnNameChange = null;
			this.__cbOnceNameChange = null;
		}
	}
	,listensNameChange: function() {
		if(!(this.__cbOnNameChange != null && this.__cbOnNameChange.length > 0)) {
			if(this.__cbOnceNameChange != null) {
				return this.__cbOnceNameChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tileWidthAutoruns: null
	,get_tileWidth: function() {
		var value = this.unobservedTileWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tileWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tileWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tileWidth: function(tileWidth) {
		var prevValue = this.unobservedTileWidth;
		this.unobservedTileWidth = tileWidth;
		if(prevValue == tileWidth) {
			return tileWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTileWidthChange(tileWidth,prevValue);
		var fieldAutoruns = this.tileWidthAutoruns;
		if(fieldAutoruns != null) {
			this.tileWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tileWidth;
	}
	,invalidateTileWidth: function() {
		var value = this.unobservedTileWidth;
		this.emitTileWidthChange(value,value);
		var fieldAutoruns = this.tileWidthAutoruns;
		if(fieldAutoruns != null) {
			this.tileWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTileWidth: null
	,__cbOnTileWidthChange: null
	,__cbOnceTileWidthChange: null
	,__cbOnOwnerUnbindTileWidthChange: null
	,__cbOnceOwnerUnbindTileWidthChange: null
	,emitTileWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTileWidthChange != null) {
			len += this.__cbOnTileWidthChange.length;
		}
		if(this.__cbOnceTileWidthChange != null) {
			len += this.__cbOnceTileWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTileWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTileWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTileWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTileWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTileWidthChange[ii];
						this.__cbOnceTileWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTileWidthChange[ii];
						this.__cbOnceOwnerUnbindTileWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTileWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceTileWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTileWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTileWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTileWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTileWidthChange == null) {
				this.__cbOnOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnOwnerUnbindTileWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTileWidthChange == null) {
				this.__cbOnOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnOwnerUnbindTileWidthChange.push(null);
		}
		if(this.__cbOnTileWidthChange == null) {
			this.__cbOnTileWidthChange = [];
		}
		this.__cbOnTileWidthChange.push(handleCurrentPrevious);
	}
	,onceTileWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTileWidthChange == null) {
				this.__cbOnceOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTileWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTileWidthChange == null) {
				this.__cbOnceOwnerUnbindTileWidthChange = [];
			}
			this.__cbOnceOwnerUnbindTileWidthChange.push(null);
		}
		if(this.__cbOnceTileWidthChange == null) {
			this.__cbOnceTileWidthChange = [];
		}
		this.__cbOnceTileWidthChange.push(handleCurrentPrevious);
	}
	,offTileWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTileWidthChange != null) {
				index = this.__cbOnTileWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTileWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTileWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTileWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceTileWidthChange != null) {
				index = this.__cbOnceTileWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTileWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTileWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTileWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTileWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTileWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTileWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindTileWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTileWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTileWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTileWidthChange = null;
			}
			this.__cbOnTileWidthChange = null;
			this.__cbOnceTileWidthChange = null;
		}
	}
	,listensTileWidthChange: function() {
		if(!(this.__cbOnTileWidthChange != null && this.__cbOnTileWidthChange.length > 0)) {
			if(this.__cbOnceTileWidthChange != null) {
				return this.__cbOnceTileWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tileHeightAutoruns: null
	,get_tileHeight: function() {
		var value = this.unobservedTileHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tileHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tileHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tileHeight: function(tileHeight) {
		var prevValue = this.unobservedTileHeight;
		this.unobservedTileHeight = tileHeight;
		if(prevValue == tileHeight) {
			return tileHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTileHeightChange(tileHeight,prevValue);
		var fieldAutoruns = this.tileHeightAutoruns;
		if(fieldAutoruns != null) {
			this.tileHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tileHeight;
	}
	,invalidateTileHeight: function() {
		var value = this.unobservedTileHeight;
		this.emitTileHeightChange(value,value);
		var fieldAutoruns = this.tileHeightAutoruns;
		if(fieldAutoruns != null) {
			this.tileHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTileHeight: null
	,__cbOnTileHeightChange: null
	,__cbOnceTileHeightChange: null
	,__cbOnOwnerUnbindTileHeightChange: null
	,__cbOnceOwnerUnbindTileHeightChange: null
	,emitTileHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTileHeightChange != null) {
			len += this.__cbOnTileHeightChange.length;
		}
		if(this.__cbOnceTileHeightChange != null) {
			len += this.__cbOnceTileHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTileHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTileHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTileHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTileHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTileHeightChange[ii];
						this.__cbOnceTileHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTileHeightChange[ii];
						this.__cbOnceOwnerUnbindTileHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTileHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceTileHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTileHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTileHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTileHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTileHeightChange == null) {
				this.__cbOnOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnOwnerUnbindTileHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTileHeightChange == null) {
				this.__cbOnOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnOwnerUnbindTileHeightChange.push(null);
		}
		if(this.__cbOnTileHeightChange == null) {
			this.__cbOnTileHeightChange = [];
		}
		this.__cbOnTileHeightChange.push(handleCurrentPrevious);
	}
	,onceTileHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTileHeightChange == null) {
				this.__cbOnceOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTileHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTileHeightChange == null) {
				this.__cbOnceOwnerUnbindTileHeightChange = [];
			}
			this.__cbOnceOwnerUnbindTileHeightChange.push(null);
		}
		if(this.__cbOnceTileHeightChange == null) {
			this.__cbOnceTileHeightChange = [];
		}
		this.__cbOnceTileHeightChange.push(handleCurrentPrevious);
	}
	,offTileHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTileHeightChange != null) {
				index = this.__cbOnTileHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTileHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTileHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTileHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceTileHeightChange != null) {
				index = this.__cbOnceTileHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTileHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTileHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTileHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTileHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTileHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTileHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindTileHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTileHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTileHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTileHeightChange = null;
			}
			this.__cbOnTileHeightChange = null;
			this.__cbOnceTileHeightChange = null;
		}
	}
	,listensTileHeightChange: function() {
		if(!(this.__cbOnTileHeightChange != null && this.__cbOnTileHeightChange.length > 0)) {
			if(this.__cbOnceTileHeightChange != null) {
				return this.__cbOnceTileHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,spacingAutoruns: null
	,get_spacing: function() {
		var value = this.unobservedSpacing;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.spacingAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.spacingAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_spacing: function(spacing) {
		var prevValue = this.unobservedSpacing;
		this.unobservedSpacing = spacing;
		if(prevValue == spacing) {
			return spacing;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitSpacingChange(spacing,prevValue);
		var fieldAutoruns = this.spacingAutoruns;
		if(fieldAutoruns != null) {
			this.spacingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return spacing;
	}
	,invalidateSpacing: function() {
		var value = this.unobservedSpacing;
		this.emitSpacingChange(value,value);
		var fieldAutoruns = this.spacingAutoruns;
		if(fieldAutoruns != null) {
			this.spacingAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedSpacing: null
	,__cbOnSpacingChange: null
	,__cbOnceSpacingChange: null
	,__cbOnOwnerUnbindSpacingChange: null
	,__cbOnceOwnerUnbindSpacingChange: null
	,emitSpacingChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnSpacingChange != null) {
			len += this.__cbOnSpacingChange.length;
		}
		if(this.__cbOnceSpacingChange != null) {
			len += this.__cbOnceSpacingChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSpacingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnSpacingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSpacingChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSpacingChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSpacingChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSpacingChange[ii];
						this.__cbOnceSpacingChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSpacingChange[ii];
						this.__cbOnceOwnerUnbindSpacingChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSpacingChange[ii]);
						newCbOnceArray.push(this.__cbOnceSpacingChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSpacingChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceSpacingChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSpacingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "spacingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSpacingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSpacingChange == null) {
				this.__cbOnOwnerUnbindSpacingChange = [];
			}
			this.__cbOnOwnerUnbindSpacingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSpacingChange == null) {
				this.__cbOnOwnerUnbindSpacingChange = [];
			}
			this.__cbOnOwnerUnbindSpacingChange.push(null);
		}
		if(this.__cbOnSpacingChange == null) {
			this.__cbOnSpacingChange = [];
		}
		this.__cbOnSpacingChange.push(handleCurrentPrevious);
	}
	,onceSpacingChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "spacingChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSpacingChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSpacingChange == null) {
				this.__cbOnceOwnerUnbindSpacingChange = [];
			}
			this.__cbOnceOwnerUnbindSpacingChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSpacingChange == null) {
				this.__cbOnceOwnerUnbindSpacingChange = [];
			}
			this.__cbOnceOwnerUnbindSpacingChange.push(null);
		}
		if(this.__cbOnceSpacingChange == null) {
			this.__cbOnceSpacingChange = [];
		}
		this.__cbOnceSpacingChange.push(handleCurrentPrevious);
	}
	,offSpacingChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnSpacingChange != null) {
				index = this.__cbOnSpacingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnSpacingChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSpacingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSpacingChange.splice(index,1);
				}
			}
			if(this.__cbOnceSpacingChange != null) {
				index = this.__cbOnceSpacingChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceSpacingChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSpacingChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSpacingChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSpacingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSpacingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSpacingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSpacingChange = null;
			}
			if(this.__cbOnceOwnerUnbindSpacingChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSpacingChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSpacingChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSpacingChange = null;
			}
			this.__cbOnSpacingChange = null;
			this.__cbOnceSpacingChange = null;
		}
	}
	,listensSpacingChange: function() {
		if(!(this.__cbOnSpacingChange != null && this.__cbOnSpacingChange.length > 0)) {
			if(this.__cbOnceSpacingChange != null) {
				return this.__cbOnceSpacingChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,marginAutoruns: null
	,get_margin: function() {
		var value = this.unobservedMargin;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.marginAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.marginAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_margin: function(margin) {
		var prevValue = this.unobservedMargin;
		this.unobservedMargin = margin;
		if(prevValue == margin) {
			return margin;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitMarginChange(margin,prevValue);
		var fieldAutoruns = this.marginAutoruns;
		if(fieldAutoruns != null) {
			this.marginAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return margin;
	}
	,invalidateMargin: function() {
		var value = this.unobservedMargin;
		this.emitMarginChange(value,value);
		var fieldAutoruns = this.marginAutoruns;
		if(fieldAutoruns != null) {
			this.marginAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedMargin: null
	,__cbOnMarginChange: null
	,__cbOnceMarginChange: null
	,__cbOnOwnerUnbindMarginChange: null
	,__cbOnceOwnerUnbindMarginChange: null
	,emitMarginChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnMarginChange != null) {
			len += this.__cbOnMarginChange.length;
		}
		if(this.__cbOnceMarginChange != null) {
			len += this.__cbOnceMarginChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnMarginChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnMarginChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnMarginChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceMarginChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceMarginChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceMarginChange[ii];
						this.__cbOnceMarginChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindMarginChange[ii];
						this.__cbOnceOwnerUnbindMarginChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindMarginChange[ii]);
						newCbOnceArray.push(this.__cbOnceMarginChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindMarginChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceMarginChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onMarginChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "marginChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMarginChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindMarginChange == null) {
				this.__cbOnOwnerUnbindMarginChange = [];
			}
			this.__cbOnOwnerUnbindMarginChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindMarginChange == null) {
				this.__cbOnOwnerUnbindMarginChange = [];
			}
			this.__cbOnOwnerUnbindMarginChange.push(null);
		}
		if(this.__cbOnMarginChange == null) {
			this.__cbOnMarginChange = [];
		}
		this.__cbOnMarginChange.push(handleCurrentPrevious);
	}
	,onceMarginChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "marginChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offMarginChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindMarginChange == null) {
				this.__cbOnceOwnerUnbindMarginChange = [];
			}
			this.__cbOnceOwnerUnbindMarginChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindMarginChange == null) {
				this.__cbOnceOwnerUnbindMarginChange = [];
			}
			this.__cbOnceOwnerUnbindMarginChange.push(null);
		}
		if(this.__cbOnceMarginChange == null) {
			this.__cbOnceMarginChange = [];
		}
		this.__cbOnceMarginChange.push(handleCurrentPrevious);
	}
	,offMarginChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnMarginChange != null) {
				index = this.__cbOnMarginChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnMarginChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindMarginChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindMarginChange.splice(index,1);
				}
			}
			if(this.__cbOnceMarginChange != null) {
				index = this.__cbOnceMarginChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceMarginChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindMarginChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindMarginChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindMarginChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindMarginChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindMarginChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindMarginChange = null;
			}
			if(this.__cbOnceOwnerUnbindMarginChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindMarginChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindMarginChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindMarginChange = null;
			}
			this.__cbOnMarginChange = null;
			this.__cbOnceMarginChange = null;
		}
	}
	,listensMarginChange: function() {
		if(!(this.__cbOnMarginChange != null && this.__cbOnMarginChange.length > 0)) {
			if(this.__cbOnceMarginChange != null) {
				return this.__cbOnceMarginChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,tileCountAutoruns: null
	,get_tileCount: function() {
		var value = this.unobservedTileCount;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.tileCountAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.tileCountAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_tileCount: function(tileCount) {
		var prevValue = this.unobservedTileCount;
		this.unobservedTileCount = tileCount;
		if(prevValue == tileCount) {
			return tileCount;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitTileCountChange(tileCount,prevValue);
		var fieldAutoruns = this.tileCountAutoruns;
		if(fieldAutoruns != null) {
			this.tileCountAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return tileCount;
	}
	,invalidateTileCount: function() {
		var value = this.unobservedTileCount;
		this.emitTileCountChange(value,value);
		var fieldAutoruns = this.tileCountAutoruns;
		if(fieldAutoruns != null) {
			this.tileCountAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedTileCount: null
	,__cbOnTileCountChange: null
	,__cbOnceTileCountChange: null
	,__cbOnOwnerUnbindTileCountChange: null
	,__cbOnceOwnerUnbindTileCountChange: null
	,emitTileCountChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnTileCountChange != null) {
			len += this.__cbOnTileCountChange.length;
		}
		if(this.__cbOnceTileCountChange != null) {
			len += this.__cbOnceTileCountChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnTileCountChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnTileCountChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnTileCountChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceTileCountChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceTileCountChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceTileCountChange[ii];
						this.__cbOnceTileCountChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindTileCountChange[ii];
						this.__cbOnceOwnerUnbindTileCountChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindTileCountChange[ii]);
						newCbOnceArray.push(this.__cbOnceTileCountChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindTileCountChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceTileCountChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onTileCountChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileCountChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileCountChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindTileCountChange == null) {
				this.__cbOnOwnerUnbindTileCountChange = [];
			}
			this.__cbOnOwnerUnbindTileCountChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindTileCountChange == null) {
				this.__cbOnOwnerUnbindTileCountChange = [];
			}
			this.__cbOnOwnerUnbindTileCountChange.push(null);
		}
		if(this.__cbOnTileCountChange == null) {
			this.__cbOnTileCountChange = [];
		}
		this.__cbOnTileCountChange.push(handleCurrentPrevious);
	}
	,onceTileCountChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "tileCountChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offTileCountChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindTileCountChange == null) {
				this.__cbOnceOwnerUnbindTileCountChange = [];
			}
			this.__cbOnceOwnerUnbindTileCountChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindTileCountChange == null) {
				this.__cbOnceOwnerUnbindTileCountChange = [];
			}
			this.__cbOnceOwnerUnbindTileCountChange.push(null);
		}
		if(this.__cbOnceTileCountChange == null) {
			this.__cbOnceTileCountChange = [];
		}
		this.__cbOnceTileCountChange.push(handleCurrentPrevious);
	}
	,offTileCountChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnTileCountChange != null) {
				index = this.__cbOnTileCountChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnTileCountChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindTileCountChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindTileCountChange.splice(index,1);
				}
			}
			if(this.__cbOnceTileCountChange != null) {
				index = this.__cbOnceTileCountChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceTileCountChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindTileCountChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindTileCountChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindTileCountChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindTileCountChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindTileCountChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindTileCountChange = null;
			}
			if(this.__cbOnceOwnerUnbindTileCountChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindTileCountChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindTileCountChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindTileCountChange = null;
			}
			this.__cbOnTileCountChange = null;
			this.__cbOnceTileCountChange = null;
		}
	}
	,listensTileCountChange: function() {
		if(!(this.__cbOnTileCountChange != null && this.__cbOnTileCountChange.length > 0)) {
			if(this.__cbOnceTileCountChange != null) {
				return this.__cbOnceTileCountChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,columnsAutoruns: null
	,get_columns: function() {
		var value = this.unobservedColumns;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.columnsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.columnsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_columns: function(columns) {
		var prevValue = this.unobservedColumns;
		this.unobservedColumns = columns;
		if(prevValue == columns) {
			return columns;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitColumnsChange(columns,prevValue);
		var fieldAutoruns = this.columnsAutoruns;
		if(fieldAutoruns != null) {
			this.columnsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return columns;
	}
	,invalidateColumns: function() {
		var value = this.unobservedColumns;
		this.emitColumnsChange(value,value);
		var fieldAutoruns = this.columnsAutoruns;
		if(fieldAutoruns != null) {
			this.columnsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedColumns: null
	,__cbOnColumnsChange: null
	,__cbOnceColumnsChange: null
	,__cbOnOwnerUnbindColumnsChange: null
	,__cbOnceOwnerUnbindColumnsChange: null
	,emitColumnsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnColumnsChange != null) {
			len += this.__cbOnColumnsChange.length;
		}
		if(this.__cbOnceColumnsChange != null) {
			len += this.__cbOnceColumnsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnColumnsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnColumnsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnColumnsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceColumnsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceColumnsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceColumnsChange[ii];
						this.__cbOnceColumnsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindColumnsChange[ii];
						this.__cbOnceOwnerUnbindColumnsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindColumnsChange[ii]);
						newCbOnceArray.push(this.__cbOnceColumnsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindColumnsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceColumnsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onColumnsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "columnsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offColumnsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindColumnsChange == null) {
				this.__cbOnOwnerUnbindColumnsChange = [];
			}
			this.__cbOnOwnerUnbindColumnsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindColumnsChange == null) {
				this.__cbOnOwnerUnbindColumnsChange = [];
			}
			this.__cbOnOwnerUnbindColumnsChange.push(null);
		}
		if(this.__cbOnColumnsChange == null) {
			this.__cbOnColumnsChange = [];
		}
		this.__cbOnColumnsChange.push(handleCurrentPrevious);
	}
	,onceColumnsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "columnsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offColumnsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindColumnsChange == null) {
				this.__cbOnceOwnerUnbindColumnsChange = [];
			}
			this.__cbOnceOwnerUnbindColumnsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindColumnsChange == null) {
				this.__cbOnceOwnerUnbindColumnsChange = [];
			}
			this.__cbOnceOwnerUnbindColumnsChange.push(null);
		}
		if(this.__cbOnceColumnsChange == null) {
			this.__cbOnceColumnsChange = [];
		}
		this.__cbOnceColumnsChange.push(handleCurrentPrevious);
	}
	,offColumnsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnColumnsChange != null) {
				index = this.__cbOnColumnsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnColumnsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindColumnsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindColumnsChange.splice(index,1);
				}
			}
			if(this.__cbOnceColumnsChange != null) {
				index = this.__cbOnceColumnsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceColumnsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindColumnsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindColumnsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindColumnsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindColumnsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindColumnsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindColumnsChange = null;
			}
			if(this.__cbOnceOwnerUnbindColumnsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindColumnsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindColumnsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindColumnsChange = null;
			}
			this.__cbOnColumnsChange = null;
			this.__cbOnceColumnsChange = null;
		}
	}
	,listensColumnsChange: function() {
		if(!(this.__cbOnColumnsChange != null && this.__cbOnColumnsChange.length > 0)) {
			if(this.__cbOnceColumnsChange != null) {
				return this.__cbOnceColumnsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,willListenRowsChange: function() {
		this.get_unobservedRows();
	}
	,get_unobservedRows: function() {
		if(this._lifecycleState >= 0) {
			if(this.computeAutorunRows == null) {
				var _that = this;
				var _autorun = new tracker_Autorun(null);
				this.computedOnceRows = true;
				this.computeAutorunRows = _autorun;
				_autorun.onRun = function() {
					var result = _that.computeRows();
					tracker_Autorun.unobserve();
					_that.set_rows(result);
					tracker_Autorun.reobserve();
				};
				_autorun.onDestroy(this,function(_) {
					if(_that.computeAutorunRows == _autorun) {
						_that.computeAutorunRows = null;
					}
					_autorun = null;
					_that = null;
				});
				this.onDestroy(_autorun,function(_) {
					if(_autorun != null) {
						_autorun.destroy();
						_autorun = null;
					}
					_that = null;
				});
				_autorun.run();
			} else if(this.computeAutorunRows.invalidated) {
				this.computeAutorunRows.run();
			}
		} else if(!this.computedOnceRows) {
			tracker_Autorun.unobserve();
			this.computedOnceRows = true;
			this.unobservedRows = this.computeRows();
			tracker_Autorun.reobserve();
		}
		return this.unobservedRows;
	}
	,rowsAutoruns: null
	,get_rows: function() {
		var value = this.get_unobservedRows();
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.rowsAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.rowsAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_rows: function(rows) {
		var prevValue = this.get_unobservedRows();
		this.unobservedRows = rows;
		if(prevValue == rows) {
			return rows;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,false);
		}
		this.emitRowsChange(rows,prevValue);
		var fieldAutoruns = this.rowsAutoruns;
		if(fieldAutoruns != null) {
			this.rowsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return rows;
	}
	,invalidateRows: function() {
		var value = this.get_unobservedRows();
		this.emitRowsChange(value,value);
		var fieldAutoruns = this.rowsAutoruns;
		if(fieldAutoruns != null) {
			this.rowsAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedRows: null
	,__cbOnRowsChange: null
	,__cbOnceRowsChange: null
	,__cbOnOwnerUnbindRowsChange: null
	,__cbOnceOwnerUnbindRowsChange: null
	,emitRowsChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnRowsChange != null) {
			len += this.__cbOnRowsChange.length;
		}
		if(this.__cbOnceRowsChange != null) {
			len += this.__cbOnceRowsChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnRowsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnRowsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnRowsChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceRowsChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceRowsChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceRowsChange[ii];
						this.__cbOnceRowsChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindRowsChange[ii];
						this.__cbOnceOwnerUnbindRowsChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindRowsChange[ii]);
						newCbOnceArray.push(this.__cbOnceRowsChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindRowsChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceRowsChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onRowsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnRowsChange == null && this.__cbOnceRowsChange == null) {
			this.willListenRowsChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "rowsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRowsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindRowsChange == null) {
				this.__cbOnOwnerUnbindRowsChange = [];
			}
			this.__cbOnOwnerUnbindRowsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindRowsChange == null) {
				this.__cbOnOwnerUnbindRowsChange = [];
			}
			this.__cbOnOwnerUnbindRowsChange.push(null);
		}
		if(this.__cbOnRowsChange == null) {
			this.__cbOnRowsChange = [];
		}
		this.__cbOnRowsChange.push(handleCurrentPrevious);
	}
	,onceRowsChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(this.__cbOnRowsChange == null && this.__cbOnceRowsChange == null) {
			this.willListenRowsChange();
		}
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "rowsChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offRowsChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindRowsChange == null) {
				this.__cbOnceOwnerUnbindRowsChange = [];
			}
			this.__cbOnceOwnerUnbindRowsChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindRowsChange == null) {
				this.__cbOnceOwnerUnbindRowsChange = [];
			}
			this.__cbOnceOwnerUnbindRowsChange.push(null);
		}
		if(this.__cbOnceRowsChange == null) {
			this.__cbOnceRowsChange = [];
		}
		this.__cbOnceRowsChange.push(handleCurrentPrevious);
	}
	,offRowsChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnRowsChange != null) {
				index = this.__cbOnRowsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnRowsChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindRowsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindRowsChange.splice(index,1);
				}
			}
			if(this.__cbOnceRowsChange != null) {
				index = this.__cbOnceRowsChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceRowsChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindRowsChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindRowsChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindRowsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindRowsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindRowsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindRowsChange = null;
			}
			if(this.__cbOnceOwnerUnbindRowsChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindRowsChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindRowsChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindRowsChange = null;
			}
			this.__cbOnRowsChange = null;
			this.__cbOnceRowsChange = null;
		}
	}
	,listensRowsChange: function() {
		if(!(this.__cbOnRowsChange != null && this.__cbOnRowsChange.length > 0)) {
			if(this.__cbOnceRowsChange != null) {
				return this.__cbOnceRowsChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,computeRows: function() {
		var result = 0;
		var image = this.get_image();
		if(image != null) {
			var imageHeight = image.get_height();
			result = Math.floor((imageHeight - this.get_margin() * 2 + this.get_spacing()) / (this.get_tileHeight() + this.get_spacing()));
		}
		return result;
	}
	,computeAutorunRows: null
	,computedOnceRows: null
	,imageAutoruns: null
	,get_image: function() {
		var value = this.unobservedImage;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.imageAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.imageAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_image: function(image) {
		var prevValue = this.unobservedImage;
		this.set_unobservedImage(image);
		if(prevValue == image) {
			return image;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitImageChange(image,prevValue);
		var fieldAutoruns = this.imageAutoruns;
		if(fieldAutoruns != null) {
			this.imageAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return image;
	}
	,invalidateImage: function() {
		var value = this.unobservedImage;
		this.emitImageChange(value,value);
		var fieldAutoruns = this.imageAutoruns;
		if(fieldAutoruns != null) {
			this.imageAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedImage: null
	,__cbOnImageChange: null
	,__cbOnceImageChange: null
	,__cbOnOwnerUnbindImageChange: null
	,__cbOnceOwnerUnbindImageChange: null
	,emitImageChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnImageChange != null) {
			len += this.__cbOnImageChange.length;
		}
		if(this.__cbOnceImageChange != null) {
			len += this.__cbOnceImageChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnImageChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnImageChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnImageChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceImageChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceImageChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceImageChange[ii];
						this.__cbOnceImageChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindImageChange[ii];
						this.__cbOnceOwnerUnbindImageChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindImageChange[ii]);
						newCbOnceArray.push(this.__cbOnceImageChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindImageChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceImageChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onImageChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "imageChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offImageChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindImageChange == null) {
				this.__cbOnOwnerUnbindImageChange = [];
			}
			this.__cbOnOwnerUnbindImageChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindImageChange == null) {
				this.__cbOnOwnerUnbindImageChange = [];
			}
			this.__cbOnOwnerUnbindImageChange.push(null);
		}
		if(this.__cbOnImageChange == null) {
			this.__cbOnImageChange = [];
		}
		this.__cbOnImageChange.push(handleCurrentPrevious);
	}
	,onceImageChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "imageChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offImageChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindImageChange == null) {
				this.__cbOnceOwnerUnbindImageChange = [];
			}
			this.__cbOnceOwnerUnbindImageChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindImageChange == null) {
				this.__cbOnceOwnerUnbindImageChange = [];
			}
			this.__cbOnceOwnerUnbindImageChange.push(null);
		}
		if(this.__cbOnceImageChange == null) {
			this.__cbOnceImageChange = [];
		}
		this.__cbOnceImageChange.push(handleCurrentPrevious);
	}
	,offImageChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnImageChange != null) {
				index = this.__cbOnImageChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnImageChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindImageChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindImageChange.splice(index,1);
				}
			}
			if(this.__cbOnceImageChange != null) {
				index = this.__cbOnceImageChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceImageChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindImageChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindImageChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindImageChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindImageChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindImageChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindImageChange = null;
			}
			if(this.__cbOnceOwnerUnbindImageChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindImageChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindImageChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindImageChange = null;
			}
			this.__cbOnImageChange = null;
			this.__cbOnceImageChange = null;
		}
	}
	,listensImageChange: function() {
		if(!(this.__cbOnImageChange != null && this.__cbOnImageChange.length > 0)) {
			if(this.__cbOnceImageChange != null) {
				return this.__cbOnceImageChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_unobservedImage: function(image) {
		if(image != this.unobservedImage) {
			var prevImage = this.unobservedImage;
			this.unobservedImage = image;
			if(this.implicitImage && prevImage != null) {
				prevImage.destroy();
			}
			this.implicitImage = false;
		}
		return image;
	}
	,gridOrientationAutoruns: null
	,get_gridOrientation: function() {
		var value = this.unobservedGridOrientation;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.gridOrientationAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.gridOrientationAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_gridOrientation: function(gridOrientation) {
		var prevValue = this.unobservedGridOrientation;
		this.unobservedGridOrientation = gridOrientation;
		if(prevValue == gridOrientation) {
			return gridOrientation;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitGridOrientationChange(gridOrientation,prevValue);
		var fieldAutoruns = this.gridOrientationAutoruns;
		if(fieldAutoruns != null) {
			this.gridOrientationAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return gridOrientation;
	}
	,invalidateGridOrientation: function() {
		var value = this.unobservedGridOrientation;
		this.emitGridOrientationChange(value,value);
		var fieldAutoruns = this.gridOrientationAutoruns;
		if(fieldAutoruns != null) {
			this.gridOrientationAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedGridOrientation: null
	,__cbOnGridOrientationChange: null
	,__cbOnceGridOrientationChange: null
	,__cbOnOwnerUnbindGridOrientationChange: null
	,__cbOnceOwnerUnbindGridOrientationChange: null
	,emitGridOrientationChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnGridOrientationChange != null) {
			len += this.__cbOnGridOrientationChange.length;
		}
		if(this.__cbOnceGridOrientationChange != null) {
			len += this.__cbOnceGridOrientationChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGridOrientationChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnGridOrientationChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGridOrientationChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGridOrientationChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGridOrientationChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGridOrientationChange[ii];
						this.__cbOnceGridOrientationChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGridOrientationChange[ii];
						this.__cbOnceOwnerUnbindGridOrientationChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGridOrientationChange[ii]);
						newCbOnceArray.push(this.__cbOnceGridOrientationChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGridOrientationChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceGridOrientationChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGridOrientationChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gridOrientationChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offGridOrientationChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGridOrientationChange == null) {
				this.__cbOnOwnerUnbindGridOrientationChange = [];
			}
			this.__cbOnOwnerUnbindGridOrientationChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGridOrientationChange == null) {
				this.__cbOnOwnerUnbindGridOrientationChange = [];
			}
			this.__cbOnOwnerUnbindGridOrientationChange.push(null);
		}
		if(this.__cbOnGridOrientationChange == null) {
			this.__cbOnGridOrientationChange = [];
		}
		this.__cbOnGridOrientationChange.push(handleCurrentPrevious);
	}
	,onceGridOrientationChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gridOrientationChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offGridOrientationChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGridOrientationChange == null) {
				this.__cbOnceOwnerUnbindGridOrientationChange = [];
			}
			this.__cbOnceOwnerUnbindGridOrientationChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGridOrientationChange == null) {
				this.__cbOnceOwnerUnbindGridOrientationChange = [];
			}
			this.__cbOnceOwnerUnbindGridOrientationChange.push(null);
		}
		if(this.__cbOnceGridOrientationChange == null) {
			this.__cbOnceGridOrientationChange = [];
		}
		this.__cbOnceGridOrientationChange.push(handleCurrentPrevious);
	}
	,offGridOrientationChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnGridOrientationChange != null) {
				index = this.__cbOnGridOrientationChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnGridOrientationChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGridOrientationChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGridOrientationChange.splice(index,1);
				}
			}
			if(this.__cbOnceGridOrientationChange != null) {
				index = this.__cbOnceGridOrientationChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceGridOrientationChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGridOrientationChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGridOrientationChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGridOrientationChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGridOrientationChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGridOrientationChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGridOrientationChange = null;
			}
			if(this.__cbOnceOwnerUnbindGridOrientationChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGridOrientationChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGridOrientationChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGridOrientationChange = null;
			}
			this.__cbOnGridOrientationChange = null;
			this.__cbOnceGridOrientationChange = null;
		}
	}
	,listensGridOrientationChange: function() {
		if(!(this.__cbOnGridOrientationChange != null && this.__cbOnGridOrientationChange.length > 0)) {
			if(this.__cbOnceGridOrientationChange != null) {
				return this.__cbOnceGridOrientationChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,gridCellWidthAutoruns: null
	,get_gridCellWidth: function() {
		var value = this.unobservedGridCellWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.gridCellWidthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.gridCellWidthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_gridCellWidth: function(gridCellWidth) {
		var prevValue = this.unobservedGridCellWidth;
		this.unobservedGridCellWidth = gridCellWidth;
		if(prevValue == gridCellWidth) {
			return gridCellWidth;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitGridCellWidthChange(gridCellWidth,prevValue);
		var fieldAutoruns = this.gridCellWidthAutoruns;
		if(fieldAutoruns != null) {
			this.gridCellWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return gridCellWidth;
	}
	,invalidateGridCellWidth: function() {
		var value = this.unobservedGridCellWidth;
		this.emitGridCellWidthChange(value,value);
		var fieldAutoruns = this.gridCellWidthAutoruns;
		if(fieldAutoruns != null) {
			this.gridCellWidthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedGridCellWidth: null
	,__cbOnGridCellWidthChange: null
	,__cbOnceGridCellWidthChange: null
	,__cbOnOwnerUnbindGridCellWidthChange: null
	,__cbOnceOwnerUnbindGridCellWidthChange: null
	,emitGridCellWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnGridCellWidthChange != null) {
			len += this.__cbOnGridCellWidthChange.length;
		}
		if(this.__cbOnceGridCellWidthChange != null) {
			len += this.__cbOnceGridCellWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGridCellWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnGridCellWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGridCellWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGridCellWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGridCellWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGridCellWidthChange[ii];
						this.__cbOnceGridCellWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGridCellWidthChange[ii];
						this.__cbOnceOwnerUnbindGridCellWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGridCellWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceGridCellWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGridCellWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceGridCellWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGridCellWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gridCellWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offGridCellWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGridCellWidthChange == null) {
				this.__cbOnOwnerUnbindGridCellWidthChange = [];
			}
			this.__cbOnOwnerUnbindGridCellWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGridCellWidthChange == null) {
				this.__cbOnOwnerUnbindGridCellWidthChange = [];
			}
			this.__cbOnOwnerUnbindGridCellWidthChange.push(null);
		}
		if(this.__cbOnGridCellWidthChange == null) {
			this.__cbOnGridCellWidthChange = [];
		}
		this.__cbOnGridCellWidthChange.push(handleCurrentPrevious);
	}
	,onceGridCellWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gridCellWidthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offGridCellWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGridCellWidthChange == null) {
				this.__cbOnceOwnerUnbindGridCellWidthChange = [];
			}
			this.__cbOnceOwnerUnbindGridCellWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGridCellWidthChange == null) {
				this.__cbOnceOwnerUnbindGridCellWidthChange = [];
			}
			this.__cbOnceOwnerUnbindGridCellWidthChange.push(null);
		}
		if(this.__cbOnceGridCellWidthChange == null) {
			this.__cbOnceGridCellWidthChange = [];
		}
		this.__cbOnceGridCellWidthChange.push(handleCurrentPrevious);
	}
	,offGridCellWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnGridCellWidthChange != null) {
				index = this.__cbOnGridCellWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnGridCellWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGridCellWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGridCellWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceGridCellWidthChange != null) {
				index = this.__cbOnceGridCellWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceGridCellWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGridCellWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGridCellWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGridCellWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGridCellWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGridCellWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGridCellWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindGridCellWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGridCellWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGridCellWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGridCellWidthChange = null;
			}
			this.__cbOnGridCellWidthChange = null;
			this.__cbOnceGridCellWidthChange = null;
		}
	}
	,listensGridCellWidthChange: function() {
		if(!(this.__cbOnGridCellWidthChange != null && this.__cbOnGridCellWidthChange.length > 0)) {
			if(this.__cbOnceGridCellWidthChange != null) {
				return this.__cbOnceGridCellWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,gridCellHeightAutoruns: null
	,get_gridCellHeight: function() {
		var value = this.unobservedGridCellHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.gridCellHeightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.gridCellHeightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_gridCellHeight: function(gridCellHeight) {
		var prevValue = this.unobservedGridCellHeight;
		this.unobservedGridCellHeight = gridCellHeight;
		if(prevValue == gridCellHeight) {
			return gridCellHeight;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitGridCellHeightChange(gridCellHeight,prevValue);
		var fieldAutoruns = this.gridCellHeightAutoruns;
		if(fieldAutoruns != null) {
			this.gridCellHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return gridCellHeight;
	}
	,invalidateGridCellHeight: function() {
		var value = this.unobservedGridCellHeight;
		this.emitGridCellHeightChange(value,value);
		var fieldAutoruns = this.gridCellHeightAutoruns;
		if(fieldAutoruns != null) {
			this.gridCellHeightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedGridCellHeight: null
	,__cbOnGridCellHeightChange: null
	,__cbOnceGridCellHeightChange: null
	,__cbOnOwnerUnbindGridCellHeightChange: null
	,__cbOnceOwnerUnbindGridCellHeightChange: null
	,emitGridCellHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnGridCellHeightChange != null) {
			len += this.__cbOnGridCellHeightChange.length;
		}
		if(this.__cbOnceGridCellHeightChange != null) {
			len += this.__cbOnceGridCellHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnGridCellHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnGridCellHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnGridCellHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceGridCellHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceGridCellHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceGridCellHeightChange[ii];
						this.__cbOnceGridCellHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindGridCellHeightChange[ii];
						this.__cbOnceOwnerUnbindGridCellHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindGridCellHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceGridCellHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindGridCellHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceGridCellHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onGridCellHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gridCellHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offGridCellHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindGridCellHeightChange == null) {
				this.__cbOnOwnerUnbindGridCellHeightChange = [];
			}
			this.__cbOnOwnerUnbindGridCellHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindGridCellHeightChange == null) {
				this.__cbOnOwnerUnbindGridCellHeightChange = [];
			}
			this.__cbOnOwnerUnbindGridCellHeightChange.push(null);
		}
		if(this.__cbOnGridCellHeightChange == null) {
			this.__cbOnGridCellHeightChange = [];
		}
		this.__cbOnGridCellHeightChange.push(handleCurrentPrevious);
	}
	,onceGridCellHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "gridCellHeightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offGridCellHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindGridCellHeightChange == null) {
				this.__cbOnceOwnerUnbindGridCellHeightChange = [];
			}
			this.__cbOnceOwnerUnbindGridCellHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindGridCellHeightChange == null) {
				this.__cbOnceOwnerUnbindGridCellHeightChange = [];
			}
			this.__cbOnceOwnerUnbindGridCellHeightChange.push(null);
		}
		if(this.__cbOnceGridCellHeightChange == null) {
			this.__cbOnceGridCellHeightChange = [];
		}
		this.__cbOnceGridCellHeightChange.push(handleCurrentPrevious);
	}
	,offGridCellHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnGridCellHeightChange != null) {
				index = this.__cbOnGridCellHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnGridCellHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindGridCellHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindGridCellHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceGridCellHeightChange != null) {
				index = this.__cbOnceGridCellHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceGridCellHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindGridCellHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindGridCellHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindGridCellHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindGridCellHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindGridCellHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindGridCellHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindGridCellHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindGridCellHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindGridCellHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindGridCellHeightChange = null;
			}
			this.__cbOnGridCellHeightChange = null;
			this.__cbOnceGridCellHeightChange = null;
		}
	}
	,listensGridCellHeightChange: function() {
		if(!(this.__cbOnGridCellHeightChange != null && this.__cbOnGridCellHeightChange.length > 0)) {
			if(this.__cbOnceGridCellHeightChange != null) {
				return this.__cbOnceGridCellHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,slopesMapping: null
	,implicitImage: null
	,get_texture: function() {
		if(this.get_image() != null) {
			return this.unobservedImage.texture;
		} else {
			return null;
		}
	}
	,set_texture: function(texture) {
		if(texture != null) {
			if(this.unobservedImage == null || this.unobservedImage.texture != texture) {
				this.set_unobservedImage(new ceramic_TilesetImage());
				this.implicitImage = true;
				this.unobservedImage.set_texture(texture);
			}
		} else {
			this.set_unobservedImage(null);
			this.implicitImage = false;
		}
		return texture;
	}
	,tileSize: function(tileWidth,tileHeight) {
		this.set_tileWidth(tileWidth);
		this.set_tileHeight(tileHeight);
	}
	,gidAtPosition: function(column,row) {
		return Math.floor(this.get_firstGid() + row * this.get_columns() + column);
	}
	,columnForGid: function(gid) {
		return (gid - this.get_firstGid()) % this.get_columns();
	}
	,rowForGid: function(gid) {
		return Math.floor((gid - this.get_firstGid()) / this.get_columns());
	}
	,slopesAutoruns: null
	,get_slopes: function() {
		var value = this.unobservedSlopes;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.slopesAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.slopesAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_slopes: function(slopes) {
		var prevValue = this.unobservedSlopes;
		this.set_unobservedSlopes(slopes);
		if(prevValue == slopes) {
			return slopes;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitSlopesChange(slopes,prevValue);
		var fieldAutoruns = this.slopesAutoruns;
		if(fieldAutoruns != null) {
			this.slopesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return slopes;
	}
	,invalidateSlopes: function() {
		var value = this.unobservedSlopes;
		this.emitSlopesChange(value,value);
		var fieldAutoruns = this.slopesAutoruns;
		if(fieldAutoruns != null) {
			this.slopesAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedSlopes: null
	,__cbOnSlopesChange: null
	,__cbOnceSlopesChange: null
	,__cbOnOwnerUnbindSlopesChange: null
	,__cbOnceOwnerUnbindSlopesChange: null
	,emitSlopesChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnSlopesChange != null) {
			len += this.__cbOnSlopesChange.length;
		}
		if(this.__cbOnceSlopesChange != null) {
			len += this.__cbOnceSlopesChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSlopesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnSlopesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSlopesChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSlopesChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSlopesChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSlopesChange[ii];
						this.__cbOnceSlopesChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSlopesChange[ii];
						this.__cbOnceOwnerUnbindSlopesChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSlopesChange[ii]);
						newCbOnceArray.push(this.__cbOnceSlopesChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSlopesChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceSlopesChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSlopesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "slopesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSlopesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSlopesChange == null) {
				this.__cbOnOwnerUnbindSlopesChange = [];
			}
			this.__cbOnOwnerUnbindSlopesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSlopesChange == null) {
				this.__cbOnOwnerUnbindSlopesChange = [];
			}
			this.__cbOnOwnerUnbindSlopesChange.push(null);
		}
		if(this.__cbOnSlopesChange == null) {
			this.__cbOnSlopesChange = [];
		}
		this.__cbOnSlopesChange.push(handleCurrentPrevious);
	}
	,onceSlopesChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "slopesChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSlopesChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSlopesChange == null) {
				this.__cbOnceOwnerUnbindSlopesChange = [];
			}
			this.__cbOnceOwnerUnbindSlopesChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSlopesChange == null) {
				this.__cbOnceOwnerUnbindSlopesChange = [];
			}
			this.__cbOnceOwnerUnbindSlopesChange.push(null);
		}
		if(this.__cbOnceSlopesChange == null) {
			this.__cbOnceSlopesChange = [];
		}
		this.__cbOnceSlopesChange.push(handleCurrentPrevious);
	}
	,offSlopesChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnSlopesChange != null) {
				index = this.__cbOnSlopesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnSlopesChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSlopesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSlopesChange.splice(index,1);
				}
			}
			if(this.__cbOnceSlopesChange != null) {
				index = this.__cbOnceSlopesChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceSlopesChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSlopesChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSlopesChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSlopesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSlopesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSlopesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSlopesChange = null;
			}
			if(this.__cbOnceOwnerUnbindSlopesChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSlopesChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSlopesChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSlopesChange = null;
			}
			this.__cbOnSlopesChange = null;
			this.__cbOnceSlopesChange = null;
		}
	}
	,listensSlopesChange: function() {
		if(!(this.__cbOnSlopesChange != null && this.__cbOnSlopesChange.length > 0)) {
			if(this.__cbOnceSlopesChange != null) {
				return this.__cbOnceSlopesChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set_unobservedSlopes: function(slopes) {
		if(this.unobservedSlopes != slopes) {
			this.unobservedSlopes = slopes;
			this.slopesMapping = null;
		}
		return slopes;
	}
	,_setSlope: function(index,slope) {
		if(index < 0) {
			ceramic_App.app.logger.error("index >= 0" + (" (" + ("Invalid slope index: " + index) + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\plugins\\tilemap\\runtime\\src\\ceramic\\Tileset.hx", lineNumber : 220, className : "ceramic.Tileset", methodName : "_setSlope"});
			throw haxe_Exception.thrown("index >= 0" + (" (" + ("Invalid slope index: " + index) + ")"));
		}
		if(slope.index != index) {
			slope = new ceramic_TileSlope(index,slope.rotation,slope.y0,slope.y1);
		}
		var arrayIndex = -1;
		if(this.slopesMapping == null) {
			this._buildSlopesMapping();
		}
		var value = this.slopesMapping.intMap.h[index | 0];
		arrayIndex = (value != null ? value : 0) - 1;
		if(arrayIndex == -1) {
			arrayIndex = this.get_slopes().length;
			var nPlus1 = arrayIndex + 1;
			this.slopesMapping.set(index,nPlus1);
		}
		this.get_slopes()[arrayIndex] = slope;
		if(true != this.dirty) {
			this.dirty = true;
			this.emitModelDirty(this);
		}
	}
	,_buildSlopesMapping: function() {
		var slopes = this.get_slopes();
		if(slopes != null) {
			this.slopesMapping = new ceramic_IntIntMap();
			var _g = 0;
			var _g1 = slopes.length;
			while(_g < _g1) {
				var i = _g++;
				var slope = slopes[i];
				if(slope != null) {
					var iPlus1 = i + 1;
					this.slopesMapping.set(slope.index,iPlus1);
				}
			}
		} else if(this.slopesMapping != null) {
			this.slopesMapping = null;
		}
	}
	,_removeSlope: function(index) {
		if(this.slopesMapping != null) {
			var value = this.slopesMapping.intMap.h[index | 0];
			var arrayIndex = (value != null ? value : 0) - 1;
			if(arrayIndex != -1) {
				this.slopesMapping.remove(index);
				this.get_slopes().splice(arrayIndex,1);
				if(true != this.dirty) {
					this.dirty = true;
					this.emitModelDirty(this);
				}
			}
		}
	}
	,_getSlope: function(tileIndex) {
		if(this.get_slopes() == null) {
			return null;
		}
		if(this.slopesMapping == null) {
			this._buildSlopesMapping();
		}
		var value = this.slopesMapping.intMap.h[tileIndex | 0];
		var arrayIndex = (value != null ? value : 0) - 1;
		if(arrayIndex != -1) {
			return this.get_slopes()[arrayIndex];
		}
		return null;
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.set_image(null);
		this._lifecycleState = -1;
		tracker_Model.prototype.destroy.call(this);
	}
	,unbindEvents: function() {
		tracker_Model.prototype.unbindEvents.call(this);
		this.offFirstGidChange();
		this.offNameChange();
		this.offTileWidthChange();
		this.offTileHeightChange();
		this.offSpacingChange();
		this.offMarginChange();
		this.offTileCountChange();
		this.offColumnsChange();
		this.offRowsChange();
		this.offImageChange();
		this.offGridOrientationChange();
		this.offGridCellWidthChange();
		this.offGridCellHeightChange();
		this.offSlopesChange();
	}
	,_default_firstGidAutoruns: function() {
		return null;
	}
	,_default_firstGid: function() {
		return 0;
	}
	,_default_nameAutoruns: function() {
		return null;
	}
	,_default_name: function() {
		return null;
	}
	,_default_tileWidthAutoruns: function() {
		return null;
	}
	,_default_tileWidth: function() {
		return -1;
	}
	,_default_tileHeightAutoruns: function() {
		return null;
	}
	,_default_tileHeight: function() {
		return -1;
	}
	,_default_spacingAutoruns: function() {
		return null;
	}
	,_default_spacing: function() {
		return 0;
	}
	,_default_marginAutoruns: function() {
		return null;
	}
	,_default_margin: function() {
		return 0;
	}
	,_default_tileCountAutoruns: function() {
		return null;
	}
	,_default_tileCount: function() {
		return 0;
	}
	,_default_columnsAutoruns: function() {
		return null;
	}
	,_default_columns: function() {
		return 0;
	}
	,_default_rowsAutoruns: function() {
		return null;
	}
	,_default_computedOnceRows: function() {
		return false;
	}
	,_default_imageAutoruns: function() {
		return null;
	}
	,_default_image: function() {
		return null;
	}
	,_default_gridOrientationAutoruns: function() {
		return null;
	}
	,_default_gridOrientation: function() {
		return ceramic_TilesetGridOrientation.ORTHOGONAL;
	}
	,_default_gridCellWidthAutoruns: function() {
		return null;
	}
	,_default_gridCellWidth: function() {
		return 0;
	}
	,_default_gridCellHeightAutoruns: function() {
		return null;
	}
	,_default_gridCellHeight: function() {
		return 0;
	}
	,_default_slopesMapping: function() {
		return null;
	}
	,_default_implicitImage: function() {
		return false;
	}
	,_default_slopesAutoruns: function() {
		return null;
	}
	,_default_slopes: function() {
		return null;
	}
	,__class__: ceramic_Tileset
	,__properties__: $extend(tracker_Model.prototype.__properties__,{set_unobservedSlopes:"set_unobservedSlopes",set_slopes:"set_slopes",get_slopes:"get_slopes",set_texture:"set_texture",get_texture:"get_texture",set_gridCellHeight:"set_gridCellHeight",get_gridCellHeight:"get_gridCellHeight",set_gridCellWidth:"set_gridCellWidth",get_gridCellWidth:"get_gridCellWidth",set_gridOrientation:"set_gridOrientation",get_gridOrientation:"get_gridOrientation",set_unobservedImage:"set_unobservedImage",set_image:"set_image",get_image:"get_image",get_unobservedRows:"get_unobservedRows",set_rows:"set_rows",get_rows:"get_rows",set_columns:"set_columns",get_columns:"get_columns",set_tileCount:"set_tileCount",get_tileCount:"get_tileCount",set_margin:"set_margin",get_margin:"get_margin",set_spacing:"set_spacing",get_spacing:"get_spacing",set_tileHeight:"set_tileHeight",get_tileHeight:"get_tileHeight",set_tileWidth:"set_tileWidth",get_tileWidth:"get_tileWidth",set_name:"set_name",get_name:"get_name",set_firstGid:"set_firstGid",get_firstGid:"get_firstGid"})
});
var ceramic_TilesetGridOrientation = $hxEnums["ceramic.TilesetGridOrientation"] = { __ename__:"ceramic.TilesetGridOrientation",__constructs__:null
	,ORTHOGONAL: {_hx_name:"ORTHOGONAL",_hx_index:0,__enum__:"ceramic.TilesetGridOrientation",toString:$estr}
	,ISOMETRIC: {_hx_name:"ISOMETRIC",_hx_index:1,__enum__:"ceramic.TilesetGridOrientation",toString:$estr}
};
ceramic_TilesetGridOrientation.__constructs__ = [ceramic_TilesetGridOrientation.ORTHOGONAL,ceramic_TilesetGridOrientation.ISOMETRIC];
var ceramic_TilesetImage = function() {
	this.unobservedSource = null;
	this.sourceAutoruns = null;
	this.unobservedHeight = -1;
	this.heightAutoruns = null;
	this.unobservedWidth = -1;
	this.widthAutoruns = null;
	this.texture = null;
	tracker_Model.call(this);
};
$hxClasses["ceramic.TilesetImage"] = ceramic_TilesetImage;
ceramic_TilesetImage.__name__ = "ceramic.TilesetImage";
ceramic_TilesetImage.__super__ = tracker_Model;
ceramic_TilesetImage.prototype = $extend(tracker_Model.prototype,{
	texture: null
	,set_texture: function(texture) {
		if(this.texture == texture) {
			return texture;
		}
		var prevTexture = this.texture;
		if(prevTexture != null) {
			if(prevTexture.asset != null) {
				prevTexture.asset.offReplaceTexture($bind(this,this.replaceTexture));
				prevTexture.asset.release();
			}
		}
		this.texture = texture;
		if(this.texture != null) {
			if(this.texture.asset != null) {
				this.texture.asset.onReplaceTexture(this,$bind(this,this.replaceTexture));
				this.texture.asset.retain();
			}
			if(this.get_width() == -1) {
				this.set_width(this.texture.width | 0);
			}
			if(this.get_height() == -1) {
				this.set_height(this.texture.height | 0);
			}
		}
		return texture;
	}
	,widthAutoruns: null
	,get_width: function() {
		var value = this.unobservedWidth;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.widthAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.widthAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_width: function(width) {
		var prevValue = this.unobservedWidth;
		this.unobservedWidth = width;
		if(prevValue == width) {
			return width;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitWidthChange(width,prevValue);
		var fieldAutoruns = this.widthAutoruns;
		if(fieldAutoruns != null) {
			this.widthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return width;
	}
	,invalidateWidth: function() {
		var value = this.unobservedWidth;
		this.emitWidthChange(value,value);
		var fieldAutoruns = this.widthAutoruns;
		if(fieldAutoruns != null) {
			this.widthAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedWidth: null
	,__cbOnWidthChange: null
	,__cbOnceWidthChange: null
	,__cbOnOwnerUnbindWidthChange: null
	,__cbOnceOwnerUnbindWidthChange: null
	,emitWidthChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnWidthChange != null) {
			len += this.__cbOnWidthChange.length;
		}
		if(this.__cbOnceWidthChange != null) {
			len += this.__cbOnceWidthChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnWidthChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceWidthChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceWidthChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceWidthChange[ii];
						this.__cbOnceWidthChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindWidthChange[ii];
						this.__cbOnceOwnerUnbindWidthChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindWidthChange[ii]);
						newCbOnceArray.push(this.__cbOnceWidthChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindWidthChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceWidthChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "widthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindWidthChange == null) {
				this.__cbOnOwnerUnbindWidthChange = [];
			}
			this.__cbOnOwnerUnbindWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindWidthChange == null) {
				this.__cbOnOwnerUnbindWidthChange = [];
			}
			this.__cbOnOwnerUnbindWidthChange.push(null);
		}
		if(this.__cbOnWidthChange == null) {
			this.__cbOnWidthChange = [];
		}
		this.__cbOnWidthChange.push(handleCurrentPrevious);
	}
	,onceWidthChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "widthChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offWidthChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindWidthChange == null) {
				this.__cbOnceOwnerUnbindWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWidthChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindWidthChange == null) {
				this.__cbOnceOwnerUnbindWidthChange = [];
			}
			this.__cbOnceOwnerUnbindWidthChange.push(null);
		}
		if(this.__cbOnceWidthChange == null) {
			this.__cbOnceWidthChange = [];
		}
		this.__cbOnceWidthChange.push(handleCurrentPrevious);
	}
	,offWidthChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnWidthChange != null) {
				index = this.__cbOnWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnWidthChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindWidthChange.splice(index,1);
				}
			}
			if(this.__cbOnceWidthChange != null) {
				index = this.__cbOnceWidthChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceWidthChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindWidthChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindWidthChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindWidthChange = null;
			}
			if(this.__cbOnceOwnerUnbindWidthChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindWidthChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindWidthChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindWidthChange = null;
			}
			this.__cbOnWidthChange = null;
			this.__cbOnceWidthChange = null;
		}
	}
	,listensWidthChange: function() {
		if(!(this.__cbOnWidthChange != null && this.__cbOnWidthChange.length > 0)) {
			if(this.__cbOnceWidthChange != null) {
				return this.__cbOnceWidthChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,heightAutoruns: null
	,get_height: function() {
		var value = this.unobservedHeight;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.heightAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.heightAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_height: function(height) {
		var prevValue = this.unobservedHeight;
		this.unobservedHeight = height;
		if(prevValue == height) {
			return height;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitHeightChange(height,prevValue);
		var fieldAutoruns = this.heightAutoruns;
		if(fieldAutoruns != null) {
			this.heightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return height;
	}
	,invalidateHeight: function() {
		var value = this.unobservedHeight;
		this.emitHeightChange(value,value);
		var fieldAutoruns = this.heightAutoruns;
		if(fieldAutoruns != null) {
			this.heightAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedHeight: null
	,__cbOnHeightChange: null
	,__cbOnceHeightChange: null
	,__cbOnOwnerUnbindHeightChange: null
	,__cbOnceOwnerUnbindHeightChange: null
	,emitHeightChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnHeightChange != null) {
			len += this.__cbOnHeightChange.length;
		}
		if(this.__cbOnceHeightChange != null) {
			len += this.__cbOnceHeightChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnHeightChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceHeightChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceHeightChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceHeightChange[ii];
						this.__cbOnceHeightChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindHeightChange[ii];
						this.__cbOnceOwnerUnbindHeightChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindHeightChange[ii]);
						newCbOnceArray.push(this.__cbOnceHeightChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindHeightChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceHeightChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "heightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindHeightChange == null) {
				this.__cbOnOwnerUnbindHeightChange = [];
			}
			this.__cbOnOwnerUnbindHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindHeightChange == null) {
				this.__cbOnOwnerUnbindHeightChange = [];
			}
			this.__cbOnOwnerUnbindHeightChange.push(null);
		}
		if(this.__cbOnHeightChange == null) {
			this.__cbOnHeightChange = [];
		}
		this.__cbOnHeightChange.push(handleCurrentPrevious);
	}
	,onceHeightChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "heightChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offHeightChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindHeightChange == null) {
				this.__cbOnceOwnerUnbindHeightChange = [];
			}
			this.__cbOnceOwnerUnbindHeightChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindHeightChange == null) {
				this.__cbOnceOwnerUnbindHeightChange = [];
			}
			this.__cbOnceOwnerUnbindHeightChange.push(null);
		}
		if(this.__cbOnceHeightChange == null) {
			this.__cbOnceHeightChange = [];
		}
		this.__cbOnceHeightChange.push(handleCurrentPrevious);
	}
	,offHeightChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnHeightChange != null) {
				index = this.__cbOnHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnHeightChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindHeightChange.splice(index,1);
				}
			}
			if(this.__cbOnceHeightChange != null) {
				index = this.__cbOnceHeightChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceHeightChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindHeightChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindHeightChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindHeightChange = null;
			}
			if(this.__cbOnceOwnerUnbindHeightChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindHeightChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindHeightChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindHeightChange = null;
			}
			this.__cbOnHeightChange = null;
			this.__cbOnceHeightChange = null;
		}
	}
	,listensHeightChange: function() {
		if(!(this.__cbOnHeightChange != null && this.__cbOnHeightChange.length > 0)) {
			if(this.__cbOnceHeightChange != null) {
				return this.__cbOnceHeightChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,sourceAutoruns: null
	,get_source: function() {
		var value = this.unobservedSource;
		if(tracker_Autorun.current != null) {
			var autorun = tracker_Autorun.current;
			var autorunArray = this.sourceAutoruns;
			if(autorunArray == null) {
				autorunArray = tracker_Autorun.getAutorunArray();
				this.sourceAutoruns = autorunArray;
				if(autorunArray != null) {
					autorun.bindToAutorunArray(autorunArray);
				}
			} else {
				autorun.bindToAutorunArray(autorunArray);
			}
		}
		return value;
	}
	,set_source: function(source) {
		var prevValue = this.unobservedSource;
		this.unobservedSource = source;
		if(prevValue == source) {
			return source;
		}
		if(!this.observedDirty) {
			this.observedDirty = true;
			this.emitObservedDirty(this,true);
		}
		this.emitSourceChange(source,prevValue);
		var fieldAutoruns = this.sourceAutoruns;
		if(fieldAutoruns != null) {
			this.sourceAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
		return source;
	}
	,invalidateSource: function() {
		var value = this.unobservedSource;
		this.emitSourceChange(value,value);
		var fieldAutoruns = this.sourceAutoruns;
		if(fieldAutoruns != null) {
			this.sourceAutoruns = null;
			var _g = 0;
			var _g1 = fieldAutoruns.length;
			while(_g < _g1) {
				var i = _g++;
				var autorun = fieldAutoruns[i];
				if(autorun != null) {
					if(!autorun.invalidated) {
						autorun.invalidated = true;
						autorun.unbindFromAllAutorunArrays();
						var _this = tracker_Tracker.backend;
						ceramic_App.app._onceImmediate($bind(autorun,autorun.run));
					}
				}
			}
			tracker_Autorun.recycleAutorunArray(fieldAutoruns);
		}
	}
	,unobservedSource: null
	,__cbOnSourceChange: null
	,__cbOnceSourceChange: null
	,__cbOnOwnerUnbindSourceChange: null
	,__cbOnceOwnerUnbindSourceChange: null
	,emitSourceChange: function(current,previous) {
		var len = 0;
		if(this.__cbOnSourceChange != null) {
			len += this.__cbOnSourceChange.length;
		}
		if(this.__cbOnceSourceChange != null) {
			len += this.__cbOnceSourceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnSourceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnSourceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnSourceChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceSourceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceSourceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceSourceChange[ii];
						this.__cbOnceSourceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindSourceChange[ii];
						this.__cbOnceOwnerUnbindSourceChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindSourceChange[ii]);
						newCbOnceArray.push(this.__cbOnceSourceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindSourceChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceSourceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(current,previous);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onSourceChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "sourceChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSourceChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindSourceChange == null) {
				this.__cbOnOwnerUnbindSourceChange = [];
			}
			this.__cbOnOwnerUnbindSourceChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindSourceChange == null) {
				this.__cbOnOwnerUnbindSourceChange = [];
			}
			this.__cbOnOwnerUnbindSourceChange.push(null);
		}
		if(this.__cbOnSourceChange == null) {
			this.__cbOnSourceChange = [];
		}
		this.__cbOnSourceChange.push(handleCurrentPrevious);
	}
	,onceSourceChange: function(owner,handleCurrentPrevious) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "sourceChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleCurrentPrevious != null) {
					_gthis.offSourceChange(handleCurrentPrevious);
					handleCurrentPrevious = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindSourceChange == null) {
				this.__cbOnceOwnerUnbindSourceChange = [];
			}
			this.__cbOnceOwnerUnbindSourceChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleCurrentPrevious = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindSourceChange == null) {
				this.__cbOnceOwnerUnbindSourceChange = [];
			}
			this.__cbOnceOwnerUnbindSourceChange.push(null);
		}
		if(this.__cbOnceSourceChange == null) {
			this.__cbOnceSourceChange = [];
		}
		this.__cbOnceSourceChange.push(handleCurrentPrevious);
	}
	,offSourceChange: function(handleCurrentPrevious) {
		if(handleCurrentPrevious != null) {
			var index;
			var unbind;
			if(this.__cbOnSourceChange != null) {
				index = this.__cbOnSourceChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnSourceChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindSourceChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindSourceChange.splice(index,1);
				}
			}
			if(this.__cbOnceSourceChange != null) {
				index = this.__cbOnceSourceChange.indexOf(handleCurrentPrevious);
				if(index != -1) {
					this.__cbOnceSourceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindSourceChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindSourceChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindSourceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindSourceChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindSourceChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindSourceChange = null;
			}
			if(this.__cbOnceOwnerUnbindSourceChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindSourceChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindSourceChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindSourceChange = null;
			}
			this.__cbOnSourceChange = null;
			this.__cbOnceSourceChange = null;
		}
	}
	,listensSourceChange: function() {
		if(!(this.__cbOnSourceChange != null && this.__cbOnSourceChange.length > 0)) {
			if(this.__cbOnceSourceChange != null) {
				return this.__cbOnceSourceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this._lifecycleState = -1;
		tracker_Model.prototype.destroy.call(this);
		this.set_texture(null);
	}
	,replaceTexture: function(newTexture,prevTexture) {
		this.set_texture(newTexture);
	}
	,unbindEvents: function() {
		tracker_Model.prototype.unbindEvents.call(this);
		this.offWidthChange();
		this.offHeightChange();
		this.offSourceChange();
	}
	,_default_texture: function() {
		return null;
	}
	,_default_widthAutoruns: function() {
		return null;
	}
	,_default_width: function() {
		return -1;
	}
	,_default_heightAutoruns: function() {
		return null;
	}
	,_default_height: function() {
		return -1;
	}
	,_default_sourceAutoruns: function() {
		return null;
	}
	,_default_source: function() {
		return null;
	}
	,__class__: ceramic_TilesetImage
	,__properties__: $extend(tracker_Model.prototype.__properties__,{set_source:"set_source",get_source:"get_source",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_texture:"set_texture"})
});
var ceramic_Timeline = function() {
	this.initializerName = null;
	this.completeHandlerIndexes = null;
	this.completeHandlers = null;
	this.endPosition = -1;
	this.startPosition = -1;
	this.labelIndexes = null;
	this.labels = null;
	this.paused = false;
	this.tracks = [];
	this.position = 0;
	this.fps = 30;
	this.autoUpdate = true;
	this.loop = true;
	this.autoFitSize = true;
	this.size = 0;
	ceramic_Entity.call(this);
	ceramic_App.app.offPreUpdate($bind(this,this.update));
	if(!this.paused && this.autoUpdate) {
		ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
	}
};
$hxClasses["ceramic.Timeline"] = ceramic_Timeline;
ceramic_Timeline.__name__ = "ceramic.Timeline";
ceramic_Timeline.__interfaces__ = [ceramic_Component];
ceramic_Timeline.__super__ = ceramic_Entity;
ceramic_Timeline.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnStartLabel: null
	,__cbOnceStartLabel: null
	,__cbOnOwnerUnbindStartLabel: null
	,__cbOnceOwnerUnbindStartLabel: null
	,emitStartLabel: function(index,name) {
		var len = 0;
		if(this.__cbOnStartLabel != null) {
			len += this.__cbOnStartLabel.length;
		}
		if(this.__cbOnceStartLabel != null) {
			len += this.__cbOnceStartLabel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnStartLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnStartLabel[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceStartLabel != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceStartLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceStartLabel[ii];
						this.__cbOnceStartLabel[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindStartLabel[ii];
						this.__cbOnceOwnerUnbindStartLabel[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindStartLabel[ii]);
						newCbOnceArray.push(this.__cbOnceStartLabel[ii]);
					}
				}
				this.__cbOnceOwnerUnbindStartLabel = newCbOnceOwnerUnbindArray;
				this.__cbOnceStartLabel = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(index,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onStartLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "startLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offStartLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindStartLabel == null) {
				this.__cbOnOwnerUnbindStartLabel = [];
			}
			this.__cbOnOwnerUnbindStartLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindStartLabel == null) {
				this.__cbOnOwnerUnbindStartLabel = [];
			}
			this.__cbOnOwnerUnbindStartLabel.push(null);
		}
		if(this.__cbOnStartLabel == null) {
			this.__cbOnStartLabel = [];
		}
		this.__cbOnStartLabel.push(handleIndexName);
	}
	,onceStartLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "startLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offStartLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindStartLabel == null) {
				this.__cbOnceOwnerUnbindStartLabel = [];
			}
			this.__cbOnceOwnerUnbindStartLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindStartLabel == null) {
				this.__cbOnceOwnerUnbindStartLabel = [];
			}
			this.__cbOnceOwnerUnbindStartLabel.push(null);
		}
		if(this.__cbOnceStartLabel == null) {
			this.__cbOnceStartLabel = [];
		}
		this.__cbOnceStartLabel.push(handleIndexName);
	}
	,offStartLabel: function(handleIndexName) {
		if(handleIndexName != null) {
			var index;
			var unbind;
			if(this.__cbOnStartLabel != null) {
				index = this.__cbOnStartLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnStartLabel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindStartLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindStartLabel.splice(index,1);
				}
			}
			if(this.__cbOnceStartLabel != null) {
				index = this.__cbOnceStartLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnceStartLabel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindStartLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindStartLabel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindStartLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindStartLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindStartLabel = null;
			}
			if(this.__cbOnceOwnerUnbindStartLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindStartLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindStartLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindStartLabel = null;
			}
			this.__cbOnStartLabel = null;
			this.__cbOnceStartLabel = null;
		}
	}
	,listensStartLabel: function() {
		if(!(this.__cbOnStartLabel != null && this.__cbOnStartLabel.length > 0)) {
			if(this.__cbOnceStartLabel != null) {
				return this.__cbOnceStartLabel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnEndLabel: null
	,__cbOnceEndLabel: null
	,__cbOnOwnerUnbindEndLabel: null
	,__cbOnceOwnerUnbindEndLabel: null
	,emitEndLabel: function(index,name) {
		var len = 0;
		if(this.__cbOnEndLabel != null) {
			len += this.__cbOnEndLabel.length;
		}
		if(this.__cbOnceEndLabel != null) {
			len += this.__cbOnceEndLabel.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnEndLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnEndLabel[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceEndLabel != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceEndLabel.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceEndLabel[ii];
						this.__cbOnceEndLabel[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindEndLabel[ii];
						this.__cbOnceOwnerUnbindEndLabel[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindEndLabel[ii]);
						newCbOnceArray.push(this.__cbOnceEndLabel[ii]);
					}
				}
				this.__cbOnceOwnerUnbindEndLabel = newCbOnceOwnerUnbindArray;
				this.__cbOnceEndLabel = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(index,name);
			}
			pool.release(callbacks);
			callbacks = null;
		}
		this.didEmitEndLabel(index,name);
	}
	,onEndLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offEndLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindEndLabel == null) {
				this.__cbOnOwnerUnbindEndLabel = [];
			}
			this.__cbOnOwnerUnbindEndLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindEndLabel == null) {
				this.__cbOnOwnerUnbindEndLabel = [];
			}
			this.__cbOnOwnerUnbindEndLabel.push(null);
		}
		if(this.__cbOnEndLabel == null) {
			this.__cbOnEndLabel = [];
		}
		this.__cbOnEndLabel.push(handleIndexName);
	}
	,onceEndLabel: function(owner,handleIndexName) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "endLabel" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleIndexName != null) {
					_gthis.offEndLabel(handleIndexName);
					handleIndexName = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindEndLabel == null) {
				this.__cbOnceOwnerUnbindEndLabel = [];
			}
			this.__cbOnceOwnerUnbindEndLabel.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleIndexName = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindEndLabel == null) {
				this.__cbOnceOwnerUnbindEndLabel = [];
			}
			this.__cbOnceOwnerUnbindEndLabel.push(null);
		}
		if(this.__cbOnceEndLabel == null) {
			this.__cbOnceEndLabel = [];
		}
		this.__cbOnceEndLabel.push(handleIndexName);
	}
	,offEndLabel: function(handleIndexName) {
		if(handleIndexName != null) {
			var index;
			var unbind;
			if(this.__cbOnEndLabel != null) {
				index = this.__cbOnEndLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnEndLabel.splice(index,1);
					unbind = this.__cbOnOwnerUnbindEndLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindEndLabel.splice(index,1);
				}
			}
			if(this.__cbOnceEndLabel != null) {
				index = this.__cbOnceEndLabel.indexOf(handleIndexName);
				if(index != -1) {
					this.__cbOnceEndLabel.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindEndLabel[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindEndLabel.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindEndLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindEndLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindEndLabel = null;
			}
			if(this.__cbOnceOwnerUnbindEndLabel != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindEndLabel.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindEndLabel[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindEndLabel = null;
			}
			this.__cbOnEndLabel = null;
			this.__cbOnceEndLabel = null;
		}
	}
	,listensEndLabel: function() {
		if(!(this.__cbOnEndLabel != null && this.__cbOnEndLabel.length > 0)) {
			if(this.__cbOnceEndLabel != null) {
				return this.__cbOnceEndLabel.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,size: null
	,autoFitSize: null
	,loop: null
	,autoUpdate: null
	,set_autoUpdate: function(autoUpdate) {
		if(this.autoUpdate != autoUpdate) {
			this.autoUpdate = autoUpdate;
			ceramic_App.app.offPreUpdate($bind(this,this.update));
			if(!this.paused && this.autoUpdate) {
				ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
			}
		}
		return autoUpdate;
	}
	,fps: null
	,position: null
	,tracks: null
	,paused: null
	,set_paused: function(paused) {
		if(this.paused == paused) {
			return paused;
		}
		this.paused = paused;
		ceramic_App.app.offPreUpdate($bind(this,this.update));
		if(!this.paused && this.autoUpdate) {
			ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
		}
		return paused;
	}
	,labels: null
	,labelIndexes: null
	,startPosition: null
	,set_startPosition: function(startPosition) {
		if(this.startPosition != startPosition) {
			this.startPosition = startPosition;
			this.apply();
		}
		return startPosition;
	}
	,endPosition: null
	,set_endPosition: function(endPosition) {
		if(this.endPosition != endPosition) {
			this.endPosition = endPosition;
			this.apply();
		}
		return endPosition;
	}
	,completeHandlers: null
	,completeHandlerIndexes: null
	,bindAsComponent: function() {
	}
	,bindOrUnbindUpdateIfNeeded: function() {
		ceramic_App.app.offPreUpdate($bind(this,this.update));
		if(!this.paused && this.autoUpdate) {
			ceramic_App.app.onPreUpdate(this,$bind(this,this.update));
		}
	}
	,update: function(delta) {
		var targetPosition = this.position + delta * this.fps;
		var prevPosition = this.position;
		if(targetPosition != this.position) {
			if(this.startPosition >= 0 && targetPosition < this.startPosition) {
				targetPosition = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition > this.endPosition) {
				if(this.loop) {
					targetPosition = this.startPosition + (targetPosition - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek = false;
						var forceChange = false;
						if(forceChange == null) {
							forceChange = false;
						}
						if(forceSeek == null) {
							forceSeek = false;
						}
						if(forceSeek || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,seek: function(targetPosition) {
		var targetPosition1 = targetPosition;
		var prevPosition = this.position;
		if(targetPosition1 != this.position) {
			if(this.startPosition >= 0 && targetPosition1 < this.startPosition) {
				targetPosition1 = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition1 > this.endPosition) {
				if(this.loop) {
					targetPosition1 = this.startPosition + (targetPosition1 - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition1 = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition1 > this.size) {
					if(this.loop) {
						targetPosition1 %= this.size;
					} else {
						targetPosition1 = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 < 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 != this.position) {
				this.position = targetPosition1;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek = false;
						var forceChange = false;
						if(forceChange == null) {
							forceChange = false;
						}
						if(forceSeek == null) {
							forceSeek = false;
						}
						if(forceSeek || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,animate: function(name,complete) {
		if(this.completeHandlers != null && this.completeHandlers.length > 0) {
			ceramic_Extensions.setArrayLength(this.completeHandlers,0);
			ceramic_Extensions.setArrayLength(this.completeHandlerIndexes,0);
		}
		var index = this.indexOfLabel(name);
		if(index != -1) {
			this.seek(index);
			if(this.completeHandlers == null) {
				this.completeHandlers = [];
				this.completeHandlerIndexes = [];
			}
			this.completeHandlers.push(complete);
			this.completeHandlerIndexes.push(index);
		} else {
			ceramic_App.app.logger.warning("Failed to animate whith label: " + name + " (not found)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Timeline.hx", lineNumber : 200, className : "ceramic.Timeline", methodName : "animate"});
		}
	}
	,seekLabel: function(name) {
		var index = this.indexOfLabel(name);
		if(index != -1) {
			this.seek(index);
		} else {
			ceramic_App.app.logger.warning("Failed to seek label: " + name + " (not found)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Timeline.hx", lineNumber : 218, className : "ceramic.Timeline", methodName : "seekLabel"});
		}
		return index;
	}
	,resetStartAndEndPositions: function() {
		this.set_startPosition(-1);
		this.set_endPosition(-1);
	}
	,loopLabel: function(name) {
		if(this.labels == null) {
			ceramic_App.app.logger.warning("Cannot loop label " + name + " (there is no label at all)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Timeline.hx", lineNumber : 245, className : "ceramic.Timeline", methodName : "loopLabel"});
			return -1;
		}
		var i = this.labels.indexOf(name);
		if(i == -1) {
			ceramic_App.app.logger.warning("Cannot loop label " + name + " (no such label)",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Timeline.hx", lineNumber : 251, className : "ceramic.Timeline", methodName : "loopLabel"});
			return -1;
		}
		var index = this.labelIndexes[i];
		this.set_startPosition(index);
		this.set_endPosition(i < this.labelIndexes.length - 1 ? this.labelIndexes[i + 1] : this.size);
		this.seek(index);
		return index;
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var targetPosition = this.position;
		var forceSeek = true;
		var forceChange1 = forceChange;
		if(forceChange1 == null) {
			forceChange1 = false;
		}
		if(forceSeek == null) {
			forceSeek = false;
		}
		var prevPosition = this.position;
		if(forceSeek || targetPosition != this.position) {
			if(this.startPosition >= 0 && targetPosition < this.startPosition) {
				targetPosition = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition > this.endPosition) {
				if(this.loop) {
					targetPosition = this.startPosition + (targetPosition - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek1 = forceSeek;
						var forceChange = forceChange1;
						if(forceChange == null) {
							forceChange = false;
						}
						if(forceSeek1 == null) {
							forceSeek1 = false;
						}
						if(forceSeek1 || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,inlineSeek: function(targetPosition,forceSeek,forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		if(forceSeek == null) {
			forceSeek = false;
		}
		var prevPosition = this.position;
		if(forceSeek || targetPosition != this.position) {
			if(this.startPosition >= 0 && targetPosition < this.startPosition) {
				targetPosition = this.startPosition;
			}
			if(this.endPosition >= this.startPosition && this.startPosition >= 0 && targetPosition > this.endPosition) {
				if(this.loop) {
					targetPosition = this.startPosition + (targetPosition - this.startPosition) % (this.endPosition - this.startPosition);
				} else {
					targetPosition = this.endPosition;
				}
			}
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var _g = 0;
				var _g1 = this.tracks.length;
				while(_g < _g1) {
					var i = _g++;
					var track = this.tracks[i];
					if(!track.locked) {
						var targetPosition = this.position;
						var forceSeek1 = forceSeek;
						var forceChange1 = forceChange;
						if(forceChange1 == null) {
							forceChange1 = false;
						}
						if(forceSeek1 == null) {
							forceSeek1 = false;
						}
						if(forceSeek1 || targetPosition != track.position) {
							if(track.size > 0) {
								if(targetPosition > track.size) {
									if(track.loop) {
										targetPosition %= track.size;
									} else {
										targetPosition = track.size;
									}
								}
							} else if(track.size == 0) {
								targetPosition = 0;
							}
							if(targetPosition < 0) {
								targetPosition = 0;
							}
							if(targetPosition != track.position) {
								track.position = targetPosition;
								var result = null;
								var index = track.keyframeBeforeIndex;
								if(index != -1) {
									result = track.keyframes[index];
									if(result.index <= track.position) {
										var keyframeAfter = track.keyframes[index + 1];
										while(keyframeAfter != null && keyframeAfter.index <= track.position) {
											result = keyframeAfter;
											++index;
											keyframeAfter = track.keyframes[index + 1];
										}
									} else {
										result = null;
									}
								}
								if(result == null) {
									index = -1;
									var len = track.keyframes.length;
									while(index + 1 < len) {
										var keyframe = track.keyframes[index + 1];
										if(keyframe.index > track.position) {
											break;
										}
										result = keyframe;
										++index;
									}
								}
								track.keyframeBeforeIndex = index;
								track.before = result;
								var result1 = null;
								var index1 = track.keyframeAfterIndex;
								if(index1 != -1) {
									result1 = track.keyframes[index1];
									if(result1 != null) {
										if(result1.index > track.position) {
											if(index1 > 0) {
												var keyframeBefore = track.keyframes[index1 - 1];
												while(keyframeBefore != null && keyframeBefore.index > track.position) {
													result1 = keyframeBefore;
													--index1;
													keyframeBefore = index1 > 0 ? track.keyframes[index1 - 1] : null;
												}
											}
										} else {
											result1 = null;
										}
									}
								}
								if(result1 == null) {
									var len1 = track.keyframes.length;
									index1 = len1;
									while(index1 - 1 >= 0) {
										var keyframe1 = track.keyframes[index1 - 1];
										if(keyframe1.index <= track.position) {
											break;
										}
										result1 = keyframe1;
										--index1;
									}
									if(index1 >= len1) {
										index1 = -1;
									}
								}
								track.keyframeAfterIndex = index1;
								track.after = result1;
								track.apply(forceChange1);
							}
						}
					}
				}
			}
		}
		if(this.position != prevPosition) {
			var newIndex = Math.floor(this.position);
			var prevIndex = Math.floor(prevPosition);
			if(newIndex != prevIndex) {
				var label = this.labelAtIndex(newIndex);
				if(label != null) {
					var prevLabelIndex = this.indexOfLabelBeforeIndex(newIndex);
					if(prevLabelIndex != -1) {
						this.emitEndLabel(prevLabelIndex,this.labelAtIndex(prevLabelIndex));
					}
					this.emitStartLabel(newIndex,label);
				}
			}
		}
	}
	,clearCompleteHandlers: function() {
		if(this.completeHandlers != null && this.completeHandlers.length > 0) {
			ceramic_Extensions.setArrayLength(this.completeHandlers,0);
			ceramic_Extensions.setArrayLength(this.completeHandlerIndexes,0);
		}
	}
	,didEmitEndLabel: function(index,name) {
		if(this.completeHandlers != null && this.completeHandlers.length > 0) {
			var pool = null;
			var toCall = null;
			var toCallLen = 0;
			var _g = 0;
			var _g1 = this.completeHandlerIndexes.length;
			while(_g < _g1) {
				var i = _g++;
				var anIndex = this.completeHandlerIndexes[i];
				if(anIndex == index) {
					if(toCall == null) {
						pool = ceramic_ArrayPool.pool(this.completeHandlers.length);
						toCall = pool.get();
					}
					var handler = this.completeHandlers[i];
					toCall.vector[toCallLen] = handler;
					this.completeHandlers[i] = null;
					++toCallLen;
				}
			}
			if(this.completeHandlers != null && this.completeHandlers.length > 0) {
				ceramic_Extensions.setArrayLength(this.completeHandlers,0);
				ceramic_Extensions.setArrayLength(this.completeHandlerIndexes,0);
			}
			var _g = 0;
			var _g1 = toCallLen;
			while(_g < _g1) {
				var i = _g++;
				var handler = toCall.vector[i];
				handler();
			}
			if(toCall != null) {
				pool.release(toCall);
			}
		}
	}
	,add: function(track) {
		if(track.timeline != null) {
			track.timeline.remove(track);
		}
		if(track.timeline != this) {
			this.tracks.push(track);
			track.timeline = this;
		}
		if(this.autoFitSize) {
			this.fitSize();
		}
	}
	,get: function(trackId) {
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			var i = _g++;
			var track = this.tracks[i];
			if(track.id == trackId) {
				return track;
			}
		}
		return null;
	}
	,remove: function(track) {
		if(track.timeline == this) {
			HxOverrides.remove(this.tracks,track);
			track.timeline = null;
		}
		if(this.autoFitSize) {
			this.fitSize();
		}
	}
	,fitSize: function() {
		var newSize = 0;
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			var i = _g++;
			var track = this.tracks[i];
			if(track.size > newSize) {
				newSize = track.size;
			}
		}
		this.size = newSize;
	}
	,indexOfLabelBeforeIndex: function(index) {
		if(this.labelIndexes == null) {
			return -1;
		}
		var prevIndex = -1;
		var _g = 0;
		var _g1 = this.labelIndexes.length;
		while(_g < _g1) {
			var i = _g++;
			var anIndex = this.labelIndexes[i];
			if(anIndex == index) {
				return prevIndex;
			}
			if(anIndex > index) {
				break;
			}
			prevIndex = anIndex;
		}
		return prevIndex;
	}
	,labelAtIndex: function(index) {
		if(this.labelIndexes == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.labelIndexes.length;
		while(_g < _g1) {
			var i = _g++;
			var anIndex = this.labelIndexes[i];
			if(anIndex == index) {
				return this.labels[i];
			}
			if(anIndex > index) {
				break;
			}
		}
		return null;
	}
	,indexOfLabel: function(name) {
		if(this.labelIndexes == null) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.labels.length;
		while(_g < _g1) {
			var i = _g++;
			var aName = this.labels[i];
			if(name == aName) {
				return this.labelIndexes[i];
			}
		}
		return -1;
	}
	,setLabel: function(index,name) {
		this.removeLabel(name);
		if(this.labelIndexes == null) {
			this.labelIndexes = [];
			this.labels = [];
		}
		this.labelIndexes.push(index);
		this.labels.push(name);
		this.sortLabels();
	}
	,removeLabelAtIndex: function(index) {
		var didRemove = false;
		if(this.labelIndexes != null) {
			var i = this.labelIndexes.indexOf(index);
			if(i != -1) {
				this.labels.splice(i,1);
				this.labelIndexes.splice(i,1);
				didRemove = true;
			}
		}
		return didRemove;
	}
	,removeLabel: function(name) {
		var didRemove = false;
		if(this.labels != null) {
			var i = this.labels.indexOf(name);
			if(i != -1) {
				this.labels.splice(i,1);
				this.labelIndexes.splice(i,1);
				didRemove = true;
			}
		}
		return didRemove;
	}
	,sortLabels: function() {
		this.labelIndexes.sort($bind(this,this.compareLabelIndexes));
		this.labels.sort($bind(this,this.compareLabelNames));
	}
	,compareLabelIndexes: function(a,b) {
		if(a > b) {
			return 1;
		} else if(a < b) {
			return -1;
		} else {
			return 0;
		}
	}
	,compareLabelNames: function(nameA,nameB) {
		var iA = this.labels.indexOf(nameA);
		var a = this.labelIndexes[iA];
		var iB = this.labels.indexOf(nameB);
		var b = this.labelIndexes[iB];
		if(a > b) {
			return 1;
		} else if(a < b) {
			return -1;
		} else {
			return 0;
		}
	}
	,entity: null
	,setEntity: function(entity) {
		if(((entity) instanceof ceramic_Entity)) {
			this.entity = entity;
		} else {
			this.entity = null;
		}
	}
	,getEntity: function() {
		return this.entity;
	}
	,initializerName: null
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offStartLabel();
		this.offEndLabel();
	}
	,__class__: ceramic_Timeline
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{set_endPosition:"set_endPosition",set_startPosition:"set_startPosition",set_paused:"set_paused",set_autoUpdate:"set_autoUpdate"})
});
var ceramic_TimelineKeyframe = function(index,easing) {
	this.easing = ceramic_Easing.NONE;
	this.index = index;
	this.easing = easing;
};
$hxClasses["ceramic.TimelineKeyframe"] = ceramic_TimelineKeyframe;
ceramic_TimelineKeyframe.__name__ = "ceramic.TimelineKeyframe";
ceramic_TimelineKeyframe.prototype = {
	index: null
	,easing: null
	,__class__: ceramic_TimelineKeyframe
};
var ceramic_TimelineBoolKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineBoolKeyframe"] = ceramic_TimelineBoolKeyframe;
ceramic_TimelineBoolKeyframe.__name__ = "ceramic.TimelineBoolKeyframe";
ceramic_TimelineBoolKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineBoolKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	value: null
	,__class__: ceramic_TimelineBoolKeyframe
});
var ceramic_TimelineTrack = function() {
	this.keyframeAfterIndex = -1;
	this.keyframeBeforeIndex = -1;
	this.after = null;
	this.before = null;
	this.keyframes = [];
	this.position = 0;
	this.timeline = null;
	this.locked = false;
	this.loop = false;
	this.autoFitSize = true;
	this.size = 0;
	ceramic_Entity.call(this);
};
$hxClasses["ceramic.TimelineTrack"] = ceramic_TimelineTrack;
ceramic_TimelineTrack.__name__ = "ceramic.TimelineTrack";
ceramic_TimelineTrack.__super__ = ceramic_Entity;
ceramic_TimelineTrack.prototype = $extend(ceramic_Entity.prototype,{
	size: null
	,autoFitSize: null
	,loop: null
	,locked: null
	,timeline: null
	,position: null
	,keyframes: null
	,before: null
	,after: null
	,keyframeBeforeIndex: null
	,keyframeAfterIndex: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		if(this.timeline != null && this.timeline._lifecycleState >= 0) {
			this.timeline.remove(this);
		}
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,seek: function(targetPosition) {
		var targetPosition1 = targetPosition;
		if(targetPosition1 != this.position) {
			if(this.size > 0) {
				if(targetPosition1 > this.size) {
					if(this.loop) {
						targetPosition1 %= this.size;
					} else {
						targetPosition1 = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 < 0) {
				targetPosition1 = 0;
			}
			if(targetPosition1 != this.position) {
				this.position = targetPosition1;
				var result = null;
				var index = this.keyframeBeforeIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result.index <= this.position) {
						var keyframeAfter = this.keyframes[index + 1];
						while(keyframeAfter != null && keyframeAfter.index <= this.position) {
							result = keyframeAfter;
							++index;
							keyframeAfter = this.keyframes[index + 1];
						}
					} else {
						result = null;
					}
				}
				if(result == null) {
					index = -1;
					var len = this.keyframes.length;
					while(index + 1 < len) {
						var keyframe = this.keyframes[index + 1];
						if(keyframe.index > this.position) {
							break;
						}
						result = keyframe;
						++index;
					}
				}
				this.keyframeBeforeIndex = index;
				this.before = result;
				var result = null;
				var index = this.keyframeAfterIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result != null) {
						if(result.index > this.position) {
							if(index > 0) {
								var keyframeBefore = this.keyframes[index - 1];
								while(keyframeBefore != null && keyframeBefore.index > this.position) {
									result = keyframeBefore;
									--index;
									keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
								}
							}
						} else {
							result = null;
						}
					}
				}
				if(result == null) {
					var len = this.keyframes.length;
					index = len;
					while(index - 1 >= 0) {
						var keyframe = this.keyframes[index - 1];
						if(keyframe.index <= this.position) {
							break;
						}
						result = keyframe;
						--index;
					}
					if(index >= len) {
						index = -1;
					}
				}
				this.keyframeAfterIndex = index;
				this.after = result;
				this.apply(false);
			}
		}
	}
	,inlineSeek: function(targetPosition,forceSeek,forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		if(forceSeek == null) {
			forceSeek = false;
		}
		if(forceSeek || targetPosition != this.position) {
			if(this.size > 0) {
				if(targetPosition > this.size) {
					if(this.loop) {
						targetPosition %= this.size;
					} else {
						targetPosition = this.size;
					}
				}
			} else if(this.size == 0) {
				targetPosition = 0;
			}
			if(targetPosition < 0) {
				targetPosition = 0;
			}
			if(targetPosition != this.position) {
				this.position = targetPosition;
				var result = null;
				var index = this.keyframeBeforeIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result.index <= this.position) {
						var keyframeAfter = this.keyframes[index + 1];
						while(keyframeAfter != null && keyframeAfter.index <= this.position) {
							result = keyframeAfter;
							++index;
							keyframeAfter = this.keyframes[index + 1];
						}
					} else {
						result = null;
					}
				}
				if(result == null) {
					index = -1;
					var len = this.keyframes.length;
					while(index + 1 < len) {
						var keyframe = this.keyframes[index + 1];
						if(keyframe.index > this.position) {
							break;
						}
						result = keyframe;
						++index;
					}
				}
				this.keyframeBeforeIndex = index;
				this.before = result;
				var result = null;
				var index = this.keyframeAfterIndex;
				if(index != -1) {
					result = this.keyframes[index];
					if(result != null) {
						if(result.index > this.position) {
							if(index > 0) {
								var keyframeBefore = this.keyframes[index - 1];
								while(keyframeBefore != null && keyframeBefore.index > this.position) {
									result = keyframeBefore;
									--index;
									keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
								}
							}
						} else {
							result = null;
						}
					}
				}
				if(result == null) {
					var len = this.keyframes.length;
					index = len;
					while(index - 1 >= 0) {
						var keyframe = this.keyframes[index - 1];
						if(keyframe.index <= this.position) {
							break;
						}
						result = keyframe;
						--index;
					}
					if(index >= len) {
						index = -1;
					}
				}
				this.keyframeAfterIndex = index;
				this.after = result;
				this.apply(forceChange);
			}
		}
	}
	,add: function(keyframe) {
		var mutableKeyframes = this.keyframes;
		var len = mutableKeyframes.length;
		var i = 0;
		var didInsert = false;
		while(i < len) {
			var next = mutableKeyframes[i];
			if(next.index == keyframe.index) {
				ceramic_App.app.logger.warning("Replacing existing keyframe at index " + keyframe.index,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TimelineTrack.hx", lineNumber : 155, className : "ceramic.TimelineTrack", methodName : "add"});
				mutableKeyframes[i] = keyframe;
				didInsert = true;
				break;
			} else if(next.index > keyframe.index) {
				mutableKeyframes.splice(i,0,keyframe);
				didInsert = true;
				break;
			}
			++i;
		}
		if(!didInsert) {
			mutableKeyframes.push(keyframe);
		}
		if(this.autoFitSize) {
			this.fitSize();
		}
		if(this.timeline != null && this.timeline.autoFitSize) {
			this.timeline.fitSize();
		}
		this.keyframeBeforeIndex = -1;
		this.keyframeAfterIndex = -1;
		var result = null;
		var index = this.keyframeBeforeIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result.index <= this.position) {
				var keyframeAfter = this.keyframes[index + 1];
				while(keyframeAfter != null && keyframeAfter.index <= this.position) {
					result = keyframeAfter;
					++index;
					keyframeAfter = this.keyframes[index + 1];
				}
			} else {
				result = null;
			}
		}
		if(result == null) {
			index = -1;
			var len = this.keyframes.length;
			while(index + 1 < len) {
				var keyframe = this.keyframes[index + 1];
				if(keyframe.index > this.position) {
					break;
				}
				result = keyframe;
				++index;
			}
		}
		this.keyframeBeforeIndex = index;
		this.before = result;
		var result = null;
		var index = this.keyframeAfterIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result != null) {
				if(result.index > this.position) {
					if(index > 0) {
						var keyframeBefore = this.keyframes[index - 1];
						while(keyframeBefore != null && keyframeBefore.index > this.position) {
							result = keyframeBefore;
							--index;
							keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
						}
					}
				} else {
					result = null;
				}
			}
		}
		if(result == null) {
			var len = this.keyframes.length;
			index = len;
			while(index - 1 >= 0) {
				var keyframe = this.keyframes[index - 1];
				if(keyframe.index <= this.position) {
					break;
				}
				result = keyframe;
				--index;
			}
			if(index >= len) {
				index = -1;
			}
		}
		this.keyframeAfterIndex = index;
		this.after = result;
		this.apply(true);
	}
	,remove: function(keyframe) {
		var index = this.keyframes.indexOf(keyframe);
		if(index != -1) {
			var mutableKeyframes = this.keyframes;
			mutableKeyframes.splice(index,1);
			if(this.autoFitSize) {
				this.fitSize();
			}
			if(this.timeline != null && this.timeline.autoFitSize) {
				this.timeline.fitSize();
			}
			this.keyframeBeforeIndex = -1;
			this.keyframeAfterIndex = -1;
			var result = null;
			var index = this.keyframeBeforeIndex;
			if(index != -1) {
				result = this.keyframes[index];
				if(result.index <= this.position) {
					var keyframeAfter = this.keyframes[index + 1];
					while(keyframeAfter != null && keyframeAfter.index <= this.position) {
						result = keyframeAfter;
						++index;
						keyframeAfter = this.keyframes[index + 1];
					}
				} else {
					result = null;
				}
			}
			if(result == null) {
				index = -1;
				var len = this.keyframes.length;
				while(index + 1 < len) {
					var keyframe = this.keyframes[index + 1];
					if(keyframe.index > this.position) {
						break;
					}
					result = keyframe;
					++index;
				}
			}
			this.keyframeBeforeIndex = index;
			this.before = result;
			var result = null;
			var index = this.keyframeAfterIndex;
			if(index != -1) {
				result = this.keyframes[index];
				if(result != null) {
					if(result.index > this.position) {
						if(index > 0) {
							var keyframeBefore = this.keyframes[index - 1];
							while(keyframeBefore != null && keyframeBefore.index > this.position) {
								result = keyframeBefore;
								--index;
								keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
							}
						}
					} else {
						result = null;
					}
				}
			}
			if(result == null) {
				var len = this.keyframes.length;
				index = len;
				while(index - 1 >= 0) {
					var keyframe = this.keyframes[index - 1];
					if(keyframe.index <= this.position) {
						break;
					}
					result = keyframe;
					--index;
				}
				if(index >= len) {
					index = -1;
				}
			}
			this.keyframeAfterIndex = index;
			this.after = result;
			this.apply(true);
		} else {
			ceramic_App.app.logger.warning("Failed to remove keyframe: keyframe not found in list",{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\TimelineTrack.hx", lineNumber : 216, className : "ceramic.TimelineTrack", methodName : "remove"});
		}
	}
	,fitSize: function() {
		if(this.keyframes.length > 0) {
			this.size = this.keyframes[this.keyframes.length - 1].index;
		} else {
			this.size = 0;
		}
	}
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
	}
	,findKeyframeAtIndex: function(index) {
		var keyframe = this.findKeyframeBefore(index);
		if(keyframe != null && keyframe.index == index) {
			return keyframe;
		}
		return null;
	}
	,findKeyframeBefore: function(position) {
		var result = null;
		var index = -1;
		var len = this.keyframes.length;
		while(index + 1 < len) {
			var keyframe = this.keyframes[index + 1];
			if(keyframe.index > position) {
				break;
			}
			result = keyframe;
			++index;
		}
		return result;
	}
	,findKeyframeAfter: function(position) {
		var result = null;
		var index = -1;
		var len = this.keyframes.length;
		while(index + 1 < len) {
			var keyframe = this.keyframes[index + 1];
			if(keyframe.index > position) {
				break;
			}
			result = keyframe;
			++index;
		}
		return result;
	}
	,computeKeyframeBefore: function() {
		var result = null;
		var index = this.keyframeBeforeIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result.index <= this.position) {
				var keyframeAfter = this.keyframes[index + 1];
				while(keyframeAfter != null && keyframeAfter.index <= this.position) {
					result = keyframeAfter;
					++index;
					keyframeAfter = this.keyframes[index + 1];
				}
			} else {
				result = null;
			}
		}
		if(result == null) {
			index = -1;
			var len = this.keyframes.length;
			while(index + 1 < len) {
				var keyframe = this.keyframes[index + 1];
				if(keyframe.index > this.position) {
					break;
				}
				result = keyframe;
				++index;
			}
		}
		this.keyframeBeforeIndex = index;
		this.before = result;
	}
	,computeKeyframeAfter: function() {
		var result = null;
		var index = this.keyframeAfterIndex;
		if(index != -1) {
			result = this.keyframes[index];
			if(result != null) {
				if(result.index > this.position) {
					if(index > 0) {
						var keyframeBefore = this.keyframes[index - 1];
						while(keyframeBefore != null && keyframeBefore.index > this.position) {
							result = keyframeBefore;
							--index;
							keyframeBefore = index > 0 ? this.keyframes[index - 1] : null;
						}
					}
				} else {
					result = null;
				}
			}
		}
		if(result == null) {
			var len = this.keyframes.length;
			index = len;
			while(index - 1 >= 0) {
				var keyframe = this.keyframes[index - 1];
				if(keyframe.index <= this.position) {
					break;
				}
				result = keyframe;
				--index;
			}
			if(index >= len) {
				index = -1;
			}
		}
		this.keyframeAfterIndex = index;
		this.after = result;
	}
	,__class__: ceramic_TimelineTrack
});
var ceramic_TimelineBoolTrack = function() {
	this.value = false;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineBoolTrack"] = ceramic_TimelineBoolTrack;
ceramic_TimelineBoolTrack.__name__ = "ceramic.TimelineBoolTrack";
ceramic_TimelineBoolTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineBoolTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	__cbOnChange: null
	,__cbOnceChange: null
	,__cbOnOwnerUnbindChange: null
	,__cbOnceOwnerUnbindChange: null
	,emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChange[ii];
						this.__cbOnceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChange[ii];
						this.__cbOnceOwnerUnbindChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChange[ii]);
						newCbOnceArray.push(this.__cbOnceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,value: null
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			if(ratio >= 1) {
				this.value = this.after.value;
			} else {
				this.value = this.before.value;
			}
		} else if(this.after != null) {
			this.value = this.after.value;
		} else if(this.before != null) {
			this.value = this.before.value;
		}
		if(forceChange || prevValue != this.value) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineBoolTrack
});
var ceramic_TimelineColorKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineColorKeyframe"] = ceramic_TimelineColorKeyframe;
ceramic_TimelineColorKeyframe.__name__ = "ceramic.TimelineColorKeyframe";
ceramic_TimelineColorKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineColorKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	value: null
	,__class__: ceramic_TimelineColorKeyframe
});
var ceramic_TimelineColorTrack = function() {
	this.value = 16777215;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineColorTrack"] = ceramic_TimelineColorTrack;
ceramic_TimelineColorTrack.__name__ = "ceramic.TimelineColorTrack";
ceramic_TimelineColorTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineColorTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	__cbOnChange: null
	,__cbOnceChange: null
	,__cbOnOwnerUnbindChange: null
	,__cbOnceOwnerUnbindChange: null
	,emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChange[ii];
						this.__cbOnceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChange[ii];
						this.__cbOnceOwnerUnbindChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChange[ii]);
						newCbOnceArray.push(this.__cbOnceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,value: null
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			var color1 = this.before.value;
			var color2 = this.after.value;
			var factor = ceramic_Tween.ease(this.after.easing,ratio);
			if(factor == null) {
				factor = 0.5;
			}
			var r = ((color2 >> 16 & 255) - (color1 >> 16 & 255)) * factor + (color1 >> 16 & 255) | 0;
			var g = ((color2 >> 8 & 255) - (color1 >> 8 & 255)) * factor + (color1 >> 8 & 255) | 0;
			var b = ((color2 & 255) - (color1 & 255)) * factor + (color1 & 255) | 0;
			var color = 0;
			color &= 65535;
			color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
			color &= 16711935;
			color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
			color &= 16776960;
			color |= b > 255 ? 255 : b < 0 ? 0 : b;
			this.value = color;
		} else if(this.after != null) {
			this.value = this.after.value;
		} else if(this.before != null) {
			this.value = this.before.value;
		}
		if(forceChange || prevValue != this.value) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineColorTrack
});
var ceramic_TimelineDegreesTrack = function() {
	this.value = 0.0;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineDegreesTrack"] = ceramic_TimelineDegreesTrack;
ceramic_TimelineDegreesTrack.__name__ = "ceramic.TimelineDegreesTrack";
ceramic_TimelineDegreesTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineDegreesTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	__cbOnChange: null
	,__cbOnceChange: null
	,__cbOnOwnerUnbindChange: null
	,__cbOnceOwnerUnbindChange: null
	,emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChange[ii];
						this.__cbOnceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChange[ii];
						this.__cbOnceOwnerUnbindChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChange[ii]);
						newCbOnceArray.push(this.__cbOnceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,value: null
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		var newValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			var beforeValue = ceramic_GeometryUtils.clampDegrees(this.before.value);
			var afterValue = ceramic_GeometryUtils.clampDegrees(this.after.value);
			var delta = afterValue - beforeValue;
			if(delta > 180) {
				afterValue -= 360;
			} else if(delta < -180) {
				afterValue += 360;
			}
			newValue = beforeValue + (afterValue - beforeValue) * ceramic_Tween.ease(this.after.easing,ratio);
			newValue = ceramic_GeometryUtils.clampDegrees(newValue);
		} else if(this.after != null) {
			newValue = ceramic_GeometryUtils.clampDegrees(this.after.value);
		} else if(this.before != null) {
			newValue = ceramic_GeometryUtils.clampDegrees(this.before.value);
		}
		if(forceChange || prevValue != newValue) {
			this.value = newValue;
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineDegreesTrack
});
var ceramic_TimelineFloatArrayKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineFloatArrayKeyframe"] = ceramic_TimelineFloatArrayKeyframe;
ceramic_TimelineFloatArrayKeyframe.__name__ = "ceramic.TimelineFloatArrayKeyframe";
ceramic_TimelineFloatArrayKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineFloatArrayKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	value: null
	,__class__: ceramic_TimelineFloatArrayKeyframe
});
var ceramic_TimelineFloatArrayTrack = function() {
	this.value = [];
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineFloatArrayTrack"] = ceramic_TimelineFloatArrayTrack;
ceramic_TimelineFloatArrayTrack.__name__ = "ceramic.TimelineFloatArrayTrack";
ceramic_TimelineFloatArrayTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineFloatArrayTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	__cbOnChange: null
	,__cbOnceChange: null
	,__cbOnOwnerUnbindChange: null
	,__cbOnceOwnerUnbindChange: null
	,emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChange[ii];
						this.__cbOnceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChange[ii];
						this.__cbOnceOwnerUnbindChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChange[ii]);
						newCbOnceArray.push(this.__cbOnceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,value: null
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var didChange = false;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			if(ratio >= 1) {
				var result = this.value;
				var array = this.after.value;
				var maxLen = array.length;
				if(result.length > maxLen) {
					ceramic_Extensions.setArrayLength(result,maxLen);
				}
				var resLen = result.length;
				var _g = 0;
				var _g1 = maxLen;
				while(_g < _g1) {
					var i = _g++;
					var prev = 0.0;
					if(i < resLen) {
						prev = result[i];
					} else {
						didChange = true;
					}
					var newVal = array[i];
					result[i] = newVal;
					if(newVal != prev) {
						didChange = true;
					}
				}
			} else if(ratio <= 0) {
				var result = this.value;
				var array = this.before.value;
				var maxLen = array.length;
				if(result.length > maxLen) {
					ceramic_Extensions.setArrayLength(result,maxLen);
				}
				var resLen = result.length;
				var _g = 0;
				var _g1 = maxLen;
				while(_g < _g1) {
					var i = _g++;
					var prev = 0.0;
					if(i < resLen) {
						prev = result[i];
					} else {
						didChange = true;
					}
					var newVal = array[i];
					result[i] = newVal;
					if(newVal != prev) {
						didChange = true;
					}
				}
			} else {
				var result = this.value;
				var from = this.before.value;
				var to = this.after.value;
				var ratio1 = ceramic_Tween.ease(this.after.easing,ratio);
				var toLen = to.length;
				var fromLen = from.length;
				var maxLen = toLen > fromLen ? fromLen : toLen;
				if(result.length > maxLen) {
					ceramic_Extensions.setArrayLength(result,maxLen);
				}
				var resLen = result.length;
				var _g = 0;
				var _g1 = maxLen;
				while(_g < _g1) {
					var i = _g++;
					var prev = 0.0;
					if(i < resLen) {
						prev = result[i];
					} else {
						didChange = true;
					}
					var fromVal = from[i];
					var toVal = to[i];
					var newVal = fromVal + (toVal - fromVal) * ratio1;
					result[i] = newVal;
					if(newVal != prev) {
						didChange = true;
					}
				}
			}
		} else if(this.after != null) {
			var result = this.value;
			var array = this.after.value;
			var maxLen = array.length;
			if(result.length > maxLen) {
				ceramic_Extensions.setArrayLength(result,maxLen);
			}
			var resLen = result.length;
			var _g = 0;
			var _g1 = maxLen;
			while(_g < _g1) {
				var i = _g++;
				var prev = 0.0;
				if(i < resLen) {
					prev = result[i];
				} else {
					didChange = true;
				}
				var newVal = array[i];
				result[i] = newVal;
				if(newVal != prev) {
					didChange = true;
				}
			}
		} else if(this.before != null) {
			var result = this.value;
			var array = this.before.value;
			var maxLen = array.length;
			if(result.length > maxLen) {
				ceramic_Extensions.setArrayLength(result,maxLen);
			}
			var resLen = result.length;
			var _g = 0;
			var _g1 = maxLen;
			while(_g < _g1) {
				var i = _g++;
				var prev = 0.0;
				if(i < resLen) {
					prev = result[i];
				} else {
					didChange = true;
				}
				var newVal = array[i];
				result[i] = newVal;
				if(newVal != prev) {
					didChange = true;
				}
			}
		}
		if(forceChange || didChange) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineFloatArrayTrack
});
var ceramic_TimelineFloatKeyframe = function(value,index,easing) {
	ceramic_TimelineKeyframe.call(this,index,easing);
	this.value = value;
};
$hxClasses["ceramic.TimelineFloatKeyframe"] = ceramic_TimelineFloatKeyframe;
ceramic_TimelineFloatKeyframe.__name__ = "ceramic.TimelineFloatKeyframe";
ceramic_TimelineFloatKeyframe.__super__ = ceramic_TimelineKeyframe;
ceramic_TimelineFloatKeyframe.prototype = $extend(ceramic_TimelineKeyframe.prototype,{
	value: null
	,__class__: ceramic_TimelineFloatKeyframe
});
var ceramic_TimelineFloatTrack = function() {
	this.value = 0.0;
	ceramic_TimelineTrack.call(this);
};
$hxClasses["ceramic.TimelineFloatTrack"] = ceramic_TimelineFloatTrack;
ceramic_TimelineFloatTrack.__name__ = "ceramic.TimelineFloatTrack";
ceramic_TimelineFloatTrack.__super__ = ceramic_TimelineTrack;
ceramic_TimelineFloatTrack.prototype = $extend(ceramic_TimelineTrack.prototype,{
	__cbOnChange: null
	,__cbOnceChange: null
	,__cbOnOwnerUnbindChange: null
	,__cbOnceOwnerUnbindChange: null
	,emitChange: function(track) {
		var len = 0;
		if(this.__cbOnChange != null) {
			len += this.__cbOnChange.length;
		}
		if(this.__cbOnceChange != null) {
			len += this.__cbOnceChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChange[ii];
						this.__cbOnceChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChange[ii];
						this.__cbOnceOwnerUnbindChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChange[ii]);
						newCbOnceArray.push(this.__cbOnceChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(track);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChange == null) {
				this.__cbOnOwnerUnbindChange = [];
			}
			this.__cbOnOwnerUnbindChange.push(null);
		}
		if(this.__cbOnChange == null) {
			this.__cbOnChange = [];
		}
		this.__cbOnChange.push(handleTrack);
	}
	,onceChange: function(owner,handleTrack) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "change" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTrack != null) {
					_gthis.offChange(handleTrack);
					handleTrack = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTrack = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChange == null) {
				this.__cbOnceOwnerUnbindChange = [];
			}
			this.__cbOnceOwnerUnbindChange.push(null);
		}
		if(this.__cbOnceChange == null) {
			this.__cbOnceChange = [];
		}
		this.__cbOnceChange.push(handleTrack);
	}
	,offChange: function(handleTrack) {
		if(handleTrack != null) {
			var index;
			var unbind;
			if(this.__cbOnChange != null) {
				index = this.__cbOnChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChange.splice(index,1);
				}
			}
			if(this.__cbOnceChange != null) {
				index = this.__cbOnceChange.indexOf(handleTrack);
				if(index != -1) {
					this.__cbOnceChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChange = null;
			}
			if(this.__cbOnceOwnerUnbindChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChange = null;
			}
			this.__cbOnChange = null;
			this.__cbOnceChange = null;
		}
	}
	,listensChange: function() {
		if(!(this.__cbOnChange != null && this.__cbOnChange.length > 0)) {
			if(this.__cbOnceChange != null) {
				return this.__cbOnceChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,value: null
	,apply: function(forceChange) {
		if(forceChange == null) {
			forceChange = false;
		}
		var prevValue = this.value;
		if(this.before != null && this.after != null) {
			var ratio = (this.position - this.before.index) / (this.after.index - this.before.index);
			if(ratio > 1) {
				ratio = 1;
			} else if(ratio < 0) {
				ratio = 0;
			}
			this.value = this.before.value + (this.after.value - this.before.value) * ceramic_Tween.ease(this.after.easing,ratio);
		} else if(this.after != null) {
			this.value = this.after.value;
		} else if(this.before != null) {
			this.value = this.before.value;
		}
		if(forceChange || prevValue != this.value) {
			this.emitChange(this);
		}
	}
	,unbindEvents: function() {
		ceramic_TimelineTrack.prototype.unbindEvents.call(this);
		this.offChange();
	}
	,__class__: ceramic_TimelineFloatTrack
});
var ceramic_Timelines = function() {
	ceramic_Entity.call(this);
	this.onCreateTrack(this,$bind(this,this.handleCreateTrack));
	this.onBindTrack(this,$bind(this,this.handleBindTrack));
	this.onCreateKeyframe(this,$bind(this,this.handleCreateKeyframe));
};
$hxClasses["ceramic.Timelines"] = ceramic_Timelines;
ceramic_Timelines.__name__ = "ceramic.Timelines";
ceramic_Timelines.__super__ = ceramic_Entity;
ceramic_Timelines.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnCreateTrack: null
	,__cbOnceCreateTrack: null
	,__cbOnOwnerUnbindCreateTrack: null
	,__cbOnceOwnerUnbindCreateTrack: null
	,emitCreateTrack: function(type,options,result) {
		var len = 0;
		if(this.__cbOnCreateTrack != null) {
			len += this.__cbOnCreateTrack.length;
		}
		if(this.__cbOnceCreateTrack != null) {
			len += this.__cbOnceCreateTrack.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnCreateTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnCreateTrack[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceCreateTrack != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceCreateTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceCreateTrack[ii];
						this.__cbOnceCreateTrack[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindCreateTrack[ii];
						this.__cbOnceOwnerUnbindCreateTrack[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindCreateTrack[ii]);
						newCbOnceArray.push(this.__cbOnceCreateTrack[ii]);
					}
				}
				this.__cbOnceOwnerUnbindCreateTrack = newCbOnceOwnerUnbindArray;
				this.__cbOnceCreateTrack = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(type,options,result);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCreateTrack: function(owner,handleTypeOptionsResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsResult != null) {
					_gthis.offCreateTrack(handleTypeOptionsResult);
					handleTypeOptionsResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCreateTrack == null) {
				this.__cbOnOwnerUnbindCreateTrack = [];
			}
			this.__cbOnOwnerUnbindCreateTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsResult = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCreateTrack == null) {
				this.__cbOnOwnerUnbindCreateTrack = [];
			}
			this.__cbOnOwnerUnbindCreateTrack.push(null);
		}
		if(this.__cbOnCreateTrack == null) {
			this.__cbOnCreateTrack = [];
		}
		this.__cbOnCreateTrack.push(handleTypeOptionsResult);
	}
	,onceCreateTrack: function(owner,handleTypeOptionsResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsResult != null) {
					_gthis.offCreateTrack(handleTypeOptionsResult);
					handleTypeOptionsResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCreateTrack == null) {
				this.__cbOnceOwnerUnbindCreateTrack = [];
			}
			this.__cbOnceOwnerUnbindCreateTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsResult = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCreateTrack == null) {
				this.__cbOnceOwnerUnbindCreateTrack = [];
			}
			this.__cbOnceOwnerUnbindCreateTrack.push(null);
		}
		if(this.__cbOnceCreateTrack == null) {
			this.__cbOnceCreateTrack = [];
		}
		this.__cbOnceCreateTrack.push(handleTypeOptionsResult);
	}
	,offCreateTrack: function(handleTypeOptionsResult) {
		if(handleTypeOptionsResult != null) {
			var index;
			var unbind;
			if(this.__cbOnCreateTrack != null) {
				index = this.__cbOnCreateTrack.indexOf(handleTypeOptionsResult);
				if(index != -1) {
					this.__cbOnCreateTrack.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCreateTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCreateTrack.splice(index,1);
				}
			}
			if(this.__cbOnceCreateTrack != null) {
				index = this.__cbOnceCreateTrack.indexOf(handleTypeOptionsResult);
				if(index != -1) {
					this.__cbOnceCreateTrack.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCreateTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCreateTrack.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCreateTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCreateTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCreateTrack = null;
			}
			if(this.__cbOnceOwnerUnbindCreateTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCreateTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCreateTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCreateTrack = null;
			}
			this.__cbOnCreateTrack = null;
			this.__cbOnceCreateTrack = null;
		}
	}
	,listensCreateTrack: function() {
		if(!(this.__cbOnCreateTrack != null && this.__cbOnCreateTrack.length > 0)) {
			if(this.__cbOnceCreateTrack != null) {
				return this.__cbOnceCreateTrack.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnBindTrack: null
	,__cbOnceBindTrack: null
	,__cbOnOwnerUnbindBindTrack: null
	,__cbOnceOwnerUnbindBindTrack: null
	,emitBindTrack: function(type,options,track,entity,field) {
		var len = 0;
		if(this.__cbOnBindTrack != null) {
			len += this.__cbOnBindTrack.length;
		}
		if(this.__cbOnceBindTrack != null) {
			len += this.__cbOnceBindTrack.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnBindTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnBindTrack[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceBindTrack != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceBindTrack.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceBindTrack[ii];
						this.__cbOnceBindTrack[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindBindTrack[ii];
						this.__cbOnceOwnerUnbindBindTrack[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindBindTrack[ii]);
						newCbOnceArray.push(this.__cbOnceBindTrack[ii]);
					}
				}
				this.__cbOnceOwnerUnbindBindTrack = newCbOnceOwnerUnbindArray;
				this.__cbOnceBindTrack = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(type,options,track,entity,field);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onBindTrack: function(owner,handleTypeOptionsTrackEntityField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bindTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsTrackEntityField != null) {
					_gthis.offBindTrack(handleTypeOptionsTrackEntityField);
					handleTypeOptionsTrackEntityField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindBindTrack == null) {
				this.__cbOnOwnerUnbindBindTrack = [];
			}
			this.__cbOnOwnerUnbindBindTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsTrackEntityField = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindBindTrack == null) {
				this.__cbOnOwnerUnbindBindTrack = [];
			}
			this.__cbOnOwnerUnbindBindTrack.push(null);
		}
		if(this.__cbOnBindTrack == null) {
			this.__cbOnBindTrack = [];
		}
		this.__cbOnBindTrack.push(handleTypeOptionsTrackEntityField);
	}
	,onceBindTrack: function(owner,handleTypeOptionsTrackEntityField) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "bindTrack" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsTrackEntityField != null) {
					_gthis.offBindTrack(handleTypeOptionsTrackEntityField);
					handleTypeOptionsTrackEntityField = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindBindTrack == null) {
				this.__cbOnceOwnerUnbindBindTrack = [];
			}
			this.__cbOnceOwnerUnbindBindTrack.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsTrackEntityField = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindBindTrack == null) {
				this.__cbOnceOwnerUnbindBindTrack = [];
			}
			this.__cbOnceOwnerUnbindBindTrack.push(null);
		}
		if(this.__cbOnceBindTrack == null) {
			this.__cbOnceBindTrack = [];
		}
		this.__cbOnceBindTrack.push(handleTypeOptionsTrackEntityField);
	}
	,offBindTrack: function(handleTypeOptionsTrackEntityField) {
		if(handleTypeOptionsTrackEntityField != null) {
			var index;
			var unbind;
			if(this.__cbOnBindTrack != null) {
				index = this.__cbOnBindTrack.indexOf(handleTypeOptionsTrackEntityField);
				if(index != -1) {
					this.__cbOnBindTrack.splice(index,1);
					unbind = this.__cbOnOwnerUnbindBindTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindBindTrack.splice(index,1);
				}
			}
			if(this.__cbOnceBindTrack != null) {
				index = this.__cbOnceBindTrack.indexOf(handleTypeOptionsTrackEntityField);
				if(index != -1) {
					this.__cbOnceBindTrack.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindBindTrack[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindBindTrack.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindBindTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindBindTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindBindTrack = null;
			}
			if(this.__cbOnceOwnerUnbindBindTrack != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindBindTrack.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindBindTrack[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindBindTrack = null;
			}
			this.__cbOnBindTrack = null;
			this.__cbOnceBindTrack = null;
		}
	}
	,listensBindTrack: function() {
		if(!(this.__cbOnBindTrack != null && this.__cbOnBindTrack.length > 0)) {
			if(this.__cbOnceBindTrack != null) {
				return this.__cbOnceBindTrack.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnCreateKeyframe: null
	,__cbOnceCreateKeyframe: null
	,__cbOnOwnerUnbindCreateKeyframe: null
	,__cbOnceOwnerUnbindCreateKeyframe: null
	,emitCreateKeyframe: function(type,options,value,index,easing,existing,result) {
		var len = 0;
		if(this.__cbOnCreateKeyframe != null) {
			len += this.__cbOnCreateKeyframe.length;
		}
		if(this.__cbOnceCreateKeyframe != null) {
			len += this.__cbOnceCreateKeyframe.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnCreateKeyframe.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnCreateKeyframe[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceCreateKeyframe != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceCreateKeyframe.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceCreateKeyframe[ii];
						this.__cbOnceCreateKeyframe[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindCreateKeyframe[ii];
						this.__cbOnceOwnerUnbindCreateKeyframe[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindCreateKeyframe[ii]);
						newCbOnceArray.push(this.__cbOnceCreateKeyframe[ii]);
					}
				}
				this.__cbOnceOwnerUnbindCreateKeyframe = newCbOnceOwnerUnbindArray;
				this.__cbOnceCreateKeyframe = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(type,options,value,index,easing,existing,result);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onCreateKeyframe: function(owner,handleTypeOptionsValueIndexEasingExistingResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createKeyframe" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsValueIndexEasingExistingResult != null) {
					_gthis.offCreateKeyframe(handleTypeOptionsValueIndexEasingExistingResult);
					handleTypeOptionsValueIndexEasingExistingResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindCreateKeyframe == null) {
				this.__cbOnOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnOwnerUnbindCreateKeyframe.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsValueIndexEasingExistingResult = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindCreateKeyframe == null) {
				this.__cbOnOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnOwnerUnbindCreateKeyframe.push(null);
		}
		if(this.__cbOnCreateKeyframe == null) {
			this.__cbOnCreateKeyframe = [];
		}
		this.__cbOnCreateKeyframe.push(handleTypeOptionsValueIndexEasingExistingResult);
	}
	,onceCreateKeyframe: function(owner,handleTypeOptionsValueIndexEasingExistingResult) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "createKeyframe" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleTypeOptionsValueIndexEasingExistingResult != null) {
					_gthis.offCreateKeyframe(handleTypeOptionsValueIndexEasingExistingResult);
					handleTypeOptionsValueIndexEasingExistingResult = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindCreateKeyframe == null) {
				this.__cbOnceOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnceOwnerUnbindCreateKeyframe.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleTypeOptionsValueIndexEasingExistingResult = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindCreateKeyframe == null) {
				this.__cbOnceOwnerUnbindCreateKeyframe = [];
			}
			this.__cbOnceOwnerUnbindCreateKeyframe.push(null);
		}
		if(this.__cbOnceCreateKeyframe == null) {
			this.__cbOnceCreateKeyframe = [];
		}
		this.__cbOnceCreateKeyframe.push(handleTypeOptionsValueIndexEasingExistingResult);
	}
	,offCreateKeyframe: function(handleTypeOptionsValueIndexEasingExistingResult) {
		if(handleTypeOptionsValueIndexEasingExistingResult != null) {
			var index;
			var unbind;
			if(this.__cbOnCreateKeyframe != null) {
				index = this.__cbOnCreateKeyframe.indexOf(handleTypeOptionsValueIndexEasingExistingResult);
				if(index != -1) {
					this.__cbOnCreateKeyframe.splice(index,1);
					unbind = this.__cbOnOwnerUnbindCreateKeyframe[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindCreateKeyframe.splice(index,1);
				}
			}
			if(this.__cbOnceCreateKeyframe != null) {
				index = this.__cbOnceCreateKeyframe.indexOf(handleTypeOptionsValueIndexEasingExistingResult);
				if(index != -1) {
					this.__cbOnceCreateKeyframe.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindCreateKeyframe[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindCreateKeyframe.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindCreateKeyframe.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindCreateKeyframe[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindCreateKeyframe = null;
			}
			if(this.__cbOnceOwnerUnbindCreateKeyframe != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindCreateKeyframe.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindCreateKeyframe[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindCreateKeyframe = null;
			}
			this.__cbOnCreateKeyframe = null;
			this.__cbOnceCreateKeyframe = null;
		}
	}
	,listensCreateKeyframe: function() {
		if(!(this.__cbOnCreateKeyframe != null && this.__cbOnCreateKeyframe.length > 0)) {
			if(this.__cbOnceCreateKeyframe != null) {
				return this.__cbOnceCreateKeyframe.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,handleCreateTrack: function(type,options,result) {
		if(result.value != null) {
			return;
		}
		if(options != null && options.degrees == true) {
			result.value = new ceramic_TimelineDegreesTrack();
		} else if(type == "Float") {
			result.value = new ceramic_TimelineFloatTrack();
		} else if(type == "ceramic.Color") {
			result.value = new ceramic_TimelineColorTrack();
		} else if(type == "Bool") {
			result.value = new ceramic_TimelineBoolTrack();
		} else if(type == "Array<Float>") {
			result.value = new ceramic_TimelineFloatArrayTrack();
		}
	}
	,handleBindTrack: function(type,options,track,entity,field) {
		if(((track) instanceof ceramic_TimelineFloatTrack)) {
			var floatTrack = track;
			floatTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineDegreesTrack)) {
			var degreesTrack = track;
			degreesTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineColorTrack)) {
			var colorTrack = track;
			colorTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineBoolTrack)) {
			var boolTrack = track;
			boolTrack.onChange(entity,function(track) {
				Reflect.setProperty(entity,field,track.value);
			});
		} else if(((track) instanceof ceramic_TimelineFloatArrayTrack)) {
			var copyArray = options != null && options.copyArray == true;
			var floatArrayTrack = track;
			floatArrayTrack.onChange(entity,function(track) {
				var array = null;
				if(copyArray) {
					array = [];
				} else {
					array = Reflect.getProperty(entity,field);
					if(array == null) {
						array = [];
					}
				}
				var value = track.value;
				var valueLen = value.length;
				if(array.length != valueLen) {
					ceramic_Extensions.setArrayLength(array,valueLen);
				}
				var _g = 0;
				var _g1 = valueLen;
				while(_g < _g1) {
					var i = _g++;
					var val = value[i];
					array[i] = val;
				}
				Reflect.setProperty(entity,field,array);
			});
		}
	}
	,handleCreateKeyframe: function(type,options,value,index,easing,existing,result) {
		if(result.value != null) {
			return;
		}
		if(type == "Float") {
			if(existing != null && ((existing) instanceof ceramic_TimelineFloatKeyframe)) {
				var floatKeyframe = existing;
				floatKeyframe.value = value;
				floatKeyframe.index = index;
				floatKeyframe.easing = easing;
				result.value = floatKeyframe;
			} else {
				result.value = new ceramic_TimelineFloatKeyframe(value,index,easing);
			}
		} else if(type == "ceramic.Color") {
			if(existing != null && ((existing) instanceof ceramic_TimelineColorKeyframe)) {
				var colorKeyframe = existing;
				colorKeyframe.value = value;
				colorKeyframe.index = index;
				colorKeyframe.easing = easing;
				result.value = colorKeyframe;
			} else {
				result.value = new ceramic_TimelineColorKeyframe(value,index,easing);
			}
		} else if(type == "Bool") {
			if(existing != null && ((existing) instanceof ceramic_TimelineBoolKeyframe)) {
				var boolKeyframe = existing;
				boolKeyframe.value = value;
				boolKeyframe.index = index;
				boolKeyframe.easing = easing;
				result.value = boolKeyframe;
			} else {
				result.value = new ceramic_TimelineBoolKeyframe(value,index,easing);
			}
		} else if(type == "Array<Float>") {
			if(existing != null && ((existing) instanceof ceramic_TimelineFloatArrayKeyframe)) {
				var floatArrayKeyframe = existing;
				var floatArrayValue = value;
				floatArrayKeyframe.value = [].concat(floatArrayValue);
				floatArrayKeyframe.index = index;
				floatArrayKeyframe.easing = easing;
				result.value = floatArrayKeyframe;
			} else {
				result.value = new ceramic_TimelineFloatArrayKeyframe(value,index,easing);
			}
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offCreateTrack();
		this.offBindTrack();
		this.offCreateKeyframe();
	}
	,__class__: ceramic_Timelines
});
var ceramic_Timer = function() { };
$hxClasses["ceramic.Timer"] = ceramic_Timer;
ceramic_Timer.__name__ = "ceramic.Timer";
ceramic_Timer.__properties__ = {get_timestamp:"get_timestamp"};
ceramic_Timer.get_timestamp = function() {
	return ceramic_Timer.startTimestamp + ceramic_Timer.now;
};
ceramic_Timer.update = function(delta,realDelta) {
	ceramic_Timer.now += delta;
	ceramic_Timer.timestamp = ceramic_Timer.startTimestamp + ceramic_Timer.now + realDelta;
	if(ceramic_Timer.next <= ceramic_Timer.now) {
		ceramic_App.app.beginUpdateCallbacks.push(ceramic_Timer.flush);
	}
};
ceramic_Timer.flush = function() {
	ceramic_Timer.next = 999999999;
	var prevCallbacks = ceramic_Timer.callbacks;
	ceramic_Timer.callbacks = [];
	var _g = 0;
	var _g1 = prevCallbacks.length;
	while(_g < _g1) {
		var i = _g++;
		var callback = prevCallbacks[i];
		if(!callback.cleared) {
			if(callback.owner == null || callback.owner._lifecycleState >= 0) {
				if(callback.time <= ceramic_Timer.now) {
					if(callback.interval >= 0) {
						while(callback.time <= ceramic_Timer.now && !callback.cleared) {
							callback.callback();
							if(callback.interval == 0) {
								break;
							}
							callback.time += callback.interval;
						}
						if(!callback.cleared) {
							ceramic_Timer.callbacks.push(callback);
							ceramic_Timer.next = Math.min(callback.time,ceramic_Timer.next);
						}
					} else {
						callback.callback();
					}
				} else {
					ceramic_Timer.callbacks.push(callback);
					ceramic_Timer.next = Math.min(callback.time,ceramic_Timer.next);
				}
			} else {
				callback.cleared = true;
			}
		}
	}
};
ceramic_Timer.delay = function(owner,seconds,callback) {
	return ceramic_Timer.schedule(owner,seconds,callback,-1);
};
ceramic_Timer.interval = function(owner,seconds,callback) {
	return ceramic_Timer.schedule(owner,seconds,callback,seconds);
};
ceramic_Timer.schedule = function(owner,seconds,callback,interval) {
	if(callback == null) {
		ceramic_App.app.logger.error("callback != null" + (" (" + "Callback must not be null!" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Timer.hx", lineNumber : 137, className : "ceramic.Timer", methodName : "schedule"});
		throw haxe_Exception.thrown("callback != null" + (" (" + "Callback must not be null!" + ")"));
	}
	var time = ceramic_Timer.now + seconds;
	ceramic_Timer.next = Math.min(time,ceramic_Timer.next);
	var timerCallback = new ceramic_TimerCallback();
	timerCallback.owner = owner;
	timerCallback.callback = callback;
	timerCallback.time = time;
	timerCallback.interval = interval;
	ceramic_Timer.callbacks.push(timerCallback);
	return $bind(timerCallback,timerCallback.clear);
};
var ceramic_TimerCallback = function() {
	this.cleared = false;
	this.interval = -1;
	this.time = 0;
	this.callback = null;
	this.owner = null;
};
$hxClasses["ceramic.TimerCallback"] = ceramic_TimerCallback;
ceramic_TimerCallback.__name__ = "ceramic.TimerCallback";
ceramic_TimerCallback.prototype = {
	owner: null
	,callback: null
	,time: null
	,interval: null
	,cleared: null
	,clear: function() {
		this.cleared = true;
	}
	,__class__: ceramic_TimerCallback
};
var ceramic_Touch = function(index,x,y,deltaX,deltaY) {
	this.index = index;
	this.x = x;
	this.y = y;
	this.deltaX = deltaX;
	this.deltaY = deltaY;
};
$hxClasses["ceramic.Touch"] = ceramic_Touch;
ceramic_Touch.__name__ = "ceramic.Touch";
ceramic_Touch.prototype = {
	index: null
	,x: null
	,y: null
	,deltaX: null
	,deltaY: null
	,toString: function() {
		return "" + Std.string({ index : this.index, x : this.x, y : this.y, deltaX : this.deltaX, deltaY : this.deltaY});
	}
	,__class__: ceramic_Touch
};
var ceramic_TouchInfo = function(touchIndex,buttonId,x,y,hits) {
	this.touchIndex = touchIndex;
	this.buttonId = buttonId;
	this.x = x;
	this.y = y;
	this.hits = hits;
};
$hxClasses["ceramic.TouchInfo"] = ceramic_TouchInfo;
ceramic_TouchInfo.__name__ = "ceramic.TouchInfo";
ceramic_TouchInfo.prototype = {
	touchIndex: null
	,buttonId: null
	,x: null
	,y: null
	,hits: null
	,toString: function() {
		return "" + Std.string({ touchIndex : this.touchIndex, buttonId : this.buttonId, x : this.x, y : this.y, hits : this.hits});
	}
	,__class__: ceramic_TouchInfo
};
var ceramic_Touches = {};
ceramic_Touches._new = function() {
	return new ceramic_IntMap(8,0.5,false);
};
ceramic_Touches.get = function(this1,touchIndex) {
	return this1.get(touchIndex);
};
ceramic_Touches.set = function(this1,touchIndex,touch) {
	this1.set(touchIndex,touch);
};
ceramic_Touches.iterator = function(this1) {
	return new ceramic_TouchesIterator(this1);
};
var ceramic_TouchesIterator = function(intMap) {
	this.intMap = intMap;
	this.i = 0;
	this.len = this.intMap.values.length;
};
$hxClasses["ceramic.TouchesIterator"] = ceramic_TouchesIterator;
ceramic_TouchesIterator.__name__ = "ceramic.TouchesIterator";
ceramic_TouchesIterator.prototype = {
	intMap: null
	,i: null
	,len: null
	,hasNext: function() {
		while(this.i < this.len && this.intMap.values[this.i] == null) this.i++;
		return this.i < this.len;
	}
	,next: function() {
		var n = this.i++;
		return this.intMap.values[n];
	}
	,__class__: ceramic_TouchesIterator
};
var ceramic_TrackerBackend = function() {
	this.backgroundQueue = new ceramic_BackgroundQueue();
};
$hxClasses["ceramic.TrackerBackend"] = ceramic_TrackerBackend;
ceramic_TrackerBackend.__name__ = "ceramic.TrackerBackend";
ceramic_TrackerBackend.prototype = {
	backgroundQueue: null
	,onceImmediate: function(handleImmediate) {
		ceramic_App.app._onceImmediate(handleImmediate);
	}
	,readString: function(key) {
		return ceramic_App.app.backend.io.readString(key);
	}
	,saveString: function(key,str) {
		return ceramic_App.app.backend.io.saveString(key,str);
	}
	,appendString: function(key,str) {
		return ceramic_App.app.backend.io.appendString(key,str);
	}
	,warning: function(message,pos) {
		ceramic_App.app.logger.warning(message,pos);
	}
	,error: function(error,pos) {
		ceramic_App.app.logger.error(error,pos);
	}
	,success: function(message,pos) {
		ceramic_App.app.logger.success(message,pos);
	}
	,runInBackground: function(callback) {
		this.backgroundQueue.schedule(callback);
	}
	,runInMain: function(callback) {
		ceramic_Runner.runInMain(callback);
	}
	,interval: function(owner,seconds,callback) {
		return ceramic_Timer.schedule(owner,seconds,callback,seconds);
	}
	,delay: function(owner,seconds,callback) {
		return ceramic_Timer.schedule(owner,seconds,callback,-1);
	}
	,storageDirectory: function() {
		return null;
	}
	,pathJoin: function(paths) {
		return ceramic_Path.join(paths);
	}
	,__class__: ceramic_TrackerBackend
};
var ceramic_Tween = function(owner,easing,duration,fromValue,toValue) {
	this.customEasing = null;
	ceramic_Entity.call(this);
	this.owner = owner;
	this.easing = easing;
	this.duration = duration;
	this.fromValue = fromValue;
	this.toValue = toValue;
	this.init();
};
$hxClasses["ceramic.Tween"] = ceramic_Tween;
ceramic_Tween.__name__ = "ceramic.Tween";
ceramic_Tween.start = function(owner,easing,duration,fromValue,toValue,handleValueTime) {
	var instance = new ceramic_Tween(owner,easing == null ? ceramic_Easing.QUAD_EASE_IN_OUT : easing,duration,fromValue,toValue);
	if(handleValueTime != null) {
		instance.onUpdate(owner,handleValueTime);
	}
	return instance;
};
ceramic_Tween.tick = function(delta) {
	var len = ceramic_Tween._tweens.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var tween = ceramic_Tween._tweens[i];
		ceramic_Tween._iteratedTweens[i] = tween;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var tween = ceramic_Tween._iteratedTweens[i];
		ceramic_Tween._iteratedTweens[i] = null;
		if(tween.owner != null && tween.owner._lifecycleState < 0) {
			tween.destroy();
		} else {
			tween.remaining -= delta;
			if(tween.remaining <= 0) {
				tween.emitUpdate(tween.toValue,tween.duration);
				tween.emitComplete();
				tween.destroy();
			} else {
				var elapsed = tween.duration - tween.remaining;
				ceramic__$Tween_TweenEasingFunction.k = elapsed / tween.duration;
				var k = ceramic__$Tween_TweenEasingFunction.k;
				ceramic__$Tween_TweenEasingFunction.customEasing = tween.customEasing;
				tween.computedEasing();
				ceramic__$Tween_TweenEasingFunction.customEasing = null;
				tween.emitUpdate(tween.fromValue + (tween.toValue - tween.fromValue) * ceramic__$Tween_TweenEasingFunction.k,elapsed);
			}
		}
	}
};
ceramic_Tween.computeEasing = function(easing) {
	switch(easing._hx_index) {
	case 0:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.none;
		break;
	case 1:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.linear;
		break;
	case 2:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseIn;
		break;
	case 3:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseInOut;
		break;
	case 4:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseOut;
		break;
	case 5:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseIn;
		break;
	case 6:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseInOut;
		break;
	case 7:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseOut;
		break;
	case 8:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseIn;
		break;
	case 9:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseInOut;
		break;
	case 10:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseOut;
		break;
	case 11:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseIn;
		break;
	case 12:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseInOut;
		break;
	case 13:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseOut;
		break;
	case 14:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseIn;
		break;
	case 15:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseInOut;
		break;
	case 16:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseOut;
		break;
	case 17:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseIn;
		break;
	case 18:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseInOut;
		break;
	case 19:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseOut;
		break;
	case 20:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseIn;
		break;
	case 21:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseInOut;
		break;
	case 22:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseOut;
		break;
	case 23:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseIn;
		break;
	case 24:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseInOut;
		break;
	case 25:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseOut;
		break;
	case 26:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseIn;
		break;
	case 27:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseInOut;
		break;
	case 28:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseOut;
		break;
	case 29:
		var x1 = easing.x1;
		var y1 = easing.y1;
		var x2 = easing.x2;
		var y2 = easing.y2;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
		break;
	case 30:
		var easing1 = easing.easing;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = easing1;
		break;
	}
};
ceramic_Tween.ease = function(easing,value) {
	ceramic__$Tween_TweenEasingFunction.k = value;
	switch(easing._hx_index) {
	case 0:
		ceramic__$Tween_TweenEasingFunction.none();
		break;
	case 1:
		ceramic__$Tween_TweenEasingFunction.linear();
		break;
	case 2:
		ceramic__$Tween_TweenEasingFunction.backEaseIn();
		break;
	case 3:
		ceramic__$Tween_TweenEasingFunction.backEaseInOut();
		break;
	case 4:
		ceramic__$Tween_TweenEasingFunction.backEaseOut();
		break;
	case 5:
		ceramic__$Tween_TweenEasingFunction.quadEaseIn();
		break;
	case 6:
		ceramic__$Tween_TweenEasingFunction.quadEaseInOut();
		break;
	case 7:
		ceramic__$Tween_TweenEasingFunction.quadEaseOut();
		break;
	case 8:
		ceramic__$Tween_TweenEasingFunction.cubicEaseIn();
		break;
	case 9:
		ceramic__$Tween_TweenEasingFunction.cubicEaseInOut();
		break;
	case 10:
		ceramic__$Tween_TweenEasingFunction.cubicEaseOut();
		break;
	case 11:
		ceramic__$Tween_TweenEasingFunction.quartEaseIn();
		break;
	case 12:
		ceramic__$Tween_TweenEasingFunction.quartEaseInOut();
		break;
	case 13:
		ceramic__$Tween_TweenEasingFunction.quartEaseOut();
		break;
	case 14:
		ceramic__$Tween_TweenEasingFunction.quintEaseIn();
		break;
	case 15:
		ceramic__$Tween_TweenEasingFunction.quintEaseInOut();
		break;
	case 16:
		ceramic__$Tween_TweenEasingFunction.quintEaseOut();
		break;
	case 17:
		ceramic__$Tween_TweenEasingFunction.bounceEaseIn();
		break;
	case 18:
		ceramic__$Tween_TweenEasingFunction.bounceEaseInOut();
		break;
	case 19:
		ceramic__$Tween_TweenEasingFunction.bounceEaseOut();
		break;
	case 20:
		ceramic__$Tween_TweenEasingFunction.elasticEaseIn();
		break;
	case 21:
		ceramic__$Tween_TweenEasingFunction.elasticEaseInOut();
		break;
	case 22:
		ceramic__$Tween_TweenEasingFunction.elasticEaseOut();
		break;
	case 23:
		ceramic__$Tween_TweenEasingFunction.expoEaseIn();
		break;
	case 24:
		ceramic__$Tween_TweenEasingFunction.expoEaseInOut();
		break;
	case 25:
		ceramic__$Tween_TweenEasingFunction.expoEaseOut();
		break;
	case 26:
		ceramic__$Tween_TweenEasingFunction.sineEaseIn();
		break;
	case 27:
		ceramic__$Tween_TweenEasingFunction.sineEaseInOut();
		break;
	case 28:
		ceramic__$Tween_TweenEasingFunction.sineEaseOut();
		break;
	case 29:
		var x1 = easing.x1;
		var y1 = easing.y1;
		var x2 = easing.x2;
		var y2 = easing.y2;
		ceramic__$Tween_TweenEasingFunction.customEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
		ceramic__$Tween_TweenEasingFunction.custom();
		ceramic__$Tween_TweenEasingFunction.customEasing = null;
		break;
	case 30:
		var easing1 = easing.easing;
		ceramic__$Tween_TweenEasingFunction.customEasing = easing1;
		ceramic__$Tween_TweenEasingFunction.custom();
		ceramic__$Tween_TweenEasingFunction.customEasing = null;
		break;
	}
	return ceramic__$Tween_TweenEasingFunction.k;
};
ceramic_Tween.easingFunction = function(easing) {
	switch(easing._hx_index) {
	case 0:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.none;
		break;
	case 1:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.linear;
		break;
	case 2:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseIn;
		break;
	case 3:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseInOut;
		break;
	case 4:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseOut;
		break;
	case 5:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseIn;
		break;
	case 6:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseInOut;
		break;
	case 7:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseOut;
		break;
	case 8:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseIn;
		break;
	case 9:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseInOut;
		break;
	case 10:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseOut;
		break;
	case 11:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseIn;
		break;
	case 12:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseInOut;
		break;
	case 13:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseOut;
		break;
	case 14:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseIn;
		break;
	case 15:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseInOut;
		break;
	case 16:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseOut;
		break;
	case 17:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseIn;
		break;
	case 18:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseInOut;
		break;
	case 19:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseOut;
		break;
	case 20:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseIn;
		break;
	case 21:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseInOut;
		break;
	case 22:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseOut;
		break;
	case 23:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseIn;
		break;
	case 24:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseInOut;
		break;
	case 25:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseOut;
		break;
	case 26:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseIn;
		break;
	case 27:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseInOut;
		break;
	case 28:
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseOut;
		break;
	case 29:
		var x1 = easing.x1;
		var y1 = easing.y1;
		var x2 = easing.x2;
		var y2 = easing.y2;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
		break;
	case 30:
		var easing1 = easing.easing;
		ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
		ceramic_Tween._computedCustomEasing = easing1;
		break;
	}
	var computedEasing = ceramic_Tween._computedEasingFunction;
	var customEasing = ceramic_Tween._computedCustomEasing;
	return function(value) {
		ceramic__$Tween_TweenEasingFunction.k = value;
		ceramic__$Tween_TweenEasingFunction.customEasing = customEasing;
		computedEasing();
		ceramic__$Tween_TweenEasingFunction.customEasing = null;
		return ceramic__$Tween_TweenEasingFunction.k;
	};
};
ceramic_Tween.__super__ = ceramic_Entity;
ceramic_Tween.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnUpdate: null
	,__cbOnceUpdate: null
	,__cbOnOwnerUnbindUpdate: null
	,__cbOnceOwnerUnbindUpdate: null
	,emitUpdate: function(value,time) {
		var len = 0;
		if(this.__cbOnUpdate != null) {
			len += this.__cbOnUpdate.length;
		}
		if(this.__cbOnceUpdate != null) {
			len += this.__cbOnceUpdate.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnUpdate[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceUpdate != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceUpdate.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceUpdate[ii];
						this.__cbOnceUpdate[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindUpdate[ii];
						this.__cbOnceOwnerUnbindUpdate[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindUpdate[ii]);
						newCbOnceArray.push(this.__cbOnceUpdate[ii]);
					}
				}
				this.__cbOnceOwnerUnbindUpdate = newCbOnceOwnerUnbindArray;
				this.__cbOnceUpdate = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(value,time);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onUpdate: function(owner,handleValueTime) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValueTime != null) {
					_gthis.offUpdate(handleValueTime);
					handleValueTime = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValueTime = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindUpdate == null) {
				this.__cbOnOwnerUnbindUpdate = [];
			}
			this.__cbOnOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnUpdate == null) {
			this.__cbOnUpdate = [];
		}
		this.__cbOnUpdate.push(handleValueTime);
	}
	,onceUpdate: function(owner,handleValueTime) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "update" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleValueTime != null) {
					_gthis.offUpdate(handleValueTime);
					handleValueTime = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleValueTime = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindUpdate == null) {
				this.__cbOnceOwnerUnbindUpdate = [];
			}
			this.__cbOnceOwnerUnbindUpdate.push(null);
		}
		if(this.__cbOnceUpdate == null) {
			this.__cbOnceUpdate = [];
		}
		this.__cbOnceUpdate.push(handleValueTime);
	}
	,offUpdate: function(handleValueTime) {
		if(handleValueTime != null) {
			var index;
			var unbind;
			if(this.__cbOnUpdate != null) {
				index = this.__cbOnUpdate.indexOf(handleValueTime);
				if(index != -1) {
					this.__cbOnUpdate.splice(index,1);
					unbind = this.__cbOnOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindUpdate.splice(index,1);
				}
			}
			if(this.__cbOnceUpdate != null) {
				index = this.__cbOnceUpdate.indexOf(handleValueTime);
				if(index != -1) {
					this.__cbOnceUpdate.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindUpdate[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindUpdate.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindUpdate = null;
			}
			if(this.__cbOnceOwnerUnbindUpdate != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindUpdate.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindUpdate[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindUpdate = null;
			}
			this.__cbOnUpdate = null;
			this.__cbOnceUpdate = null;
		}
	}
	,listensUpdate: function() {
		if(!(this.__cbOnUpdate != null && this.__cbOnUpdate.length > 0)) {
			if(this.__cbOnceUpdate != null) {
				return this.__cbOnceUpdate.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__cbOnComplete: null
	,__cbOnceComplete: null
	,__cbOnOwnerUnbindComplete: null
	,__cbOnceOwnerUnbindComplete: null
	,emitComplete: function() {
		var len = 0;
		if(this.__cbOnComplete != null) {
			len += this.__cbOnComplete.length;
		}
		if(this.__cbOnceComplete != null) {
			len += this.__cbOnceComplete.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnComplete[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceComplete != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceComplete.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceComplete[ii];
						this.__cbOnceComplete[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindComplete[ii];
						this.__cbOnceOwnerUnbindComplete[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindComplete[ii]);
						newCbOnceArray.push(this.__cbOnceComplete[ii]);
					}
				}
				this.__cbOnceOwnerUnbindComplete = newCbOnceOwnerUnbindArray;
				this.__cbOnceComplete = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onComplete: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offComplete(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindComplete == null) {
				this.__cbOnOwnerUnbindComplete = [];
			}
			this.__cbOnOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnComplete == null) {
			this.__cbOnComplete = [];
		}
		this.__cbOnComplete.push(handle);
	}
	,onceComplete: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "complete" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offComplete(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindComplete == null) {
				this.__cbOnceOwnerUnbindComplete = [];
			}
			this.__cbOnceOwnerUnbindComplete.push(null);
		}
		if(this.__cbOnceComplete == null) {
			this.__cbOnceComplete = [];
		}
		this.__cbOnceComplete.push(handle);
	}
	,offComplete: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnComplete != null) {
				index = this.__cbOnComplete.indexOf(handle);
				if(index != -1) {
					this.__cbOnComplete.splice(index,1);
					unbind = this.__cbOnOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindComplete.splice(index,1);
				}
			}
			if(this.__cbOnceComplete != null) {
				index = this.__cbOnceComplete.indexOf(handle);
				if(index != -1) {
					this.__cbOnceComplete.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindComplete[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindComplete.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindComplete = null;
			}
			if(this.__cbOnceOwnerUnbindComplete != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindComplete.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindComplete[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindComplete = null;
			}
			this.__cbOnComplete = null;
			this.__cbOnceComplete = null;
		}
	}
	,listensComplete: function() {
		if(!(this.__cbOnComplete != null && this.__cbOnComplete.length > 0)) {
			if(this.__cbOnceComplete != null) {
				return this.__cbOnceComplete.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,owner: null
	,easing: null
	,duration: null
	,remaining: null
	,fromValue: null
	,toValue: null
	,computedEasing: null
	,customEasing: null
	,init: function() {
		if(this.duration <= 0.0) {
			ceramic_App.app._onceImmediate($bind(this,this.immediateComplete));
			return;
		}
		var easing = this.easing;
		switch(easing._hx_index) {
		case 0:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.none;
			break;
		case 1:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.linear;
			break;
		case 2:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseIn;
			break;
		case 3:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseInOut;
			break;
		case 4:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.backEaseOut;
			break;
		case 5:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseIn;
			break;
		case 6:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseInOut;
			break;
		case 7:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quadEaseOut;
			break;
		case 8:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseIn;
			break;
		case 9:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseInOut;
			break;
		case 10:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.cubicEaseOut;
			break;
		case 11:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseIn;
			break;
		case 12:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseInOut;
			break;
		case 13:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quartEaseOut;
			break;
		case 14:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseIn;
			break;
		case 15:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseInOut;
			break;
		case 16:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.quintEaseOut;
			break;
		case 17:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseIn;
			break;
		case 18:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseInOut;
			break;
		case 19:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.bounceEaseOut;
			break;
		case 20:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseIn;
			break;
		case 21:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseInOut;
			break;
		case 22:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.elasticEaseOut;
			break;
		case 23:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseIn;
			break;
		case 24:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseInOut;
			break;
		case 25:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.expoEaseOut;
			break;
		case 26:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseIn;
			break;
		case 27:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseInOut;
			break;
		case 28:
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.sineEaseOut;
			break;
		case 29:
			var x1 = easing.x1;
			var y1 = easing.y1;
			var x2 = easing.x2;
			var y2 = easing.y2;
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
			ceramic_Tween._computedCustomEasing = ($_=ceramic_BezierEasing.get(x1,y1,x2,y2),$bind($_,$_.ease));
			break;
		case 30:
			var easing1 = easing.easing;
			ceramic_Tween._computedEasingFunction = ceramic__$Tween_TweenEasingFunction.custom;
			ceramic_Tween._computedCustomEasing = easing1;
			break;
		}
		this.computedEasing = ceramic_Tween._computedEasingFunction;
		this.customEasing = ceramic_Tween._computedCustomEasing;
		ceramic_Tween._computedEasingFunction = null;
		ceramic_Tween._computedCustomEasing = null;
		ceramic_Tween._tweens.push(this);
		this.remaining = this.duration;
		ceramic_App.app._onceImmediate($bind(this,this.immediateStart));
	}
	,updateFromTick: function(delta) {
		if(this.owner != null && this.owner._lifecycleState < 0) {
			this.destroy();
		} else {
			this.remaining -= delta;
			if(this.remaining <= 0) {
				this.emitUpdate(this.toValue,this.duration);
				this.emitComplete();
				this.destroy();
			} else {
				var elapsed = this.duration - this.remaining;
				ceramic__$Tween_TweenEasingFunction.k = elapsed / this.duration;
				var k = ceramic__$Tween_TweenEasingFunction.k;
				ceramic__$Tween_TweenEasingFunction.customEasing = this.customEasing;
				this.computedEasing();
				ceramic__$Tween_TweenEasingFunction.customEasing = null;
				this.emitUpdate(this.fromValue + (this.toValue - this.fromValue) * ceramic__$Tween_TweenEasingFunction.k,elapsed);
			}
		}
	}
	,immediateComplete: function() {
		this.emitUpdate(this.toValue,0);
		this.emitComplete();
		this.destroy();
	}
	,immediateStart: function() {
		this.emitUpdate(this.fromValue,0);
	}
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.easing = null;
		this.owner = null;
		this.computedEasing = null;
		this.customEasing = null;
		HxOverrides.remove(ceramic_Tween._tweens,this);
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offUpdate();
		this.offComplete();
	}
	,__class__: ceramic_Tween
});
var ceramic__$Tween_TweenEasingFunction = function() { };
$hxClasses["ceramic._Tween.TweenEasingFunction"] = ceramic__$Tween_TweenEasingFunction;
ceramic__$Tween_TweenEasingFunction.__name__ = "ceramic._Tween.TweenEasingFunction";
ceramic__$Tween_TweenEasingFunction.custom = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.customEasing(ceramic__$Tween_TweenEasingFunction.k);
};
ceramic__$Tween_TweenEasingFunction.none = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k >= 1 ? 1 : 0;
};
ceramic__$Tween_TweenEasingFunction.linear = function() {
};
ceramic__$Tween_TweenEasingFunction.backEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * (2.70158 * ceramic__$Tween_TweenEasingFunction.k - 1.70158);
};
ceramic__$Tween_TweenEasingFunction.backEaseInOut = function() {
	var s = 1.70158;
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * (ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * (((s *= 1.525) + 1) * ceramic__$Tween_TweenEasingFunction.k - s));
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ((tmp.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * (((s *= 1.525) + 1) * ceramic__$Tween_TweenEasingFunction.k + s) + 2);
	}
};
ceramic__$Tween_TweenEasingFunction.backEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = (ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k - 1) * ceramic__$Tween_TweenEasingFunction.k * (2.70158 * ceramic__$Tween_TweenEasingFunction.k + 1.70158) + 1;
};
ceramic__$Tween_TweenEasingFunction.quadEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k *= ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.quadEaseInOut = function() {
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		ceramic__$Tween_TweenEasingFunction.k = -0.5 * ((ceramic__$Tween_TweenEasingFunction.k - 1) * (ceramic__$Tween_TweenEasingFunction.k - 3) - 1);
	}
};
ceramic__$Tween_TweenEasingFunction.quadEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = -ceramic__$Tween_TweenEasingFunction.k * (ceramic__$Tween_TweenEasingFunction.k - 2);
};
ceramic__$Tween_TweenEasingFunction.cubicEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.cubicEaseInOut = function() {
	var tmp;
	var tmp1 = ceramic__$Tween_TweenEasingFunction;
	if((tmp1.k /= 0.5) < 1) {
		tmp = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		var tmp1 = ceramic__$Tween_TweenEasingFunction;
		tmp = 0.5 * ((tmp1.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 2);
	}
	ceramic__$Tween_TweenEasingFunction.k = tmp;
};
ceramic__$Tween_TweenEasingFunction.cubicEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = --ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 1;
};
ceramic__$Tween_TweenEasingFunction.quartEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.quartEaseInOut = function() {
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = -0.5 * ((tmp.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k - 2);
	}
};
ceramic__$Tween_TweenEasingFunction.quartEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = -(--ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k - 1);
};
ceramic__$Tween_TweenEasingFunction.quintEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
};
ceramic__$Tween_TweenEasingFunction.quintEaseInOut = function() {
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) < 1) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k;
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * ((tmp.k -= 2) * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 2);
	}
};
ceramic__$Tween_TweenEasingFunction.quintEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = --ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k * ceramic__$Tween_TweenEasingFunction.k + 1;
};
ceramic__$Tween_TweenEasingFunction.bounceEaseIn = function() {
	var t = 1 - ceramic__$Tween_TweenEasingFunction.k;
	var result;
	if((t /= 1) < 0.36363636363636365) {
		result = 7.5625 * t * t;
	} else if(t < 0.72727272727272729) {
		result = 7.5625 * (t -= 0.54545454545454541) * t + 0.75;
	} else if(t < 0.90909090909090906) {
		result = 7.5625 * (t -= 0.81818181818181823) * t + 0.9375;
	} else {
		result = 7.5625 * (t -= 0.95454545454545459) * t + 0.984375;
	}
	ceramic__$Tween_TweenEasingFunction.k = 1 - result;
};
ceramic__$Tween_TweenEasingFunction.bounceEaseInOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k < .5) {
		var t = 1 - ceramic__$Tween_TweenEasingFunction.k * 2;
		var result;
		if((t /= 1) < 0.36363636363636365) {
			result = 7.5625 * t * t;
		} else if(t < 0.72727272727272729) {
			result = 7.5625 * (t -= 0.54545454545454541) * t + 0.75;
		} else if(t < 0.90909090909090906) {
			result = 7.5625 * (t -= 0.81818181818181823) * t + 0.9375;
		} else {
			result = 7.5625 * (t -= 0.95454545454545459) * t + 0.984375;
		}
		ceramic__$Tween_TweenEasingFunction.k = (1 - result) * 0.5;
	} else {
		var t = ceramic__$Tween_TweenEasingFunction.k * 2 - 1;
		var result;
		if((t /= 1) < 0.36363636363636365) {
			result = 7.5625 * t * t;
		} else if(t < 0.72727272727272729) {
			result = 7.5625 * (t -= 0.54545454545454541) * t + 0.75;
		} else if(t < 0.90909090909090906) {
			result = 7.5625 * (t -= 0.81818181818181823) * t + 0.9375;
		} else {
			result = 7.5625 * (t -= 0.95454545454545459) * t + 0.984375;
		}
		ceramic__$Tween_TweenEasingFunction.k = result * 0.5 + 0.5;
	}
};
ceramic__$Tween_TweenEasingFunction.bounceEaseOut = function() {
	var t = ceramic__$Tween_TweenEasingFunction.k;
	var result;
	if((t /= 1) < 0.36363636363636365) {
		result = 7.5625 * t * t;
	} else if(t < 0.72727272727272729) {
		result = 7.5625 * (t -= 0.54545454545454541) * t + 0.75;
	} else if(t < 0.90909090909090906) {
		result = 7.5625 * (t -= 0.81818181818181823) * t + 0.9375;
	} else {
		result = 7.5625 * (t -= 0.95454545454545459) * t + 0.984375;
	}
	ceramic__$Tween_TweenEasingFunction.k = result;
};
ceramic__$Tween_TweenEasingFunction._bounceEaseIn = function(t,b,c,d) {
	var t1 = d - t;
	var result;
	if((t1 /= d) < 0.36363636363636365) {
		result = c * (7.5625 * t1 * t1);
	} else if(t1 < 0.72727272727272729) {
		result = c * (7.5625 * (t1 -= 0.54545454545454541) * t1 + 0.75);
	} else if(t1 < 0.90909090909090906) {
		result = c * (7.5625 * (t1 -= 0.81818181818181823) * t1 + 0.9375);
	} else {
		result = c * (7.5625 * (t1 -= 0.95454545454545459) * t1 + 0.984375);
	}
	return c - result + b;
};
ceramic__$Tween_TweenEasingFunction._bounceEaseOut = function(t,b,c,d) {
	var result;
	if((t /= d) < 0.36363636363636365) {
		result = c * (7.5625 * t * t) + b;
	} else if(t < 0.72727272727272729) {
		result = c * (7.5625 * (t -= 0.54545454545454541) * t + 0.75) + b;
	} else if(t < 0.90909090909090906) {
		result = c * (7.5625 * (t -= 0.81818181818181823) * t + 0.9375) + b;
	} else {
		result = c * (7.5625 * (t -= 0.95454545454545459) * t + 0.984375) + b;
	}
	return result;
};
ceramic__$Tween_TweenEasingFunction.elasticEaseIn = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	if(ceramic__$Tween_TweenEasingFunction.k == 1) {
		return;
	}
	var a = 0.1;
	var p = 0.4;
	var s;
	if(a < 1) {
		a = 1;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(1 / a);
	}
	var tmp = ceramic__$Tween_TweenEasingFunction;
	ceramic__$Tween_TweenEasingFunction.k = -(a * Math.exp(6.931471805599453 * (tmp.k -= 1)) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p));
};
ceramic__$Tween_TweenEasingFunction.elasticEaseInOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k *= 2) == 2) {
		ceramic__$Tween_TweenEasingFunction.k = 1;
		return;
	}
	var p = 0.44999999999999996;
	var s = p / 4;
	if(ceramic__$Tween_TweenEasingFunction.k < 1) {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = -0.5 * (Math.exp(6.931471805599453 * (tmp.k -= 1)) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p));
	} else {
		var tmp = ceramic__$Tween_TweenEasingFunction;
		ceramic__$Tween_TweenEasingFunction.k = Math.exp(-6.931471805599453 * (tmp.k -= 1)) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	}
};
ceramic__$Tween_TweenEasingFunction.elasticEaseOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	if(ceramic__$Tween_TweenEasingFunction.k == 1) {
		return;
	}
	var a = 0.1;
	var p = 0.4;
	var s;
	if(a < 1) {
		a = 1;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(1 / a);
	}
	ceramic__$Tween_TweenEasingFunction.k = a * Math.exp(-6.931471805599453 * ceramic__$Tween_TweenEasingFunction.k) * Math.sin((ceramic__$Tween_TweenEasingFunction.k - s) * (2 * Math.PI) / p) + 1;
};
ceramic__$Tween_TweenEasingFunction.expoEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k == 0 ? 0 : Math.exp(6.931471805599453 * (ceramic__$Tween_TweenEasingFunction.k - 1));
};
ceramic__$Tween_TweenEasingFunction.expoEaseInOut = function() {
	if(ceramic__$Tween_TweenEasingFunction.k == 0) {
		return;
	}
	if(ceramic__$Tween_TweenEasingFunction.k == 1) {
		return;
	}
	var tmp = ceramic__$Tween_TweenEasingFunction;
	if((tmp.k /= 0.5) < 1.0) {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * Math.exp(6.931471805599453 * (ceramic__$Tween_TweenEasingFunction.k - 1));
	} else {
		ceramic__$Tween_TweenEasingFunction.k = 0.5 * (2 - Math.exp(-6.931471805599453 * --ceramic__$Tween_TweenEasingFunction.k));
	}
};
ceramic__$Tween_TweenEasingFunction.expoEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = ceramic__$Tween_TweenEasingFunction.k == 1 ? 1 : 1 - Math.exp(-6.931471805599453 * ceramic__$Tween_TweenEasingFunction.k);
};
ceramic__$Tween_TweenEasingFunction.sineEaseIn = function() {
	ceramic__$Tween_TweenEasingFunction.k = 1 - Math.cos(ceramic__$Tween_TweenEasingFunction.k * (Math.PI / 2));
};
ceramic__$Tween_TweenEasingFunction.sineEaseInOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = -(Math.cos(Math.PI * ceramic__$Tween_TweenEasingFunction.k) - 1) / 2;
};
ceramic__$Tween_TweenEasingFunction.sineEaseOut = function() {
	ceramic__$Tween_TweenEasingFunction.k = Math.sin(ceramic__$Tween_TweenEasingFunction.k * (Math.PI / 2));
};
var ceramic_Utils = function() { };
$hxClasses["ceramic.Utils"] = ceramic_Utils;
ceramic_Utils.__name__ = "ceramic.Utils";
ceramic_Utils.realPath = function(path) {
	if(!(ceramic_Path.isAbsolute(path) || StringTools.startsWith(path,"http://") || StringTools.startsWith(path,"https://"))) {
		path = ceramic_Path.join([ceramic_App.app.settings.assetsPath,path]);
	}
	return path;
};
ceramic_Utils.getRtti = function(c) {
	return ceramic_PlatformSpecific.getRtti(c);
};
ceramic_Utils.uniqueId = function() {
	switch(ceramic_Utils._nextUniqueIntCursor) {
	case 0:
		ceramic_Utils._nextUniqueInt0 = (ceramic_Utils._nextUniqueInt0 + 1) % 2147483647;
		break;
	case 1:
		ceramic_Utils._nextUniqueInt1 = (ceramic_Utils._nextUniqueInt1 + 1) % 2147483647;
		break;
	case 2:
		ceramic_Utils._nextUniqueInt2 = (ceramic_Utils._nextUniqueInt2 + 1) % 2147483647;
		break;
	case 3:
		ceramic_Utils._nextUniqueInt3 = (ceramic_Utils._nextUniqueInt3 + 1) % 2147483647;
		break;
	}
	ceramic_Utils._nextUniqueIntCursor = (ceramic_Utils._nextUniqueIntCursor + 1) % 4;
	var val = ceramic_Utils._nextUniqueInt0;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result1;
		if(q > 0) {
			var result2 = ceramic_Utils.base62Id(q);
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result1 = result2 + result3;
		} else {
			var result2;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result2 = String.fromCodePoint(ascii);
			} else {
				result2 = Std.string(r1).charAt(0);
			}
			result1 = Std.string(result2);
		}
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result = result1 + result2;
	} else {
		var result1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result1 = String.fromCodePoint(ascii);
		} else {
			result1 = Std.string(r).charAt(0);
		}
		result = Std.string(result1);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result1;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result2;
		if(q > 0) {
			var result3 = ceramic_Utils.base62Id(q);
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result2 = result3 + result4;
		} else {
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result2 = Std.string(result3);
		}
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result1 = result2 + result3;
	} else {
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result1 = Std.string(result2);
	}
	var val = ceramic_Utils._nextUniqueInt1;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result2;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result3;
		if(q > 0) {
			var result4 = ceramic_Utils.base62Id(q);
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result3 = result4 + result5;
		} else {
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result3 = Std.string(result4);
		}
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result2 = result3 + result4;
	} else {
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result2 = Std.string(result3);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result3;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result4;
		if(q > 0) {
			var result5 = ceramic_Utils.base62Id(q);
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result4 = result5 + result6;
		} else {
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result4 = Std.string(result5);
		}
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result3 = result4 + result5;
	} else {
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result3 = Std.string(result4);
	}
	var val = ceramic_Utils._nextUniqueInt2;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result4;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result5;
		if(q > 0) {
			var result6 = ceramic_Utils.base62Id(q);
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result5 = result6 + result7;
		} else {
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result5 = Std.string(result6);
		}
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result4 = result5 + result6;
	} else {
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result4 = Std.string(result5);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result5;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result6;
		if(q > 0) {
			var result7 = ceramic_Utils.base62Id(q);
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result6 = result7 + result8;
		} else {
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result6 = Std.string(result7);
		}
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result5 = result6 + result7;
	} else {
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result5 = Std.string(result6);
	}
	var val = ceramic_Utils._nextUniqueInt3;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result6;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result7;
		if(q > 0) {
			var result8 = ceramic_Utils.base62Id(q);
			var result9;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result9 = String.fromCodePoint(ascii);
			} else {
				result9 = Std.string(r1).charAt(0);
			}
			result7 = result8 + result9;
		} else {
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result7 = Std.string(result8);
		}
		var result8;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result8 = String.fromCodePoint(ascii);
		} else {
			result8 = Std.string(r).charAt(0);
		}
		result6 = result7 + result8;
	} else {
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result6 = Std.string(result7);
	}
	var result7 = result + "-" + result1 + "-" + result2 + "-" + result3 + "-" + result4 + "-" + result5 + "-" + result6;
	return result7;
};
ceramic_Utils.randomId = function(size) {
	if(size == null) {
		size = 32;
	}
	var chars = [];
	while(chars.length < size) {
		var val = null;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r = val % 62 | 0;
		var q = val / 62 | 0;
		var chunk;
		if(q > 0) {
			var val1 = q;
			if(val1 == null) {
				val1 = Math.random() * 2147483646 | 0;
			}
			var r1 = val1 % 62 | 0;
			var q1 = val1 / 62 | 0;
			var chunk1;
			if(q1 > 0) {
				var chunk2 = ceramic_Utils.base62Id(q1);
				var chunk3;
				if(r1 > 9) {
					var ascii = 65 + (r1 - 10);
					if(ascii > 90) {
						ascii += 6;
					}
					chunk3 = String.fromCodePoint(ascii);
				} else {
					chunk3 = Std.string(r1).charAt(0);
				}
				chunk1 = chunk2 + chunk3;
			} else {
				var chunk4;
				if(r1 > 9) {
					var ascii1 = 65 + (r1 - 10);
					if(ascii1 > 90) {
						ascii1 += 6;
					}
					chunk4 = String.fromCodePoint(ascii1);
				} else {
					chunk4 = Std.string(r1).charAt(0);
				}
				chunk1 = Std.string(chunk4);
			}
			var chunk5;
			if(r > 9) {
				var ascii2 = 65 + (r - 10);
				if(ascii2 > 90) {
					ascii2 += 6;
				}
				chunk5 = String.fromCodePoint(ascii2);
			} else {
				chunk5 = Std.string(r).charAt(0);
			}
			chunk = chunk1 + chunk5;
		} else {
			var chunk6;
			if(r > 9) {
				var ascii3 = 65 + (r - 10);
				if(ascii3 > 90) {
					ascii3 += 6;
				}
				chunk6 = String.fromCodePoint(ascii3);
			} else {
				chunk6 = Std.string(r).charAt(0);
			}
			chunk = Std.string(chunk6);
		}
		var _g = 0;
		var _g1 = chunk.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(chunk.charAt(i));
		}
	}
	ceramic_Extensions.shuffle(chars);
	return HxOverrides.substr(chars.join(""),0,size);
};
ceramic_Utils.persistentId = function(slot,size) {
	if(size == null) {
		size = 32;
	}
	if(slot == null) {
		slot = 0;
	}
	if(ceramic_Utils._persistentIds == null) {
		ceramic_Utils._persistentIds = new haxe_ds_IntMap();
	}
	var id = ceramic_Utils._persistentIds.h[slot];
	if(id != null) {
		return id;
	}
	id = ceramic_App.app.backend.io.readString("persistentId_" + slot);
	if(id != null) {
		ceramic_Utils._persistentIds.h[slot] = id;
		return id;
	}
	id = ceramic_Utils.randomId(size);
	if(!ceramic_App.app.backend.io.saveString("persistentId_" + slot,id)) {
		ceramic_App.app.logger.warning("Failed to save persistent id (" + id + ") at slot " + slot,{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Utils.hx", lineNumber : 125, className : "ceramic.Utils", methodName : "persistentId"});
	}
	ceramic_Utils._persistentIds.h[slot] = id;
	return id;
};
ceramic_Utils.resetPersistentId = function(slot) {
	if(slot == null) {
		slot = 0;
	}
	if(ceramic_Utils._persistentIds != null) {
		ceramic_Utils._persistentIds.remove(slot);
	}
	ceramic_App.app.backend.io.saveString("persistentId_" + slot,null);
};
ceramic_Utils.base62Id = function(val) {
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	if(q > 0) {
		var tmp = ceramic_Utils.base62Id(q);
		var tmp1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp1 = String.fromCodePoint(ascii);
		} else {
			tmp1 = (r == null ? "null" : "" + r).charAt(0);
		}
		return tmp + tmp1;
	} else {
		var tmp;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp = String.fromCodePoint(ascii);
		} else {
			tmp = (r == null ? "null" : "" + r).charAt(0);
		}
		return Std.string(tmp);
	}
};
ceramic_Utils.println = function(data) {
	var electronRunner = null;
	electronRunner = backend_ElectronRunner.electronRunner;
	if(electronRunner != null) {
		electronRunner.consoleLog("[error] " + data);
	} else {
		console.log("" + data);
	}
};
ceramic_Utils.printStackTrace = function(returnOnly) {
	if(returnOnly == null) {
		returnOnly = false;
	}
	var result_b = "";
	var electronRunner = null;
	var jsError = null;
	
            try {
                throw new Error();
            } catch (e) {
                jsError = e;
            }
        ;
	var stack = ("" + Std.string(jsError.stack)).split("\n");
	var len = stack.length;
	var i = len - 1;
	var file = "";
	var line = 0;
	var isWin = navigator.platform.indexOf("Win") != -1;
	electronRunner = backend_ElectronRunner.electronRunner;
	while(i >= 2) {
		var str = stack[i];
		str = StringTools.ltrim(str);
		if(electronRunner != null) {
			str = StringTools.replace(str,"http://localhost:" + Std.string(electronRunner.serverPort) + "/file:" + (isWin ? "/" : ""),"");
			str = StringTools.replace(str,"http://localhost:" + Std.string(electronRunner.serverPort) + "/",Std.string(electronRunner.appFiles) + "/");
		}
		var data = str;
		if(!returnOnly) {
			if(electronRunner != null) {
				electronRunner.consoleLog("[error] " + Std.string(data));
			} else {
				console.log("" + Std.string(data));
			}
		}
		result_b += Std.string(data);
		result_b += String.fromCodePoint(10);
		--i;
	}
	return result_b;
};
ceramic_Utils.stackItemToString = function(item) {
	var str = "";
	switch(item._hx_index) {
	case 0:
		str = "a C function";
		break;
	case 1:
		var m = item.m;
		str = "module " + m;
		break;
	case 2:
		var _g = item.column;
		var itm = item.s;
		var file = item.file;
		var line = item.line;
		if(itm != null) {
			str = ceramic_Utils.stackItemToString(itm) + " (";
		}
		str += file;
		str += " line ";
		str += line;
		if(itm != null) {
			str += ")";
		}
		break;
	case 3:
		var cname = item.classname;
		var meth = item.method;
		str += cname;
		str += ".";
		str += meth;
		break;
	case 4:
		var n = item.v;
		str += "local function #";
		str += n;
		break;
	}
	return str;
};
ceramic_Utils.radToDeg = function(rad) {
	return rad * 57.29577951308232;
};
ceramic_Utils.degToRad = function(deg) {
	return deg * 0.017453292519943295;
};
ceramic_Utils.round = function(value,decimals) {
	if(decimals == null) {
		decimals = 0;
	}
	if(decimals > 0) {
		var factor = 1.0;
		while(decimals-- > 0) factor *= 10.0;
		return Math.round(value * factor) / factor;
	} else {
		return Math.round(value);
	}
};
ceramic_Utils.hashCode = function(s) {
	var hash = 0;
	if(s.length == 0) {
		return hash;
	}
	var _g = 0;
	var _g1 = s.length;
	while(_g < _g1) {
		var i = _g++;
		hash = (hash << 5) - hash + HxOverrides.cca(s,i);
		hash &= hash;
	}
	return hash;
};
ceramic_Utils.uniformFrequencyList = function(values,frequencies,size) {
	var list = [];
	var pickValues = [];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		pickValues[i] = 0;
	}
	var _g = 0;
	var _g1 = frequencies.length;
	while(_g < _g1) {
		var i = _g++;
		pickValues[i] += frequencies[i];
	}
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var index = _g++;
		var bestPick = 0;
		var bestPickValue = 0.0;
		var _g2 = 0;
		var _g3 = values.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var pickValue = pickValues[i];
			if(pickValue > bestPickValue) {
				bestPick = i;
				bestPickValue = pickValue;
			}
		}
		list.push(values[bestPick]);
		pickValues[bestPick] -= 1.0;
		var _g4 = 0;
		var _g5 = frequencies.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			pickValues[i1] += frequencies[i1];
		}
	}
	return list;
};
ceramic_Utils.upperCaseToCamelCase = function(input,firstLetterUppercase) {
	if(firstLetterUppercase == null) {
		firstLetterUppercase = true;
	}
	var res_b = "";
	var len = input.length;
	var i = 0;
	var nextLetterUpperCase = firstLetterUppercase;
	while(i < len) {
		var c = input.charAt(i);
		if(c == "_") {
			nextLetterUpperCase = true;
		} else if(nextLetterUpperCase) {
			nextLetterUpperCase = false;
			res_b += Std.string(c.toUpperCase());
		} else {
			res_b += Std.string(c.toLowerCase());
		}
		++i;
	}
	return res_b;
};
ceramic_Utils.camelCaseToUpperCase = function(input,firstLetterUppercase) {
	if(firstLetterUppercase == null) {
		firstLetterUppercase = true;
	}
	var res_b = "";
	var len = input.length;
	var i = 0;
	var canAddSpace = false;
	while(i < len) {
		var c = input.charAt(i);
		if(c == ".") {
			res_b += "_";
			canAddSpace = false;
		} else if(ceramic_Utils.RE_ASCII_CHAR.match(c)) {
			var uc = c.toUpperCase();
			var isUpperCase = c == uc;
			if(canAddSpace && isUpperCase) {
				res_b += "_";
				canAddSpace = false;
			}
			res_b += uc == null ? "null" : "" + uc;
			canAddSpace = !isUpperCase;
		} else {
			res_b += "_";
			canAddSpace = false;
		}
		++i;
	}
	var str = res_b;
	while(StringTools.endsWith(str,"_")) str = HxOverrides.substr(str,0,str.length - 1);
	return str;
};
ceramic_Utils.functionEquals = function(functionA,functionB) {
	return functionA == functionB;
};
ceramic_Utils.decodeUriParams = function(raw) {
	var result = new haxe_ds_StringMap();
	var parts = raw.split("&");
	var _g = 0;
	while(_g < parts.length) {
		var part = parts[_g];
		++_g;
		var equalIndex = part.indexOf("=");
		if(equalIndex != -1) {
			var s = part.substring(0,equalIndex);
			var key = decodeURIComponent(s.split("+").join(" "));
			var s1 = part.substring(equalIndex + 1);
			var value = decodeURIComponent(s1.split("+").join(" "));
			result.h[key] = value;
		}
	}
	return result;
};
ceramic_Utils.sinRatio = function(value) {
	if(value >= 1.0) {
		value %= 1.0;
	}
	return (Math.sin(value * Math.PI * 2) + 1.0) * 0.5;
};
ceramic_Utils.cosRatio = function(value) {
	if(value >= 1.0) {
		value %= 1.0;
	}
	return (Math.cos(value * Math.PI * 2) + 1.0) * 0.5;
};
ceramic_Utils.valueFromInterpolatedKey = function(keys,values,interpolatedKey) {
	var len = keys.length;
	var lenMinus1 = len - 1;
	if(len <= 0) {
		ceramic_App.app.logger.error("len > 0" + (" (" + "Keys array must not be empty" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Utils.hx", lineNumber : 544, className : "ceramic.Utils", methodName : "valueFromInterpolatedKey"});
		throw haxe_Exception.thrown("len > 0" + (" (" + "Keys array must not be empty" + ")"));
	}
	if(values.length < len) {
		ceramic_App.app.logger.error("values.length >= len" + (" (" + "Values array must be of equal or higher size of keys array" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Utils.hx", lineNumber : 545, className : "ceramic.Utils", methodName : "valueFromInterpolatedKey"});
		throw haxe_Exception.thrown("values.length >= len" + (" (" + "Values array must be of equal or higher size of keys array" + ")"));
	}
	var value = 0.0;
	if(interpolatedKey < keys[0]) {
		value = values[0];
	} else if(interpolatedKey >= keys[lenMinus1]) {
		value = values[lenMinus1];
	} else {
		var i = 0;
		var iPlus1 = 1;
		while(interpolatedKey > keys[iPlus1]) {
			++i;
			++iPlus1;
		}
		var ratio = (interpolatedKey - keys[i]) / (keys[iPlus1] - keys[i]);
		value = values[i] + (values[iPlus1] - values[i]) * ratio;
	}
	return value;
};
ceramic_Utils.yFromInterpolatedX = function(points,interpolatedX) {
	var len = points.length;
	var lenMinus1 = len - 2;
	if(len <= 1) {
		ceramic_App.app.logger.error("len > 1" + (" (" + "Points array must not be empty" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\Utils.hx", lineNumber : 581, className : "ceramic.Utils", methodName : "yFromInterpolatedX"});
		throw haxe_Exception.thrown("len > 1" + (" (" + "Points array must not be empty" + ")"));
	}
	var y = 0.0;
	if(interpolatedX < points[0]) {
		y = points[1];
	} else if(interpolatedX >= points[lenMinus1]) {
		var lenMinus1Val = lenMinus1 + 1;
		y = points[lenMinus1Val];
	} else {
		var i = 0;
		var iPlus1 = 2;
		while(interpolatedX > points[iPlus1]) {
			i += 2;
			iPlus1 += 2;
		}
		var ratio = (interpolatedX - points[i]) / (points[iPlus1] - points[i]);
		var iVal = i + 1;
		var iPlus1Val = iPlus1 + 1;
		y = points[iVal] + (points[iPlus1Val] - points[iVal]) * ratio;
	}
	return y;
};
ceramic_Utils.command = function(cmd,args,options,result) {
	if(args == null) {
		args = [];
	}
	var childProcess = ceramic_PlatformSpecific.nodeRequire("child_process");
	var opt = { };
	var detached = false;
	if(options != null) {
		if(options.cwd != null) {
			opt.cwd = options.cwd;
		}
		if(options.detached == true) {
			detached = true;
		}
	}
	var proc = null;
	proc = childProcess.execFile(cmd,args,opt,function(err,stdout,stderr) {
		if(result != null) {
			var _done = result;
			result = null;
			_done(proc.exitCode,Std.string(stdout != null ? stdout : ""),Std.string(stderr != null ? stderr : ""));
		}
	});
	if(detached) {
		proc.unref();
	}
};
ceramic_Utils.replaceIdentifier = function(str,word,replacement) {
	str = StringTools.replace(str,"\n"," \n ");
	str = StringTools.replace(str,"\r"," \r ");
	str = " " + str + " ";
	var delimiter = "(\\s|[^a-zA-Z0-9_])";
	var _this_r = new RegExp(delimiter + word.replace(EReg.escapeRe,"\\$&") + delimiter,"g".split("u").join(""));
	var by = "$1" + StringTools.replace(replacement,"$","$$") + "$2";
	str = str.replace(_this_r,by);
	str = str.substring(1,str.length - 1);
	str = StringTools.replace(str," \r ","\r");
	str = StringTools.replace(str," \n ","\n");
	return str;
};
ceramic_Utils.imageTypeFromBytes = function(bytes) {
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[2] == 255) {
		return "jpeg";
	} else if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10) {
		return "png";
	}
	return null;
};
var ceramic_WatchDirectory = function(updateInterval) {
	if(updateInterval == null) {
		updateInterval = 1.0;
	}
	this.chokidarWatchers = null;
	this.chokidarUpdatedFilesByWatchedDirectory = null;
	this.startingToWatchDirectories = null;
	this.watchedDirectories = null;
	ceramic_Entity.call(this);
	if(!ceramic_WatchDirectory.didTryRequireChokidar) {
		ceramic_WatchDirectory.didTryRequireChokidar = true;
		ceramic_WatchDirectory.fs = ceramic_PlatformSpecific.nodeRequire("fs");
		if(ceramic_WatchDirectory.fs != null) {
			ceramic_WatchDirectory.chokidar = ceramic_PlatformSpecific.nodeRequire("chokidar");
		}
	}
	this.updateInterval = updateInterval;
	ceramic_Timer.schedule(this,updateInterval,$bind(this,this.tick),updateInterval);
};
$hxClasses["ceramic.WatchDirectory"] = ceramic_WatchDirectory;
ceramic_WatchDirectory.__name__ = "ceramic.WatchDirectory";
ceramic_WatchDirectory.__super__ = ceramic_Entity;
ceramic_WatchDirectory.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnDirectoryChange: null
	,__cbOnceDirectoryChange: null
	,__cbOnOwnerUnbindDirectoryChange: null
	,__cbOnceOwnerUnbindDirectoryChange: null
	,emitDirectoryChange: function(path,newFiles,previousFiles) {
		var len = 0;
		if(this.__cbOnDirectoryChange != null) {
			len += this.__cbOnDirectoryChange.length;
		}
		if(this.__cbOnceDirectoryChange != null) {
			len += this.__cbOnceDirectoryChange.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnDirectoryChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnDirectoryChange[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceDirectoryChange != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceDirectoryChange.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceDirectoryChange[ii];
						this.__cbOnceDirectoryChange[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindDirectoryChange[ii];
						this.__cbOnceOwnerUnbindDirectoryChange[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindDirectoryChange[ii]);
						newCbOnceArray.push(this.__cbOnceDirectoryChange[ii]);
					}
				}
				this.__cbOnceOwnerUnbindDirectoryChange = newCbOnceOwnerUnbindArray;
				this.__cbOnceDirectoryChange = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(path,newFiles,previousFiles);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onDirectoryChange: function(owner,handlePathNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "directoryChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handlePathNewFilesPreviousFiles != null) {
					_gthis.offDirectoryChange(handlePathNewFilesPreviousFiles);
					handlePathNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindDirectoryChange == null) {
				this.__cbOnOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnOwnerUnbindDirectoryChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handlePathNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindDirectoryChange == null) {
				this.__cbOnOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnOwnerUnbindDirectoryChange.push(null);
		}
		if(this.__cbOnDirectoryChange == null) {
			this.__cbOnDirectoryChange = [];
		}
		this.__cbOnDirectoryChange.push(handlePathNewFilesPreviousFiles);
	}
	,onceDirectoryChange: function(owner,handlePathNewFilesPreviousFiles) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "directoryChange" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handlePathNewFilesPreviousFiles != null) {
					_gthis.offDirectoryChange(handlePathNewFilesPreviousFiles);
					handlePathNewFilesPreviousFiles = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindDirectoryChange == null) {
				this.__cbOnceOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnceOwnerUnbindDirectoryChange.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handlePathNewFilesPreviousFiles = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindDirectoryChange == null) {
				this.__cbOnceOwnerUnbindDirectoryChange = [];
			}
			this.__cbOnceOwnerUnbindDirectoryChange.push(null);
		}
		if(this.__cbOnceDirectoryChange == null) {
			this.__cbOnceDirectoryChange = [];
		}
		this.__cbOnceDirectoryChange.push(handlePathNewFilesPreviousFiles);
	}
	,offDirectoryChange: function(handlePathNewFilesPreviousFiles) {
		if(handlePathNewFilesPreviousFiles != null) {
			var index;
			var unbind;
			if(this.__cbOnDirectoryChange != null) {
				index = this.__cbOnDirectoryChange.indexOf(handlePathNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnDirectoryChange.splice(index,1);
					unbind = this.__cbOnOwnerUnbindDirectoryChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindDirectoryChange.splice(index,1);
				}
			}
			if(this.__cbOnceDirectoryChange != null) {
				index = this.__cbOnceDirectoryChange.indexOf(handlePathNewFilesPreviousFiles);
				if(index != -1) {
					this.__cbOnceDirectoryChange.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindDirectoryChange[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindDirectoryChange.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindDirectoryChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindDirectoryChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindDirectoryChange = null;
			}
			if(this.__cbOnceOwnerUnbindDirectoryChange != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindDirectoryChange.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindDirectoryChange[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindDirectoryChange = null;
			}
			this.__cbOnDirectoryChange = null;
			this.__cbOnceDirectoryChange = null;
		}
	}
	,listensDirectoryChange: function() {
		if(!(this.__cbOnDirectoryChange != null && this.__cbOnDirectoryChange.length > 0)) {
			if(this.__cbOnceDirectoryChange != null) {
				return this.__cbOnceDirectoryChange.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,updateInterval: null
	,watchedDirectories: null
	,startingToWatchDirectories: null
	,chokidarUpdatedFilesByWatchedDirectory: null
	,chokidarWatchers: null
	,watchDirectory: function(path) {
		var _gthis = this;
		if(this.watchedDirectories == null) {
			this.watchedDirectories = new haxe_ds_StringMap();
		}
		if(this.startingToWatchDirectories == null) {
			this.startingToWatchDirectories = new haxe_ds_StringMap();
		}
		if(!(!Object.prototype.hasOwnProperty.call(this.watchedDirectories.h,path) && !Object.prototype.hasOwnProperty.call(this.startingToWatchDirectories.h,path))) {
			ceramic_App.app.logger.error("!watchedDirectories.exists(path) && !startingToWatchDirectories.exists(path)" + (" (" + ("Directory is already being watched at path " + path) + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\runtime\\src\\ceramic\\WatchDirectory.hx", lineNumber : 57, className : "ceramic.WatchDirectory", methodName : "watchDirectory"});
			throw haxe_Exception.thrown("!watchedDirectories.exists(path) && !startingToWatchDirectories.exists(path)" + (" (" + ("Directory is already being watched at path " + path) + ")"));
		}
		this.startingToWatchDirectories.h[path] = true;
		ceramic_Runner.runInBackground(function() {
			var newFilesModificationTime = _gthis.computeFilesModificationTime(path);
			ceramic_Runner.runInMain(function() {
				if(!Object.prototype.hasOwnProperty.call(_gthis.startingToWatchDirectories.h,path)) {
					return;
				}
				var _this = _gthis.startingToWatchDirectories;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
				_gthis.watchedDirectories.h[path] = newFilesModificationTime;
				if(ceramic_WatchDirectory.chokidar != null) {
					if(_gthis.chokidarUpdatedFilesByWatchedDirectory == null) {
						_gthis.chokidarUpdatedFilesByWatchedDirectory = new haxe_ds_StringMap();
					}
					_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path] = [];
					_gthis.watchWithChokidar(path);
				}
			});
		});
	}
	,watchWithChokidar: function(path) {
		var _gthis = this;
		var watcher = ceramic_WatchDirectory.chokidar.watch(".",{ ignoreInitial : true, disableGlobbing : true, cwd : path});
		if(this.chokidarWatchers == null) {
			this.chokidarWatchers = new haxe_ds_StringMap();
		}
		if(Object.prototype.hasOwnProperty.call(this.chokidarWatchers.h,path)) {
			this.chokidarWatchers.h[path].close();
		}
		this.chokidarWatchers.h[path] = watcher;
		watcher.on("add",function(name) {
			var stats = ceramic_WatchDirectory.fs.statSync(ceramic_Path.join([path,name]));
			if(!stats.isDirectory()) {
				_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path].push({ status : 0, lastModified : stats.mtime.getTime() / 1000, name : name});
			}
		});
		watcher.on("change",function(name) {
			var stats = ceramic_WatchDirectory.fs.statSync(ceramic_Path.join([path,name]));
			if(!stats.isDirectory()) {
				_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path].push({ status : 1, lastModified : stats.mtime.getTime() / 1000, name : name});
			}
		});
		watcher.on("unlink",function(name) {
			_gthis.chokidarUpdatedFilesByWatchedDirectory.h[path].push({ status : 2, lastModified : -1, name : name});
		});
	}
	,stopWatchingDirectory: function(path) {
		if(this.chokidarWatchers != null) {
			if(Object.prototype.hasOwnProperty.call(this.chokidarWatchers.h,path)) {
				this.chokidarWatchers.h[path].close();
				var _this = this.chokidarWatchers;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
			}
		}
		if(this.watchedDirectories == null && Object.prototype.hasOwnProperty.call(this.watchedDirectories.h,path)) {
			var _this = this.watchedDirectories;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			if(this.startingToWatchDirectories != null && Object.prototype.hasOwnProperty.call(this.startingToWatchDirectories.h,path)) {
				var _this = this.startingToWatchDirectories;
				if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
					delete(_this.h[path]);
				}
			}
			return true;
		}
		if(this.startingToWatchDirectories != null && Object.prototype.hasOwnProperty.call(this.startingToWatchDirectories.h,path)) {
			var _this = this.startingToWatchDirectories;
			if(Object.prototype.hasOwnProperty.call(_this.h,path)) {
				delete(_this.h[path]);
			}
			return true;
		}
		return false;
	}
	,tick: function() {
		if(this.watchedDirectories != null) {
			var paths = [];
			var h = this.watchedDirectories.h;
			var path_h = h;
			var path_keys = Object.keys(h);
			var path_length = path_keys.length;
			var path_current = 0;
			while(path_current < path_length) {
				var path = path_keys[path_current++];
				paths.push(path);
			}
			var _g = 0;
			while(_g < paths.length) {
				var path = paths[_g];
				++_g;
				this.checkWatchedDirectory(path);
			}
		}
	}
	,checkWatchedDirectory: function(path) {
		var _gthis = this;
		if(ceramic_WatchDirectory.chokidar != null) {
			if(Object.prototype.hasOwnProperty.call(this.chokidarUpdatedFilesByWatchedDirectory.h,path)) {
				var list = this.chokidarUpdatedFilesByWatchedDirectory.h[path];
				if(list.length > 0) {
					var previousFilesModificationTime = this.watchedDirectories.h[path];
					var newFilesModificationTime = new haxe_ds_StringMap();
					var h = previousFilesModificationTime.h;
					var _g_h = h;
					var _g_keys = Object.keys(h);
					var _g_length = _g_keys.length;
					var _g_current = 0;
					while(_g_current < _g_length) {
						var key = _g_keys[_g_current++];
						var _g_key = key;
						var _g_value = _g_h[key];
						var key1 = _g_key;
						var value = _g_value;
						newFilesModificationTime.h[key1] = value;
					}
					var _g = 0;
					while(_g < list.length) {
						var info = list[_g];
						++_g;
						switch(info.status) {
						case 0:case 1:
							newFilesModificationTime.h[info.name] = info.lastModified;
							break;
						case 2:
							var key = info.name;
							if(Object.prototype.hasOwnProperty.call(newFilesModificationTime.h,key)) {
								delete(newFilesModificationTime.h[key]);
							}
							break;
						}
					}
					if(Object.prototype.hasOwnProperty.call(this.watchedDirectories.h,path)) {
						this.watchedDirectories.h[path] = newFilesModificationTime;
						this.emitDirectoryChange(path,newFilesModificationTime,previousFilesModificationTime);
					}
					list.splice(0,list.length);
				}
			}
		} else {
			var previousFilesModificationTime = this.watchedDirectories.h[path];
			ceramic_Runner.runInBackground(function() {
				var newFilesModificationTime = _gthis.computeFilesModificationTime(path);
				var didChange = false;
				var h = newFilesModificationTime.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var key = _g_keys[_g_current++];
					var _g_key = key;
					var _g_value = _g_h[key];
					var path1 = _g_key;
					var mtime = _g_value;
					if(!Object.prototype.hasOwnProperty.call(previousFilesModificationTime.h,path1)) {
						didChange = true;
						break;
					} else if(mtime > previousFilesModificationTime.h[path1]) {
						didChange = true;
						break;
					}
				}
				if(!didChange) {
					var h = previousFilesModificationTime.h;
					var _g_h = h;
					var _g_keys = Object.keys(h);
					var _g_length = _g_keys.length;
					var _g_current = 0;
					while(_g_current < _g_length) {
						var key = _g_keys[_g_current++];
						var _g_key = key;
						var _g_value = _g_h[key];
						var path1 = _g_key;
						var mtime = _g_value;
						if(!Object.prototype.hasOwnProperty.call(newFilesModificationTime.h,path1)) {
							didChange = true;
							break;
						}
					}
				}
				if(didChange) {
					ceramic_Runner.runInMain(function() {
						if(Object.prototype.hasOwnProperty.call(_gthis.watchedDirectories.h,path)) {
							_gthis.watchedDirectories.h[path] = newFilesModificationTime;
							_gthis.emitDirectoryChange(path,newFilesModificationTime,previousFilesModificationTime);
						}
					});
				}
			});
		}
	}
	,computeFilesModificationTime: function(path) {
		var result = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = ceramic_Files.getFlatDirectory(path);
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var value = ceramic_Files.getLastModified(ceramic_Path.join([path,file]));
			result.h[file] = value;
		}
		return result;
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offDirectoryChange();
	}
	,__class__: ceramic_WatchDirectory
});
var ceramic_macros_DefinesMacro = function() { };
$hxClasses["ceramic.macros.DefinesMacro"] = ceramic_macros_DefinesMacro;
ceramic_macros_DefinesMacro.__name__ = "ceramic.macros.DefinesMacro";
ceramic_macros_DefinesMacro._stringToBool = function(str) {
	if(str == null) {
		return false;
	}
	str = str.toLowerCase();
	if(str != "true") {
		return str == "1";
	} else {
		return true;
	}
};
var ceramic_macros_PluginsMacro = function() { };
$hxClasses["ceramic.macros.PluginsMacro"] = ceramic_macros_PluginsMacro;
ceramic_macros_PluginsMacro.__name__ = "ceramic.macros.PluginsMacro";
var clay_BackgroundQueue = function(checkInterval) {
	if(checkInterval == null) {
		checkInterval = 0.05;
	}
	this.pending = [];
	this.stop = false;
	this.runsInBackground = false;
	this.checkInterval = checkInterval;
};
$hxClasses["clay.BackgroundQueue"] = clay_BackgroundQueue;
clay_BackgroundQueue.__name__ = "clay.BackgroundQueue";
clay_BackgroundQueue.prototype = {
	checkInterval: null
	,runsInBackground: null
	,stop: null
	,pending: null
	,schedule: function(fn) {
		ceramic_App.app._onceImmediate(fn);
	}
	,destroy: function() {
		this.stop = true;
	}
	,__class__: clay_BackgroundQueue
};
var clay_Clay = function(configure,events) {
	this.windowInBackground = false;
	this.ready = false;
	this.freeze = false;
	this.nextTick = 0;
	this.immediateShutdown = false;
	this.timestamp = -1;
	this.hasShutdown = false;
	this.shuttingDown = false;
	clay_Clay.app = this;
	clay_Runner.init();
	this.extractAppId();
	this.config = this.defaultConfig();
	configure(this.config);
	this.events = events;
	this.io = new clay_web_WebIO(this);
	clay_Immediate.flush();
	this.assets = new clay_web_WebAssets(this);
	clay_Immediate.flush();
	this.audio = new clay_web_WebAudio(this);
	clay_Immediate.flush();
	this.input = new clay_Input(this);
	clay_Immediate.flush();
	this.runtime = new clay_web_WebRuntime(this);
	clay_Immediate.flush();
	this.backgroundQueue = new clay_BackgroundQueue();
	this.init();
};
$hxClasses["clay.Clay"] = clay_Clay;
clay_Clay.__name__ = "clay.Clay";
clay_Clay.prototype = {
	config: null
	,events: null
	,io: null
	,assets: null
	,audio: null
	,input: null
	,runtime: null
	,shuttingDown: null
	,hasShutdown: null
	,timestamp: null
	,appId: null
	,screenWidth: null
	,screenHeight: null
	,screenDensity: null
	,backgroundQueue: null
	,immediateShutdown: null
	,nextTick: null
	,freeze: null
	,set_freeze: function(freeze) {
		this.freeze = freeze;
		if(freeze) {
			this.events.freeze();
			this.audio.suspend();
		} else {
			this.events.unfreeze();
			this.audio.resume();
		}
		return freeze;
	}
	,ready: null
	,init: function() {
		clay_Log.debug("Clay / init",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\Clay.hx", lineNumber : 160, className : "clay.Clay", methodName : "init"});
		this.io.init();
		clay_Immediate.flush();
		this.audio.init();
		clay_Immediate.flush();
		this.input.init();
		clay_Immediate.flush();
		this.runtime.init();
		clay_Immediate.flush();
		clay_Log.debug("Clay / ready",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\Clay.hx", lineNumber : 174, className : "clay.Clay", methodName : "init"});
		this.runtime.ready();
		clay_Immediate.flush();
		this.audio.ready();
		clay_Immediate.flush();
		this.timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		this.ready = true;
		this.nextTick = this.timestamp;
		this.updateScreen();
		this.events.ready();
		var shouldExit = this.runtime.run();
		if(shouldExit && !(this.hasShutdown || this.shuttingDown)) {
			this.shutdown();
		}
	}
	,shutdown: function() {
		if(this.shuttingDown) {
			clay_Log.debug("Clay / shutdown() called again, already shutting down - ignoring",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\Clay.hx", lineNumber : 199, className : "clay.Clay", methodName : "shutdown"});
			return;
		}
		if(this.hasShutdown) {
			throw haxe_Exception.thrown("Clay / calling shutdown() more than once is disallowed");
		}
		this.shuttingDown = true;
		this.io.shutdown();
		this.audio.shutdown();
		this.input.shutdown();
		this.runtime.shutdown(this.immediateShutdown);
		clay_Log.debug("Clay / shutdown",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\Clay.hx", lineNumber : 215, className : "clay.Clay", methodName : "shutdown"});
		this.hasShutdown = true;
	}
	,emitQuit: function() {
		this.shutdown();
	}
	,shouldUpdate: function(newTimestamp) {
		if(this.config.updateRate > 0) {
			if(newTimestamp < this.nextTick) {
				return false;
			}
			while(this.nextTick <= newTimestamp) this.nextTick += this.config.updateRate;
		} else {
			this.nextTick = newTimestamp;
		}
		return true;
	}
	,emitTick: function(newTimestamp) {
		if(this.freeze) {
			return;
		}
		clay_Runner.tick();
		clay_Immediate.flush();
		this.updateScreen();
		if(!this.shuttingDown && this.ready) {
			var delta = newTimestamp - this.timestamp;
			this.timestamp = newTimestamp;
			this.audio.tick(delta);
			this.events.tick(delta);
		}
	}
	,emitRender: function() {
		if(this.freeze) {
			return;
		}
		if(!this.shuttingDown && this.ready) {
			this.events.render();
		}
	}
	,emitWindowEvent: function(type,timestamp,windowId,x,y) {
		this.events.windowEvent(type,timestamp,windowId,x,y);
	}
	,emitAppEvent: function(type) {
		this.events.appEvent(type);
	}
	,windowInBackground: null
	,extractAppId: function() {
		var rawAppId = "\"project-sample\"";
		if(StringTools.startsWith(rawAppId,"\"")) {
			this.appId = JSON.parse(rawAppId);
		} else {
			this.appId = rawAppId;
		}
	}
	,defaultConfig: function() {
		var _g = clay_web_WebRuntime.defaultConfig();
		return new clay_Config(this.defaultWindowConfig(),this.defaultRenderConfig(),_g,null);
	}
	,defaultWindowConfig: function() {
		var $window = new clay_WindowConfig(false,false,true,false,536805376,536805376,960,640,"clay app",false,0.066666666666666666);
		return $window;
	}
	,defaultRenderConfig: function() {
		return new clay_RenderConfig(0,0,0,8,8,8,8,new clay_graphics_Color(0,0,0,1),new clay_RenderConfigWebGL(1,null,null,null,null,null,null,null,null));
	}
	,defaultRuntimeConfig: function() {
		return new clay_web_WebConfig(null,null,null,null,null,null,null);
	}
	,copyWindowConfig: function(config) {
		return new clay_WindowConfig(config.fullscreen,config.trueFullscreen,config.resizable,config.borderless,config.x,config.y,config.width,config.height,"" + config.title,config.noInput,config.backgroundSleep);
	}
	,copyRenderConfig: function(config) {
		return new clay_RenderConfig(config.depth,config.stencil,config.antialiasing,config.redBits,config.greenBits,config.blueBits,config.alphaBits,new clay_graphics_Color(config.defaultClear.r,config.defaultClear.g,config.defaultClear.b,config.defaultClear.a),new clay_RenderConfigWebGL(config.webgl.version,null,null,null,null,null,null,null,null));
	}
	,updateScreen: function() {
		this.screenDensity = clay_Clay.app.runtime.windowDevicePixelRatio();
		var _this = clay_Clay.app.runtime;
		this.screenWidth = Math.round(Math.round(_this.windowW * _this.windowDevicePixelRatio()) / this.screenDensity);
		var _this = clay_Clay.app.runtime;
		this.screenHeight = Math.round(Math.round(_this.windowH * _this.windowDevicePixelRatio()) / this.screenDensity);
	}
	,__class__: clay_Clay
	,__properties__: {set_freeze:"set_freeze"}
};
var clay_RenderConfig = function(depth,stencil,antialiasing,redBits,greenBits,blueBits,alphaBits,defaultClear,webgl) {
	this.webgl = null;
	this.defaultClear = new clay_graphics_Color(0,0,0,1);
	this.alphaBits = 8;
	this.blueBits = 8;
	this.greenBits = 8;
	this.redBits = 8;
	this.antialiasing = 0;
	this.stencil = 0;
	this.depth = 0;
	if(depth != null) {
		this.depth = depth;
	}
	if(stencil != null) {
		this.stencil = stencil;
	}
	if(antialiasing != null) {
		this.antialiasing = antialiasing;
	}
	if(redBits != null) {
		this.redBits = redBits;
	}
	if(greenBits != null) {
		this.greenBits = greenBits;
	}
	if(blueBits != null) {
		this.blueBits = blueBits;
	}
	if(alphaBits != null) {
		this.alphaBits = alphaBits;
	}
	if(defaultClear != null) {
		this.defaultClear = defaultClear;
	}
	if(webgl != null) {
		this.webgl = webgl;
	}
};
$hxClasses["clay.RenderConfig"] = clay_RenderConfig;
clay_RenderConfig.__name__ = "clay.RenderConfig";
clay_RenderConfig.prototype = {
	depth: null
	,stencil: null
	,antialiasing: null
	,redBits: null
	,greenBits: null
	,blueBits: null
	,alphaBits: null
	,defaultClear: null
	,webgl: null
	,__class__: clay_RenderConfig
};
var clay_RenderConfigWebGL = function(version,alpha,depth,stencil,antialias,premultipliedAlpha,preserveDrawingBuffer,preferLowPowerToHighPerformance,failIfMajorPerformanceCaveat) {
	this.failIfMajorPerformanceCaveat = false;
	this.preferLowPowerToHighPerformance = false;
	this.preserveDrawingBuffer = false;
	this.premultipliedAlpha = false;
	this.antialias = true;
	this.stencil = false;
	this.depth = true;
	this.alpha = false;
	this.version = 1;
	if(version != null) {
		this.version = version;
	}
	if(alpha != null) {
		this.alpha = alpha;
	}
	if(depth != null) {
		this.depth = depth;
	}
	if(stencil != null) {
		this.stencil = stencil;
	}
	if(antialias != null) {
		this.antialias = antialias;
	}
	if(premultipliedAlpha != null) {
		this.premultipliedAlpha = premultipliedAlpha;
	}
	if(preserveDrawingBuffer != null) {
		this.preserveDrawingBuffer = preserveDrawingBuffer;
	}
	if(preferLowPowerToHighPerformance != null) {
		this.preferLowPowerToHighPerformance = preferLowPowerToHighPerformance;
	}
	if(failIfMajorPerformanceCaveat != null) {
		this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;
	}
};
$hxClasses["clay.RenderConfigWebGL"] = clay_RenderConfigWebGL;
clay_RenderConfigWebGL.__name__ = "clay.RenderConfigWebGL";
clay_RenderConfigWebGL.prototype = {
	version: null
	,alpha: null
	,depth: null
	,stencil: null
	,antialias: null
	,premultipliedAlpha: null
	,preserveDrawingBuffer: null
	,preferLowPowerToHighPerformance: null
	,failIfMajorPerformanceCaveat: null
	,__class__: clay_RenderConfigWebGL
};
var clay_WindowConfig = function(fullscreen,trueFullscreen,resizable,borderless,x,y,width,height,title,noInput,backgroundSleep) {
	this.backgroundSleep = 0.066666666666666666;
	this.noInput = false;
	this.title = null;
	this.height = 640;
	this.width = 960;
	this.y = 0;
	this.x = 0;
	this.borderless = false;
	this.resizable = true;
	this.trueFullscreen = false;
	this.fullscreen = false;
	if(fullscreen != null) {
		this.fullscreen = fullscreen;
	}
	if(trueFullscreen != null) {
		this.trueFullscreen = trueFullscreen;
	}
	if(resizable != null) {
		this.resizable = resizable;
	}
	if(borderless != null) {
		this.borderless = borderless;
	}
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(title != null) {
		this.title = title;
	}
	if(noInput != null) {
		this.noInput = noInput;
	}
	if(backgroundSleep != null) {
		this.backgroundSleep = backgroundSleep;
	}
};
$hxClasses["clay.WindowConfig"] = clay_WindowConfig;
clay_WindowConfig.__name__ = "clay.WindowConfig";
clay_WindowConfig.prototype = {
	fullscreen: null
	,trueFullscreen: null
	,resizable: null
	,borderless: null
	,x: null
	,y: null
	,width: null
	,height: null
	,title: null
	,noInput: null
	,backgroundSleep: null
	,__class__: clay_WindowConfig
};
var clay_Config = function($window,render,runtime,updateRate) {
	this.updateRate = 0;
	this.runtime = null;
	this.render = null;
	this.window = null;
	if($window != null) {
		this.window = $window;
	}
	if(render != null) {
		this.render = render;
	}
	if(runtime != null) {
		this.runtime = runtime;
	}
	if(updateRate != null) {
		this.updateRate = updateRate;
	}
};
$hxClasses["clay.Config"] = clay_Config;
clay_Config.__name__ = "clay.Config";
clay_Config.prototype = {
	window: null
	,render: null
	,runtime: null
	,updateRate: null
	,__class__: clay_Config
};
var clay_Extensions = function() { };
$hxClasses["clay.Extensions"] = clay_Extensions;
clay_Extensions.__name__ = "clay.Extensions";
clay_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
clay_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
var clay_Image = function(width,height,widthActual,heightActual,bitsPerPixel,sourceBitsPerPixel,pixels) {
	this.pixels = null;
	this.sourceBitsPerPixel = 4;
	this.bitsPerPixel = 4;
	this.heightActual = 0;
	this.widthActual = 0;
	this.height = 0;
	this.width = 0;
	if(width != null) {
		this.width = width;
	}
	if(height != null) {
		this.height = height;
	}
	if(widthActual != null) {
		this.widthActual = widthActual;
	}
	if(heightActual != null) {
		this.heightActual = heightActual;
	}
	if(bitsPerPixel != null) {
		this.bitsPerPixel = bitsPerPixel;
	}
	if(sourceBitsPerPixel != null) {
		this.sourceBitsPerPixel = sourceBitsPerPixel;
	}
	if(pixels != null) {
		this.pixels = pixels;
	}
};
$hxClasses["clay.Image"] = clay_Image;
clay_Image.__name__ = "clay.Image";
clay_Image.prototype = {
	width: null
	,height: null
	,widthActual: null
	,heightActual: null
	,bitsPerPixel: null
	,sourceBitsPerPixel: null
	,pixels: null
	,premultiplyAlpha: function() {
		if(this.bitsPerPixel == 4) {
			clay_PremultiplyAlpha.premultiplyAlpha(this.pixels);
		} else {
			clay_Log.warning("Can only premultiply alpha on images with 4 bits per pixels (RGBA)",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\Image.hx", lineNumber : 29, className : "clay.Image", methodName : "premultiplyAlpha"});
		}
	}
	,reversePremultiplyAlpha: function() {
		if(this.bitsPerPixel == 4) {
			clay_PremultiplyAlpha.reversePremultiplyAlpha(this.pixels);
		} else {
			clay_Log.warning("Can only reverse premultiply alpha on images with 4 bits per pixels (RGBA)",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\Image.hx", lineNumber : 40, className : "clay.Image", methodName : "reversePremultiplyAlpha"});
		}
	}
	,__class__: clay_Image
};
var clay_Immediate = function() { };
$hxClasses["clay.Immediate"] = clay_Immediate;
clay_Immediate.__name__ = "clay.Immediate";
clay_Immediate.push = function(handleImmediate) {
	if(handleImmediate == null) {
		throw haxe_Exception.thrown("Immediate callback should not be null!");
	}
	if(clay_Immediate.immediateCallbacksLen < clay_Immediate.immediateCallbacksCapacity) {
		clay_Immediate.immediateCallbacks[clay_Immediate.immediateCallbacksLen] = handleImmediate;
		clay_Immediate.immediateCallbacksLen++;
	} else {
		clay_Immediate.immediateCallbacks[clay_Immediate.immediateCallbacksLen++] = handleImmediate;
		clay_Immediate.immediateCallbacksCapacity++;
	}
};
clay_Immediate.flush = function() {
	var didFlush = false;
	while(clay_Immediate.immediateCallbacksLen > 0) {
		didFlush = true;
		var pool = ceramic_ArrayPool.pool(clay_Immediate.immediateCallbacksLen);
		var callbacks = pool.get();
		var len = clay_Immediate.immediateCallbacksLen;
		clay_Immediate.immediateCallbacksLen = 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			callbacks.vector[i] = clay_Immediate.immediateCallbacks[i];
			clay_Immediate.immediateCallbacks[i] = null;
		}
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var cb = callbacks.vector[i1];
			cb();
		}
		pool.release(callbacks);
	}
	return didFlush;
};
var clay_Input = function(app) {
	this.app = app;
	this.modState = new clay_ModState();
	this.modState.none = true;
};
$hxClasses["clay.Input"] = clay_Input;
clay_Input.__name__ = "clay.Input";
clay_Input.prototype = {
	app: null
	,modState: null
	,init: function() {
	}
	,shutdown: function() {
	}
	,emitKeyDown: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.app.events.keyDown(keyCode,scanCode,repeat,mod,timestamp,windowId);
	}
	,emitKeyUp: function(keyCode,scanCode,repeat,mod,timestamp,windowId) {
		this.app.events.keyUp(keyCode,scanCode,repeat,mod,timestamp,windowId);
	}
	,emitText: function(text,start,length,type,timestamp,windowId) {
		this.app.events.text(text,start,length,type,timestamp,windowId);
	}
	,emitMouseMove: function(x,y,xrel,yrel,timestamp,windowId) {
		this.app.events.mouseMove(x,y,xrel,yrel,timestamp,windowId);
	}
	,emitMouseDown: function(x,y,button,timestamp,windowId) {
		this.app.events.mouseDown(x,y,button,timestamp,windowId);
	}
	,emitMouseUp: function(x,y,button,timestamp,windowId) {
		this.app.events.mouseUp(x,y,button,timestamp,windowId);
	}
	,emitMouseWheel: function(x,y,timestamp,windowId) {
		this.app.events.mouseWheel(x,y,timestamp,windowId);
	}
	,emitTouchDown: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchDown(x,y,dx,dy,touchId,timestamp);
	}
	,emitTouchUp: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchUp(x,y,dx,dy,touchId,timestamp);
	}
	,emitTouchMove: function(x,y,dx,dy,touchId,timestamp) {
		this.app.events.touchMove(x,y,dx,dy,touchId,timestamp);
	}
	,emitGamepadAxis: function(gamepad,axis,value,timestamp) {
		this.app.events.gamepadAxis(gamepad,axis,value,timestamp);
	}
	,emitGamepadDown: function(gamepad,button,value,timestamp) {
		this.app.events.gamepadDown(gamepad,button,value,timestamp);
	}
	,emitGamepadUp: function(gamepad,button,value,timestamp) {
		this.app.events.gamepadUp(gamepad,button,value,timestamp);
	}
	,emitGamepadGyro: function(gamepad,dx,dy,dz,timestamp) {
		this.app.events.gamepadGyro(gamepad,dx,dy,dz,timestamp);
	}
	,emitGamepadDevice: function(gamepad,name,type,timestamp) {
		this.app.events.gamepadDevice(gamepad,name,type,timestamp);
	}
	,__class__: clay_Input
};
var clay_KeyCode = {};
clay_KeyCode.$name = function(keyCode) {
	if((keyCode & clay_ScanCode.MASK) != 0) {
		return clay_ScanCode.$name(keyCode & ~clay_ScanCode.MASK);
	}
	switch(keyCode) {
	case 8:
		return clay_ScanCode.$name(42);
	case 9:
		return clay_ScanCode.$name(43);
	case 13:
		return clay_ScanCode.$name(40);
	case 27:
		return clay_ScanCode.$name(41);
	case 32:
		return clay_ScanCode.$name(44);
	case 97:
		return clay_ScanCode.$name(4);
	case 98:
		return clay_ScanCode.$name(5);
	case 99:
		return clay_ScanCode.$name(6);
	case 100:
		return clay_ScanCode.$name(7);
	case 101:
		return clay_ScanCode.$name(8);
	case 102:
		return clay_ScanCode.$name(9);
	case 103:
		return clay_ScanCode.$name(10);
	case 104:
		return clay_ScanCode.$name(11);
	case 105:
		return clay_ScanCode.$name(12);
	case 106:
		return clay_ScanCode.$name(13);
	case 107:
		return clay_ScanCode.$name(14);
	case 108:
		return clay_ScanCode.$name(15);
	case 109:
		return clay_ScanCode.$name(16);
	case 110:
		return clay_ScanCode.$name(17);
	case 111:
		return clay_ScanCode.$name(18);
	case 112:
		return clay_ScanCode.$name(19);
	case 113:
		return clay_ScanCode.$name(20);
	case 114:
		return clay_ScanCode.$name(21);
	case 115:
		return clay_ScanCode.$name(22);
	case 116:
		return clay_ScanCode.$name(23);
	case 117:
		return clay_ScanCode.$name(24);
	case 118:
		return clay_ScanCode.$name(25);
	case 119:
		return clay_ScanCode.$name(26);
	case 120:
		return clay_ScanCode.$name(27);
	case 121:
		return clay_ScanCode.$name(28);
	case 122:
		return clay_ScanCode.$name(29);
	case 127:
		return clay_ScanCode.$name(76);
	default:
		return String.fromCodePoint(keyCode);
	}
};
clay_KeyCode.toScanCode = function(keycode) {
	if((keycode & clay_ScanCode.MASK) != 0) {
		return keycode & ~clay_ScanCode.MASK;
	}
	switch(keycode) {
	case 8:
		return 42;
	case 9:
		return 43;
	case 13:
		return 40;
	case 27:
		return 41;
	case 32:
		return 44;
	case 47:
		return 56;
	case 48:
		return 39;
	case 49:
		return 30;
	case 50:
		return 31;
	case 51:
		return 32;
	case 52:
		return 33;
	case 53:
		return 34;
	case 54:
		return 35;
	case 55:
		return 36;
	case 56:
		return 37;
	case 57:
		return 38;
	case 59:
		return 51;
	case 61:
		return 46;
	case 91:
		return 47;
	case 92:
		return 49;
	case 93:
		return 48;
	case 96:
		return 53;
	case 97:
		return 4;
	case 98:
		return 5;
	case 99:
		return 6;
	case 100:
		return 7;
	case 101:
		return 8;
	case 102:
		return 9;
	case 103:
		return 10;
	case 104:
		return 11;
	case 105:
		return 12;
	case 106:
		return 13;
	case 107:
		return 14;
	case 108:
		return 15;
	case 109:
		return 16;
	case 110:
		return 17;
	case 111:
		return 18;
	case 112:
		return 19;
	case 113:
		return 20;
	case 114:
		return 21;
	case 115:
		return 22;
	case 116:
		return 23;
	case 117:
		return 24;
	case 118:
		return 25;
	case 119:
		return 26;
	case 120:
		return 27;
	case 121:
		return 28;
	case 122:
		return 29;
	}
	return 0;
};
clay_KeyCode.toString = function(this1) {
	return "KeyCode(" + this1 + " " + clay_KeyCode.$name(this1) + ")";
};
var clay_Log = function() { };
$hxClasses["clay.Log"] = clay_Log;
clay_Log.__name__ = "clay.Log";
clay_Log.debug = function(message,pos) {
};
clay_Log.info = function(message,pos) {
	haxe_Log.trace("[info] " + message,pos);
};
clay_Log.warning = function(message,pos) {
	haxe_Log.trace("[warning] " + message,pos);
};
clay_Log.error = function(message,pos) {
	haxe_Log.trace("[error] " + message,pos);
};
clay_Log.success = function(message,pos) {
	haxe_Log.trace("[success] " + message,pos);
};
var clay_Macros = function() { };
$hxClasses["clay.Macros"] = clay_Macros;
clay_Macros.__name__ = "clay.Macros";
var clay_PremultiplyAlpha = function() { };
$hxClasses["clay.PremultiplyAlpha"] = clay_PremultiplyAlpha;
clay_PremultiplyAlpha.__name__ = "clay.PremultiplyAlpha";
clay_PremultiplyAlpha.premultiplyAlpha = function(pixels) {
	var count = pixels.length;
	var index = 0;
	while(index < count) {
		var r = pixels[index];
		var g = pixels[index + 1];
		var b = pixels[index + 2];
		var a = pixels[index + 3] / 255.0;
		pixels[index] = r * a | 0;
		pixels[index + 1] = g * a | 0;
		pixels[index + 2] = b * a | 0;
		index += 4;
	}
};
clay_PremultiplyAlpha.reversePremultiplyAlpha = function(pixels) {
	var count = pixels.length;
	var index = 0;
	while(index < count) {
		var r = pixels[index];
		var g = pixels[index + 1];
		var b = pixels[index + 2];
		var a = pixels[index + 3] / 255.0;
		if(a > 0) {
			pixels[index] = r / a | 0;
			pixels[index + 1] = g / a | 0;
			pixels[index + 2] = b / a | 0;
		}
		index += 4;
	}
};
var clay_Runner = function() { };
$hxClasses["clay.Runner"] = clay_Runner;
clay_Runner.__name__ = "clay.Runner";
clay_Runner.currentIsMainThread = function() {
	return true;
};
clay_Runner.init = function() {
};
clay_Runner.tick = function() {
};
clay_Runner.isEmulatingBackgroundWithMain = function() {
	return true;
};
clay_Runner.runInMain = function(_fn) {
	clay_Immediate.push(_fn);
};
clay_Runner.runInBackground = function(fn) {
	clay_Immediate.push(fn);
};
var clay_ScanCode = {};
clay_ScanCode.$name = function(scanCode) {
	var res = null;
	if(scanCode >= 0 && scanCode < clay_ScanCode.scanCodeNames.length) {
		res = clay_ScanCode.scanCodeNames[scanCode];
	}
	if(res != null) {
		return res;
	} else {
		return "";
	}
};
clay_ScanCode.toString = function(this1) {
	return "ScanCode(" + this1 + " " + clay_ScanCode.$name(this1) + ")";
};
var clay_GamepadDeviceEventType = {};
clay_GamepadDeviceEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "DEVICE_ADDED";
	case 2:
		return "DEVICE_REMOVED";
	case 3:
		return "DEVICE_REMAPPED";
	default:
		return "" + this1;
	}
};
var clay_ModState = function() {
	this.meta = false;
	this.alt = false;
	this.shift = false;
	this.ctrl = false;
	this.mode = false;
	this.caps = false;
	this.num = false;
	this.rmeta = false;
	this.lmeta = false;
	this.ralt = false;
	this.lalt = false;
	this.rctrl = false;
	this.lctrl = false;
	this.rshift = false;
	this.lshift = false;
	this.none = false;
};
$hxClasses["clay.ModState"] = clay_ModState;
clay_ModState.__name__ = "clay.ModState";
clay_ModState.prototype = {
	none: null
	,lshift: null
	,rshift: null
	,lctrl: null
	,rctrl: null
	,lalt: null
	,ralt: null
	,lmeta: null
	,rmeta: null
	,num: null
	,caps: null
	,mode: null
	,ctrl: null
	,shift: null
	,alt: null
	,meta: null
	,toString: function() {
		var s = "{ \"ModState\":true ";
		if(this.none) {
			return s + ", \"none\":true }";
		}
		if(this.lshift) {
			s += ", \"lshift\":true";
		}
		if(this.rshift) {
			s += ", \"rshift\":true";
		}
		if(this.lctrl) {
			s += ", \"lctrl\":true";
		}
		if(this.rctrl) {
			s += ", \"rctrl\":true";
		}
		if(this.lalt) {
			s += ", \"lalt\":true";
		}
		if(this.ralt) {
			s += ", \"ralt\":true";
		}
		if(this.lmeta) {
			s += ", \"lmeta\":true";
		}
		if(this.rmeta) {
			s += ", \"rmeta\":true";
		}
		if(this.num) {
			s += ", \"num\":true";
		}
		if(this.caps) {
			s += ", \"caps\":true";
		}
		if(this.mode) {
			s += ", \"mode\":true";
		}
		if(this.ctrl) {
			s += ", \"ctrl\":true";
		}
		if(this.shift) {
			s += ", \"shift\":true";
		}
		if(this.alt) {
			s += ", \"alt\":true";
		}
		if(this.meta) {
			s += ", \"meta\":true";
		}
		s += "}";
		return s;
	}
	,__class__: clay_ModState
};
var clay_TextEventType = {};
clay_TextEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "EDIT";
	case 2:
		return "INPUT";
	default:
		return "" + this1;
	}
};
var clay_WindowEventType = {};
clay_WindowEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 1:
		return "SHOWN";
	case 2:
		return "HIDDEN";
	case 3:
		return "EXPOSED";
	case 4:
		return "MOVED";
	case 5:
		return "RESIZED";
	case 6:
		return "SIZE_CHANGED";
	case 7:
		return "MINIMIZED";
	case 8:
		return "MAXIMIZED";
	case 9:
		return "RESTORED";
	case 10:
		return "ENTER";
	case 11:
		return "LEAVE";
	case 12:
		return "FOCUS_GAINED";
	case 13:
		return "FOCUS_LOST";
	case 14:
		return "CLOSE";
	case 15:
		return "ENTER_FULLSCREEN";
	case 16:
		return "EXIT_FULLSCREEN";
	default:
		return "" + this1;
	}
};
var clay_AppEventType = {};
clay_AppEventType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "UNKNOWN";
	case 11:
		return "TERMINATING";
	case 12:
		return "LOW_MEMORY";
	case 13:
		return "WILL_ENTER_BACKGROUND";
	case 14:
		return "DID_ENTER_BACKGROUND";
	case 15:
		return "WILL_ENTER_FOREGROUND";
	case 16:
		return "DID_ENTER_FOREGROUND";
	default:
		return "" + this1;
	}
};
var clay_Utils = function() { };
$hxClasses["clay.Utils"] = clay_Utils;
clay_Utils.__name__ = "clay.Utils";
clay_Utils.uniqueId = function() {
	switch(clay_Utils._nextUniqueIntCursor) {
	case 0:
		clay_Utils._nextUniqueInt0 = (clay_Utils._nextUniqueInt0 + 1) % 2147483647;
		break;
	case 1:
		clay_Utils._nextUniqueInt1 = (clay_Utils._nextUniqueInt1 + 1) % 2147483647;
		break;
	case 2:
		clay_Utils._nextUniqueInt2 = (clay_Utils._nextUniqueInt2 + 1) % 2147483647;
		break;
	case 3:
		clay_Utils._nextUniqueInt3 = (clay_Utils._nextUniqueInt3 + 1) % 2147483647;
		break;
	}
	clay_Utils._nextUniqueIntCursor = (clay_Utils._nextUniqueIntCursor + 1) % 4;
	var val = clay_Utils._nextUniqueInt0;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result1;
		if(q > 0) {
			var result2 = clay_Utils.base62Id(q);
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result1 = result2 + result3;
		} else {
			var result2;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result2 = String.fromCodePoint(ascii);
			} else {
				result2 = Std.string(r1).charAt(0);
			}
			result1 = Std.string(result2);
		}
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result = result1 + result2;
	} else {
		var result1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result1 = String.fromCodePoint(ascii);
		} else {
			result1 = Std.string(r).charAt(0);
		}
		result = Std.string(result1);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result1;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result2;
		if(q > 0) {
			var result3 = clay_Utils.base62Id(q);
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result2 = result3 + result4;
		} else {
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result2 = Std.string(result3);
		}
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result1 = result2 + result3;
	} else {
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result1 = Std.string(result2);
	}
	var val = clay_Utils._nextUniqueInt1;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result2;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result3;
		if(q > 0) {
			var result4 = clay_Utils.base62Id(q);
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result3 = result4 + result5;
		} else {
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result3 = Std.string(result4);
		}
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result2 = result3 + result4;
	} else {
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result2 = Std.string(result3);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result3;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result4;
		if(q > 0) {
			var result5 = clay_Utils.base62Id(q);
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result4 = result5 + result6;
		} else {
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result4 = Std.string(result5);
		}
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result3 = result4 + result5;
	} else {
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result3 = Std.string(result4);
	}
	var val = clay_Utils._nextUniqueInt2;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result4;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result5;
		if(q > 0) {
			var result6 = clay_Utils.base62Id(q);
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result5 = result6 + result7;
		} else {
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result5 = Std.string(result6);
		}
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result4 = result5 + result6;
	} else {
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result4 = Std.string(result5);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result5;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result6;
		if(q > 0) {
			var result7 = clay_Utils.base62Id(q);
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result6 = result7 + result8;
		} else {
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result6 = Std.string(result7);
		}
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result5 = result6 + result7;
	} else {
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result5 = Std.string(result6);
	}
	var val = clay_Utils._nextUniqueInt3;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result6;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result7;
		if(q > 0) {
			var result8 = clay_Utils.base62Id(q);
			var result9;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result9 = String.fromCodePoint(ascii);
			} else {
				result9 = Std.string(r1).charAt(0);
			}
			result7 = result8 + result9;
		} else {
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result7 = Std.string(result8);
		}
		var result8;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result8 = String.fromCodePoint(ascii);
		} else {
			result8 = Std.string(r).charAt(0);
		}
		result6 = result7 + result8;
	} else {
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result6 = Std.string(result7);
	}
	var result7 = result + "-" + result1 + "-" + result2 + "-" + result3 + "-" + result4 + "-" + result5 + "-" + result6;
	return result7;
};
clay_Utils.base62Id = function(val) {
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	if(q > 0) {
		var tmp = clay_Utils.base62Id(q);
		var tmp1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp1 = String.fromCodePoint(ascii);
		} else {
			tmp1 = (r == null ? "null" : "" + r).charAt(0);
		}
		return tmp + tmp1;
	} else {
		var tmp;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp = String.fromCodePoint(ascii);
		} else {
			tmp = (r == null ? "null" : "" + r).charAt(0);
		}
		return Std.string(tmp);
	}
};
var clay_audio_AudioDataOptions = function(id,rate,length,duration,channels,bitsPerSample,format,samples,isStream) {
	this.isStream = null;
	this.samples = null;
	this.format = null;
	this.bitsPerSample = null;
	this.channels = null;
	this.duration = null;
	this.length = null;
	this.rate = null;
	this.id = null;
	if(id != null) {
		this.id = id;
	}
	if(rate != null) {
		this.rate = rate;
	}
	if(length != null) {
		this.length = length;
	}
	if(duration != null) {
		this.duration = duration;
	}
	if(channels != null) {
		this.channels = channels;
	}
	if(bitsPerSample != null) {
		this.bitsPerSample = bitsPerSample;
	}
	if(format != null) {
		this.format = format;
	}
	if(samples != null) {
		this.samples = samples;
	}
	if(isStream != null) {
		this.isStream = isStream;
	}
};
$hxClasses["clay.audio.AudioDataOptions"] = clay_audio_AudioDataOptions;
clay_audio_AudioDataOptions.__name__ = "clay.audio.AudioDataOptions";
clay_audio_AudioDataOptions.prototype = {
	id: null
	,rate: null
	,length: null
	,duration: null
	,channels: null
	,bitsPerSample: null
	,format: null
	,samples: null
	,isStream: null
	,__class__: clay_audio_AudioDataOptions
};
var clay_audio_AudioData = function(app,options) {
	this.destroyed = false;
	this.isStream = false;
	this.format = 0;
	this.bitsPerSample = 16;
	this.channels = 1;
	this.duration = 0;
	this.length = 0;
	this.rate = 44100;
	this.id = "AudioData";
	this.app = app;
	if(options.id != null) {
		this.id = options.id;
	}
	if(options.rate != null) {
		this.rate = options.rate;
	}
	if(options.length != null) {
		this.length = options.length;
	}
	if(options.format != null) {
		this.format = options.format;
	}
	if(options.channels != null) {
		this.channels = options.channels;
	}
	if(options.bitsPerSample != null) {
		this.bitsPerSample = options.bitsPerSample;
	}
	if(options.isStream != null) {
		this.isStream = options.isStream;
	}
	if(options.samples != null) {
		this.samples = options.samples;
	}
	if(options.duration != null) {
		this.duration = options.duration;
	}
	options = null;
};
$hxClasses["clay.audio.AudioData"] = clay_audio_AudioData;
clay_audio_AudioData.__name__ = "clay.audio.AudioData";
clay_audio_AudioData.prototype = {
	app: null
	,id: null
	,samples: null
	,rate: null
	,length: null
	,duration: null
	,channels: null
	,bitsPerSample: null
	,format: null
	,isStream: null
	,destroyed: null
	,destroy: function() {
		if(this.destroyed) {
			return;
		}
		clay_Log.debug("Audio / destroy AudioData `" + this.id + "`",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\audio\\AudioData.hx", lineNumber : 102, className : "clay.audio.AudioData", methodName : "destroy"});
		this.destroyed = true;
		this.id = null;
		this.samples = null;
	}
	,seek: function(to) {
		return false;
	}
	,portion: function(into,start,len,intoResult) {
		return intoResult;
	}
	,toString: function() {
		var tmp = "{ \"AudioData\":true, \"id\":" + this.id + ", \"rate\":" + this.rate + ", \"length\":" + this.length + ", \"channels\":" + this.channels + ", \"format\":\"";
		var tmp1;
		if(this.format == null) {
			tmp1 = "null";
		} else {
			var this1 = this.format;
			if(this1 == null) {
				tmp1 = "" + this1;
			} else {
				switch(this1) {
				case 0:
					tmp1 = "UNKNOWN";
					break;
				case 1:
					tmp1 = "CUSTOM";
					break;
				case 2:
					tmp1 = "OGG";
					break;
				case 3:
					tmp1 = "WAV";
					break;
				case 4:
					tmp1 = "PCM";
					break;
				case 5:
					tmp1 = "MP3";
					break;
				case 6:
					tmp1 = "FLAC";
					break;
				default:
					tmp1 = "" + this1;
				}
			}
		}
		return tmp + tmp1 + "\", \"isStream\":" + Std.string(this.isStream) + " }";
	}
	,__class__: clay_audio_AudioData
};
var clay_audio_AudioEvent = {};
clay_audio_AudioEvent.toString = function(this1) {
	switch(this1) {
	case 0:
		return "END";
	case 1:
		return "DESTROYED";
	case 2:
		return "DESTROYED_SOURCE";
	default:
		return "" + this1;
	}
};
var clay_audio_AudioFormat = {};
clay_audio_AudioFormat.toString = function(this1) {
	if(this1 == null) {
		return "" + this1;
	} else {
		switch(this1) {
		case 0:
			return "UNKNOWN";
		case 1:
			return "CUSTOM";
		case 2:
			return "OGG";
		case 3:
			return "WAV";
		case 4:
			return "PCM";
		case 5:
			return "MP3";
		case 6:
			return "FLAC";
		default:
			return "" + this1;
		}
	}
};
clay_audio_AudioFormat.fromPath = function(path) {
	var ext = ceramic_Path.extension(path);
	switch(ext.toLowerCase()) {
	case "flac":
		return 6;
	case "mp3":
		return 5;
	case "ogg":
		return 2;
	case "pcm":
		return 4;
	case "wav":
		return 3;
	default:
		return 0;
	}
};
var clay_audio_AudioInstance = function(source,handle) {
	this.destroyed = false;
	this.source = source;
	this.handle = handle;
};
$hxClasses["clay.audio.AudioInstance"] = clay_audio_AudioInstance;
clay_audio_AudioInstance.__name__ = "clay.audio.AudioInstance";
clay_audio_AudioInstance.prototype = {
	source: null
	,handle: null
	,destroyed: null
	,hasEnded: function() {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance hasEnded queried after being destroyed");
		}
		return this.source.app.audio.stateOf(this.handle) == 2;
	}
	,destroy: function() {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance being destroyed more than once");
		}
		this.source.app.audio.handleInstanceDestroyed(this.handle);
		this.source.instanceKilled(this);
		this.destroyed = true;
		this.source = null;
		this.handle = -1;
	}
	,dataGet: function(into,start,length,intoResult) {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance dataGet queried after being destroyed");
		}
		return this.source.data.portion(into,start,length,intoResult);
	}
	,dataSeek: function(toSamples) {
		if(this.destroyed) {
			throw haxe_Exception.thrown("Audio / Instance dataSeek queried after being destroyed");
		}
		return this.source.data.seek(toSamples);
	}
	,__class__: clay_audio_AudioInstance
};
var clay_audio_AudioSource = function(app,data) {
	this.destroyed = false;
	this.streamBufferCount = 2;
	this.streamBufferLength = 176400;
	this.app = app;
	this.data = data;
	this.sourceId = clay_Utils.uniqueId();
	clay_Log.debug("AudioSource / `" + this.sourceId + "` / " + this.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\audio\\AudioSource.hx", lineNumber : 34, className : "clay.audio.AudioSource", methodName : "new"});
	this.instances = [];
	if(data.duration <= 0) {
		data.duration = this.bytesToSeconds(data.length);
	}
};
$hxClasses["clay.audio.AudioSource"] = clay_audio_AudioSource;
clay_audio_AudioSource.__name__ = "clay.audio.AudioSource";
clay_audio_AudioSource.prototype = {
	app: null
	,data: null
	,streamBufferLength: null
	,streamBufferCount: null
	,destroyed: null
	,sourceId: null
	,instances: null
	,instance: function(handle) {
		var instance = new clay_audio_AudioInstance(this,handle);
		if(this.instances.indexOf(instance) == -1) {
			this.instances.push(instance);
		}
		return instance;
	}
	,bytesToSeconds: function(bytes) {
		var word = this.data.bitsPerSample == 16 ? 2 : 1;
		var sampleFrames = this.data.rate * this.data.channels * word;
		return bytes / sampleFrames;
	}
	,secondsToBytes: function(seconds) {
		var word = this.data.bitsPerSample == 16 ? 2 : 1;
		var sampleFrames = this.data.rate * this.data.channels * word;
		return seconds * sampleFrames | 0;
	}
	,getDuration: function() {
		return this.data.duration;
	}
	,destroy: function() {
		if(this.destroyed) {
			clay_Log.debug("AudioSource / destroying already destroyed source!",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\audio\\AudioSource.hx", lineNumber : 85, className : "clay.audio.AudioSource", methodName : "destroy"});
			return;
		}
		this.destroyed = true;
		var c = this.instances.length;
		var i = 0;
		clay_Log.debug("AudioSource / destroy / " + this.sourceId + " / " + this.data.id + ", stream=" + Std.string(this.data.isStream) + ", instances=" + c,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\audio\\AudioSource.hx", lineNumber : 94, className : "clay.audio.AudioSource", methodName : "destroy"});
		while(i < c) {
			var instance = this.instances.pop();
			instance.destroy();
			instance = null;
			++i;
		}
		this.app.audio.handleSourceDestroyed(this);
		this.data.destroy();
		this.data = null;
		this.instances = null;
		this.app = null;
	}
	,instanceKilled: function(instance) {
		HxOverrides.remove(this.instances,instance);
	}
	,__class__: clay_audio_AudioSource
};
var clay_audio_AudioState = {};
clay_audio_AudioState.toString = function(this1) {
	switch(this1) {
	case -1:
		return "INVALID";
	case 0:
		return "PAUSED";
	case 1:
		return "PLAYING";
	case 2:
		return "STOPPED";
	default:
		return "" + this1;
	}
};
var clay_base_BaseAssets = function(app) {
	this.app = app;
};
$hxClasses["clay.base.BaseAssets"] = clay_base_BaseAssets;
clay_base_BaseAssets.__name__ = "clay.base.BaseAssets";
clay_base_BaseAssets.prototype = {
	app: null
	,isSynchronous: function() {
		return false;
	}
	,fullPath: function(path) {
		if(ceramic_Path.isAbsolute(path)) {
			return path;
		} else {
			return ceramic_Path.join([this.app.io.appPath(),path]);
		}
	}
	,loadImage: function(path,components,async,callback) {
		if(async == null) {
			async = false;
		}
		if(components == null) {
			components = 4;
		}
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
	,__class__: clay_base_BaseAssets
};
var clay_base_BaseAudio = function(app) {
	this.app = app;
};
$hxClasses["clay.base.BaseAudio"] = clay_base_BaseAudio;
clay_base_BaseAudio.__name__ = "clay.base.BaseAudio";
clay_base_BaseAudio.prototype = {
	app: null
	,isSynchronous: function() {
		return false;
	}
	,init: function() {
	}
	,ready: function() {
	}
	,tick: function(delta) {
	}
	,shutdown: function() {
	}
	,loadData: function(path,isStream,format,async,callback) {
		if(async == null) {
			async = false;
		}
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
	,emitAudioEvent: function(event,handle) {
		this.app.events.audioEvent(event,handle);
	}
	,__class__: clay_base_BaseAudio
};
var clay_base_BaseIO = function(app) {
	this.app = app;
};
$hxClasses["clay.base.BaseIO"] = clay_base_BaseIO;
clay_base_BaseIO.__name__ = "clay.base.BaseIO";
clay_base_BaseIO.prototype = {
	app: null
	,init: function() {
	}
	,shutdown: function() {
	}
	,isSynchronous: function() {
		return false;
	}
	,appPath: function() {
		return null;
	}
	,appPathPrefs: function() {
		return null;
	}
	,loadData: function(path,binary,async,callback) {
		if(async == null) {
			async = false;
		}
		if(binary == null) {
			binary = false;
		}
		if(callback != null) {
			clay_Immediate.push(function() {
				callback(null);
			});
		}
		return null;
	}
	,__class__: clay_base_BaseIO
};
var clay_base_BaseRuntime = function(app) {
	this.name = null;
	this.app = app;
};
$hxClasses["clay.base.BaseRuntime"] = clay_base_BaseRuntime;
clay_base_BaseRuntime.__name__ = "clay.base.BaseRuntime";
clay_base_BaseRuntime.prototype = {
	app: null
	,name: null
	,init: function() {
	}
	,shutdown: function(immediate) {
		if(immediate == null) {
			immediate = false;
		}
	}
	,ready: function() {
	}
	,run: function() {
		return true;
	}
	,windowDevicePixelRatio: function() {
		return 1.0;
	}
	,windowWidth: function() {
		return 0;
	}
	,windowHeight: function() {
		return 0;
	}
	,__class__: clay_base_BaseRuntime
};
var clay_buffers_Float32ArrayImplJS = {};
clay_buffers_Float32ArrayImplJS._new = function(_elements) {
	return new Float32Array(_elements);
};
clay_buffers_Float32ArrayImplJS.fromArray = function(_array) {
	return new Float32Array(_array);
};
clay_buffers_Float32ArrayImplJS.fromView = function(_view) {
	return new Float32Array(_view);
};
clay_buffers_Float32ArrayImplJS.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Float32Array(_buffer,_byteOffset,_byteLength / 4 | 0);
};
clay_buffers_Float32ArrayImplJS.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Float32ArrayImplJS.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Float32ArrayImplJS.toString = function(this1) {
	return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Int32ArrayImplJS = {};
clay_buffers_Int32ArrayImplJS._new = function(_elements) {
	return new Int32Array(_elements);
};
clay_buffers_Int32ArrayImplJS.fromArray = function(_array) {
	return new Int32Array(_array);
};
clay_buffers_Int32ArrayImplJS.fromView = function(_view) {
	return new Int32Array(_view);
};
clay_buffers_Int32ArrayImplJS.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Int32Array(_buffer,_byteOffset,_byteLength / 4 | 0);
};
clay_buffers_Int32ArrayImplJS.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Int32ArrayImplJS.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Int32ArrayImplJS.toString = function(this1) {
	return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Uint16ArrayImplJS = {};
clay_buffers_Uint16ArrayImplJS._new = function(_elements) {
	return new Uint16Array(_elements);
};
clay_buffers_Uint16ArrayImplJS.fromArray = function(_array) {
	return new Uint16Array(_array);
};
clay_buffers_Uint16ArrayImplJS.fromView = function(_view) {
	return new Uint16Array(_view);
};
clay_buffers_Uint16ArrayImplJS.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Uint16Array(_buffer,_byteOffset,_byteLength / 2 | 0);
};
clay_buffers_Uint16ArrayImplJS.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Uint16ArrayImplJS.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Uint16ArrayImplJS.toString = function(this1) {
	return "Uint16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_buffers_Uint8ArrayImplJS = {};
clay_buffers_Uint8ArrayImplJS._new = function(_elements) {
	return new Uint8Array(_elements);
};
clay_buffers_Uint8ArrayImplJS.fromArray = function(_array) {
	return new Uint8Array(_array);
};
clay_buffers_Uint8ArrayImplJS.fromView = function(_view) {
	return new Uint8Array(_view);
};
clay_buffers_Uint8ArrayImplJS.fromBuffer = function(_buffer,_byteOffset,_byteLength) {
	return new Uint8Array(_buffer,_byteOffset,_byteLength);
};
clay_buffers_Uint8ArrayImplJS.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
clay_buffers_Uint8ArrayImplJS.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
clay_buffers_Uint8ArrayImplJS.toString = function(this1) {
	return "Uint8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
};
var clay_graphics_Color = function(r,g,b,a) {
	this.a = 1;
	this.b = 0;
	this.g = 0;
	this.r = 0;
	if(r != null) {
		this.r = r;
	}
	if(g != null) {
		this.g = g;
	}
	if(b != null) {
		this.b = b;
	}
	if(a != null) {
		this.a = a;
	}
};
$hxClasses["clay.graphics.Color"] = clay_graphics_Color;
clay_graphics_Color.__name__ = "clay.graphics.Color";
clay_graphics_Color.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,__class__: clay_graphics_Color
};
var clay_graphics_Texture = function() {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.filterMag = 9729;
	this.filterMin = 9729;
	this.pixels = null;
	this.heightActual = -1;
	this.widthActual = -1;
	this.height = -1;
	this.width = -1;
	this.dataType = 5121;
	this.type = 3553;
	this.format = 6408;
	this.compressed = false;
	this.textureId = clay_opengl_GLGraphics.NO_TEXTURE;
	clay_Resource.call(this);
	this.index = clay_graphics_Texture._nextIndex++;
};
$hxClasses["clay.graphics.Texture"] = clay_graphics_Texture;
clay_graphics_Texture.__name__ = "clay.graphics.Texture";
clay_graphics_Texture.fromImage = function(image,premultiplyAlpha) {
	if(premultiplyAlpha == null) {
		premultiplyAlpha = false;
	}
	var texture = new clay_graphics_Texture();
	texture.premultiplyAlpha = premultiplyAlpha;
	if(premultiplyAlpha && false) {
		image.premultiplyAlpha();
	}
	if(image.bitsPerPixel != 4) {
		throw haxe_Exception.thrown("Image must have 4 bits per pixels (RGBA format)");
	}
	texture.width = image.width;
	texture.height = image.height;
	texture.widthActual = image.widthActual;
	texture.heightActual = image.heightActual;
	texture.pixels = image.pixels;
	return texture;
};
clay_graphics_Texture.__super__ = clay_Resource;
clay_graphics_Texture.prototype = $extend(clay_Resource.prototype,{
	index: null
	,textureId: null
	,premultiplyAlpha: null
	,compressed: null
	,format: null
	,type: null
	,dataType: null
	,width: null
	,height: null
	,widthActual: null
	,heightActual: null
	,pixels: null
	,filterMin: null
	,set_filterMin: function(filterMin) {
		if(this.textureId != clay_opengl_GLGraphics.NO_TEXTURE) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10241,filterMin);
		}
		return this.filterMin = filterMin;
	}
	,filterMag: null
	,set_filterMag: function(filterMag) {
		if(this.textureId != clay_opengl_GLGraphics.NO_TEXTURE) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10240,filterMag);
		}
		return this.filterMag = filterMag;
	}
	,wrapS: null
	,set_wrapS: function(wrapS) {
		if(this.textureId != clay_opengl_GLGraphics.NO_TEXTURE) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10242,wrapS);
		}
		return this.wrapS = wrapS;
	}
	,wrapT: null
	,set_wrapT: function(wrapT) {
		if(this.textureId != clay_opengl_GLGraphics.NO_TEXTURE) {
			this.bind();
			clay_opengl_web_GL.gl.texParameteri(3553,10243,wrapT);
		}
		return this.wrapT = wrapT;
	}
	,init: function() {
		this.textureId = clay_opengl_web_GL.gl.createTexture();
		if(this.width > 0 && this.widthActual <= 0) {
			this.widthActual = this.width;
		}
		if(this.height > 0 && this.heightActual <= 0) {
			this.heightActual = this.height;
		}
		this.bind();
		clay_opengl_web_GL.gl.texParameteri(3553,10241,this.filterMin);
		clay_opengl_web_GL.gl.texParameteri(3553,10240,this.filterMag);
		clay_opengl_web_GL.gl.texParameteri(3553,10243,this.wrapT);
		clay_opengl_web_GL.gl.texParameteri(3553,10242,this.wrapS);
		if(this.pixels != null) {
			if(this.width <= 0 || this.height <= 0) {
				throw haxe_Exception.thrown("Provided texture pixels with invalid size (width=" + this.width + " height=" + this.height + ")");
			}
			this.submit(this.pixels);
		}
	}
	,destroy: function() {
		if(this.textureId != clay_opengl_GLGraphics.NO_TEXTURE) {
			var textureId = this.textureId;
			clay_opengl_web_GL.gl.deleteTexture(textureId);
			var _g = 0;
			var _g1 = clay_opengl_GLGraphics._boundTexture2D.length;
			while(_g < _g1) {
				var i = _g++;
				if(clay_opengl_GLGraphics._boundTexture2D[i] == textureId) {
					clay_opengl_GLGraphics._boundTexture2D[i] = clay_opengl_GLGraphics.NO_TEXTURE;
				}
			}
			this.textureId = clay_opengl_GLGraphics.NO_TEXTURE;
		}
	}
	,bind: function(slot) {
		if(slot == null) {
			slot = 0;
		}
		if(slot != -1) {
			if(clay_opengl_GLGraphics._activeTextureSlot != slot) {
				clay_opengl_GLGraphics._activeTextureSlot = slot;
				while(clay_opengl_GLGraphics._boundTexture2D.length <= clay_opengl_GLGraphics._activeTextureSlot) clay_opengl_GLGraphics._boundTexture2D.push(clay_opengl_GLGraphics.NO_TEXTURE);
				clay_opengl_web_GL.gl.activeTexture(33984 + slot);
			}
		}
		if(this.type == 3553) {
			var textureId = this.textureId;
			if(clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] != textureId) {
				clay_opengl_GLGraphics._boundTexture2D[clay_opengl_GLGraphics._activeTextureSlot] = textureId;
				clay_opengl_web_GL.gl.bindTexture(3553,textureId);
			}
		}
	}
	,submit: function(pixels) {
		var size = clay_opengl_web_GL.gl.getParameter(3379);
		if(size <= 0) {
			size = 4096;
		}
		var max = size;
		if(pixels == null) {
			pixels = this.pixels;
		}
		if(pixels == null) {
			throw haxe_Exception.thrown("Cannot submit texture pixels: pixels is null");
		}
		if(this.widthActual > max) {
			throw haxe_Exception.thrown("Texture actual width bigger than maximum hardware size (width=" + this.widthActual + " max=" + max + ")");
		}
		if(this.heightActual > max) {
			throw haxe_Exception.thrown("Texture actual height bigger than maximum hardware size (height=" + this.heightActual + " max=" + max + ")");
		}
		this.bind();
		if(this.type == 3553) {
			if(this.compressed) {
				var format = this.format;
				var width = this.widthActual;
				var height = this.heightActual;
				clay_opengl_web_GL.gl.pixelStorei(37441,this.premultiplyAlpha ? 1 : 0);
				clay_opengl_web_GL.gl.compressedTexImage2D(3553,0,format,width,height,0,pixels);
			} else {
				var format = this.format;
				var width = this.widthActual;
				var height = this.heightActual;
				var dataType = this.dataType;
				clay_opengl_web_GL.gl.pixelStorei(37441,this.premultiplyAlpha ? 1 : 0);
				clay_opengl_web_GL.gl.texImage2D(3553,0,format,width,height,0,format,dataType,pixels);
			}
		}
	}
	,fetch: function(into,x,y,w,h) {
		if(h == null) {
			h = -1;
		}
		if(w == null) {
			w = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(w <= 0) {
			w = this.width;
		}
		if(h <= 0) {
			h = this.height;
		}
		this.bind();
		if(this.type == 3553) {
			clay_opengl_GLGraphics.fetchTexture2dPixels(into,x,y,w,h);
		}
		return into;
	}
	,__class__: clay_graphics_Texture
	,__properties__: {set_wrapT:"set_wrapT",set_wrapS:"set_wrapS",set_filterMag:"set_filterMag",set_filterMin:"set_filterMin"}
});
var clay_graphics_RenderTexture = function() {
	this.antialiasing = 0;
	this.stencil = false;
	this.depth = false;
	clay_graphics_Texture.call(this);
};
$hxClasses["clay.graphics.RenderTexture"] = clay_graphics_RenderTexture;
clay_graphics_RenderTexture.__name__ = "clay.graphics.RenderTexture";
clay_graphics_RenderTexture.__super__ = clay_graphics_Texture;
clay_graphics_RenderTexture.prototype = $extend(clay_graphics_Texture.prototype,{
	renderTarget: null
	,depth: null
	,stencil: null
	,antialiasing: null
	,init: function() {
		clay_graphics_Texture.prototype.init.call(this);
		var size = clay_opengl_web_GL.gl.getParameter(3379);
		if(size <= 0) {
			size = 4096;
		}
		var max = size;
		if(this.widthActual > max) {
			throw haxe_Exception.thrown("RenderTexture actual width bigger than maximum hardware size (width=" + this.widthActual + " max=" + max + ")");
		}
		if(this.heightActual > max) {
			throw haxe_Exception.thrown("RenderTexture actual height bigger than maximum hardware size (height=" + this.heightActual + " max=" + max + ")");
		}
		this.bind();
		this.renderTarget = clay_opengl_GLGraphics.createRenderTarget(this.textureId,this.width,this.height,this.depth,this.stencil,this.antialiasing,0,this.format,this.dataType);
	}
	,destroy: function() {
		clay_graphics_Texture.prototype.destroy.call(this);
		if(this.renderTarget != null) {
			clay_opengl_GLGraphics.deleteRenderTarget(this.renderTarget);
			this.renderTarget = null;
		}
	}
	,__class__: clay_graphics_RenderTexture
});
var clay_graphics_TextureAndSlot = function(texture,slot) {
	this.texture = texture;
	this.slot = slot;
};
$hxClasses["clay.graphics.TextureAndSlot"] = clay_graphics_TextureAndSlot;
clay_graphics_TextureAndSlot.__name__ = "clay.graphics.TextureAndSlot";
clay_graphics_TextureAndSlot.prototype = {
	texture: null
	,slot: null
	,__class__: clay_graphics_TextureAndSlot
};
var clay_graphics_Uniforms = function(gpuShader) {
	this.dirtyTextures = [];
	this.dirtyColors = [];
	this.dirtyMatrix4s = [];
	this.dirtyVector4s = [];
	this.dirtyVector3s = [];
	this.dirtyVector2s = [];
	this.dirtyFloatArrays = [];
	this.dirtyFloats = [];
	this.dirtyIntArrays = [];
	this.dirtyInts = [];
	this.textures = new haxe_ds_StringMap();
	this.colors = new haxe_ds_StringMap();
	this.matrix4s = new haxe_ds_StringMap();
	this.vector4s = new haxe_ds_StringMap();
	this.vector3s = new haxe_ds_StringMap();
	this.vector2s = new haxe_ds_StringMap();
	this.floatArrays = new haxe_ds_StringMap();
	this.floats = new haxe_ds_StringMap();
	this.intArrays = new haxe_ds_StringMap();
	this.ints = new haxe_ds_StringMap();
	this.gpuShader = gpuShader;
};
$hxClasses["clay.graphics.Uniforms"] = clay_graphics_Uniforms;
clay_graphics_Uniforms.__name__ = "clay.graphics.Uniforms";
clay_graphics_Uniforms.prototype = {
	ints: null
	,intArrays: null
	,floats: null
	,floatArrays: null
	,vector2s: null
	,vector3s: null
	,vector4s: null
	,matrix4s: null
	,colors: null
	,textures: null
	,dirtyInts: null
	,dirtyIntArrays: null
	,dirtyFloats: null
	,dirtyFloatArrays: null
	,dirtyVector2s: null
	,dirtyVector3s: null
	,dirtyVector4s: null
	,dirtyMatrix4s: null
	,dirtyColors: null
	,dirtyTextures: null
	,gpuShader: null
	,setInt: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.ints.h[name] = value;
		this.dirtyInts.push(name);
	}
	,setIntArray: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.intArrays.h[name] = value;
		this.dirtyIntArrays.push(name);
	}
	,setFloat: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.floats.h[name] = value;
		this.dirtyFloats.push(name);
	}
	,setFloatArray: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		this.floatArrays.h[name] = value;
		this.dirtyFloatArrays.push(name);
	}
	,setVector2: function(name,x,y) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector2s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
		} else {
			var this1 = this.vector2s;
			var value = new clay_graphics_Vector2(x,y);
			this1.h[name] = value;
		}
		this.dirtyVector2s.push(name);
	}
	,setVector3: function(name,x,y,z) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector3s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
			existing.z = z;
		} else {
			var this1 = this.vector3s;
			var value = new clay_graphics_Vector3(x,y,z);
			this1.h[name] = value;
		}
		this.dirtyVector3s.push(name);
	}
	,setVector4: function(name,x,y,z,w) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.vector4s.h[name];
		if(existing != null) {
			existing.x = x;
			existing.y = y;
			existing.z = z;
			existing.w = w;
		} else {
			var this1 = this.vector4s;
			var value = new clay_graphics_Vector4(x,y,z,w);
			this1.h[name] = value;
		}
		this.dirtyVector4s.push(name);
	}
	,setMatrix4: function(name,value) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.matrix4s.h[name];
		if(existing == null) {
			existing = new Float32Array(16);
			this.matrix4s.h[name] = existing;
		}
		existing[0] = value[0];
		existing[1] = value[1];
		existing[2] = value[2];
		existing[3] = value[3];
		existing[4] = value[4];
		existing[5] = value[5];
		existing[6] = value[6];
		existing[7] = value[7];
		existing[8] = value[8];
		existing[9] = value[9];
		existing[10] = value[10];
		existing[11] = value[11];
		existing[12] = value[12];
		existing[13] = value[13];
		existing[14] = value[14];
		existing[15] = value[15];
		this.dirtyMatrix4s.push(name);
	}
	,setColor: function(name,r,g,b,a) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.colors.h[name];
		if(existing != null) {
			existing.r = r;
			existing.g = g;
			existing.b = b;
			existing.a = a;
		} else {
			var this1 = this.colors;
			var value = new clay_graphics_Color(r,g,b,a);
			this1.h[name] = value;
		}
		this.dirtyColors.push(name);
	}
	,setTexture: function(name,slot,texture) {
		var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
		var existing = this.textures.h[name];
		if(existing != null) {
			existing.texture = texture;
			existing.slot = slot;
		} else {
			var this1 = this.textures;
			var value = new clay_graphics_TextureAndSlot(texture,slot);
			this1.h[name] = value;
		}
		if(this.dirtyTextures.indexOf(name) == -1) {
			this.dirtyTextures.push(name);
		}
	}
	,apply: function() {
		var shader = this.gpuShader;
		if(clay_opengl_GLGraphics._boundProgram != shader.program) {
			clay_opengl_GLGraphics._boundProgram = shader.program;
			clay_opengl_web_GL.gl.useProgram(shader.program);
		}
		while(this.dirtyInts.length > 0) {
			var name = this.dirtyInts.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.ints.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1i(location,value);
		}
		while(this.dirtyIntArrays.length > 0) {
			var name = this.dirtyIntArrays.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.intArrays.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1iv(location,value);
		}
		while(this.dirtyFloats.length > 0) {
			var name = this.dirtyFloats.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.floats.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1f(location,value);
		}
		while(this.dirtyFloatArrays.length > 0) {
			var name = this.dirtyFloatArrays.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.floatArrays.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform1fv(location,value);
		}
		while(this.dirtyVector2s.length > 0) {
			var name = this.dirtyVector2s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector2s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform2f(location,x,y);
		}
		while(this.dirtyVector3s.length > 0) {
			var name = this.dirtyVector3s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector3s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			var z = value.z;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
		}
		while(this.dirtyVector4s.length > 0) {
			var name = this.dirtyVector4s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.vector4s.h[name];
			var shader = this.gpuShader;
			var x = value.x;
			var y = value.y;
			var z = value.z;
			var w = value.w;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
		}
		while(this.dirtyMatrix4s.length > 0) {
			var name = this.dirtyMatrix4s.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var shader = this.gpuShader;
			var value = this.matrix4s.h[name];
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniformMatrix4fv(location,false,value);
		}
		while(this.dirtyColors.length > 0) {
			var name = this.dirtyColors.pop();
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.colors.h[name];
			var shader = this.gpuShader;
			var r = value.r;
			var g = value.g;
			var b = value.b;
			var a = value.a;
			if(clay_opengl_GLGraphics._boundProgram != shader.program) {
				clay_opengl_GLGraphics._boundProgram = shader.program;
				clay_opengl_web_GL.gl.useProgram(shader.program);
			}
			clay_opengl_web_GL.gl.uniform4f(location,r,g,b,a);
		}
		var _g = 0;
		var _g1 = this.dirtyTextures.length;
		while(_g < _g1) {
			var i = _g++;
			var name = this.dirtyTextures[i];
			var location = clay_opengl_web_GL.gl.getUniformLocation(this.gpuShader.program,name);
			var value = this.textures.h[name];
			if(value.texture.type == 3553) {
				clay_opengl_GLGraphics.setTexture2dUniform(this.gpuShader,location,value.slot,value.texture.textureId);
			}
		}
	}
	,clone: function() {
		var uniforms = new clay_graphics_Uniforms(this.gpuShader);
		return uniforms;
	}
	,__class__: clay_graphics_Uniforms
};
var clay_graphics_Vector2 = function(x,y) {
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
};
$hxClasses["clay.graphics.Vector2"] = clay_graphics_Vector2;
clay_graphics_Vector2.__name__ = "clay.graphics.Vector2";
clay_graphics_Vector2.prototype = {
	x: null
	,y: null
	,__class__: clay_graphics_Vector2
};
var clay_graphics_Vector3 = function(x,y,z) {
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
};
$hxClasses["clay.graphics.Vector3"] = clay_graphics_Vector3;
clay_graphics_Vector3.__name__ = "clay.graphics.Vector3";
clay_graphics_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,__class__: clay_graphics_Vector3
};
var clay_graphics_Vector4 = function(x,y,z,w) {
	this.w = 0;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(x != null) {
		this.x = x;
	}
	if(y != null) {
		this.y = y;
	}
	if(z != null) {
		this.z = z;
	}
	if(w != null) {
		this.w = w;
	}
};
$hxClasses["clay.graphics.Vector4"] = clay_graphics_Vector4;
clay_graphics_Vector4.__name__ = "clay.graphics.Vector4";
clay_graphics_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,__class__: clay_graphics_Vector4
};
var clay_opengl_GLGraphics_$RenderTarget = function() {
};
$hxClasses["clay.opengl.GLGraphics_RenderTarget"] = clay_opengl_GLGraphics_$RenderTarget;
clay_opengl_GLGraphics_$RenderTarget.__name__ = "clay.opengl.GLGraphics_RenderTarget";
clay_opengl_GLGraphics_$RenderTarget.prototype = {
	framebuffer: null
	,renderbuffer: null
	,msResolveFramebuffer: null
	,msResolveColorRenderbuffer: null
	,msDepthStencilRenderbuffer: null
	,__class__: clay_opengl_GLGraphics_$RenderTarget
};
var clay_opengl_GLGraphics_$GpuShader = function() {
	this.textures = [];
};
$hxClasses["clay.opengl.GLGraphics_GpuShader"] = clay_opengl_GLGraphics_$GpuShader;
clay_opengl_GLGraphics_$GpuShader.__name__ = "clay.opengl.GLGraphics_GpuShader";
clay_opengl_GLGraphics_$GpuShader.prototype = {
	vertShader: null
	,fragShader: null
	,program: null
	,textures: null
	,__class__: clay_opengl_GLGraphics_$GpuShader
};
var clay_opengl_web_GL = function() { };
$hxClasses["clay.opengl.web.GL"] = clay_opengl_web_GL;
clay_opengl_web_GL.__name__ = "clay.opengl.web.GL";
clay_opengl_web_GL.__properties__ = {get_version:"get_version"};
clay_opengl_web_GL.versionString = function() {
	var ver = clay_opengl_web_GL.gl.getParameter(7938);
	var slver = clay_opengl_web_GL.gl.getParameter(35724);
	var ren = clay_opengl_web_GL.gl.getParameter(7937);
	var ven = clay_opengl_web_GL.gl.getParameter(7936);
	return "/ " + ver + " / " + slver + " / " + ren + " / " + ven + " /";
};
clay_opengl_web_GL.activeTexture = function(texture) {
	clay_opengl_web_GL.gl.activeTexture(texture);
};
clay_opengl_web_GL.attachShader = function(program,shader) {
	clay_opengl_web_GL.gl.attachShader(program,shader);
};
clay_opengl_web_GL.bindAttribLocation = function(program,index,name) {
	clay_opengl_web_GL.gl.bindAttribLocation(program,index,name);
};
clay_opengl_web_GL.bindBuffer = function(target,buffer) {
	clay_opengl_web_GL.gl.bindBuffer(target,buffer);
};
clay_opengl_web_GL.bindFramebuffer = function(target,framebuffer) {
	clay_opengl_web_GL.gl.bindFramebuffer(target,framebuffer);
};
clay_opengl_web_GL.bindRenderbuffer = function(target,renderbuffer) {
	clay_opengl_web_GL.gl.bindRenderbuffer(target,renderbuffer);
};
clay_opengl_web_GL.bindTexture = function(target,texture) {
	clay_opengl_web_GL.gl.bindTexture(target,texture);
};
clay_opengl_web_GL.blendColor = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.blendColor(red,green,blue,alpha);
};
clay_opengl_web_GL.blendEquation = function(mode) {
	clay_opengl_web_GL.gl.blendEquation(mode);
};
clay_opengl_web_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	clay_opengl_web_GL.gl.blendEquationSeparate(modeRGB,modeAlpha);
};
clay_opengl_web_GL.blendFunc = function(sfactor,dfactor) {
	clay_opengl_web_GL.gl.blendFunc(sfactor,dfactor);
};
clay_opengl_web_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	clay_opengl_web_GL.gl.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
clay_opengl_web_GL.bufferData = function(target,data,usage) {
	clay_opengl_web_GL.gl.bufferData(target,data,usage);
};
clay_opengl_web_GL.bufferSubData = function(target,offset,data) {
	clay_opengl_web_GL.gl.bufferSubData(target,offset,data);
};
clay_opengl_web_GL.checkFramebufferStatus = function(target) {
	return clay_opengl_web_GL.gl.checkFramebufferStatus(target);
};
clay_opengl_web_GL.clear = function(mask) {
	clay_opengl_web_GL.gl.clear(mask);
};
clay_opengl_web_GL.clearColor = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.clearColor(red,green,blue,alpha);
};
clay_opengl_web_GL.clearDepth = function(depth) {
	clay_opengl_web_GL.gl.clearDepth(depth);
};
clay_opengl_web_GL.clearStencil = function(s) {
	clay_opengl_web_GL.gl.clearStencil(s);
};
clay_opengl_web_GL.colorMask = function(red,green,blue,alpha) {
	clay_opengl_web_GL.gl.colorMask(red,green,blue,alpha);
};
clay_opengl_web_GL.compileShader = function(shader) {
	clay_opengl_web_GL.gl.compileShader(shader);
};
clay_opengl_web_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	clay_opengl_web_GL.gl.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
clay_opengl_web_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	clay_opengl_web_GL.gl.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
clay_opengl_web_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	clay_opengl_web_GL.gl.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
clay_opengl_web_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	clay_opengl_web_GL.gl.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
clay_opengl_web_GL.createBuffer = function() {
	return clay_opengl_web_GL.gl.createBuffer();
};
clay_opengl_web_GL.createFramebuffer = function() {
	return clay_opengl_web_GL.gl.createFramebuffer();
};
clay_opengl_web_GL.createProgram = function() {
	return clay_opengl_web_GL.gl.createProgram();
};
clay_opengl_web_GL.createRenderbuffer = function() {
	return clay_opengl_web_GL.gl.createRenderbuffer();
};
clay_opengl_web_GL.createShader = function(type) {
	return clay_opengl_web_GL.gl.createShader(type);
};
clay_opengl_web_GL.createTexture = function() {
	return clay_opengl_web_GL.gl.createTexture();
};
clay_opengl_web_GL.cullFace = function(mode) {
	clay_opengl_web_GL.gl.cullFace(mode);
};
clay_opengl_web_GL.deleteBuffer = function(buffer) {
	clay_opengl_web_GL.gl.deleteBuffer(buffer);
};
clay_opengl_web_GL.deleteFramebuffer = function(framebuffer) {
	clay_opengl_web_GL.gl.deleteFramebuffer(framebuffer);
};
clay_opengl_web_GL.deleteProgram = function(program) {
	clay_opengl_web_GL.gl.deleteProgram(program);
};
clay_opengl_web_GL.deleteRenderbuffer = function(renderbuffer) {
	clay_opengl_web_GL.gl.deleteRenderbuffer(renderbuffer);
};
clay_opengl_web_GL.deleteShader = function(shader) {
	clay_opengl_web_GL.gl.deleteShader(shader);
};
clay_opengl_web_GL.deleteTexture = function(texture) {
	clay_opengl_web_GL.gl.deleteTexture(texture);
};
clay_opengl_web_GL.depthFunc = function(func) {
	clay_opengl_web_GL.gl.depthFunc(func);
};
clay_opengl_web_GL.depthMask = function(flag) {
	clay_opengl_web_GL.gl.depthMask(flag);
};
clay_opengl_web_GL.depthRange = function(zNear,zFar) {
	clay_opengl_web_GL.gl.depthRange(zNear,zFar);
};
clay_opengl_web_GL.detachShader = function(program,shader) {
	clay_opengl_web_GL.gl.detachShader(program,shader);
};
clay_opengl_web_GL.disable = function(cap) {
	clay_opengl_web_GL.gl.disable(cap);
};
clay_opengl_web_GL.disableVertexAttribArray = function(index) {
	clay_opengl_web_GL.gl.disableVertexAttribArray(index);
};
clay_opengl_web_GL.drawArrays = function(mode,first,count) {
	clay_opengl_web_GL.gl.drawArrays(mode,first,count);
};
clay_opengl_web_GL.drawElements = function(mode,count,type,offset) {
	clay_opengl_web_GL.gl.drawElements(mode,count,type,offset);
};
clay_opengl_web_GL.enable = function(cap) {
	clay_opengl_web_GL.gl.enable(cap);
};
clay_opengl_web_GL.enableVertexAttribArray = function(index) {
	clay_opengl_web_GL.gl.enableVertexAttribArray(index);
};
clay_opengl_web_GL.finish = function() {
	clay_opengl_web_GL.gl.finish();
};
clay_opengl_web_GL.flush = function() {
	clay_opengl_web_GL.gl.flush();
};
clay_opengl_web_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	clay_opengl_web_GL.gl.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
clay_opengl_web_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	clay_opengl_web_GL.gl.framebufferTexture2D(target,attachment,textarget,texture,level);
};
clay_opengl_web_GL.frontFace = function(mode) {
	clay_opengl_web_GL.gl.frontFace(mode);
};
clay_opengl_web_GL.generateMipmap = function(target) {
	clay_opengl_web_GL.gl.generateMipmap(target);
};
clay_opengl_web_GL.getActiveAttrib = function(program,index) {
	return clay_opengl_web_GL.gl.getActiveAttrib(program,index);
};
clay_opengl_web_GL.getActiveUniform = function(program,index) {
	return clay_opengl_web_GL.gl.getActiveUniform(program,index);
};
clay_opengl_web_GL.getAttachedShaders = function(program) {
	return clay_opengl_web_GL.gl.getAttachedShaders(program);
};
clay_opengl_web_GL.getAttribLocation = function(program,name) {
	return clay_opengl_web_GL.gl.getAttribLocation(program,name);
};
clay_opengl_web_GL.getBufferParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getBufferParameter(target,pname);
};
clay_opengl_web_GL.getContextAttributes = function() {
	return clay_opengl_web_GL.gl.getContextAttributes();
};
clay_opengl_web_GL.getError = function() {
	return clay_opengl_web_GL.gl.getError();
};
clay_opengl_web_GL.getExtension = function(name) {
	return clay_opengl_web_GL.gl.getExtension(name);
};
clay_opengl_web_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return clay_opengl_web_GL.gl.getFramebufferAttachmentParameter(target,attachment,pname);
};
clay_opengl_web_GL.getParameter = function(pname) {
	return clay_opengl_web_GL.gl.getParameter(pname);
};
clay_opengl_web_GL.getProgramInfoLog = function(program) {
	return clay_opengl_web_GL.gl.getProgramInfoLog(program);
};
clay_opengl_web_GL.getProgramParameter = function(program,pname) {
	return clay_opengl_web_GL.gl.getProgramParameter(program,pname);
};
clay_opengl_web_GL.getRenderbufferParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getRenderbufferParameter(target,pname);
};
clay_opengl_web_GL.getShaderInfoLog = function(shader) {
	return clay_opengl_web_GL.gl.getShaderInfoLog(shader);
};
clay_opengl_web_GL.getShaderParameter = function(shader,pname) {
	return clay_opengl_web_GL.gl.getShaderParameter(shader,pname);
};
clay_opengl_web_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return clay_opengl_web_GL.gl.getShaderPrecisionFormat(shadertype,precisiontype);
};
clay_opengl_web_GL.getShaderSource = function(shader) {
	return clay_opengl_web_GL.gl.getShaderSource(shader);
};
clay_opengl_web_GL.getSupportedExtensions = function() {
	return clay_opengl_web_GL.gl.getSupportedExtensions();
};
clay_opengl_web_GL.getTexParameter = function(target,pname) {
	return clay_opengl_web_GL.gl.getTexParameter(target,pname);
};
clay_opengl_web_GL.getUniform = function(program,location) {
	return clay_opengl_web_GL.gl.getUniform(program,location);
};
clay_opengl_web_GL.getUniformLocation = function(program,name) {
	return clay_opengl_web_GL.gl.getUniformLocation(program,name);
};
clay_opengl_web_GL.getVertexAttrib = function(index,pname) {
	return clay_opengl_web_GL.gl.getVertexAttrib(index,pname);
};
clay_opengl_web_GL.getVertexAttribOffset = function(index,pname) {
	return clay_opengl_web_GL.gl.getVertexAttribOffset(index,pname);
};
clay_opengl_web_GL.hint = function(target,mode) {
	clay_opengl_web_GL.gl.hint(target,mode);
};
clay_opengl_web_GL.isBuffer = function(buffer) {
	return clay_opengl_web_GL.gl.isBuffer(buffer);
};
clay_opengl_web_GL.isEnabled = function(cap) {
	return clay_opengl_web_GL.gl.isEnabled(cap);
};
clay_opengl_web_GL.isFramebuffer = function(framebuffer) {
	return clay_opengl_web_GL.gl.isFramebuffer(framebuffer);
};
clay_opengl_web_GL.isProgram = function(program) {
	return clay_opengl_web_GL.gl.isProgram(program);
};
clay_opengl_web_GL.isRenderbuffer = function(renderbuffer) {
	return clay_opengl_web_GL.gl.isRenderbuffer(renderbuffer);
};
clay_opengl_web_GL.isShader = function(shader) {
	return clay_opengl_web_GL.gl.isShader(shader);
};
clay_opengl_web_GL.isTexture = function(texture) {
	return clay_opengl_web_GL.gl.isTexture(texture);
};
clay_opengl_web_GL.lineWidth = function(width) {
	clay_opengl_web_GL.gl.lineWidth(width);
};
clay_opengl_web_GL.linkProgram = function(program) {
	clay_opengl_web_GL.gl.linkProgram(program);
};
clay_opengl_web_GL.pixelStorei = function(pname,param) {
	clay_opengl_web_GL.gl.pixelStorei(pname,param);
};
clay_opengl_web_GL.polygonOffset = function(factor,units) {
	clay_opengl_web_GL.gl.polygonOffset(factor,units);
};
clay_opengl_web_GL.readPixels = function(x,y,width,height,format,type,data) {
	clay_opengl_web_GL.gl.readPixels(x,y,width,height,format,type,data);
};
clay_opengl_web_GL.renderbufferStorage = function(target,internalformat,width,height) {
	clay_opengl_web_GL.gl.renderbufferStorage(target,internalformat,width,height);
};
clay_opengl_web_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	clay_opengl_web_GL.gl.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
clay_opengl_web_GL.clearBufferfv = function(buffer,drawbuffer,values,srcOffset) {
	if(srcOffset == null) {
		srcOffset = 0;
	}
	clay_opengl_web_GL.gl.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
clay_opengl_web_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	clay_opengl_web_GL.gl.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
clay_opengl_web_GL.sampleCoverage = function(value,invert) {
	clay_opengl_web_GL.gl.sampleCoverage(value,invert);
};
clay_opengl_web_GL.scissor = function(x,y,width,height) {
	clay_opengl_web_GL.gl.scissor(x,y,width,height);
};
clay_opengl_web_GL.shaderSource = function(shader,source) {
	clay_opengl_web_GL.gl.shaderSource(shader,source);
};
clay_opengl_web_GL.stencilFunc = function(func,ref,mask) {
	clay_opengl_web_GL.gl.stencilFunc(func,ref,mask);
};
clay_opengl_web_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	clay_opengl_web_GL.gl.stencilFuncSeparate(face,func,ref,mask);
};
clay_opengl_web_GL.stencilMask = function(mask) {
	clay_opengl_web_GL.gl.stencilMask(mask);
};
clay_opengl_web_GL.stencilMaskSeparate = function(face,mask) {
	clay_opengl_web_GL.gl.stencilMaskSeparate(face,mask);
};
clay_opengl_web_GL.stencilOp = function(fail,zfail,zpass) {
	clay_opengl_web_GL.gl.stencilOp(fail,zfail,zpass);
};
clay_opengl_web_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	clay_opengl_web_GL.gl.stencilOpSeparate(face,fail,zfail,zpass);
};
clay_opengl_web_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	clay_opengl_web_GL.gl.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
clay_opengl_web_GL.texParameterf = function(target,pname,param) {
	clay_opengl_web_GL.gl.texParameterf(target,pname,param);
};
clay_opengl_web_GL.texParameteri = function(target,pname,param) {
	clay_opengl_web_GL.gl.texParameteri(target,pname,param);
};
clay_opengl_web_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,data) {
	clay_opengl_web_GL.gl.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
clay_opengl_web_GL.uniform1f = function(location,x) {
	clay_opengl_web_GL.gl.uniform1f(location,x);
};
clay_opengl_web_GL.uniform1fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform1fv(location,data);
};
clay_opengl_web_GL.uniform1i = function(location,x) {
	clay_opengl_web_GL.gl.uniform1i(location,x);
};
clay_opengl_web_GL.uniform1iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform1iv(location,data);
};
clay_opengl_web_GL.uniform2f = function(location,x,y) {
	clay_opengl_web_GL.gl.uniform2f(location,x,y);
};
clay_opengl_web_GL.uniform2fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform2fv(location,data);
};
clay_opengl_web_GL.uniform2i = function(location,x,y) {
	clay_opengl_web_GL.gl.uniform2i(location,x,y);
};
clay_opengl_web_GL.uniform2iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform2iv(location,data);
};
clay_opengl_web_GL.uniform3f = function(location,x,y,z) {
	clay_opengl_web_GL.gl.uniform3f(location,x,y,z);
};
clay_opengl_web_GL.uniform3fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform3fv(location,data);
};
clay_opengl_web_GL.uniform3i = function(location,x,y,z) {
	clay_opengl_web_GL.gl.uniform3i(location,x,y,z);
};
clay_opengl_web_GL.uniform3iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform3iv(location,data);
};
clay_opengl_web_GL.uniform4f = function(location,x,y,z,w) {
	clay_opengl_web_GL.gl.uniform4f(location,x,y,z,w);
};
clay_opengl_web_GL.uniform4fv = function(location,data) {
	clay_opengl_web_GL.gl.uniform4fv(location,data);
};
clay_opengl_web_GL.uniform4i = function(location,x,y,z,w) {
	clay_opengl_web_GL.gl.uniform4i(location,x,y,z,w);
};
clay_opengl_web_GL.uniform4iv = function(location,data) {
	clay_opengl_web_GL.gl.uniform4iv(location,data);
};
clay_opengl_web_GL.uniformMatrix2fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix2fv(location,transpose,data);
};
clay_opengl_web_GL.uniformMatrix3fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix3fv(location,transpose,data);
};
clay_opengl_web_GL.uniformMatrix4fv = function(location,transpose,data) {
	clay_opengl_web_GL.gl.uniformMatrix4fv(location,transpose,data);
};
clay_opengl_web_GL.useProgram = function(program) {
	clay_opengl_web_GL.gl.useProgram(program);
};
clay_opengl_web_GL.validateProgram = function(program) {
	clay_opengl_web_GL.gl.validateProgram(program);
};
clay_opengl_web_GL.vertexAttrib1f = function(indx,x) {
	clay_opengl_web_GL.gl.vertexAttrib1f(indx,x);
};
clay_opengl_web_GL.vertexAttrib1fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib1fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib2f = function(indx,x,y) {
	clay_opengl_web_GL.gl.vertexAttrib2f(indx,x,y);
};
clay_opengl_web_GL.vertexAttrib2fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib2fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib3f = function(indx,x,y,z) {
	clay_opengl_web_GL.gl.vertexAttrib3f(indx,x,y,z);
};
clay_opengl_web_GL.vertexAttrib3fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib3fv(indx,data);
};
clay_opengl_web_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	clay_opengl_web_GL.gl.vertexAttrib4f(indx,x,y,z,w);
};
clay_opengl_web_GL.vertexAttrib4fv = function(indx,data) {
	clay_opengl_web_GL.gl.vertexAttrib4fv(indx,data);
};
clay_opengl_web_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	clay_opengl_web_GL.gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
clay_opengl_web_GL.viewport = function(x,y,width,height) {
	clay_opengl_web_GL.gl.viewport(x,y,width,height);
};
clay_opengl_web_GL.get_version = function() {
	return 7938;
};
var clay_web_WebAssets = function(app) {
	this.pngjs = null;
	this.electron = null;
	this.testedElectronPngjsAvailability = false;
	clay_base_BaseAssets.call(this,app);
};
$hxClasses["clay.web.WebAssets"] = clay_web_WebAssets;
clay_web_WebAssets.__name__ = "clay.web.WebAssets";
clay_web_WebAssets.__super__ = clay_base_BaseAssets;
clay_web_WebAssets.prototype = $extend(clay_base_BaseAssets.prototype,{
	testedElectronPngjsAvailability: null
	,electron: null
	,pngjs: null
	,isSynchronous: function() {
		return false;
	}
	,loadImage: function(path,components,async,callback) {
		if(async == null) {
			async = false;
		}
		if(components == null) {
			components = 4;
		}
		var _gthis = this;
		if(path == null) {
			throw haxe_Exception.thrown("Image path is null!");
		}
		var ext = ceramic_Path.extension(path);
		if(!this.testedElectronPngjsAvailability) {
			this.testedElectronPngjsAvailability = true;
			try {
				this.electron = require('electron');
				this.pngjs = this.electron.remote.require('pngjs');
			} catch( _g ) {
			}
		}
		if(this.pngjs != null && ext == "png" && !async) {
			if(this.app.io.isSynchronous()) {
				var bytes = this.app.io.loadData(path,true);
				if(bytes == null) {
					if(callback != null) {
						clay_Immediate.push(function() {
							callback(null);
						});
					}
					return null;
				}
				var image = this.decodePngWithPngjs(bytes);
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(image);
					});
				}
				return image;
			} else {
				this.app.io.loadData(path,true,null,function(bytes) {
					if(bytes == null) {
						if(callback != null) {
							clay_Immediate.push(function() {
								callback(null);
							});
						}
					} else {
						var image = _gthis.decodePngWithPngjs(bytes);
						if(callback != null) {
							clay_Immediate.push(function() {
								callback(image);
							});
						}
					}
				});
				return null;
			}
		}
		this.app.io.loadData(path,true,null,function(bytes) {
			if(bytes == null) {
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(null);
					});
				}
				return;
			}
			_gthis.imageFromBytesUsingImageElement(bytes,ext,4,null,function(image) {
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(image);
					});
				}
			});
		});
		return null;
	}
	,decodePngWithPngjs: function(bytes,pot) {
		if(pot == null) {
			pot = true;
		}
		try {
			var Buffer = this.electron.remote.require('buffer').Buffer;
			var pngjsInfo = this.pngjs.PNG.sync.read(Buffer.from(bytes));
			var widthActual = pot ? this.nearestPowerOfTwo(pngjsInfo.width) : pngjsInfo.width;
			var heightActual = pot ? this.nearestPowerOfTwo(pngjsInfo.height) : pngjsInfo.height;
			var bufferData = pngjsInfo.data;
			var pngjsData = new Uint8Array(bufferData.length);
			var _g = 0;
			var _g1 = bufferData.length;
			while(_g < _g1) {
				var i = _g++;
				pngjsData[i] = bufferData[i];
			}
			var imageBytes = this.paddedBytesFromPixels(pngjsInfo.width,pngjsInfo.height,widthActual,heightActual,pngjsData);
			var image = new clay_Image(pngjsInfo.width,pngjsInfo.height,widthActual,heightActual,4,4,imageBytes);
			imageBytes = null;
			bufferData = null;
			return image;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			clay_Log.error("failed to decode png: " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAssets.hx", lineNumber : 140, className : "clay.web.WebAssets", methodName : "decodePngWithPngjs"});
		}
		return null;
	}
	,decodeImageFromElement: function(elem,pot) {
		if(pot == null) {
			pot = true;
		}
		var widthActual = pot ? this.nearestPowerOfTwo(elem.width) : elem.width;
		var heightActual = pot ? this.nearestPowerOfTwo(elem.height) : elem.height;
		var imageBytes = this.paddedBytesFromElement(elem.width,elem.height,widthActual,heightActual,elem);
		var image = new clay_Image(elem.width,elem.height,widthActual,heightActual,4,4,imageBytes);
		imageBytes = null;
		return image;
	}
	,imageFromBytes: function(bytes,ext,components,pot,callback) {
		if(pot == null) {
			pot = true;
		}
		if(components == null) {
			components = 4;
		}
		if(!this.testedElectronPngjsAvailability) {
			this.testedElectronPngjsAvailability = true;
			try {
				this.electron = require('electron');
				this.pngjs = this.electron.remote.require('pngjs');
			} catch( _g ) {
			}
		}
		if(this.pngjs != null && ext == "png" && components == 4) {
			var image = this.decodePngWithPngjs(bytes,pot);
			callback(image);
			return image;
		} else {
			return this.imageFromBytesUsingImageElement(bytes,ext,components,pot,callback);
		}
	}
	,imageFromBytesUsingImageElement: function(bytes,ext,components,pot,callback) {
		if(pot == null) {
			pot = true;
		}
		if(components == null) {
			components = 4;
		}
		var _gthis = this;
		if(bytes == null) {
			throw haxe_Exception.thrown("Image bytes are null!");
		}
		var str = "";
		var i = 0;
		var len = bytes.length;
		while(i < len) {
			var code = bytes[i++] & 255;
			str += String.fromCodePoint(code);
		}
		var b64 = window.btoa(str);
		var src = "data:image/" + ext + ";base64," + b64;
		var img = new Image();
		img.onload = function(_) {
			var image = _gthis.decodeImageFromElement(img,pot);
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(image);
				});
			}
		};
		img.onerror = function(e) {
			clay_Log.error("failed to load image from bytes, on error: " + e,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAssets.hx", lineNumber : 216, className : "clay.web.WebAssets", methodName : "imageFromBytesUsingImageElement"});
		};
		img.src = src;
		return null;
	}
	,pixelsToPngData: function(width,height,pixels,callback) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = width;
		tmpCanvas.height = height;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		var imageBytes = null;
		var pixels1 = new Uint8ClampedArray(pixels.buffer);
		var imgdata = tmpContext.createImageData(width,height);
		imgdata.data.set(pixels1);
		try {
			tmpContext.putImageData(imgdata,0,0);
			tmpCanvas.toBlob(function(blob) {
				blob.arrayBuffer().then(function(buffer) {
					var pngData = new Uint8Array(buffer,0,buffer.byteLength);
					callback(pngData);
					tmpCanvas = null;
					tmpContext = null;
					imgdata = null;
				});
			},"image/png");
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown(e);
		}
	}
	,paddedBytesFromPixels: function(width,height,widthPadded,heightPadded,source) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = widthPadded;
		tmpCanvas.height = heightPadded;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		var imageBytes = null;
		var pixels = new Uint8ClampedArray(source.buffer);
		var imgdata = tmpContext.createImageData(width,height);
		imgdata.data.set(pixels);
		try {
			tmpContext.putImageData(imgdata,0,0);
			imageBytes = tmpContext.getImageData(0,0,tmpCanvas.width,tmpCanvas.height);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown(e);
		}
		tmpCanvas = null;
		tmpContext = null;
		imgdata = null;
		return new Uint8Array(imageBytes.data);
	}
	,paddedBytesFromElement: function(width,height,widthPadded,heightPadded,source) {
		var tmpCanvas = window.document.createElement("canvas");
		tmpCanvas.width = widthPadded;
		tmpCanvas.height = heightPadded;
		var tmpContext = tmpCanvas.getContext("2d",null);
		tmpContext.clearRect(0,0,tmpCanvas.width,tmpCanvas.height);
		tmpContext.drawImage(source,0,0,width,height);
		var imageBytes = null;
		try {
			imageBytes = tmpContext.getImageData(0,0,tmpCanvas.width,tmpCanvas.height);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			var tips = "- textures served from file:/// throw security errors\n";
			tips += "- textures served over http:// work for cross origin byte requests";
			clay_Log.info(tips,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAssets.hx", lineNumber : 333, className : "clay.web.WebAssets", methodName : "paddedBytesFromElement"});
			throw haxe_Exception.thrown(e);
		}
		tmpCanvas = null;
		tmpContext = null;
		return new Uint8Array(imageBytes.data);
	}
	,bindElectronPngjs: function() {
		if(!this.testedElectronPngjsAvailability) {
			this.testedElectronPngjsAvailability = true;
			try {
				this.electron = require('electron');
				this.pngjs = this.electron.remote.require('pngjs');
			} catch( _g ) {
			}
		}
	}
	,nearestPowerOfTwo: function(value) {
		if(!clay_web_WebAssets.POT) {
			return value;
		}
		--value;
		value |= value >> 1;
		value |= value >> 2;
		value |= value >> 4;
		value |= value >> 8;
		value |= value >> 16;
		return ++value;
	}
	,__class__: clay_web_WebAssets
});
var clay_web_WebAudio = function(app) {
	this.active = false;
	this.ignoreEndedSoundsTick1 = [];
	this.ignoreEndedSoundsTick0 = [];
	this.handleSeq = 0;
	this.suspended = false;
	clay_base_BaseAudio.call(this,app);
	this.instances = new haxe_ds_IntMap();
};
$hxClasses["clay.web.WebAudio"] = clay_web_WebAudio;
clay_web_WebAudio.__name__ = "clay.web.WebAudio";
clay_web_WebAudio.__super__ = clay_base_BaseAudio;
clay_web_WebAudio.prototype = $extend(clay_base_BaseAudio.prototype,{
	suspended: null
	,handleSeq: null
	,instances: null
	,buffers: null
	,ignoreEndedSoundsTick0: null
	,ignoreEndedSoundsTick1: null
	,context: null
	,active: null
	,init: function() {
		this.initWebAudio();
	}
	,tick: function(delta) {
		var map = this.instances;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g = { value : _g_map.get(key), key : key};
			var handle = _g.key;
			var sound = _g.value;
			if(sound.loop) {
				if(sound.state == 1) {
					var time = sound.state == 1 ? sound.timeResume + (this.app.timestamp - sound.timeResumeAppTime) * sound.pitch : 0.0;
					var duration = sound.source.getDuration();
					if(duration > 0) {
						if(time >= duration) {
							this.app.events.audioEvent(0,handle);
							while(time >= duration) {
								time -= duration;
								sound.timeResumeAppTime += duration / sound.pitch;
							}
						}
					}
				}
			}
		}
		while(this.ignoreEndedSoundsTick1.length > 0) {
			var sound = this.ignoreEndedSoundsTick1.shift();
			if(sound.ignoreNextEnded > 0) {
				sound.ignoreNextEnded--;
			}
		}
		while(this.ignoreEndedSoundsTick0.length > 0) {
			var sound = this.ignoreEndedSoundsTick0.shift();
			this.ignoreEndedSoundsTick1.push(sound);
		}
	}
	,initWebAudio: function() {
		try {
			this.context = new AudioContext();
		} catch( _g ) {
			try {
				this.context = new window.webkitAudioContext();
			} catch( _g1 ) {
				clay_Log.debug("Audio / webaudio / no AudioContext could be created! No audio loading or playback will be available.",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 119, className : "clay.web.WebAudio", methodName : "initWebAudio"});
				return;
			}
		}
		if(this.context == null) {
			throw haxe_Exception.thrown("Audio / webaudio / no AudioContext could be created, is the Web Audio API supported?");
		}
		var info = "channelCount: " + this.context.destination.channelCount + ", " + ("channelCountMode: \"" + this.context.destination.channelCountMode + "\", ") + ("channelInterpretation: \"" + this.context.destination.channelInterpretation + "\", ") + ("maxChannelCount: " + this.context.destination.maxChannelCount + ", ") + ("numberOfInputs: " + this.context.destination.numberOfInputs + ", ") + ("numberOfOutputs: " + this.context.destination.numberOfOutputs);
		clay_Log.debug("Audio / webaudio: " + Std.string(this.context) + " / sampleRate: " + this.context.sampleRate + " / destination: " + info,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 135, className : "clay.web.WebAudio", methodName : "initWebAudio"});
		this.active = true;
	}
	,shutdown: function() {
		this.context.close();
	}
	,soundOf: function(handle) {
		return this.instances.h[handle];
	}
	,playBuffer: function(data) {
		var node = this.context.createBufferSource();
		node.buffer = data.buffer;
		return node;
	}
	,playBufferAgain: function(handle,sound,startTime) {
		var _gthis = this;
		sound.bufferNode = this.playBuffer(sound.source.data);
		sound.bufferNode.playbackRate.value = sound.pitch;
		sound.bufferNode.connect(sound.panNode);
		sound.bufferNode.loop = sound.loop;
		sound.panNode.connect(sound.gainNode);
		sound.gainNode.connect(this.context.destination);
		sound.bufferNode.start(0,startTime);
		sound.bufferNode.onended = function() {
			_gthis.soundEnded(sound);
		};
	}
	,playInstance: function(handle,source,inst,data,bufferNode,volume,loop) {
		var _gthis = this;
		var gain = this.context.createGain();
		var pan = this.context.createPanner();
		var node = null;
		var panVal = 0;
		gain.gain.value = volume;
		pan.panningModel = "equalpower";
		pan.setPosition(Math.cos(-1.5707),0,Math.sin(1.5707));
		if(bufferNode != null) {
			node = bufferNode;
			bufferNode.loop = loop;
		}
		if(data.mediaNode != null) {
			node = data.mediaNode;
			data.mediaElem.loop = loop;
		}
		node.connect(pan);
		pan.connect(gain);
		gain.connect(this.context.destination);
		var sound = { handle : handle, source : source, instance : inst, bufferNode : bufferNode, mediaNode : data.mediaNode, mediaElem : data.mediaElem, gainNode : gain, panNode : pan, state : 1, loop : loop, pan : 0, pitch : 1, ignoreNextEnded : 0, timeResumeAppTime : window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart, timeResume : 0.0, timePause : null};
		this.instances.h[handle] = sound;
		if(bufferNode != null) {
			bufferNode.start(0);
			bufferNode.onended = function() {
				_gthis.soundEnded(sound);
			};
		}
		if(data.mediaNode != null) {
			data.mediaElem.play();
			data.mediaElem.onended = function() {
				_gthis.soundEnded(sound);
			};
		}
	}
	,play: function(source,volume,paused) {
		var data = source.data;
		var handle = this.handleSeq;
		var inst = source.instance(handle);
		if(source.data.isStream) {
			data.mediaElem.play();
			data.mediaElem.volume = 1.0;
			this.playInstance(handle,source,inst,data,null,volume,false);
		} else {
			this.playInstance(handle,source,inst,data,this.playBuffer(data),volume,false);
		}
		this.handleSeq++;
		if(paused) {
			this.pause(handle);
		}
		return handle;
	}
	,loop: function(source,volume,paused) {
		var data = source.data;
		var handle = this.handleSeq;
		var inst = source.instance(handle);
		if(source.data.isStream) {
			data.mediaElem.play();
			data.mediaElem.volume = 1.0;
			this.playInstance(handle,source,inst,data,null,volume,true);
		} else {
			this.playInstance(handle,source,inst,data,this.playBuffer(data),volume,true);
		}
		this.handleSeq++;
		if(paused) {
			this.pause(handle);
		}
		return handle;
	}
	,stopBuffer: function(sound) {
		sound.bufferNode.stop();
		sound.bufferNode.disconnect();
		sound.gainNode.disconnect();
		sound.panNode.disconnect();
		sound.bufferNode = null;
	}
	,pause: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		if(sound.state != 1) {
			return;
		}
		clay_Log.debug("Audio / pause handle=" + handle + ", " + sound.source.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 319, className : "clay.web.WebAudio", methodName : "pause"});
		var timePause = this.positionOf(handle);
		sound.timePause = timePause;
		sound.state = 0;
		if(sound.bufferNode != null) {
			this.stopBuffer(sound);
		} else if(sound.mediaNode != null) {
			sound.mediaElem.pause();
		}
	}
	,unPause: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		if(sound.state != 0) {
			return;
		}
		clay_Log.debug("Audio / unpause handle=" + handle + ", " + sound.source.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 342, className : "clay.web.WebAudio", methodName : "unPause"});
		sound.timeResume = sound.timePause != null ? sound.timePause : 0;
		sound.timeResumeAppTime = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		if(sound.mediaNode == null) {
			this.playBufferAgain(handle,sound,sound.timePause);
		} else {
			sound.mediaElem.play();
		}
		sound.state = 1;
	}
	,soundEnded: function(sound) {
		if(sound.ignoreNextEnded > 0) {
			sound.ignoreNextEnded--;
			return;
		}
		if(sound.state != 0 && (sound.state != 1 || this.positionOf(sound.handle) + 0.1 >= sound.source.getDuration())) {
			this.destroySound(sound);
		}
	}
	,destroySound: function(sound) {
		if(sound.source != null && this.instances.h.hasOwnProperty(sound.handle) && this.positionOf(sound.handle) + 0.1 >= sound.source.getDuration()) {
			this.app.events.audioEvent(0,sound.handle);
		}
		if(sound.bufferNode != null) {
			sound.bufferNode.stop();
			sound.bufferNode.disconnect();
			sound.gainNode.disconnect();
			sound.panNode.disconnect();
			sound.bufferNode = null;
		}
		if(sound.mediaNode != null) {
			sound.mediaElem.pause();
			sound.mediaElem.currentTime = 0;
			sound.mediaNode.disconnect();
			sound.mediaElem = null;
			sound.mediaNode = null;
		}
		if(sound.gainNode != null) {
			sound.gainNode.disconnect();
			sound.gainNode = null;
		}
		if(sound.panNode != null) {
			sound.panNode.disconnect();
			sound.panNode = null;
		}
		if(this.instances.h.hasOwnProperty(sound.handle)) {
			this.instances.remove(sound.handle);
			this.app.events.audioEvent(1,sound.handle);
		}
		sound = null;
	}
	,stop: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		if(sound.state != 2) {
			clay_Log.debug("Audio / stop handle=" + handle + (sound.source != null && sound.source.data != null ? ", " + sound.source.data.id : ""),{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 416, className : "clay.web.WebAudio", methodName : "stop"});
		}
		this.destroySound(sound);
		sound.state = 2;
	}
	,volume: function(handle,volume) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / volume=" + volume + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 429, className : "clay.web.WebAudio", methodName : "volume"});
		sound.gainNode.gain.value = volume;
	}
	,pan: function(handle,pan) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / pan=" + pan + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 441, className : "clay.web.WebAudio", methodName : "pan"});
		sound.pan = pan;
		sound.panNode.setPosition(Math.cos((pan - 1) * 1.5707),0,Math.sin((pan + 1) * 1.5707));
	}
	,pitch: function(handle,pitch) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / pitch=" + pitch + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 457, className : "clay.web.WebAudio", methodName : "pitch"});
		if(sound.mediaNode == null) {
			var position = this.positionOf(handle);
			sound.pitch = pitch;
			if(sound.state == 1) {
				sound.timeResumeAppTime = sound.timeResume + (window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart) - position / sound.pitch;
			}
		}
		if(sound.bufferNode != null) {
			sound.bufferNode.playbackRate.value = pitch;
		} else {
			var tmp = sound.mediaNode != null;
		}
	}
	,position: function(handle,time) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return;
		}
		clay_Log.debug("Audio / position=" + time + " handle=" + handle + ", " + sound.source.data.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 482, className : "clay.web.WebAudio", methodName : "position"});
		if(sound.state == 0) {
			sound.timePause = time;
		} else {
			sound.timeResume = time;
			sound.timeResumeAppTime = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			if(sound.bufferNode != null) {
				sound.ignoreNextEnded++;
				this.ignoreEndedSoundsTick0.push(sound);
				this.stopBuffer(sound);
				this.playBufferAgain(handle,sound,time);
			} else {
				sound.mediaElem.currentTime = time;
			}
		}
	}
	,volumeOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		return sound.gainNode.gain.value;
	}
	,panOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		return sound.pan;
	}
	,pitchOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 1.0;
		}
		return sound.pitch;
	}
	,positionOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return 0.0;
		}
		if(sound.mediaElem == null) {
			switch(sound.state) {
			case 0:case 1:
				var time;
				switch(sound.state) {
				case 0:
					time = sound.timePause;
					break;
				case 1:
					time = sound.timeResume + (window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart - sound.timeResumeAppTime) * sound.pitch;
					break;
				default:
					time = 0.0;
				}
				var duration = sound.source.getDuration();
				if(duration > 0) {
					if(sound.loop) {
						time %= duration;
					} else if(time > duration) {
						time = duration;
					}
				}
				return time;
			case -1:case 2:
				return 0.0;
			}
		} else {
			return sound.mediaElem.currentTime;
		}
	}
	,stateOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return -1;
		}
		return sound.state;
	}
	,loopOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return false;
		}
		return sound.loop;
	}
	,instanceOf: function(handle) {
		var sound = this.instances.h[handle];
		if(sound == null) {
			return null;
		}
		return sound.instance;
	}
	,suspend: function() {
		if(!this.active) {
			return;
		}
		if(this.suspended) {
			return;
		}
		this.suspended = true;
		this.active = false;
		this.context.suspend();
	}
	,resume: function() {
		if(this.active) {
			return;
		}
		if(!this.suspended) {
			return;
		}
		this.suspended = false;
		this.active = true;
		this.context.resume();
	}
	,loadData: function(path,isStream,format,async,callback) {
		if(async == null) {
			async = false;
		}
		if(path == null) {
			throw haxe_Exception.thrown("path is null!");
		}
		if(!this.active) {
			clay_Log.error("Audio / WebAudio context unavailable",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 628, className : "clay.web.WebAudio", methodName : "loadData"});
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
			return null;
		}
		if(isStream) {
			this.loadDataFromStream(path,format,callback);
			return null;
		}
		this.loadDataFromSound(path,format,callback);
		return null;
	}
	,dataFromBytes: function(id,bytes,format,callback) {
		var _gthis = this;
		if(!this.active) {
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
			return;
		}
		if(id == null) {
			throw haxe_Exception.thrown("id is null!");
		}
		if(bytes == null) {
			throw haxe_Exception.thrown("bytes is null!");
		}
		this.context.decodeAudioData(bytes.buffer,function(buffer) {
			var data = new clay_web__$WebAudio_WebAudioData(_gthis.app,buffer,null,null,new clay_audio_AudioDataOptions(id,buffer.sampleRate | 0,buffer.length,buffer.duration,buffer.numberOfChannels,null,format,null,false));
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(data);
				});
			}
		},function() {
			clay_Log.error("Audio / failed to decode audio for `" + id + "`",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 685, className : "clay.web.WebAudio", methodName : "dataFromBytes"});
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
		});
	}
	,handleSourceDestroyed: function(source) {
	}
	,handleInstanceDestroyed: function(handle) {
		this.stop(handle);
	}
	,loadDataFromSound: function(path,format,callback) {
		var _gthis = this;
		this.app.io.loadData(path,true,null,function(bytes) {
			if(bytes != null) {
				_gthis.dataFromBytes(path,bytes,format,callback);
			} else if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
		});
	}
	,loadDataFromStream: function(path,format,callback) {
		var _gthis = this;
		var element = new Audio(path);
		element.autoplay = false;
		element.controls = false;
		element.preload = "auto";
		element.onerror = function(err) {
			var error;
			switch(element.error.code) {
			case 1:
				error = "MEDIA_ERR_ABORTED";
				break;
			case 2:
				error = "MEDIA_ERR_NETWORK";
				break;
			case 3:
				error = "MEDIA_ERR_DECODE";
				break;
			case 4:
				error = "MEDIA_ERR_SRC_NOT_SUPPORTED";
				break;
			case 5:
				error = "MEDIA_ERR_ENCRYPTED";
				break;
			default:
				error = "unknown error";
			}
			clay_Log.error("Audio / failed to load `" + path + "` as stream : `" + error + "`",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebAudio.hx", lineNumber : 748, className : "clay.web.WebAudio", methodName : "loadDataFromStream"});
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(null);
				});
			}
		};
		element.onloadedmetadata = function(_) {
			var node = _gthis.context.createMediaElementSource(element);
			var bytesPerSample = 2;
			var rate = _gthis.context.sampleRate | 0;
			var channels = node.channelCount;
			var sampleFrames = rate * channels * bytesPerSample;
			var length = element.duration * sampleFrames | 0;
			var data = new clay_web__$WebAudio_WebAudioData(_gthis.app,null,node,element,new clay_audio_AudioDataOptions(path,rate,length,element.duration,channels,null,format,null,true));
			if(callback != null) {
				clay_Immediate.push(function() {
					callback(data);
				});
			}
		};
	}
	,__class__: clay_web_WebAudio
});
var clay_web__$WebAudio_WebAudioData = function(app,buffer,mediaNode,mediaElem,options) {
	this.buffer = buffer;
	this.mediaNode = mediaNode;
	this.mediaElem = mediaElem;
	clay_audio_AudioData.call(this,app,options);
};
$hxClasses["clay.web._WebAudio.WebAudioData"] = clay_web__$WebAudio_WebAudioData;
clay_web__$WebAudio_WebAudioData.__name__ = "clay.web._WebAudio.WebAudioData";
clay_web__$WebAudio_WebAudioData.__super__ = clay_audio_AudioData;
clay_web__$WebAudio_WebAudioData.prototype = $extend(clay_audio_AudioData.prototype,{
	buffer: null
	,mediaNode: null
	,mediaElem: null
	,destroy: function() {
		this.buffer = null;
		this.mediaNode = null;
		this.mediaElem = null;
		clay_audio_AudioData.prototype.destroy.call(this);
	}
	,__class__: clay_web__$WebAudio_WebAudioData
});
var clay_web_WebConfig = function(windowId,windowParent,preventDefaultContextMenu,preventDefaultMouseWheel,preventDefaultTouches,preventDefaultKeys,mouseUseBrowserWindowEvents) {
	this.mouseUseBrowserWindowEvents = true;
	this.preventDefaultKeys = [1073741904,1073741903,1073741906,1073741905,8,9,127,32];
	this.preventDefaultTouches = true;
	this.preventDefaultMouseWheel = true;
	this.preventDefaultContextMenu = true;
	this.windowParent = window.document.body;
	this.windowId = "app";
	if(windowId != null) {
		this.windowId = windowId;
	}
	if(windowParent != null) {
		this.windowParent = windowParent;
	}
	if(preventDefaultContextMenu != null) {
		this.preventDefaultContextMenu = preventDefaultContextMenu;
	}
	if(preventDefaultMouseWheel != null) {
		this.preventDefaultMouseWheel = preventDefaultMouseWheel;
	}
	if(preventDefaultTouches != null) {
		this.preventDefaultTouches = preventDefaultTouches;
	}
	if(preventDefaultKeys != null) {
		this.preventDefaultKeys = preventDefaultKeys;
	}
	if(mouseUseBrowserWindowEvents != null) {
		this.mouseUseBrowserWindowEvents = mouseUseBrowserWindowEvents;
	}
};
$hxClasses["clay.web.WebConfig"] = clay_web_WebConfig;
clay_web_WebConfig.__name__ = "clay.web.WebConfig";
clay_web_WebConfig.prototype = {
	windowId: null
	,windowParent: null
	,preventDefaultContextMenu: null
	,preventDefaultMouseWheel: null
	,preventDefaultTouches: null
	,preventDefaultKeys: null
	,mouseUseBrowserWindowEvents: null
	,__class__: clay_web_WebConfig
};
var clay_web_WebIO = function(app) {
	this.electron = null;
	this.testedElectronAvailability = false;
	clay_base_BaseIO.call(this,app);
};
$hxClasses["clay.web.WebIO"] = clay_web_WebIO;
clay_web_WebIO.__name__ = "clay.web.WebIO";
clay_web_WebIO.__super__ = clay_base_BaseIO;
clay_web_WebIO.prototype = $extend(clay_base_BaseIO.prototype,{
	testedElectronAvailability: null
	,electron: null
	,isSynchronous: function() {
		if(!this.testedElectronAvailability) {
			this.testedElectronAvailability = true;
			try {
				this.electron = require('electron');
			} catch( _g ) {
			}
		}
		return this.electron != null;
	}
	,loadData: function(path,binary,async,callback) {
		if(async == null) {
			async = false;
		}
		if(binary == null) {
			binary = false;
		}
		if(path == null) {
			throw haxe_Exception.thrown("Path is null!");
		}
		if(!this.testedElectronAvailability) {
			this.testedElectronAvailability = true;
			try {
				this.electron = require('electron');
			} catch( _g ) {
			}
		}
		if(!async && this.electron != null && !StringTools.startsWith(path,"http://") && !StringTools.startsWith(path,"https://")) {
			var fs = this.electron.remote.require('fs');
			var cwd = this.electron.remote.process.cwd();
			try {
				var result = fs.readFileSync(path);
				var data = new Uint8Array(result.length);
				var _g = 0;
				var _g1 = result.length;
				while(_g < _g1) {
					var i = _g++;
					var val = result[i];
					data[i] = val;
				}
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(data);
					});
				}
				return data;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				clay_Log.error("failed to read file at path " + path + ": " + Std.string(e),{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebIO.hx", lineNumber : 62, className : "clay.web.WebIO", methodName : "loadData"});
				if(callback != null) {
					clay_Immediate.push(function() {
						callback(null);
					});
				}
				return null;
			}
		} else {
			var asyncHttp = true;
			var request = new XMLHttpRequest();
			request.open("GET",path,asyncHttp);
			if(binary) {
				request.overrideMimeType("text/plain; charset=x-user-defined");
			} else {
				request.overrideMimeType("text/plain; charset=UTF-8");
			}
			if(asyncHttp) {
				request.responseType = "arraybuffer";
			}
			request.onload = function(data) {
				if(request.status == 200) {
					var data1 = new Uint8Array(request.response);
					if(callback != null) {
						clay_Immediate.push(function() {
							callback(data1);
						});
					}
				} else {
					clay_Log.error("Request status was " + request.status + " / " + request.statusText,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebIO.hx", lineNumber : 102, className : "clay.web.WebIO", methodName : "loadData"});
					if(callback != null) {
						clay_Immediate.push(function() {
							callback(data);
						});
					}
				}
			};
			request.send();
			return null;
		}
	}
	,bindElectron: function() {
		if(!this.testedElectronAvailability) {
			this.testedElectronAvailability = true;
			try {
				this.electron = require('electron');
			} catch( _g ) {
			}
		}
	}
	,__class__: clay_web_WebIO
});
var clay_web_WebRuntime = function(app) {
	this.didEmitTickOnce = false;
	this.keyDownStates = new ceramic_IntMap();
	this.pendingKeyUps = [];
	this.touches = new ceramic_IntMap();
	this.windowDpr = 1.0;
	this.windowY = 0;
	this.windowX = 0;
	this.skipKeyboardEvents = false;
	this.skipMouseEvents = false;
	this.webglVersion = 1.0;
	this.gamepadsSupported = false;
	clay_base_BaseRuntime.call(this,app);
};
$hxClasses["clay.web.WebRuntime"] = clay_web_WebRuntime;
clay_web_WebRuntime.__name__ = "clay.web.WebRuntime";
clay_web_WebRuntime.timestamp = function() {
	return window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
};
clay_web_WebRuntime.defaultConfig = function() {
	return new clay_web_WebConfig("app",window.document.body,true,true,true,[1073741904,1073741903,1073741906,1073741905,8,9,127,32],true);
};
clay_web_WebRuntime.__super__ = clay_base_BaseRuntime;
clay_web_WebRuntime.prototype = $extend(clay_base_BaseRuntime.prototype,{
	gamepadsSupported: null
	,window: null
	,webglVersion: null
	,skipMouseEvents: null
	,skipKeyboardEvents: null
	,windowX: null
	,windowY: null
	,windowW: null
	,windowH: null
	,windowDpr: null
	,touches: null
	,gamepadButtonCache: null
	,gamepadAxisCache: null
	,pendingKeyUps: null
	,keyDownStates: null
	,didEmitTickOnce: null
	,init: function() {
		clay_web_WebRuntime.timestampStart = window.performance.now() / 1000.0;
		this.name = "web";
		this.initGamepads();
	}
	,ready: function() {
		this.createWindow();
		clay_Log.debug("Web / ready",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 85, className : "clay.web.WebRuntime", methodName : "ready"});
	}
	,run: function() {
		clay_Log.debug("Web / run",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 91, className : "clay.web.WebRuntime", methodName : "run"});
		this.loop(0);
		return false;
	}
	,loop: function(t) {
		if(t == null) {
			t = 0.016;
		}
		if(this.app.hasShutdown) {
			return false;
		}
		if(!this.app.shuttingDown) {
			window.requestAnimationFrame($bind(this,this.loop));
		}
		if(this.app.ready) {
			if(this.gamepadsSupported) {
				this.pollGamepads();
			}
			this.updateWindowBounds();
		}
		var newTimestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		if(this.app.shouldUpdate(newTimestamp)) {
			this.didEmitTickOnce = true;
			this.app.emitTick(newTimestamp);
		}
		this.clearPendingKeyUps();
		this.app.emitRender();
		return true;
	}
	,createWindow: function() {
		var config = this.app.config.window;
		this.window = window.document.createElement("canvas");
		this.windowDpr = this.windowDevicePixelRatio();
		this.window.width = Math.floor(config.width * this.windowDpr);
		this.window.height = Math.floor(config.height * this.windowDpr);
		this.windowW = config.width;
		this.windowH = config.height;
		this.window.style.width = config.width + "px";
		this.window.style.height = config.height + "px";
		this.window.style.background = "#000000";
		clay_Log.debug("Web / Created window at " + this.windowX + "," + this.windowY + " - " + this.window.width + "x" + this.window.height + " pixels (" + config.width + "x" + config.height + "@" + this.windowDpr + "x)",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 155, className : "clay.web.WebRuntime", methodName : "createWindow"});
		this.window.id = this.app.config.runtime.windowId;
		this.app.config.runtime.windowParent.appendChild(this.window);
		if(config.title != null) {
			window.document.title = config.title;
		}
		if(!this.createRenderContext(this.window)) {
			this.createRenderContextFailed();
			return;
		}
		this.postRenderContext(this.window);
		this.setupEvents();
	}
	,createRenderContext: function($window) {
		var config = this.app.config.render;
		var attr = this.applyGLAttributes(config);
		var gl = null;
		if(config.webgl.version != 1) {
			gl = $window.getContext("webgl" + config.webgl.version,attr);
			if(gl == null) {
				gl = $window.getContext("experimental-webgl" + config.webgl.version,attr);
			}
			if(gl != null) {
				this.webglVersion = config.webgl.version;
			}
		}
		if(gl == null) {
			gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL($window,attr);
			this.webglVersion = 1.0;
		}
		clay_opengl_web_GL.gl = gl;
		clay_Log.debug("GL / context: " + Std.string(gl != null),{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 201, className : "clay.web.WebRuntime", methodName : "createRenderContext"});
		return gl != null;
	}
	,createRenderContextFailed: function() {
		var msg = "WebGL is required to run this!<br/><br/>";
		msg += "visit <a style=\"color:#06b4fb; text-decoration:none;\" href=\"http://get.webgl.org/\">get.webgl.com</a> for info<br/>";
		msg += "and contact the developer of this app";
		var textEl = window.document.createElement("div");
		var overlayEl = window.document.createElement("div");
		textEl.style.marginLeft = "auto";
		textEl.style.marginRight = "auto";
		textEl.style.color = "#d3d3d3";
		textEl.style.marginTop = "5em";
		textEl.style.fontSize = "1.4em";
		textEl.style.fontFamily = "Helvetica, sans-serif";
		textEl.innerHTML = msg;
		overlayEl.style.top = "0";
		overlayEl.style.left = "0";
		overlayEl.style.width = "100%";
		overlayEl.style.height = "100%";
		overlayEl.style.display = "block";
		overlayEl.style.minWidth = "100%";
		overlayEl.style.minHeight = "100%";
		overlayEl.style.textAlign = "center";
		overlayEl.style.position = "absolute";
		overlayEl.style.background = "rgba(1,1,1,0.90)";
		overlayEl.appendChild(textEl);
		window.document.body.appendChild(overlayEl);
		throw haxe_Exception.thrown("Web / Failed to create render context");
	}
	,applyGLAttributes: function(config) {
		var attr = { alpha : config.webgl.alpha, antialias : config.webgl.antialias, depth : config.webgl.depth, stencil : config.webgl.stencil, failIfMajorPerformanceCaveat : config.webgl.failIfMajorPerformanceCaveat, premultipliedAlpha : config.webgl.premultipliedAlpha, preserveDrawingBuffer : config.webgl.preserveDrawingBuffer};
		if(config.antialiasing > 0) {
			attr.antialias = true;
		}
		if(config.depth > 0) {
			attr.depth = true;
		}
		if(config.stencil > 0) {
			attr.stencil = true;
		}
		return attr;
	}
	,postRenderContext: function($window) {
		var color = this.app.config.render.defaultClear;
		clay_opengl_web_GL.gl.clearDepth(1.0);
		clay_opengl_web_GL.gl.clearStencil(0);
		clay_opengl_web_GL.gl.clearColor(color.r,color.g,color.b,color.a);
		clay_opengl_web_GL.gl.clear(17664);
	}
	,setupEvents: function() {
		window.document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenChange));
		window.document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenError));
		this.window.addEventListener("mouseenter",$bind(this,this.handleMouseEnter));
		this.window.addEventListener("mouseleave",$bind(this,this.handleMouseLeave));
		window.document.addEventListener("visibilitychange",$bind(this,this.handleVisibilityChange));
		window.document.addEventListener("keydown",$bind(this,this.handleKeyDown));
		window.document.addEventListener("keyup",$bind(this,this.handleKeyUp));
		window.document.addEventListener("keypress",$bind(this,this.handleKeyPress));
		this.window.addEventListener("contextmenu",$bind(this,this.handleContextMenu));
		var eventsWindow = this.app.config.runtime.mouseUseBrowserWindowEvents ? window : this.window;
		eventsWindow.addEventListener("mousedown",$bind(this,this.handleMouseDown));
		eventsWindow.addEventListener("mouseup",$bind(this,this.handleMouseUp));
		eventsWindow.addEventListener("mousemove",$bind(this,this.handleMouseMove));
		this.window.addEventListener("wheel",$bind(this,this.handleWheel));
		this.window.addEventListener("touchstart",$bind(this,this.handleTouchStart));
		this.window.addEventListener("touchend",$bind(this,this.handleTouchEnd));
		this.window.addEventListener("touchmove",$bind(this,this.handleTouchMove));
		window.addEventListener("gamepadconnected",$bind(this,this.handleGamepadConnected));
		window.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadDisconnected));
	}
	,handleVisibilityChange: function(_) {
		if(window.document.hidden) {
			this.app.emitWindowEvent(2,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(7,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(13,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		} else {
			this.app.emitWindowEvent(1,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(9,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
			this.app.emitWindowEvent(12,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		}
	}
	,handleContextMenu: function(ev) {
		if(this.app.config.runtime.preventDefaultContextMenu) {
			ev.preventDefault();
		}
	}
	,handleFullscreenChange: function(ev) {
		var document = window.document;
		var fullscreenElement = document.fullscreenElement;
		if(fullscreenElement != null) {
			clay_Log.debug("Web / Entering fullscreen (id=" + fullscreenElement.id + ")",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 365, className : "clay.web.WebRuntime", methodName : "handleFullscreenChange"});
			this.app.config.window.fullscreen = true;
			this.app.emitWindowEvent(15,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		} else {
			clay_Log.debug("Web / Leaving fullscreen",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 370, className : "clay.web.WebRuntime", methodName : "handleFullscreenChange"});
			this.app.config.window.fullscreen = false;
			this.app.emitWindowEvent(16,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
		}
	}
	,handleFullscreenError: function(ev) {
		clay_Log.warning("Web / Failed to change fullscreen setting: " + Std.string(ev),{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 379, className : "clay.web.WebRuntime", methodName : "handleFullscreenError"});
	}
	,handleMouseEnter: function(ev) {
		this.app.emitWindowEvent(10,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
	}
	,handleMouseLeave: function(ev) {
		this.app.emitWindowEvent(11,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,0,0);
	}
	,handleMouseDown: function(ev) {
		if(this.skipMouseEvents) {
			return;
		}
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var button = ev.button;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseDown(x,y,button,timestamp,1);
	}
	,handleMouseUp: function(ev) {
		if(this.skipMouseEvents) {
			return;
		}
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var button = ev.button;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseUp(x,y,button,timestamp,1);
	}
	,handleMouseMove: function(ev) {
		if(this.skipMouseEvents) {
			return;
		}
		var movementX = ev.movementX == null ? 0 : ev.movementX;
		var movementY = ev.movementY == null ? 0 : ev.movementY;
		movementX = Math.floor(movementX * this.windowDpr);
		movementY = Math.floor(movementY * this.windowDpr);
		var _this = this.app.input;
		var x = Math.floor(this.windowDpr * (ev.pageX - this.windowX));
		var y = Math.floor(this.windowDpr * (ev.pageY - this.windowY));
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseMove(x,y,movementX,movementY,timestamp,1);
	}
	,handleWheel: function(ev) {
		if(this.app.config.runtime.preventDefaultMouseWheel) {
			ev.preventDefault();
		}
		if(this.skipMouseEvents) {
			return;
		}
		var wheelFactor = 0.1;
		var _this = this.app.input;
		var x = Math.round(ev.deltaX * wheelFactor);
		var y = Math.round(ev.deltaY * wheelFactor);
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.mouseWheel(x,y,timestamp,1);
	}
	,handleTouchStart: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.get(touch.identifier);
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.set(touch.identifier,touchInfo);
			} else {
				touchInfo.x = x;
				touchInfo.y = y;
			}
			var _this = this.app.input;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchDown(x,y,0,0,touchId,timestamp);
		}
	}
	,handleTouchEnd: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.get(touch.identifier);
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.set(touch.identifier,touchInfo);
			}
			var _this = this.app.input;
			var dx = x - touchInfo.x;
			var dy = y - touchInfo.y;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchUp(x,y,dx,dy,touchId,timestamp);
			touchInfo.x = x;
			touchInfo.y = y;
		}
	}
	,handleTouchMove: function(ev) {
		if(this.app.config.runtime.preventDefaultTouches) {
			ev.preventDefault();
		}
		var bound = this.window.getBoundingClientRect();
		var _g = 0;
		var _g1 = ev.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			var x = touch.clientX - bound.left;
			var y = touch.clientY - bound.top;
			x /= bound.width;
			y /= bound.height;
			var touchInfo = this.touches.get(touch.identifier);
			if(touchInfo == null) {
				touchInfo = { x : x, y : y};
				this.touches.set(touch.identifier,touchInfo);
			}
			var _this = this.app.input;
			var dx = x - touchInfo.x;
			var dy = y - touchInfo.y;
			var touchId = touch.identifier;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.touchMove(x,y,dx,dy,touchId,timestamp);
			touchInfo.x = x;
			touchInfo.y = y;
		}
	}
	,clearPendingKeyUps: function() {
		while(this.pendingKeyUps.length > 0) {
			var info = this.pendingKeyUps.shift();
			if(this.keyDownStates.get(info.keyCode) == true) {
				this.keyDownStates.set(info.keyCode,false);
				var _this = this.app.input;
				var keyCode = info.keyCode;
				var scanCode = info.scanCode;
				var repeat = info.repeat;
				var mod = info.modState;
				var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
				_this.app.events.keyUp(keyCode,scanCode,repeat,mod,timestamp,info.windowId);
			}
		}
	}
	,handleKeyDown: function(ev) {
		if(this.skipKeyboardEvents) {
			return;
		}
		var keyCode = this.convertKeyCode(ev.keyCode);
		var scanCode = this.convertScanCode(ev.code,keyCode);
		var modState = this.modStateFromEvent(ev);
		if(!modState.none) {
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				break;
			default:
				if(modState.lctrl || modState.rctrl || modState.lalt || modState.ralt || modState.lmeta || modState.rmeta) {
					this.pendingKeyUps.push({ keyCode : keyCode, scanCode : scanCode, repeat : ev.repeat, modState : modState, windowId : 1});
				}
			}
		}
		if(this.app.config.runtime.preventDefaultKeys.indexOf(keyCode) != -1) {
			ev.preventDefault();
		}
		this.keyDownStates.set(keyCode,true);
		var _this = this.app.input;
		var repeat = ev.repeat;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.keyDown(keyCode,scanCode,repeat,modState,timestamp,1);
	}
	,handleKeyUp: function(ev) {
		if(this.skipKeyboardEvents) {
			return;
		}
		var keyCode = this.convertKeyCode(ev.keyCode);
		var scanCode = this.convertScanCode(ev.code,keyCode);
		var modState = this.modStateFromEvent(ev);
		if(this.app.config.runtime.preventDefaultKeys.indexOf(keyCode) != -1) {
			ev.preventDefault();
		}
		if(this.keyDownStates.get(keyCode) == true) {
			this.keyDownStates.set(keyCode,false);
			var _this = this.app.input;
			var repeat = ev.repeat;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.keyUp(keyCode,scanCode,repeat,modState,timestamp,1);
		}
	}
	,handleKeyPress: function(ev) {
		if(this.skipKeyboardEvents) {
			return;
		}
		if(ev.which != 0 && ev.keyCode != 8 && ev.keyCode != 13) {
			var code = ev.charCode;
			var text = String.fromCodePoint(code);
			var _this = this.app.input;
			var length = text.length;
			var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
			_this.app.events.text(text,0,length,2,timestamp,1);
		}
	}
	,handleGamepadConnected: function(ev) {
		clay_Log.debug("Gamepad connected at index " + ev.gamepad.index + ": " + ev.gamepad.id + ". " + ev.gamepad.buttons.length + " buttons, " + ev.gamepad.axes.length + " axes",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 694, className : "clay.web.WebRuntime", methodName : "handleGamepadConnected"});
		var gamepad = ev.gamepad;
		if(this.gamepadButtonCache[gamepad.index] == null) {
			this.gamepadButtonCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.buttons.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadButtonCache[gamepad.index].push(0);
			}
			this.gamepadAxisCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.axes.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadAxisCache[gamepad.index].push(0);
			}
		}
		var _this = this.app.input;
		var gamepad = ev.gamepad.index;
		var name = ev.gamepad.id;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.gamepadDevice(gamepad,name,1,timestamp);
	}
	,handleGamepadDisconnected: function(ev) {
		clay_Log.debug("Gamepad disconnected at index " + ev.gamepad.index + ": " + ev.gamepad.id,{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 709, className : "clay.web.WebRuntime", methodName : "handleGamepadDisconnected"});
		var gamepad = ev.gamepad;
		this.gamepadButtonCache[gamepad.index] = null;
		this.gamepadAxisCache[gamepad.index] = null;
		var _this = this.app.input;
		var gamepad = ev.gamepad.index;
		var name = ev.gamepad.id;
		var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
		_this.app.events.gamepadDevice(gamepad,name,2,timestamp);
	}
	,convertKeyCode: function(domKeyCode) {
		if(domKeyCode >= 65 && domKeyCode <= 90) {
			return domKeyCode + 32;
		}
		return clay_web__$WebRuntime_DOMKeys.domKeyToKeyCode(domKeyCode);
	}
	,convertScanCode: function(rawCode,keyCode) {
		if(rawCode == null) {
			return clay_KeyCode.toScanCode(keyCode);
		}
		switch(rawCode) {
		case "AltLeft":
			return 226;
		case "AltRight":
			return 230;
		case "ArrowDown":
			return 81;
		case "ArrowLeft":
			return 80;
		case "ArrowRight":
			return 79;
		case "ArrowUp":
			return 82;
		case "AudioVolumeDown":case "VolumeDown":
			return 129;
		case "AudioVolumeMute":
			return 262;
		case "AudioVolumeUp":case "VolumeUp":
			return 128;
		case "Backquote":
			return 53;
		case "Backslash":
			return 49;
		case "Backspace":
			return 42;
		case "BracketLeft":
			return 47;
		case "BracketRight":
			return 48;
		case "BrowserBack":
			return 270;
		case "BrowserFavorites":
			return 274;
		case "BrowserForward":
			return 271;
		case "BrowserHome":
			return 269;
		case "BrowserRefresh":
			return 273;
		case "BrowserSearch":
			return 268;
		case "BrowserStop":
			return 272;
		case "Cancel":
			return 155;
		case "CapsLock":
			return 57;
		case "Comma":
			return 54;
		case "ContextMenu":
			return 118;
		case "ControlLeft":
			return 224;
		case "ControlRight":
			return 228;
		case "Delete":
			return 76;
		case "Digit0":
			return 39;
		case "Digit1":
			return 30;
		case "Digit2":
			return 31;
		case "Digit3":
			return 32;
		case "Digit4":
			return 33;
		case "Digit5":
			return 34;
		case "Digit6":
			return 35;
		case "Digit7":
			return 36;
		case "Digit8":
			return 37;
		case "Digit9":
			return 38;
		case "End":
			return 77;
		case "Enter":
			return 40;
		case "Equal":
			return 46;
		case "Escape":
			return 41;
		case "F1":
			return 58;
		case "F10":
			return 67;
		case "F11":
			return 68;
		case "F12":
			return 69;
		case "F2":
			return 59;
		case "F3":
			return 60;
		case "F4":
			return 61;
		case "F5":
			return 62;
		case "F6":
			return 63;
		case "F7":
			return 64;
		case "F8":
			return 65;
		case "F9":
			return 66;
		case "Help":case "Insert":
			return 73;
		case "Home":
			return 74;
		case "IntlBackslash":
			return 100;
		case "KanaMode":case "Lang1":
			return 144;
		case "KeyA":
			return 4;
		case "KeyB":
			return 5;
		case "KeyC":
			return 6;
		case "KeyD":
			return 7;
		case "KeyE":
			return 8;
		case "KeyF":
			return 9;
		case "KeyG":
			return 10;
		case "KeyH":
			return 11;
		case "KeyI":
			return 12;
		case "KeyJ":
			return 13;
		case "KeyK":
			return 14;
		case "KeyL":
			return 15;
		case "KeyM":
			return 16;
		case "KeyN":
			return 17;
		case "KeyO":
			return 18;
		case "KeyP":
			return 19;
		case "KeyQ":
			return 20;
		case "KeyR":
			return 21;
		case "KeyS":
			return 22;
		case "KeyT":
			return 23;
		case "KeyU":
			return 24;
		case "KeyV":
			return 25;
		case "KeyW":
			return 26;
		case "KeyX":
			return 27;
		case "KeyY":
			return 28;
		case "KeyZ":
			return 29;
		case "Lang2":
			return 145;
		case "Lang3":
			return 146;
		case "Lang4":
			return 147;
		case "Lang5":
			return 148;
		case "Lang6":
			return 149;
		case "Lang7":
			return 150;
		case "Lang8":
			return 151;
		case "Lang9":
			return 152;
		case "LaunchApp1":
			return 283;
		case "LaunchApp2":
			return 284;
		case "LaunchMail":
			return 265;
		case "MediaPlayPause":
			return 261;
		case "MediaSelect":
			return 263;
		case "MediaStop":
			return 260;
		case "MediaTrackNext":
			return 258;
		case "MediaTrackPrevious":
			return 259;
		case "MetaLeft":case "OSLeft":
			return 227;
		case "MetaRight":case "OSRight":
			return 231;
		case "Minus":
			return 45;
		case "NumLock":
			return 83;
		case "Numpad0":
			return 98;
		case "Numpad1":
			return 89;
		case "Numpad2":
			return 90;
		case "Numpad3":
			return 91;
		case "Numpad4":
			return 92;
		case "Numpad5":
			return 93;
		case "Numpad6":
			return 94;
		case "Numpad7":
			return 95;
		case "Numpad8":
			return 96;
		case "Numpad9":
			return 97;
		case "NumpadAdd":
			return 87;
		case "NumpadComma":
			return 133;
		case "NumpadDecimal":
			return 220;
		case "NumpadDivide":
			return 84;
		case "NumpadEnter":
			return 88;
		case "NumpadEqual":
			return 103;
		case "NumpadMultiply":
			return 85;
		case "NumpadSubtract":
			return 86;
		case "PageDown":
			return 78;
		case "PageUp":
			return 75;
		case "Pause":
			return 72;
		case "Period":
			return 55;
		case "Power":
			return 102;
		case "PrintScreen":
			return 70;
		case "Quote":
			return 52;
		case "ScrollLock":
			return 71;
		case "Semicolon":
			return 51;
		case "ShiftLeft":
			return 225;
		case "ShiftRight":
			return 229;
		case "Slash":
			return 56;
		case "Space":
			return 44;
		case "Tab":
			return 43;
		default:
			return clay_KeyCode.toScanCode(keyCode);
		}
	}
	,modStateFromEvent: function(keyEvent) {
		var none = !keyEvent.altKey && !keyEvent.ctrlKey && !keyEvent.metaKey && !keyEvent.shiftKey;
		this.app.input.modState.none = none;
		this.app.input.modState.lshift = keyEvent.shiftKey;
		this.app.input.modState.rshift = keyEvent.shiftKey;
		this.app.input.modState.lctrl = keyEvent.ctrlKey;
		this.app.input.modState.rctrl = keyEvent.ctrlKey;
		this.app.input.modState.lalt = keyEvent.altKey;
		this.app.input.modState.ralt = keyEvent.altKey;
		this.app.input.modState.lmeta = keyEvent.metaKey;
		this.app.input.modState.rmeta = keyEvent.metaKey;
		this.app.input.modState.num = false;
		this.app.input.modState.caps = false;
		this.app.input.modState.mode = false;
		this.app.input.modState.ctrl = keyEvent.ctrlKey;
		this.app.input.modState.shift = keyEvent.shiftKey;
		this.app.input.modState.alt = keyEvent.altKey;
		this.app.input.modState.meta = keyEvent.metaKey;
		return this.app.input.modState;
	}
	,getWindowX: function(bounds) {
		return Math.round(bounds.left + window.pageXOffset - window.document.body.clientTop);
	}
	,getWindowY: function(bounds) {
		return Math.round(bounds.top + window.pageYOffset - window.document.body.clientLeft);
	}
	,translateMouseX: function(ev) {
		return Math.floor(this.windowDpr * (ev.pageX - this.windowX));
	}
	,translateMouseY: function(ev) {
		return Math.floor(this.windowDpr * (ev.pageY - this.windowY));
	}
	,updateWindowBounds: function() {
		var dpr = this.windowDpr;
		this.windowDpr = this.windowDevicePixelRatio();
		var bounds = this.window.getBoundingClientRect();
		var x = Math.round(bounds.left + window.pageXOffset - window.document.body.clientTop);
		var y = Math.round(bounds.top + window.pageYOffset - window.document.body.clientLeft);
		var w = Math.round(bounds.width);
		var h = Math.round(bounds.height);
		if(x != this.windowX || y != this.windowY) {
			this.windowX = x;
			this.windowY = y;
			this.app.emitWindowEvent(4,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,this.windowX,this.windowY);
		}
		if(w != this.windowW || h != this.windowH || dpr != this.windowDpr) {
			this.windowW = w;
			this.windowH = h;
			this.window.width = Math.floor(this.windowW * this.windowDpr);
			this.window.height = Math.floor(this.windowH * this.windowDpr);
			this.app.emitWindowEvent(6,window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart,1,this.window.width,this.window.height);
		}
	}
	,initGamepads: function() {
		var list = this.getGamepadList();
		if(list != null) {
			this.gamepadsSupported = true;
			this.gamepadButtonCache = [];
			this.gamepadAxisCache = [];
			var _g = 0;
			while(_g < list.length) {
				var gamepad = list[_g];
				++_g;
				if(gamepad != null) {
					if(this.gamepadButtonCache[gamepad.index] == null) {
						this.gamepadButtonCache[gamepad.index] = [];
						var _g1 = 0;
						var _g2 = gamepad.buttons.length;
						while(_g1 < _g2) {
							var i = _g1++;
							this.gamepadButtonCache[gamepad.index].push(0);
						}
						this.gamepadAxisCache[gamepad.index] = [];
						var _g3 = 0;
						var _g4 = gamepad.axes.length;
						while(_g3 < _g4) {
							var i1 = _g3++;
							this.gamepadAxisCache[gamepad.index].push(0);
						}
					}
				}
			}
		} else {
			clay_Log.warning("Gamepads are not supported in this browser :(",{ fileName : "C:\\Users\\authe\\ceramic\\git\\clay\\src\\clay\\web\\WebRuntime.hx", lineNumber : 977, className : "clay.web.WebRuntime", methodName : "initGamepads"});
		}
	}
	,getGamepadList: function() {
		if($global.navigator.getGamepads != null) {
			return $global.navigator.getGamepads();
		}
		if($global.navigator.webkitGetGamepads != null) {
			return $global.navigator.webkitGetGamepads();
		}
		return null;
	}
	,initGamepadCacheIfNeeded: function(gamepad) {
		if(this.gamepadButtonCache[gamepad.index] == null) {
			this.gamepadButtonCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.buttons.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadButtonCache[gamepad.index].push(0);
			}
			this.gamepadAxisCache[gamepad.index] = [];
			var _g = 0;
			var _g1 = gamepad.axes.length;
			while(_g < _g1) {
				var i = _g++;
				this.gamepadAxisCache[gamepad.index].push(0);
			}
		}
	}
	,deleteGamepadCache: function(gamepad) {
		this.gamepadButtonCache[gamepad.index] = null;
		this.gamepadAxisCache[gamepad.index] = null;
	}
	,pollGamepads: function() {
		var list = this.getGamepadList();
		if(list != null) {
			var len = list.length;
			var index = 0;
			while(index < len) {
				var gamepad = list[index];
				if(gamepad == null) {
					++index;
					continue;
				}
				if(this.gamepadButtonCache[gamepad.index] == null) {
					this.gamepadButtonCache[gamepad.index] = [];
					var _g = 0;
					var _g1 = gamepad.buttons.length;
					while(_g < _g1) {
						var i = _g++;
						this.gamepadButtonCache[gamepad.index].push(0);
					}
					this.gamepadAxisCache[gamepad.index] = [];
					var _g2 = 0;
					var _g3 = gamepad.axes.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						this.gamepadAxisCache[gamepad.index].push(0);
					}
				}
				var axisCache = this.gamepadAxisCache[gamepad.index];
				var _g4 = 0;
				var _g5 = gamepad.axes.length;
				while(_g4 < _g5) {
					var axisIndex = _g4++;
					var axis = gamepad.axes[axisIndex];
					if(axis != axisCache[axisIndex]) {
						axisCache[axisIndex] = axis;
						var _this = this.app.input;
						var gamepad1 = gamepad.index;
						var timestamp = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
						_this.app.events.gamepadAxis(gamepad1,axisIndex,axis,timestamp);
					}
				}
				var buttonCache = this.gamepadButtonCache[gamepad.index];
				var _g6 = 0;
				var _g7 = gamepad.buttons.length;
				while(_g6 < _g7) {
					var buttonIndex = _g6++;
					var button = gamepad.buttons[buttonIndex];
					if(button.value != buttonCache[buttonIndex]) {
						buttonCache[buttonIndex] = button.value;
						if(button.pressed) {
							var _this1 = this.app.input;
							var gamepad2 = gamepad.index;
							var value = button.value;
							var timestamp1 = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
							_this1.app.events.gamepadDown(gamepad2,buttonIndex,value,timestamp1);
						} else {
							var _this2 = this.app.input;
							var gamepad3 = gamepad.index;
							var value1 = button.value;
							var timestamp2 = window.performance.now() / 1000.0 - clay_web_WebRuntime.timestampStart;
							_this2.app.events.gamepadUp(gamepad3,buttonIndex,value1,timestamp2);
						}
					}
				}
				++index;
			}
		}
	}
	,windowDevicePixelRatio: function() {
		if(window.devicePixelRatio == null) {
			return 1.0;
		} else {
			return window.devicePixelRatio;
		}
	}
	,windowWidth: function() {
		return Math.round(this.windowW * this.windowDevicePixelRatio());
	}
	,windowHeight: function() {
		return Math.round(this.windowH * this.windowDevicePixelRatio());
	}
	,setWindowFullscreen: function(fullscreen) {
		if(fullscreen) {
			this.window.requestFullscreen();
		} else {
			window.document.exitFullscreen();
		}
		return true;
	}
	,setWindowTitle: function(title) {
		this.app.config.window.title = title;
		window.document.title = title;
	}
	,clamp: function(n) {
		return Math.max(0,Math.min(n,1));
	}
	,startGamepadRumble: function(gamepadId,lowFrequency,highFrequency,duration) {
		var list = this.getGamepadList();
		var gamepad = list[gamepadId];
		if(gamepad == null) {
			return;
		}
		var vibrationActuator = gamepad.vibrationActuator;
		if(vibrationActuator == null) {
			return;
		}
		vibrationActuator.playEffect("dual-rumble",{ duration : duration * 1000, weakMagnitude : Math.max(0,Math.min(lowFrequency,1)), strongMagnitude : Math.max(0,Math.min(highFrequency,1))});
	}
	,stopGamepadRumble: function(gamepadId) {
		var list = this.getGamepadList();
		var gamepad = list[gamepadId];
		if(gamepad == null) {
			return;
		}
		var vibrationActuator = gamepad.vibrationActuator;
		if(vibrationActuator == null) {
			return;
		}
		vibrationActuator.playEffect("dual-rumble",{ duration : 1, weakMagnitude : 0, strongMagnitude : 0});
	}
	,getGamepadName: function(index) {
		var list = this.getGamepadList();
		if(list != null) {
			var _g = 0;
			while(_g < list.length) {
				var gamepad = list[_g];
				++_g;
				if(gamepad != null && gamepad.index == index) {
					return gamepad.id;
				}
			}
		}
		return null;
	}
	,__class__: clay_web_WebRuntime
});
var clay_web__$WebRuntime_DOMKeys = function() { };
$hxClasses["clay.web._WebRuntime.DOMKeys"] = clay_web__$WebRuntime_DOMKeys;
clay_web__$WebRuntime_DOMKeys.__name__ = "clay.web._WebRuntime.DOMKeys";
clay_web__$WebRuntime_DOMKeys.domKeyToKeyCode = function(keyCode) {
	switch(keyCode) {
	case 16:
		return 1073742049;
	case 17:
		return 1073742048;
	case 18:
		return 1073742050;
	case 20:
		return 1073741881;
	case 33:
		return 1073741899;
	case 34:
		return 1073741902;
	case 35:
		return 1073741901;
	case 36:
		return 1073741898;
	case 37:
		return 1073741904;
	case 38:
		return 1073741906;
	case 39:
		return 1073741903;
	case 40:
		return 1073741905;
	case 44:
		return 1073741894;
	case 45:
		return 1073741897;
	case 46:
		return 127;
	case 91:
		return 1073742051;
	case 93:
		return 1073742055;
	case 96:
		return 1073741922;
	case 97:
		return 1073741913;
	case 98:
		return 1073741914;
	case 99:
		return 1073741915;
	case 100:
		return 1073741916;
	case 101:
		return 1073741917;
	case 102:
		return 1073741918;
	case 103:
		return 1073741919;
	case 104:
		return 1073741920;
	case 105:
		return 1073741921;
	case 106:
		return 1073741909;
	case 107:
		return 1073741911;
	case 109:
		return 1073741910;
	case 110:
		return 1073742044;
	case 111:
		return 1073741908;
	case 112:
		return 1073741882;
	case 113:
		return 1073741883;
	case 114:
		return 1073741884;
	case 115:
		return 1073741885;
	case 116:
		return 1073741886;
	case 117:
		return 1073741887;
	case 118:
		return 1073741888;
	case 119:
		return 1073741889;
	case 120:
		return 1073741890;
	case 121:
		return 1073741891;
	case 122:
		return 1073741892;
	case 123:
		return 1073741893;
	case 124:
		return 1073741928;
	case 125:
		return 1073741929;
	case 126:
		return 1073741930;
	case 127:
		return 1073741931;
	case 128:
		return 1073741932;
	case 129:
		return 1073741933;
	case 130:
		return 1073741934;
	case 131:
		return 1073741935;
	case 132:
		return 1073741936;
	case 133:
		return 1073741937;
	case 134:
		return 1073741938;
	case 135:
		return 1073741939;
	case 144:
		return 1073741907;
	case 160:
		return 94;
	case 161:
		return 33;
	case 162:
		return 34;
	case 163:
		return 35;
	case 164:
		return 36;
	case 165:
		return 37;
	case 166:
		return 38;
	case 167:
		return 95;
	case 168:
		return 40;
	case 169:
		return 41;
	case 170:
		return 42;
	case 171:
		return 43;
	case 172:
		return 92;
	case 173:
		return 45;
	case 174:
		return 91;
	case 175:
		return 93;
	case 176:
		return 96;
	case 181:
		return 1073742086;
	case 182:
		return 1073741953;
	case 183:
		return 1073741952;
	case 188:
		return 44;
	case 190:
		return 46;
	case 191:
		return 47;
	case 192:
		return 96;
	case 219:
		return 91;
	case 220:
		return 92;
	case 221:
		return 93;
	case 222:
		return 39;
	case 224:
		return 1073742051;
	}
	return keyCode;
};
var format_gz_Reader = function(i) {
	this.i = i;
};
$hxClasses["format.gz.Reader"] = format_gz_Reader;
format_gz_Reader.__name__ = "format.gz.Reader";
format_gz_Reader.prototype = {
	i: null
	,read: function() {
		var h = this.readHeader();
		var o = new haxe_io_BytesOutput();
		this.readData(o);
		return { file : h.fileName, data : o.getBytes()};
	}
	,readHeader: function() {
		if(this.i.readByte() != 31 || this.i.readByte() != 139) {
			throw haxe_Exception.thrown("Invalid GZ header");
		}
		if(this.i.readByte() != 8) {
			throw haxe_Exception.thrown("Invalid compression method");
		}
		var flags = this.i.readByte();
		var mtime = this.i.read(4);
		var xflags = this.i.readByte();
		var os = this.i.readByte();
		var fname = null;
		var comments = null;
		var xdata = null;
		if((flags & 4) != 0) {
			var xlen = this.i.readUInt16();
			xdata = this.i.read(xlen);
		}
		if((flags & 8) != 0) {
			fname = this.i.readUntil(0);
		}
		if((flags & 16) != 0) {
			comments = this.i.readUntil(0);
		}
		if((flags & 2) != 0) {
			var hcrc = this.i.readUInt16();
		}
		return { fileName : fname, comments : comments, extraData : xdata};
	}
	,readData: function(o,bufsize) {
		if(bufsize == null) {
			bufsize = 65536;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var tsize = 0;
		var inflate = new haxe_zip_InflateImpl(this.i,false,false);
		while(true) {
			var len = inflate.readBytes(buf,0,bufsize);
			o.writeFullBytes(buf,0,len);
			if(len < bufsize) {
				break;
			}
			tsize += len;
		}
		return tsize;
	}
	,refill: function(buf,pos) {
		try {
			while(pos != buf.length) {
				var k = this.i.readBytes(buf,pos,buf.length - pos);
				pos += k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		if(pos == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(pos != buf.length) {
			buf = buf.sub(0,pos);
		}
		return buf;
	}
	,__class__: format_gz_Reader
};
var format_tmx_TmxOrientation = $hxEnums["format.tmx.TmxOrientation"] = { __ename__:"format.tmx.TmxOrientation",__constructs__:null
	,Orthogonal: {_hx_name:"Orthogonal",_hx_index:0,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Isometric: {_hx_name:"Isometric",_hx_index:1,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Staggered: {_hx_name:"Staggered",_hx_index:2,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Hexagonal: {_hx_name:"Hexagonal",_hx_index:3,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"format.tmx.TmxOrientation",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxOrientation.__constructs__ = [format_tmx_TmxOrientation.Orthogonal,format_tmx_TmxOrientation.Isometric,format_tmx_TmxOrientation.Staggered,format_tmx_TmxOrientation.Hexagonal,format_tmx_TmxOrientation.Unknown];
var format_tmx_TmxRenderOrder = $hxEnums["format.tmx.TmxRenderOrder"] = { __ename__:"format.tmx.TmxRenderOrder",__constructs__:null
	,RightDown: {_hx_name:"RightDown",_hx_index:0,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,RightUp: {_hx_name:"RightUp",_hx_index:1,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,LeftDown: {_hx_name:"LeftDown",_hx_index:2,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,LeftUp: {_hx_name:"LeftUp",_hx_index:3,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxRenderOrder.__constructs__ = [format_tmx_TmxRenderOrder.RightDown,format_tmx_TmxRenderOrder.RightUp,format_tmx_TmxRenderOrder.LeftDown,format_tmx_TmxRenderOrder.LeftUp,format_tmx_TmxRenderOrder.Unknown];
var format_tmx_TmxStaggerIndex = $hxEnums["format.tmx.TmxStaggerIndex"] = { __ename__:"format.tmx.TmxStaggerIndex",__constructs__:null
	,Even: {_hx_name:"Even",_hx_index:0,__enum__:"format.tmx.TmxStaggerIndex",toString:$estr}
	,Odd: {_hx_name:"Odd",_hx_index:1,__enum__:"format.tmx.TmxStaggerIndex",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"format.tmx.TmxStaggerIndex",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxStaggerIndex.__constructs__ = [format_tmx_TmxStaggerIndex.Even,format_tmx_TmxStaggerIndex.Odd,format_tmx_TmxStaggerIndex.Unknown];
var format_tmx_TmxStaggerAxis = $hxEnums["format.tmx.TmxStaggerAxis"] = { __ename__:"format.tmx.TmxStaggerAxis",__constructs__:null
	,AxisX: {_hx_name:"AxisX",_hx_index:0,__enum__:"format.tmx.TmxStaggerAxis",toString:$estr}
	,AxisY: {_hx_name:"AxisY",_hx_index:1,__enum__:"format.tmx.TmxStaggerAxis",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"format.tmx.TmxStaggerAxis",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxStaggerAxis.__constructs__ = [format_tmx_TmxStaggerAxis.AxisX,format_tmx_TmxStaggerAxis.AxisY,format_tmx_TmxStaggerAxis.Unknown];
var format_tmx_TmxMap = function(version,tiledVersion,orientation,width,height,tileWidth,tileHeight,backgroundColor,renderOrder,staggerIndex,staggerAxis,hexSideLength,nextObjectId,nextLayerId,properties,tilesets,layers,infinite,localPath) {
	this.version = version;
	this.tiledVersion = tiledVersion;
	this.orientation = orientation;
	this.width = width;
	this.height = height;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.backgroundColor = backgroundColor;
	this.renderOrder = renderOrder;
	this.staggerIndex = staggerIndex;
	this.staggerAxis = staggerAxis;
	this.hexSideLength = hexSideLength;
	this.nextObjectId = nextObjectId;
	this.nextLayerId = nextLayerId;
	this.properties = properties;
	this.tilesets = tilesets;
	this.layers = layers;
	this.infinite = infinite;
	this.localPath = localPath;
};
$hxClasses["format.tmx.TmxMap"] = format_tmx_TmxMap;
format_tmx_TmxMap.__name__ = "format.tmx.TmxMap";
format_tmx_TmxMap.prototype = {
	version: null
	,tiledVersion: null
	,orientation: null
	,width: null
	,height: null
	,tileWidth: null
	,tileHeight: null
	,backgroundColor: null
	,renderOrder: null
	,staggerIndex: null
	,staggerAxis: null
	,hexSideLength: null
	,nextObjectId: null
	,nextLayerId: null
	,properties: null
	,tilesets: null
	,layers: null
	,infinite: null
	,localPath: null
	,__class__: format_tmx_TmxMap
};
var format_tmx_TmxTileset = function(firstGID,source,name,tileWidth,tileHeight,spacing,margin,tileCount,columns,tileOffset,properties,image,terrainTypes,tiles,grid,wangSets) {
	this.firstGID = firstGID;
	this.source = source;
	this.name = name;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.spacing = spacing;
	this.margin = margin;
	this.tileCount = tileCount;
	this.columns = columns;
	this.tileOffset = tileOffset;
	this.properties = properties;
	this.image = image;
	this.terrainTypes = terrainTypes;
	this.tiles = tiles;
	this.grid = grid;
	this.wangSets = wangSets;
};
$hxClasses["format.tmx.TmxTileset"] = format_tmx_TmxTileset;
format_tmx_TmxTileset.__name__ = "format.tmx.TmxTileset";
format_tmx_TmxTileset.prototype = {
	firstGID: null
	,source: null
	,name: null
	,tileWidth: null
	,tileHeight: null
	,spacing: null
	,margin: null
	,tileCount: null
	,columns: null
	,tileOffset: null
	,properties: null
	,image: null
	,terrainTypes: null
	,tiles: null
	,grid: null
	,wangSets: null
	,__class__: format_tmx_TmxTileset
};
var format_tmx_TmxTilesetGrid = function(orientation,width,height) {
	this.orientation = orientation;
	this.width = width;
	this.height = height;
};
$hxClasses["format.tmx.TmxTilesetGrid"] = format_tmx_TmxTilesetGrid;
format_tmx_TmxTilesetGrid.__name__ = "format.tmx.TmxTilesetGrid";
format_tmx_TmxTilesetGrid.prototype = {
	orientation: null
	,width: null
	,height: null
	,__class__: format_tmx_TmxTilesetGrid
};
var format_tmx_TmxTileOffset = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["format.tmx.TmxTileOffset"] = format_tmx_TmxTileOffset;
format_tmx_TmxTileOffset.__name__ = "format.tmx.TmxTileOffset";
format_tmx_TmxTileOffset.prototype = {
	x: null
	,y: null
	,__class__: format_tmx_TmxTileOffset
};
var format_tmx_TmxWangSet = function(name,tile,corners,edges,tiles) {
	this.name = name;
	this.tile = tile;
	this.corners = corners;
	this.edges = edges;
	this.tiles = tiles;
};
$hxClasses["format.tmx.TmxWangSet"] = format_tmx_TmxWangSet;
format_tmx_TmxWangSet.__name__ = "format.tmx.TmxWangSet";
format_tmx_TmxWangSet.prototype = {
	name: null
	,tile: null
	,corners: null
	,edges: null
	,tiles: null
	,__class__: format_tmx_TmxWangSet
};
var format_tmx_TmxWangSetColor = function(name,color,tile,probability) {
	this.name = name;
	this.color = color;
	this.tile = tile;
	this.probability = probability;
};
$hxClasses["format.tmx.TmxWangSetColor"] = format_tmx_TmxWangSetColor;
format_tmx_TmxWangSetColor.__name__ = "format.tmx.TmxWangSetColor";
format_tmx_TmxWangSetColor.prototype = {
	name: null
	,color: null
	,tile: null
	,probability: null
	,__class__: format_tmx_TmxWangSetColor
};
var format_tmx_TmxWangSetTile = function(tileID,wangID) {
	this.tileID = tileID;
	this.wangID = wangID;
};
$hxClasses["format.tmx.TmxWangSetTile"] = format_tmx_TmxWangSetTile;
format_tmx_TmxWangSetTile.__name__ = "format.tmx.TmxWangSetTile";
format_tmx_TmxWangSetTile.prototype = {
	tileID: null
	,wangID: null
	,__class__: format_tmx_TmxWangSetTile
};
var format_tmx_TmxImage = function(format,id,source,transparent,width,height,data) {
	this.format = format;
	this.id = id;
	this.source = source;
	this.transparent = transparent;
	this.width = width;
	this.height = height;
	this.data = data;
};
$hxClasses["format.tmx.TmxImage"] = format_tmx_TmxImage;
format_tmx_TmxImage.__name__ = "format.tmx.TmxImage";
format_tmx_TmxImage.prototype = {
	format: null
	,id: null
	,source: null
	,transparent: null
	,width: null
	,height: null
	,data: null
	,__class__: format_tmx_TmxImage
};
var format_tmx_TmxTerrain = function(name,tile,properties) {
	this.name = name;
	this.tile = tile;
	this.properties = properties;
};
$hxClasses["format.tmx.TmxTerrain"] = format_tmx_TmxTerrain;
format_tmx_TmxTerrain.__name__ = "format.tmx.TmxTerrain";
format_tmx_TmxTerrain.prototype = {
	name: null
	,tile: null
	,properties: null
	,__class__: format_tmx_TmxTerrain
};
var format_tmx_TmxTilesetTile = function(id,type,terrain,probability,properties,image,objectGroup,animation) {
	this.id = id;
	this.type = type;
	this.terrain = terrain;
	this.probability = probability;
	this.properties = properties;
	this.image = image;
	this.objectGroup = objectGroup;
	this.animation = animation;
};
$hxClasses["format.tmx.TmxTilesetTile"] = format_tmx_TmxTilesetTile;
format_tmx_TmxTilesetTile.__name__ = "format.tmx.TmxTilesetTile";
format_tmx_TmxTilesetTile.prototype = {
	id: null
	,type: null
	,terrain: null
	,probability: null
	,properties: null
	,image: null
	,objectGroup: null
	,animation: null
	,__class__: format_tmx_TmxTilesetTile
};
var format_tmx_TmxTilesetTileFrame = function(tileId,duration) {
	this.tileId = tileId;
	this.duration = duration;
};
$hxClasses["format.tmx.TmxTilesetTileFrame"] = format_tmx_TmxTilesetTileFrame;
format_tmx_TmxTilesetTileFrame.__name__ = "format.tmx.TmxTilesetTileFrame";
format_tmx_TmxTilesetTileFrame.prototype = {
	tileId: null
	,duration: null
	,__class__: format_tmx_TmxTilesetTileFrame
};
var format_tmx_TmxLayer = $hxEnums["format.tmx.TmxLayer"] = { __ename__:"format.tmx.TmxLayer",__constructs__:null
	,LTileLayer: ($_=function(layer) { return {_hx_index:0,layer:layer,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LTileLayer",$_.__params__ = ["layer"],$_)
	,LObjectGroup: ($_=function(group) { return {_hx_index:1,group:group,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LObjectGroup",$_.__params__ = ["group"],$_)
	,LImageLayer: ($_=function(layer) { return {_hx_index:2,layer:layer,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LImageLayer",$_.__params__ = ["layer"],$_)
	,LGroup: ($_=function(group) { return {_hx_index:3,group:group,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LGroup",$_.__params__ = ["group"],$_)
};
format_tmx_TmxLayer.__constructs__ = [format_tmx_TmxLayer.LTileLayer,format_tmx_TmxLayer.LObjectGroup,format_tmx_TmxLayer.LImageLayer,format_tmx_TmxLayer.LGroup];
var format_tmx_TmxGroup = function(id,name,offsetX,offsetY,opacity,visible,properties,layers) {
	this.id = id;
	this.name = name;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.opacity = opacity;
	this.visible = visible;
	this.properties = properties;
	this.layers = layers;
};
$hxClasses["format.tmx.TmxGroup"] = format_tmx_TmxGroup;
format_tmx_TmxGroup.__name__ = "format.tmx.TmxGroup";
format_tmx_TmxGroup.prototype = {
	id: null
	,name: null
	,offsetX: null
	,offsetY: null
	,opacity: null
	,visible: null
	,properties: null
	,layers: null
	,__class__: format_tmx_TmxGroup
};
var format_tmx_TmxBaseLayer = function(id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	this.id = id;
	this.name = name;
	this.x = x;
	this.y = y;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.opacity = opacity;
	this.visible = visible;
	this.properties = properties;
};
$hxClasses["format.tmx.TmxBaseLayer"] = format_tmx_TmxBaseLayer;
format_tmx_TmxBaseLayer.__name__ = "format.tmx.TmxBaseLayer";
format_tmx_TmxBaseLayer.prototype = {
	id: null
	,name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,opacity: null
	,visible: null
	,offsetX: null
	,offsetY: null
	,properties: null
	,__class__: format_tmx_TmxBaseLayer
};
var format_tmx_TmxImageLayer = function(image,id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	format_tmx_TmxBaseLayer.call(this,id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties);
	this.image = image;
};
$hxClasses["format.tmx.TmxImageLayer"] = format_tmx_TmxImageLayer;
format_tmx_TmxImageLayer.__name__ = "format.tmx.TmxImageLayer";
format_tmx_TmxImageLayer.__super__ = format_tmx_TmxBaseLayer;
format_tmx_TmxImageLayer.prototype = $extend(format_tmx_TmxBaseLayer.prototype,{
	image: null
	,__class__: format_tmx_TmxImageLayer
});
var format_tmx_TmxTileLayer = function(data,id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	format_tmx_TmxBaseLayer.call(this,id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties);
	this.data = data;
};
$hxClasses["format.tmx.TmxTileLayer"] = format_tmx_TmxTileLayer;
format_tmx_TmxTileLayer.__name__ = "format.tmx.TmxTileLayer";
format_tmx_TmxTileLayer.__super__ = format_tmx_TmxBaseLayer;
format_tmx_TmxTileLayer.prototype = $extend(format_tmx_TmxBaseLayer.prototype,{
	data: null
	,__class__: format_tmx_TmxTileLayer
});
var format_tmx_TmxDataEncoding = $hxEnums["format.tmx.TmxDataEncoding"] = { __ename__:"format.tmx.TmxDataEncoding",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}
	,Base64: {_hx_name:"Base64",_hx_index:1,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}
	,CSV: {_hx_name:"CSV",_hx_index:2,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxDataEncoding.__constructs__ = [format_tmx_TmxDataEncoding.None,format_tmx_TmxDataEncoding.Base64,format_tmx_TmxDataEncoding.CSV,format_tmx_TmxDataEncoding.Unknown];
var format_tmx_TmxDataCompression = $hxEnums["format.tmx.TmxDataCompression"] = { __ename__:"format.tmx.TmxDataCompression",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"format.tmx.TmxDataCompression",toString:$estr}
	,GZip: {_hx_name:"GZip",_hx_index:1,__enum__:"format.tmx.TmxDataCompression",toString:$estr}
	,ZLib: {_hx_name:"ZLib",_hx_index:2,__enum__:"format.tmx.TmxDataCompression",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"format.tmx.TmxDataCompression",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxDataCompression.__constructs__ = [format_tmx_TmxDataCompression.None,format_tmx_TmxDataCompression.GZip,format_tmx_TmxDataCompression.ZLib,format_tmx_TmxDataCompression.Unknown];
var format_tmx_TmxData = function(encoding,compression,tiles,chunks,data) {
	this.encoding = encoding;
	this.compression = compression;
	this.tiles = tiles;
	this.chunks = chunks;
	this.data = data;
};
$hxClasses["format.tmx.TmxData"] = format_tmx_TmxData;
format_tmx_TmxData.__name__ = "format.tmx.TmxData";
format_tmx_TmxData.prototype = {
	encoding: null
	,compression: null
	,tiles: null
	,chunks: null
	,data: null
	,__class__: format_tmx_TmxData
};
var format_tmx_TmxChunk = function(x,y,width,height,tiles) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.tiles = tiles;
};
$hxClasses["format.tmx.TmxChunk"] = format_tmx_TmxChunk;
format_tmx_TmxChunk.__name__ = "format.tmx.TmxChunk";
format_tmx_TmxChunk.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,tiles: null
	,__class__: format_tmx_TmxChunk
};
var format_tmx_TmxTile = {};
format_tmx_TmxTile.__properties__ = {get_flippedDiagonally:"get_flippedDiagonally",get_flippedVertically:"get_flippedVertically",get_flippedHorizontally:"get_flippedHorizontally",set_gid:"set_gid",get_gid:"get_gid"};
format_tmx_TmxTile._new = function(tile) {
	return tile;
};
format_tmx_TmxTile.get_gid = function(this1) {
	return this1 & 536870911;
};
format_tmx_TmxTile.get_flippedHorizontally = function(this1) {
	return (this1 & -2147483648) != 0;
};
format_tmx_TmxTile.get_flippedVertically = function(this1) {
	return (this1 & 1073741824) != 0;
};
format_tmx_TmxTile.get_flippedDiagonally = function(this1) {
	return (this1 & 536870912) != 0;
};
format_tmx_TmxTile.set_gid = function(this1,v) {
	this1 = this1 & -536870912 | v & 536870911;
	return this1;
};
var format_tmx_TmxObjectGroupDrawOrder = $hxEnums["format.tmx.TmxObjectGroupDrawOrder"] = { __ename__:"format.tmx.TmxObjectGroupDrawOrder",__constructs__:null
	,Index: {_hx_name:"Index",_hx_index:0,__enum__:"format.tmx.TmxObjectGroupDrawOrder",toString:$estr}
	,Topdown: {_hx_name:"Topdown",_hx_index:1,__enum__:"format.tmx.TmxObjectGroupDrawOrder",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"format.tmx.TmxObjectGroupDrawOrder",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxObjectGroupDrawOrder.__constructs__ = [format_tmx_TmxObjectGroupDrawOrder.Index,format_tmx_TmxObjectGroupDrawOrder.Topdown,format_tmx_TmxObjectGroupDrawOrder.Unknown];
var format_tmx_TmxObjectGroup = function(drawOrder,objects,color,id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	format_tmx_TmxBaseLayer.call(this,id,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties);
	this.color = color;
	this.drawOrder = drawOrder;
	this.objects = objects;
};
$hxClasses["format.tmx.TmxObjectGroup"] = format_tmx_TmxObjectGroup;
format_tmx_TmxObjectGroup.__name__ = "format.tmx.TmxObjectGroup";
format_tmx_TmxObjectGroup.__super__ = format_tmx_TmxBaseLayer;
format_tmx_TmxObjectGroup.prototype = $extend(format_tmx_TmxBaseLayer.prototype,{
	color: null
	,drawOrder: null
	,objects: null
	,__class__: format_tmx_TmxObjectGroup
});
var format_tmx_TmxPoint = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["format.tmx.TmxPoint"] = format_tmx_TmxPoint;
format_tmx_TmxPoint.__name__ = "format.tmx.TmxPoint";
format_tmx_TmxPoint.prototype = {
	x: null
	,y: null
	,__class__: format_tmx_TmxPoint
};
var format_tmx_TmxObjectType = $hxEnums["format.tmx.TmxObjectType"] = { __ename__:"format.tmx.TmxObjectType",__constructs__:null
	,OTRectangle: {_hx_name:"OTRectangle",_hx_index:0,__enum__:"format.tmx.TmxObjectType",toString:$estr}
	,OTTile: ($_=function(gid) { return {_hx_index:1,gid:gid,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTTile",$_.__params__ = ["gid"],$_)
	,OTExternalTile: ($_=function(gid,tileset) { return {_hx_index:2,gid:gid,tileset:tileset,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTExternalTile",$_.__params__ = ["gid","tileset"],$_)
	,OTEllipse: {_hx_name:"OTEllipse",_hx_index:3,__enum__:"format.tmx.TmxObjectType",toString:$estr}
	,OTPoint: {_hx_name:"OTPoint",_hx_index:4,__enum__:"format.tmx.TmxObjectType",toString:$estr}
	,OTPolygon: ($_=function(points) { return {_hx_index:5,points:points,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTPolygon",$_.__params__ = ["points"],$_)
	,OTText: ($_=function(text) { return {_hx_index:6,text:text,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTText",$_.__params__ = ["text"],$_)
	,OTPolyline: ($_=function(points) { return {_hx_index:7,points:points,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTPolyline",$_.__params__ = ["points"],$_)
};
format_tmx_TmxObjectType.__constructs__ = [format_tmx_TmxObjectType.OTRectangle,format_tmx_TmxObjectType.OTTile,format_tmx_TmxObjectType.OTExternalTile,format_tmx_TmxObjectType.OTEllipse,format_tmx_TmxObjectType.OTPoint,format_tmx_TmxObjectType.OTPolygon,format_tmx_TmxObjectType.OTText,format_tmx_TmxObjectType.OTPolyline];
var format_tmx_TmxObject = function(id,name,type,x,y,width,height,rotation,visible,objectType,properties,flippedHorizontally,flippedVertically,template) {
	this.id = id;
	this.name = name;
	this.type = type;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.rotation = rotation;
	this.visible = visible;
	this.objectType = objectType;
	this.properties = properties;
	this.flippedHorizontally = flippedHorizontally;
	this.flippedVertically = flippedVertically;
	this.template = template;
};
$hxClasses["format.tmx.TmxObject"] = format_tmx_TmxObject;
format_tmx_TmxObject.__name__ = "format.tmx.TmxObject";
format_tmx_TmxObject.prototype = {
	id: null
	,name: null
	,type: null
	,x: null
	,y: null
	,width: null
	,height: null
	,rotation: null
	,visible: null
	,objectType: null
	,properties: null
	,flippedHorizontally: null
	,flippedVertically: null
	,template: null
	,__class__: format_tmx_TmxObject
};
var format_tmx_TmxText = function(fontFamily,pixelSize,wrap,color,bold,italic,underline,strikeout,kerning,halign,valign,text) {
	this.fontFamily = fontFamily;
	this.pixelSize = pixelSize;
	this.wrap = wrap;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.strikeout = strikeout;
	this.kerning = kerning;
	this.halign = halign;
	this.valign = valign;
	this.text = text;
};
$hxClasses["format.tmx.TmxText"] = format_tmx_TmxText;
format_tmx_TmxText.__name__ = "format.tmx.TmxText";
format_tmx_TmxText.prototype = {
	fontFamily: null
	,pixelSize: null
	,wrap: null
	,color: null
	,bold: null
	,italic: null
	,underline: null
	,strikeout: null
	,kerning: null
	,halign: null
	,valign: null
	,text: null
	,__class__: format_tmx_TmxText
};
var format_tmx_TmxPropertyType = $hxEnums["format.tmx.TmxPropertyType"] = { __ename__:"format.tmx.TmxPropertyType",__constructs__:null
	,PTString: {_hx_name:"PTString",_hx_index:0,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTInt: {_hx_name:"PTInt",_hx_index:1,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTBool: {_hx_name:"PTBool",_hx_index:2,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTFloat: {_hx_name:"PTFloat",_hx_index:3,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTFile: {_hx_name:"PTFile",_hx_index:4,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTColor: {_hx_name:"PTColor",_hx_index:5,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
};
format_tmx_TmxPropertyType.__constructs__ = [format_tmx_TmxPropertyType.PTString,format_tmx_TmxPropertyType.PTInt,format_tmx_TmxPropertyType.PTBool,format_tmx_TmxPropertyType.PTFloat,format_tmx_TmxPropertyType.PTFile,format_tmx_TmxPropertyType.PTColor];
var format_tmx_TmxProperties = {};
format_tmx_TmxProperties._new = function() {
	return new format_tmx__$Data_ImplTmxProperties();
};
format_tmx_TmxProperties._get = function(this1,v) {
	return this1.getString(v);
};
format_tmx_TmxProperties._set = function(this1,k,v) {
	this1.setString(k,v);
	return v;
};
var format_tmx__$Data_ImplTmxProperties = function() {
	this.names = [];
	this.types = [];
	this.strings = [];
	this.cache = [];
	this.ints = [];
	this.floats = [];
};
$hxClasses["format.tmx._Data.ImplTmxProperties"] = format_tmx__$Data_ImplTmxProperties;
format_tmx__$Data_ImplTmxProperties.__name__ = "format.tmx._Data.ImplTmxProperties";
format_tmx__$Data_ImplTmxProperties.prototype = {
	names: null
	,types: null
	,strings: null
	,cache: null
	,ints: null
	,floats: null
	,propertyCount: function() {
		return this.names.length;
	}
	,exists: function(name) {
		return this.names.indexOf(name) != -1;
	}
	,existsType: function(name,type) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return false;
		}
		return this.types[idx] == type;
	}
	,setRaw: function(name,value,type) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.strings.push(value);
			this.types.push(type);
		} else {
			this.strings[idx] = value;
			this.types[idx] = type;
			this.cache[idx] = null;
		}
	}
	,setString: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.types.push(format_tmx_TmxPropertyType.PTString);
			this.strings.push(value);
		} else {
			this.types[idx] = format_tmx_TmxPropertyType.PTString;
			this.cache[idx] = null;
			this.strings[idx] = value;
		}
	}
	,setFile: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.types.push(format_tmx_TmxPropertyType.PTFile);
			this.strings.push(value);
		} else {
			this.types[idx] = format_tmx_TmxPropertyType.PTFile;
			this.strings[idx] = value;
			this.cache[idx] = null;
		}
	}
	,setInt: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			idx = this.names.push(name) - 1;
			this.types.push(format_tmx_TmxPropertyType.PTInt);
			this.strings.push(value == null ? "null" : "" + value);
			this.cache[idx] = this.ints.push(value) - 1;
		} else {
			var oldType = this.types[idx];
			this.types[idx] = format_tmx_TmxPropertyType.PTInt;
			this.strings[idx] = value == null ? "null" : "" + value;
			var cached = this.cache[idx];
			if((oldType == format_tmx_TmxPropertyType.PTInt || oldType == format_tmx_TmxPropertyType.PTColor) && cached != null) {
				this.ints[cached] = value;
			} else {
				this.cache[idx] = this.ints.push(value) - 1;
			}
		}
	}
	,setColor: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			idx = this.names.push(name) - 1;
			this.types.push(format_tmx_TmxPropertyType.PTColor);
			this.strings.push(value == null ? "null" : "" + value);
			this.cache[idx] = this.ints.push(value) - 1;
		} else {
			var oldType = this.types[idx];
			this.types[idx] = format_tmx_TmxPropertyType.PTColor;
			this.strings[idx] = value == null ? "null" : "" + value;
			var cached = this.cache[idx];
			if((oldType == format_tmx_TmxPropertyType.PTColor || oldType == format_tmx_TmxPropertyType.PTInt) && cached != null) {
				this.ints[cached] = value;
			} else {
				this.cache[idx] = this.ints.push(value) - 1;
			}
		}
	}
	,setFloat: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			var idx1 = this.names.push(name) - 1;
			this.types.push(format_tmx_TmxPropertyType.PTFloat);
			this.strings.push(value == null ? "null" : "" + value);
			this.cache[idx1] = this.floats.push(value) - 1;
		} else {
			var oldType = this.types[idx];
			this.types[idx] = format_tmx_TmxPropertyType.PTFloat;
			this.strings[idx] = value == null ? "null" : "" + value;
			var cached = this.cache[idx];
			if(oldType == format_tmx_TmxPropertyType.PTFloat && cached != null) {
				this.floats[cached] = value;
			} else {
				this.cache[idx] = this.floats.push(value) - 1;
			}
		}
	}
	,setBool: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.types.push(format_tmx_TmxPropertyType.PTBool);
			this.strings.push(value ? "true" : "false");
		} else {
			this.types[idx] = format_tmx_TmxPropertyType.PTBool;
			this.strings[idx] = value ? "true" : "false";
			this.cache[idx] = null;
		}
	}
	,getType: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return null;
		}
		return this.types[idx];
	}
	,get: function(name) {
		return this.getString(name);
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this.names);
	}
	,getString: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return null;
		}
		return this.strings[idx];
	}
	,getFile: function(name) {
		return this.getString(name);
	}
	,getInt: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return null;
		}
		var type = this.types[idx];
		if(type != format_tmx_TmxPropertyType.PTInt && type != format_tmx_TmxPropertyType.PTColor) {
			return null;
		}
		var cached = this.cache[idx];
		if(cached == null) {
			cached = Std.parseInt(this.strings[idx]);
			this.cache[idx] = this.ints.push(cached) - 1;
			return cached;
		}
		return this.ints[cached];
	}
	,getColor: function(name) {
		return this.getInt(name);
	}
	,getFloat: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return NaN;
		}
		var type = this.types[idx];
		if(type == format_tmx_TmxPropertyType.PTInt || type == format_tmx_TmxPropertyType.PTColor) {
			return this.getInt(name);
		}
		if(type != format_tmx_TmxPropertyType.PTFloat) {
			return NaN;
		}
		var cached = this.cache[idx];
		if(cached == null) {
			var fval = parseFloat(this.strings[idx]);
			this.cache[idx] = this.floats.push(fval) - 1;
			return fval;
		}
		return this.floats[cached];
	}
	,getBool: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return false;
		}
		return this.strings[idx] == "true";
	}
	,propagateTo: function(other,_override) {
		if(_override == null) {
			_override = false;
		}
		var i = 0;
		while(i < this.names.length) {
			if(other.names.indexOf(this.names[i]) == -1 || _override) {
				other.setRaw(this.names[i],this.strings[i],this.types[i]);
			}
			++i;
		}
	}
	,__class__: format_tmx__$Data_ImplTmxProperties
};
var format_tmx_TmxObjectTemplate = function(tileset,object) {
	this.tileset = tileset;
	this.object = object;
};
$hxClasses["format.tmx.TmxObjectTemplate"] = format_tmx_TmxObjectTemplate;
format_tmx_TmxObjectTemplate.__name__ = "format.tmx.TmxObjectTemplate";
format_tmx_TmxObjectTemplate.prototype = {
	tileset: null
	,object: null
	,__class__: format_tmx_TmxObjectTemplate
};
var format_tmx_TmxObjectTypeTemplate = function(name,color,properties) {
	this.name = name;
	this.color = color;
	this.properties = properties;
};
$hxClasses["format.tmx.TmxObjectTypeTemplate"] = format_tmx_TmxObjectTypeTemplate;
format_tmx_TmxObjectTypeTemplate.__name__ = "format.tmx.TmxObjectTypeTemplate";
format_tmx_TmxObjectTypeTemplate.prototype = {
	name: null
	,color: null
	,properties: null
	,__class__: format_tmx_TmxObjectTypeTemplate
};
var format_tmx_TmxObjectTypeProperty = function(name,type,defaultValue) {
	this.name = name;
	this.type = type;
	this.defaultValue = defaultValue;
};
$hxClasses["format.tmx.TmxObjectTypeProperty"] = format_tmx_TmxObjectTypeProperty;
format_tmx_TmxObjectTypeProperty.__name__ = "format.tmx.TmxObjectTypeProperty";
format_tmx_TmxObjectTypeProperty.prototype = {
	name: null
	,type: null
	,defaultValue: null
	,__class__: format_tmx_TmxObjectTypeProperty
};
var format_tmx_Reader = function() {
};
$hxClasses["format.tmx.Reader"] = format_tmx_Reader;
format_tmx_Reader.__name__ = "format.tmx.Reader";
format_tmx_Reader.prototype = {
	customUncompressors: null
	,customEncoders: null
	,width: null
	,height: null
	,resolveTSX: null
	,resolveTemplate: null
	,resolveTypeTemplate: null
	,read: function(xml,localPath) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var map = haxe_xml__$Access_NodeAccess.resolve(xml,"map");
		var properties = this.resolveProperties(map);
		var tilesets = [];
		var layers = [];
		var element = map.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			var _g;
			if(element1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(element1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
				}
				_g = element1.nodeName;
			}
			switch(_g) {
			case "group":
				layers.push(format_tmx_TmxLayer.LGroup(this.resolveGroup(element1)));
				break;
			case "imagelayer":
				layers.push(format_tmx_TmxLayer.LImageLayer(this.resolveImageLayer(element1)));
				break;
			case "layer":
				layers.push(format_tmx_TmxLayer.LTileLayer(this.resolveTileLayer(element1)));
				break;
			case "objectgroup":
				layers.push(format_tmx_TmxLayer.LObjectGroup(this.resolveObjectGroup(element1)));
				break;
			case "tileset":
				var root = null;
				var properties1 = this.resolveProperties(element1);
				var terrains = [];
				var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(element1,"terraintypes");
				var tiles = [];
				var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(element1,"tile");
				var tileOffset = null;
				var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(element1,"tileoffset");
				var wangSets = [];
				var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(element1,"wangsets");
				var grid = null;
				var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(element1,"grid");
				if(hasTileOffset) {
					var node = haxe_xml__$Access_NodeAccess.resolve(element1,"tileoffset");
					tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
				}
				if(hasTerrains) {
					var _g1 = 0;
					var _g2 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(element1,"terraintypes"),"terrain");
					while(_g1 < _g2.length) {
						var node1 = _g2[_g1];
						++_g1;
						terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node1,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node1,"tile")),this.resolveProperties(node1)));
					}
				}
				if(hasWangSets) {
					var _g3 = 0;
					var _g4 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(element1,"wangsets"),"wangset");
					while(_g3 < _g4.length) {
						var node2 = _g4[_g3];
						++_g3;
						wangSets.push(this.resolveWangSet(node2));
					}
				}
				if(hasGrid) {
					var gnode = haxe_xml__$Access_NodeAccess.resolve(element1,"grid");
					var _g5 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
					var _g6 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
					var input = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
					var grid1;
					switch(input) {
					case "hexagonal":
						grid1 = format_tmx_TmxOrientation.Hexagonal;
						break;
					case "isometric":
						grid1 = format_tmx_TmxOrientation.Isometric;
						break;
					case "orthogonal":
						grid1 = format_tmx_TmxOrientation.Orthogonal;
						break;
					case "staggered":
						grid1 = format_tmx_TmxOrientation.Staggered;
						break;
					default:
						grid1 = format_tmx_TmxOrientation.Unknown(input);
					}
					grid = new format_tmx_TmxTilesetGrid(grid1,_g5,_g6);
				}
				if(hasTiles) {
					var _g7 = 0;
					var _g8 = haxe_xml__$Access_NodeListAccess.resolve(element1,"tile");
					while(_g7 < _g8.length) {
						var node3 = _g8[_g7];
						++_g7;
						var animation = null;
						if(haxe_xml__$Access_HasNodeAccess.resolve(node3,"animation")) {
							animation = [];
							var _g9 = 0;
							var _g10 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node3,"animation"),"frame");
							while(_g9 < _g10.length) {
								var frameInfo = _g10[_g9];
								++_g9;
								animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
							}
						}
						var _g11 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node3,"id"));
						var _g12 = haxe_xml__$Access_HasAttribAccess.resolve(node3,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node3,"terrain") : null;
						var _g13 = haxe_xml__$Access_HasAttribAccess.resolve(node3,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node3,"probability")) : 0;
						var _g14 = this.resolveProperties(node3);
						var _g15 = haxe_xml__$Access_HasNodeAccess.resolve(node3,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node3,"image")) : null;
						var _g16 = haxe_xml__$Access_HasNodeAccess.resolve(node3,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node3,"objectgroup")) : null;
						tiles.push(new format_tmx_TmxTilesetTile(_g11,haxe_xml__$Access_HasAttribAccess.resolve(node3,"type") ? haxe_xml__$Access_AttribAccess.resolve(node3,"type") : null,_g12,_g13,_g14,_g15,_g16,animation));
					}
				}
				var tmp;
				if(root != null) {
					root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(element1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"firstgid")) : root.firstGID;
					root.source = haxe_xml__$Access_HasAttribAccess.resolve(element1,"source") ? haxe_xml__$Access_AttribAccess.resolve(element1,"source") : root.source;
					root.name = haxe_xml__$Access_HasAttribAccess.resolve(element1,"name") ? haxe_xml__$Access_AttribAccess.resolve(element1,"name") : root.name;
					root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilewidth")) : root.tileWidth;
					root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tileheight")) : root.tileHeight;
					root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(element1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"spacing")) : root.spacing;
					root.margin = haxe_xml__$Access_HasAttribAccess.resolve(element1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"margin")) : root.margin;
					root.properties = haxe_xml__$Access_HasNodeAccess.resolve(element1,"properties") ? properties1 : root.properties;
					root.image = haxe_xml__$Access_HasNodeAccess.resolve(element1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(element1,"image")) : root.image;
					root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilecount")) : 0;
					root.columns = haxe_xml__$Access_HasAttribAccess.resolve(element1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"columns")) : 0;
					if(hasTerrains) {
						root.terrainTypes = terrains;
					}
					if(hasTiles) {
						root.tiles = tiles;
					}
					if(hasTileOffset) {
						root.tileOffset = tileOffset;
					}
					if(hasWangSets) {
						root.wangSets = wangSets;
					}
					if(hasGrid) {
						root.grid = grid;
					}
					tmp = root;
				} else {
					var _g17 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"firstgid")) : null;
					var _g18 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"source") ? haxe_xml__$Access_AttribAccess.resolve(element1,"source") : null;
					var _g19 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"name") ? haxe_xml__$Access_AttribAccess.resolve(element1,"name") : null;
					var _g20 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilewidth")) : 0;
					var _g21 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tileheight")) : 0;
					var _g22 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"spacing")) : 0;
					var _g23 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"margin")) : 0;
					var _g24 = haxe_xml__$Access_HasNodeAccess.resolve(element1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(element1,"image")) : null;
					var tset = new format_tmx_TmxTileset(_g17,_g18,_g19,_g20,_g21,_g22,_g23,haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(element1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"columns")) : 0,tileOffset,properties1,_g24,terrains,tiles,grid,wangSets);
					if(tset.source != null && this.resolveTSX != null) {
						var tsx = this.resolveTSX(tset.source);
						format_tmx_Tools.applyTSX(tsx,tset);
					}
					tmp = tset;
				}
				tilesets.push(tmp);
				break;
			}
		}
		this.width = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"width"));
		this.height = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"height"));
		var _g = haxe_xml__$Access_AttribAccess.resolve(map,"version");
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(map,"tiledversion") ? haxe_xml__$Access_AttribAccess.resolve(map,"tiledversion") : "";
		var input = haxe_xml__$Access_AttribAccess.resolve(map,"orientation");
		var _g2;
		switch(input) {
		case "hexagonal":
			_g2 = format_tmx_TmxOrientation.Hexagonal;
			break;
		case "isometric":
			_g2 = format_tmx_TmxOrientation.Isometric;
			break;
		case "orthogonal":
			_g2 = format_tmx_TmxOrientation.Orthogonal;
			break;
		case "staggered":
			_g2 = format_tmx_TmxOrientation.Staggered;
			break;
		default:
			_g2 = format_tmx_TmxOrientation.Unknown(input);
		}
		var _g3 = this.width;
		var _g4 = this.height;
		var _g5 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"tilewidth"));
		var _g6 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"tileheight"));
		var _g7;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"backgroundcolor")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"backgroundcolor");
			_g7 = HxOverrides.cca(input,0) == 35 ? input.length == 7 ? Std.parseInt("0x" + HxOverrides.substr(input,1,null)) + (-16777216) : Std.parseInt("0x" + HxOverrides.substr(input,1,null)) : input.length == 6 ? Std.parseInt("0x" + input) + (-16777216) : Std.parseInt("0x" + input);
		} else {
			_g7 = 0;
		}
		var _g8;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"renderorder")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"renderorder");
			switch(input) {
			case "left-down":
				_g8 = format_tmx_TmxRenderOrder.LeftDown;
				break;
			case "left-up":
				_g8 = format_tmx_TmxRenderOrder.LeftUp;
				break;
			case "right-down":
				_g8 = format_tmx_TmxRenderOrder.RightDown;
				break;
			case "right-up":
				_g8 = format_tmx_TmxRenderOrder.RightUp;
				break;
			default:
				_g8 = format_tmx_TmxRenderOrder.Unknown(input);
			}
		} else {
			_g8 = format_tmx_TmxRenderOrder.RightDown;
		}
		var _g9 = properties;
		var _g10 = tilesets;
		var _g11 = layers;
		var _g12;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"staggerindex")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"staggerindex");
			switch(input) {
			case "even":
				_g12 = format_tmx_TmxStaggerIndex.Even;
				break;
			case "odd":
				_g12 = format_tmx_TmxStaggerIndex.Odd;
				break;
			default:
				_g12 = format_tmx_TmxStaggerIndex.Unknown(input);
			}
		} else {
			_g12 = null;
		}
		var _g13;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"staggeraxis")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"staggeraxis");
			switch(input) {
			case "x":
				_g13 = format_tmx_TmxStaggerAxis.AxisX;
				break;
			case "y":
				_g13 = format_tmx_TmxStaggerAxis.AxisY;
				break;
			default:
				_g13 = format_tmx_TmxStaggerAxis.Unknown(input);
			}
		} else {
			_g13 = null;
		}
		return new format_tmx_TmxMap(_g,_g1,_g2,_g3,_g4,_g5,_g6,_g7,_g8,_g12,_g13,haxe_xml__$Access_HasAttribAccess.resolve(map,"hexsidelength") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"hexsidelength")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(map,"nextobjectid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"nextobjectid")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(map,"nextlayerid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"nextlayerid")) : 0,_g9,_g10,_g11,haxe_xml__$Access_HasAttribAccess.resolve(map,"infinite") && haxe_xml__$Access_AttribAccess.resolve(map,"infinite") == "1",localPath);
	}
	,readTSX: function(xml,root) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var input = haxe_xml__$Access_NodeAccess.resolve(xml,"tileset");
		var properties = this.resolveProperties(input);
		var terrains = [];
		var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input,"terraintypes");
		var tiles = [];
		var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input,"tile");
		var tileOffset = null;
		var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input,"tileoffset");
		var wangSets = [];
		var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input,"wangsets");
		var grid = null;
		var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input,"grid");
		if(hasTileOffset) {
			var node = haxe_xml__$Access_NodeAccess.resolve(input,"tileoffset");
			tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
		}
		if(hasTerrains) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"terraintypes"),"terrain");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),this.resolveProperties(node)));
			}
		}
		if(hasWangSets) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"wangsets"),"wangset");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				wangSets.push(this.resolveWangSet(node));
			}
		}
		if(hasGrid) {
			var gnode = haxe_xml__$Access_NodeAccess.resolve(input,"grid");
			var _g = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
			var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
			var input1 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
			var grid1;
			switch(input1) {
			case "hexagonal":
				grid1 = format_tmx_TmxOrientation.Hexagonal;
				break;
			case "isometric":
				grid1 = format_tmx_TmxOrientation.Isometric;
				break;
			case "orthogonal":
				grid1 = format_tmx_TmxOrientation.Orthogonal;
				break;
			case "staggered":
				grid1 = format_tmx_TmxOrientation.Staggered;
				break;
			default:
				grid1 = format_tmx_TmxOrientation.Unknown(input1);
			}
			grid = new format_tmx_TmxTilesetGrid(grid1,_g,_g1);
		}
		if(hasTiles) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var animation = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
					animation = [];
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
					while(_g2 < _g3.length) {
						var frameInfo = _g3[_g2];
						++_g2;
						animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
					}
				}
				var _g4 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
				var _g7 = this.resolveProperties(node);
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
				var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
				tiles.push(new format_tmx_TmxTilesetTile(_g4,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g5,_g6,_g7,_g8,_g9,animation));
			}
		}
		if(root != null) {
			root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : root.firstGID;
			root.source = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : root.source;
			root.name = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : root.name;
			root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : root.tileWidth;
			root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : root.tileHeight;
			root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : root.spacing;
			root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : root.margin;
			root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input,"properties") ? properties : root.properties;
			root.image = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : root.image;
			root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0;
			root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0;
			if(hasTerrains) {
				root.terrainTypes = terrains;
			}
			if(hasTiles) {
				root.tiles = tiles;
			}
			if(hasTileOffset) {
				root.tileOffset = tileOffset;
			}
			if(hasWangSets) {
				root.wangSets = wangSets;
			}
			if(hasGrid) {
				root.grid = grid;
			}
			return root;
		} else {
			var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : null;
			var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : null;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
			var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : 0;
			var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : 0;
			var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : 0;
			var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : 0;
			var _g7 = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null;
			var tset = new format_tmx_TmxTileset(_g,_g1,_g2,_g3,_g4,_g5,_g6,haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0,tileOffset,properties,_g7,terrains,tiles,grid,wangSets);
			if(tset.source != null && this.resolveTSX != null) {
				var tsx = this.resolveTSX(tset.source);
				format_tmx_Tools.applyTSX(tsx,tset);
			}
			return tset;
		}
	}
	,readObjectTypes: function(xml,root) {
		var result = new haxe_ds_StringMap();
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var f = xml;
		if(!haxe_xml__$Access_HasNodeAccess.resolve(f,"objecttypes")) {
			return result;
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(f,"objecttypes"),"objecttype");
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			var props = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(type,"property");
			while(_g2 < _g3.length) {
				var prop = _g3[_g2];
				++_g2;
				var ptype;
				if(haxe_xml__$Access_HasAttribAccess.resolve(prop,"type")) {
					switch(haxe_xml__$Access_AttribAccess.resolve(prop,"type")) {
					case "bool":
						ptype = format_tmx_TmxPropertyType.PTBool;
						break;
					case "color":
						ptype = format_tmx_TmxPropertyType.PTColor;
						break;
					case "file":
						ptype = format_tmx_TmxPropertyType.PTFile;
						break;
					case "float":
						ptype = format_tmx_TmxPropertyType.PTFloat;
						break;
					case "int":
						ptype = format_tmx_TmxPropertyType.PTInt;
						break;
					case "string":
						ptype = format_tmx_TmxPropertyType.PTString;
						break;
					default:
						ptype = format_tmx_TmxPropertyType.PTString;
					}
				} else {
					ptype = format_tmx_TmxPropertyType.PTString;
				}
				props.push(new format_tmx_TmxObjectTypeProperty(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),ptype,haxe_xml__$Access_HasAttribAccess.resolve(prop,"default") ? haxe_xml__$Access_AttribAccess.resolve(prop,"default") : null));
			}
			var key = haxe_xml__$Access_AttribAccess.resolve(type,"name");
			var value = new format_tmx_TmxObjectTypeTemplate(haxe_xml__$Access_AttribAccess.resolve(type,"name"),Std.parseInt("0x" + HxOverrides.substr(haxe_xml__$Access_AttribAccess.resolve(type,"color"),1,null)),props);
			result.h[key] = value;
		}
		if(root != null) {
			format_tmx_Tools.propagateObjectTypes(root,result);
		}
		return result;
	}
	,readTemplate: function(xml) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var f = xml;
		if(!haxe_xml__$Access_HasNodeAccess.resolve(f,"template")) {
			return null;
		}
		var input = haxe_xml__$Access_NodeAccess.resolve(f,"template");
		var _g;
		if(haxe_xml__$Access_HasNodeAccess.resolve(input,"tileset")) {
			var input1 = haxe_xml__$Access_NodeAccess.resolve(input,"tileset");
			var root = null;
			var properties = this.resolveProperties(input1);
			var terrains = [];
			var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input1,"terraintypes");
			var tiles = [];
			var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input1,"tile");
			var tileOffset = null;
			var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input1,"tileoffset");
			var wangSets = [];
			var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input1,"wangsets");
			var grid = null;
			var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input1,"grid");
			if(hasTileOffset) {
				var node = haxe_xml__$Access_NodeAccess.resolve(input1,"tileoffset");
				tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
			}
			if(hasTerrains) {
				var _g1 = 0;
				var _g2 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input1,"terraintypes"),"terrain");
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),this.resolveProperties(node)));
				}
			}
			if(hasWangSets) {
				var _g1 = 0;
				var _g2 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input1,"wangsets"),"wangset");
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					wangSets.push(this.resolveWangSet(node));
				}
			}
			if(hasGrid) {
				var gnode = haxe_xml__$Access_NodeAccess.resolve(input1,"grid");
				var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
				var _g2 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
				var input2 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
				var grid1;
				switch(input2) {
				case "hexagonal":
					grid1 = format_tmx_TmxOrientation.Hexagonal;
					break;
				case "isometric":
					grid1 = format_tmx_TmxOrientation.Isometric;
					break;
				case "orthogonal":
					grid1 = format_tmx_TmxOrientation.Orthogonal;
					break;
				case "staggered":
					grid1 = format_tmx_TmxOrientation.Staggered;
					break;
				default:
					grid1 = format_tmx_TmxOrientation.Unknown(input2);
				}
				grid = new format_tmx_TmxTilesetGrid(grid1,_g1,_g2);
			}
			if(hasTiles) {
				var _g1 = 0;
				var _g2 = haxe_xml__$Access_NodeListAccess.resolve(input1,"tile");
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					var animation = null;
					if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
						animation = [];
						var _g3 = 0;
						var _g4 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
						while(_g3 < _g4.length) {
							var frameInfo = _g4[_g3];
							++_g3;
							animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
						}
					}
					var _g5 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
					var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
					var _g7 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
					var _g8 = this.resolveProperties(node);
					var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
					var _g10 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
					tiles.push(new format_tmx_TmxTilesetTile(_g5,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g6,_g7,_g8,_g9,_g10,animation));
				}
			}
			if(root != null) {
				root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"firstgid")) : root.firstGID;
				root.source = haxe_xml__$Access_HasAttribAccess.resolve(input1,"source") ? haxe_xml__$Access_AttribAccess.resolve(input1,"source") : root.source;
				root.name = haxe_xml__$Access_HasAttribAccess.resolve(input1,"name") ? haxe_xml__$Access_AttribAccess.resolve(input1,"name") : root.name;
				root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilewidth")) : root.tileWidth;
				root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tileheight")) : root.tileHeight;
				root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"spacing")) : root.spacing;
				root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"margin")) : root.margin;
				root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input1,"properties") ? properties : root.properties;
				root.image = haxe_xml__$Access_HasNodeAccess.resolve(input1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input1,"image")) : root.image;
				root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilecount")) : 0;
				root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"columns")) : 0;
				if(hasTerrains) {
					root.terrainTypes = terrains;
				}
				if(hasTiles) {
					root.tiles = tiles;
				}
				if(hasTileOffset) {
					root.tileOffset = tileOffset;
				}
				if(hasWangSets) {
					root.wangSets = wangSets;
				}
				if(hasGrid) {
					root.grid = grid;
				}
				_g = root;
			} else {
				var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"firstgid")) : null;
				var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"source") ? haxe_xml__$Access_AttribAccess.resolve(input1,"source") : null;
				var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"name") ? haxe_xml__$Access_AttribAccess.resolve(input1,"name") : null;
				var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilewidth")) : 0;
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tileheight")) : 0;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"spacing")) : 0;
				var _g7 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"margin")) : 0;
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(input1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input1,"image")) : null;
				var tset = new format_tmx_TmxTileset(_g1,_g2,_g3,_g4,_g5,_g6,_g7,haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"columns")) : 0,tileOffset,properties,_g8,terrains,tiles,grid,wangSets);
				if(tset.source != null && this.resolveTSX != null) {
					var tsx = this.resolveTSX(tset.source);
					format_tmx_Tools.applyTSX(tsx,tset);
				}
				_g = tset;
			}
		} else {
			_g = null;
		}
		return new format_tmx_TmxObjectTemplate(_g,this.resolveObject(haxe_xml__$Access_NodeAccess.resolve(input,"object"),false));
	}
	,resolveGroup: function(input) {
		var layers = [];
		var element = input.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			var _g;
			if(element1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(element1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
				}
				_g = element1.nodeName;
			}
			switch(_g) {
			case "group":
				layers.push(format_tmx_TmxLayer.LGroup(this.resolveGroup(element1)));
				break;
			case "imagelayer":
				layers.push(format_tmx_TmxLayer.LImageLayer(this.resolveImageLayer(element1)));
				break;
			case "layer":
				layers.push(format_tmx_TmxLayer.LTileLayer(this.resolveTileLayer(element1)));
				break;
			case "objectgroup":
				layers.push(format_tmx_TmxLayer.LObjectGroup(this.resolveObjectGroup(element1)));
				break;
			}
		}
		return new format_tmx_TmxGroup(haxe_xml__$Access_HasAttribAccess.resolve(input,"id") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"id")) : 0,haxe_xml__$Access_AttribAccess.resolve(input,"name"),haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input),layers);
	}
	,resolveStaggerIndex: function(input) {
		switch(input) {
		case "even":
			return format_tmx_TmxStaggerIndex.Even;
		case "odd":
			return format_tmx_TmxStaggerIndex.Odd;
		default:
			return format_tmx_TmxStaggerIndex.Unknown(input);
		}
	}
	,resolveStaggerAxis: function(input) {
		switch(input) {
		case "x":
			return format_tmx_TmxStaggerAxis.AxisX;
		case "y":
			return format_tmx_TmxStaggerAxis.AxisY;
		default:
			return format_tmx_TmxStaggerAxis.Unknown(input);
		}
	}
	,resolveOrientation: function(input) {
		switch(input) {
		case "hexagonal":
			return format_tmx_TmxOrientation.Hexagonal;
		case "isometric":
			return format_tmx_TmxOrientation.Isometric;
		case "orthogonal":
			return format_tmx_TmxOrientation.Orthogonal;
		case "staggered":
			return format_tmx_TmxOrientation.Staggered;
		default:
			return format_tmx_TmxOrientation.Unknown(input);
		}
	}
	,resolveColor: function(input) {
		if(HxOverrides.cca(input,0) == 35) {
			if(input.length == 7) {
				return Std.parseInt("0x" + HxOverrides.substr(input,1,null)) + (-16777216);
			} else {
				return Std.parseInt("0x" + HxOverrides.substr(input,1,null));
			}
		} else if(input.length == 6) {
			return Std.parseInt("0x" + input) + (-16777216);
		} else {
			return Std.parseInt("0x" + input);
		}
	}
	,resolveRenderOrder: function(input) {
		switch(input) {
		case "left-down":
			return format_tmx_TmxRenderOrder.LeftDown;
		case "left-up":
			return format_tmx_TmxRenderOrder.LeftUp;
		case "right-down":
			return format_tmx_TmxRenderOrder.RightDown;
		case "right-up":
			return format_tmx_TmxRenderOrder.RightUp;
		default:
			return format_tmx_TmxRenderOrder.Unknown(input);
		}
	}
	,resolveTileset: function(input,root) {
		var properties = this.resolveProperties(input);
		var terrains = [];
		var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input,"terraintypes");
		var tiles = [];
		var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input,"tile");
		var tileOffset = null;
		var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input,"tileoffset");
		var wangSets = [];
		var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input,"wangsets");
		var grid = null;
		var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input,"grid");
		if(hasTileOffset) {
			var node = haxe_xml__$Access_NodeAccess.resolve(input,"tileoffset");
			tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
		}
		if(hasTerrains) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"terraintypes"),"terrain");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),this.resolveProperties(node)));
			}
		}
		if(hasWangSets) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"wangsets"),"wangset");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				wangSets.push(this.resolveWangSet(node));
			}
		}
		if(hasGrid) {
			var gnode = haxe_xml__$Access_NodeAccess.resolve(input,"grid");
			var _g = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
			var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
			var input1 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
			var grid1;
			switch(input1) {
			case "hexagonal":
				grid1 = format_tmx_TmxOrientation.Hexagonal;
				break;
			case "isometric":
				grid1 = format_tmx_TmxOrientation.Isometric;
				break;
			case "orthogonal":
				grid1 = format_tmx_TmxOrientation.Orthogonal;
				break;
			case "staggered":
				grid1 = format_tmx_TmxOrientation.Staggered;
				break;
			default:
				grid1 = format_tmx_TmxOrientation.Unknown(input1);
			}
			grid = new format_tmx_TmxTilesetGrid(grid1,_g,_g1);
		}
		if(hasTiles) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var animation = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
					animation = [];
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
					while(_g2 < _g3.length) {
						var frameInfo = _g3[_g2];
						++_g2;
						animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
					}
				}
				var _g4 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
				var _g7 = this.resolveProperties(node);
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
				var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
				tiles.push(new format_tmx_TmxTilesetTile(_g4,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g5,_g6,_g7,_g8,_g9,animation));
			}
		}
		if(root != null) {
			root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : root.firstGID;
			root.source = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : root.source;
			root.name = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : root.name;
			root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : root.tileWidth;
			root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : root.tileHeight;
			root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : root.spacing;
			root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : root.margin;
			root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input,"properties") ? properties : root.properties;
			root.image = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : root.image;
			root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0;
			root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0;
			if(hasTerrains) {
				root.terrainTypes = terrains;
			}
			if(hasTiles) {
				root.tiles = tiles;
			}
			if(hasTileOffset) {
				root.tileOffset = tileOffset;
			}
			if(hasWangSets) {
				root.wangSets = wangSets;
			}
			if(hasGrid) {
				root.grid = grid;
			}
			return root;
		}
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : null;
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : null;
		var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
		var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : 0;
		var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : 0;
		var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : 0;
		var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : 0;
		var _g7 = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null;
		var tset = new format_tmx_TmxTileset(_g,_g1,_g2,_g3,_g4,_g5,_g6,haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0,tileOffset,properties,_g7,terrains,tiles,grid,wangSets);
		if(tset.source != null && this.resolveTSX != null) {
			var tsx = this.resolveTSX(tset.source);
			format_tmx_Tools.applyTSX(tsx,tset);
		}
		return tset;
	}
	,resolveWangSet: function(input) {
		var corners = [];
		var edges = [];
		var tiles = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"wangcornercolor");
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(node,"name") ? haxe_xml__$Access_AttribAccess.resolve(node,"name") : null;
			var _g3;
			if(haxe_xml__$Access_HasAttribAccess.resolve(node,"color")) {
				var input1 = haxe_xml__$Access_AttribAccess.resolve(node,"color");
				_g3 = HxOverrides.cca(input1,0) == 35 ? input1.length == 7 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) + (-16777216) : Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : input1.length == 6 ? Std.parseInt("0x" + input1) + (-16777216) : Std.parseInt("0x" + input1);
			} else {
				_g3 = 0;
			}
			corners.push(new format_tmx_TmxWangSetColor(_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(node,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0));
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"wangedgecolor");
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(node,"name") ? haxe_xml__$Access_AttribAccess.resolve(node,"name") : null;
			var _g3;
			if(haxe_xml__$Access_HasAttribAccess.resolve(node,"color")) {
				var input1 = haxe_xml__$Access_AttribAccess.resolve(node,"color");
				_g3 = HxOverrides.cca(input1,0) == 35 ? input1.length == 7 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) + (-16777216) : Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : input1.length == 6 ? Std.parseInt("0x" + input1) + (-16777216) : Std.parseInt("0x" + input1);
			} else {
				_g3 = 0;
			}
			edges.push(new format_tmx_TmxWangSetColor(_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(node,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0));
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"wangtile");
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			tiles.push(new format_tmx_TmxWangSetTile(haxe_xml__$Access_HasAttribAccess.resolve(node,"tileid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tileid")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"wangid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"wangid")) : 0));
		}
		return new format_tmx_TmxWangSet(haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tile")) : 0,corners,edges,tiles);
	}
	,resolveWangSetColor: function(input) {
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
		var _g1;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"color")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"color");
			_g1 = HxOverrides.cca(input1,0) == 35 ? input1.length == 7 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) + (-16777216) : Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : input1.length == 6 ? Std.parseInt("0x" + input1) + (-16777216) : Std.parseInt("0x" + input1);
		} else {
			_g1 = 0;
		}
		return new format_tmx_TmxWangSetColor(_g,_g1,haxe_xml__$Access_HasAttribAccess.resolve(input,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tile")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"probability")) : 0);
	}
	,resolveImage: function(input) {
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"format") ? haxe_xml__$Access_AttribAccess.resolve(input,"format") : "";
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"id") ? haxe_xml__$Access_AttribAccess.resolve(input,"id") : "";
		var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : "";
		var _g3;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"transparent")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"transparent");
			_g3 = HxOverrides.cca(input1,0) == 35 ? input1.length == 7 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) + (-16777216) : Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : input1.length == 6 ? Std.parseInt("0x" + input1) + (-16777216) : Std.parseInt("0x" + input1);
		} else {
			_g3 = null;
		}
		return new format_tmx_TmxImage(_g,_g1,_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : null,haxe_xml__$Access_HasNodeAccess.resolve(input,"data") ? this.resolveData(haxe_xml__$Access_NodeAccess.resolve(input,"data"),false) : null);
	}
	,resolveData: function(input,isTileData) {
		if(isTileData == null) {
			isTileData = true;
		}
		var encoding = format_tmx_TmxDataEncoding.None;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"encoding")) {
			switch(haxe_xml__$Access_AttribAccess.resolve(input,"encoding")) {
			case "base64":
				encoding = format_tmx_TmxDataEncoding.Base64;
				break;
			case "csv":
				encoding = format_tmx_TmxDataEncoding.CSV;
				break;
			default:
				throw haxe_Exception.thrown("Unknown encoding \"" + haxe_xml__$Access_AttribAccess.resolve(input,"encoding") + "\"");
			}
		}
		var compression = format_tmx_TmxDataCompression.None;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"compression")) {
			switch(haxe_xml__$Access_AttribAccess.resolve(input,"compression")) {
			case "gzip":
				compression = format_tmx_TmxDataCompression.GZip;
				break;
			case "zlib":
				compression = format_tmx_TmxDataCompression.ZLib;
				break;
			default:
				throw haxe_Exception.thrown("Unknown compression \"" + haxe_xml__$Access_AttribAccess.resolve(input,"compression") + "\"");
			}
		}
		var chunks = null;
		var tiles = null;
		var data = null;
		switch(encoding._hx_index) {
		case 0:
			if(isTileData) {
				if(haxe_xml__$Access_HasNodeAccess.resolve(input,"chunk")) {
					chunks = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"chunk");
					while(_g < _g1.length) {
						var node = _g1[_g];
						++_g;
						var chunk = new format_tmx_TmxChunk(haxe_xml__$Access_HasAttribAccess.resolve(node,"x") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"y") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"height")) : 0,[]);
						var chunkTiles = chunk.tiles;
						var _g2 = 0;
						var _g3 = haxe_xml__$Access_NodeListAccess.resolve(node,"tile");
						while(_g2 < _g3.length) {
							var tile = _g3[_g2];
							++_g2;
							chunkTiles.push(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(tile,"gid")));
						}
						chunks.push(chunk);
					}
				} else {
					tiles = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
					while(_g < _g1.length) {
						var info = _g1[_g];
						++_g;
						tiles.push(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(info,"gid")));
					}
				}
			} else if(compression == format_tmx_TmxDataCompression.None) {
				data = haxe_io_Bytes.ofString(StringTools.trim(haxe_xml_Access.get_innerData(input)));
			} else {
				data = this.uncompressData(new haxe_io_StringInput(StringTools.trim(haxe_xml_Access.get_innerData(input))),compression);
			}
			break;
		case 1:
			var tile;
			var flipH;
			if(isTileData && haxe_xml__$Access_HasNodeAccess.resolve(input,"chunk")) {
				chunks = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"chunk");
				while(_g < _g1.length) {
					var node = _g1[_g];
					++_g;
					var chunk = new format_tmx_TmxChunk(haxe_xml__$Access_HasAttribAccess.resolve(node,"x") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"y") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"height")) : 0,[]);
					var chunkTiles = chunk.tiles;
					data = haxe_crypto_Base64.decode(StringTools.trim(haxe_xml_Access.get_innerData(node)));
					if(compression != format_tmx_TmxDataCompression.None) {
						data = this.uncompressData(new haxe_io_BytesInput(data),compression);
					}
					var tilesCount = data.length / 4 | 0;
					var d = new haxe_io_BytesInput(data);
					d.set_bigEndian(false);
					var _g2 = 0;
					var _g3 = tilesCount;
					while(_g2 < _g3) {
						var i = _g2++;
						tile = d.readInt32();
						chunkTiles.push(tile);
					}
					chunks.push(chunk);
				}
				data = null;
			} else {
				data = haxe_crypto_Base64.decode(StringTools.trim(haxe_xml_Access.get_innerData(input)));
				if(compression != format_tmx_TmxDataCompression.None) {
					data = this.uncompressData(new haxe_io_BytesInput(data),compression);
				}
				if(isTileData) {
					tiles = [];
					var tilesCount = data.length / 4 | 0;
					var offset = 0;
					var d = new haxe_io_BytesInput(data);
					d.set_bigEndian(false);
					var _g = 0;
					var _g1 = tilesCount;
					while(_g < _g1) {
						var i = _g++;
						tile = d.readInt32();
						tiles.push(tile);
					}
					data = null;
				}
			}
			break;
		case 2:
			if(isTileData) {
				if(haxe_xml__$Access_HasNodeAccess.resolve(input,"chunk")) {
					chunks = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"chunk");
					while(_g < _g1.length) {
						var node = _g1[_g];
						++_g;
						var chunk = new format_tmx_TmxChunk(haxe_xml__$Access_HasAttribAccess.resolve(node,"x") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"y") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"height")) : 0,[]);
						var chunkTiles = chunk.tiles;
						var split = StringTools.trim(haxe_xml_Access.get_innerData(node)).split(",");
						var _g2 = 0;
						while(_g2 < split.length) {
							var str = split[_g2];
							++_g2;
							chunkTiles.push(Std.parseInt(str));
						}
						chunks.push(chunk);
					}
				} else {
					tiles = [];
					var split = StringTools.trim(haxe_xml_Access.get_innerData(input)).split(",");
					var _g = 0;
					while(_g < split.length) {
						var str = split[_g];
						++_g;
						tiles.push(Std.parseInt(str));
					}
				}
			} else {
				throw haxe_Exception.thrown("CSV encoding available only for tile data");
			}
			break;
		case 3:
			var value = encoding.value;
			throw haxe_Exception.thrown("Unknown data encoding: " + value);
		}
		return new format_tmx_TmxData(encoding,compression,tiles,chunks,data);
	}
	,uncompressData: function(i,compression) {
		switch(compression._hx_index) {
		case 0:
			return i.readAll();
		case 1:
			var o = new haxe_io_BytesOutput();
			new format_gz_Reader(i).readData(o);
			return o.getBytes();
		case 2:
			return haxe_zip_InflateImpl.run(i);
		case 3:
			var value = compression.value;
			throw haxe_Exception.thrown("Unknown compression method: " + value);
		}
	}
	,resolveTileLayer: function(input) {
		var layer = new format_tmx_TmxTileLayer(haxe_xml__$Access_HasNodeAccess.resolve(input,"data") ? this.resolveData(haxe_xml__$Access_NodeAccess.resolve(input,"data")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"id") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"id")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(input,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : this.width,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : this.height,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input));
		return layer;
	}
	,resolveDraworder: function(input) {
		switch(input) {
		case "index":
			return format_tmx_TmxObjectGroupDrawOrder.Index;
		case "topdown":
			return format_tmx_TmxObjectGroupDrawOrder.Topdown;
		default:
			return format_tmx_TmxObjectGroupDrawOrder.Unknown(input);
		}
	}
	,resolveObjectGroup: function(input) {
		var objects = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"object");
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			objects.push(this.resolveObject(obj));
		}
		var group;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"draworder")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"draworder");
			switch(input1) {
			case "index":
				group = format_tmx_TmxObjectGroupDrawOrder.Index;
				break;
			case "topdown":
				group = format_tmx_TmxObjectGroupDrawOrder.Topdown;
				break;
			default:
				group = format_tmx_TmxObjectGroupDrawOrder.Unknown(input1);
			}
		} else {
			group = format_tmx_TmxObjectGroupDrawOrder.Topdown;
		}
		var group1 = new format_tmx_TmxObjectGroup(group,objects,haxe_xml__$Access_HasAttribAccess.resolve(input,"color") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"color")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"id") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"id")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(input,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : this.width,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : this.height,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input));
		return group1;
	}
	,resolveObject: function(obj,applyObjectTypeTemplate) {
		if(applyObjectTypeTemplate == null) {
			applyObjectTypeTemplate = true;
		}
		var flippedV = false;
		var flippedH = false;
		var type;
		if(haxe_xml__$Access_HasNodeAccess.resolve(obj,"ellipse")) {
			type = format_tmx_TmxObjectType.OTEllipse;
		} else if(haxe_xml__$Access_HasAttribAccess.resolve(obj,"gid")) {
			var gid = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(obj,"gid"));
			flippedH = (gid & -2147483648) == -2147483648;
			if(flippedH && gid < 0) {
				gid = -gid;
			}
			flippedV = (gid & 1073741824) == 1073741824;
			type = format_tmx_TmxObjectType.OTTile(gid & 1073741823);
		} else {
			type = haxe_xml__$Access_HasNodeAccess.resolve(obj,"polygon") ? format_tmx_TmxObjectType.OTPolygon(this.readPoints(haxe_xml__$Access_NodeAccess.resolve(obj,"polygon"))) : haxe_xml__$Access_HasNodeAccess.resolve(obj,"polyline") ? format_tmx_TmxObjectType.OTPolyline(this.readPoints(haxe_xml__$Access_NodeAccess.resolve(obj,"polyline"))) : haxe_xml__$Access_HasNodeAccess.resolve(obj,"text") ? format_tmx_TmxObjectType.OTText(this.resolveText(haxe_xml__$Access_NodeAccess.resolve(obj,"text"))) : haxe_xml__$Access_HasNodeAccess.resolve(obj,"point") ? format_tmx_TmxObjectType.OTPoint : format_tmx_TmxObjectType.OTRectangle;
		}
		var object = new format_tmx_TmxObject(haxe_xml__$Access_HasAttribAccess.resolve(obj,"id") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(obj,"id")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"name") ? haxe_xml__$Access_AttribAccess.resolve(obj,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(obj,"type") ? haxe_xml__$Access_AttribAccess.resolve(obj,"type") : "",haxe_xml__$Access_HasAttribAccess.resolve(obj,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"width") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"height") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"height")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"rotation") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"rotation")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"visible") ? haxe_xml__$Access_AttribAccess.resolve(obj,"visible") == "1" : true,type,this.resolveProperties(obj),flippedH,flippedV,haxe_xml__$Access_HasAttribAccess.resolve(obj,"template") ? haxe_xml__$Access_AttribAccess.resolve(obj,"template") : null);
		if(object.template != null && this.resolveTemplate != null) {
			var template = this.resolveTemplate(haxe_xml__$Access_AttribAccess.resolve(obj,"template"));
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"name")) {
				object.name = template.object.name;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"type")) {
				object.type = template.object.type;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"x")) {
				object.x = template.object.x;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"y")) {
				object.x = template.object.y;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"width")) {
				object.width = template.object.width;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"height")) {
				object.height = template.object.height;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"rotation")) {
				object.rotation = template.object.rotation;
			}
			if(!haxe_xml__$Access_HasAttribAccess.resolve(obj,"gid")) {
				object.flippedHorizontally = template.object.flippedHorizontally;
				object.flippedVertically = template.object.flippedVertically;
			}
			template.object.properties.propagateTo(object.properties);
			var _g = template.object.objectType;
			var tmp;
			if(_g._hx_index == 1) {
				var gid = _g.gid;
				tmp = format_tmx_TmxObjectType.OTExternalTile(gid,template.tileset);
			} else {
				tmp = template.object.objectType;
			}
			object.objectType = tmp;
		}
		if(applyObjectTypeTemplate && object.type != null && object.type != "" && this.resolveTypeTemplate != null) {
			var template = this.resolveTypeTemplate(object.type);
			format_tmx_Tools.applyObjectTypeTemplate(object,template);
		}
		return object;
	}
	,readPoints: function(input) {
		var arr = [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"points")) {
			var points = haxe_xml__$Access_AttribAccess.resolve(input,"points").split(" ");
			var _g = 0;
			while(_g < points.length) {
				var point = points[_g];
				++_g;
				var idx = point.indexOf(",");
				arr.push(new format_tmx_TmxPoint(parseFloat(HxOverrides.substr(point,0,idx)),parseFloat(HxOverrides.substr(point,idx + 1,null))));
			}
		}
		return arr;
	}
	,resolveText: function(input) {
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"fontfamily") ? haxe_xml__$Access_AttribAccess.resolve(input,"fontfamily") : "sans-serif";
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"pixelsize") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"pixelsize")) : 16;
		var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"wrap") && haxe_xml__$Access_AttribAccess.resolve(input,"wrap") == "1";
		var _g3;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"color")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"color");
			_g3 = HxOverrides.cca(input1,0) == 35 ? input1.length == 7 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) + (-16777216) : Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : input1.length == 6 ? Std.parseInt("0x" + input1) + (-16777216) : Std.parseInt("0x" + input1);
		} else {
			_g3 = 0;
		}
		return new format_tmx_TmxText(_g,_g1,_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(input,"bold") && haxe_xml__$Access_AttribAccess.resolve(input,"bold") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"italic") && haxe_xml__$Access_AttribAccess.resolve(input,"italic") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"underline") && haxe_xml__$Access_AttribAccess.resolve(input,"underline") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"strikeout") && haxe_xml__$Access_AttribAccess.resolve(input,"strikeout") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"kerning") ? haxe_xml__$Access_AttribAccess.resolve(input,"kerning") == "1" : true,haxe_xml__$Access_HasAttribAccess.resolve(input,"halign") ? haxe_xml__$Access_AttribAccess.resolve(input,"halign") : "left",haxe_xml__$Access_HasAttribAccess.resolve(input,"valign") ? haxe_xml__$Access_AttribAccess.resolve(input,"valign") : "top",haxe_xml_Access.get_innerData(input));
	}
	,resolveImageLayer: function(input) {
		var layer = new format_tmx_TmxImageLayer(haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"id") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"id")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(input,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : this.width,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : this.height,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input));
		return layer;
	}
	,resolveProperties: function(input) {
		var props = new format_tmx__$Data_ImplTmxProperties();
		var value;
		if(haxe_xml__$Access_HasNodeAccess.resolve(input,"properties")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"properties"),"property");
			while(_g < _g1.length) {
				var prop = _g1[_g];
				++_g;
				value = haxe_xml__$Access_HasAttribAccess.resolve(prop,"value") ? haxe_xml__$Access_AttribAccess.resolve(prop,"value") : haxe_xml_Access.get_innerData(prop);
				if(haxe_xml__$Access_HasAttribAccess.resolve(prop,"type")) {
					switch(haxe_xml__$Access_AttribAccess.resolve(prop,"type")) {
					case "bool":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTBool);
						break;
					case "color":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTColor);
						break;
					case "file":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTFile);
						break;
					case "float":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTFloat);
						break;
					case "int":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTInt);
						break;
					default:
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTString);
					}
				} else {
					props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTString);
				}
			}
		}
		return props;
	}
	,__class__: format_tmx_Reader
};
var format_tmx_Tools = function() { };
$hxClasses["format.tmx.Tools"] = format_tmx_Tools;
format_tmx_Tools.__name__ = "format.tmx.Tools";
format_tmx_Tools.applyTSX = function(tsx,base) {
	base.properties = tsx.properties;
	base.name = tsx.name;
	base.columns = tsx.columns;
	base.grid = tsx.grid;
	base.image = tsx.image;
	base.margin = tsx.margin;
	base.spacing = tsx.spacing;
	base.tileOffset = tsx.tileOffset;
	base.tileCount = tsx.tileCount;
	base.tileHeight = tsx.tileHeight;
	base.tileWidth = tsx.tileWidth;
	base.terrainTypes = tsx.terrainTypes;
	base.tiles = tsx.tiles;
	base.wangSets = tsx.wangSets;
};
format_tmx_Tools.applyObjectTypeTemplate = function(obj,ot) {
	var props = obj.properties;
	var _g = 0;
	var _g1 = ot.properties;
	while(_g < _g1.length) {
		var prop = _g1[_g];
		++_g;
		if(prop.defaultValue != null && !props.exists(prop.name)) {
			props.setRaw(prop.name,prop.defaultValue,prop.type);
		}
	}
};
format_tmx_Tools.resolveOTExternalTile = function(map,mapPath) {
	var tilesetPaths = [];
	if(mapPath == null) {
		mapPath = map.localPath == null ? "" : haxe_io_Path.directory(map.localPath);
	} else {
		mapPath = haxe_io_Path.directory(mapPath);
	}
	var _g = 0;
	var _g1 = map.tilesets;
	while(_g < _g1.length) {
		var tset = _g1[_g];
		++_g;
		if(tset.source != null) {
			tilesetPaths.push(haxe_io_Path.join([mapPath,tset.source]));
		} else {
			tilesetPaths.push("");
		}
	}
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		switch(layer._hx_index) {
		case 1:
			var _g2 = layer.group;
			format_tmx_Tools.resolveOTExternalTileInternal(map,layer,mapPath,tilesetPaths);
			break;
		case 3:
			var _g3 = layer.group;
			format_tmx_Tools.resolveOTExternalTileInternal(map,layer,mapPath,tilesetPaths);
			break;
		default:
		}
	}
};
format_tmx_Tools.resolveOTExternalTileInternal = function(map,layer,mapPath,paths) {
	switch(layer._hx_index) {
	case 1:
		var group = layer.group;
		var _g = 0;
		var _g1 = group.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var _g2 = obj.objectType;
			if(_g2._hx_index == 2) {
				var gid = _g2.gid;
				var tileset = _g2.tileset;
				var templateSource = haxe_io_Path.join([mapPath,haxe_io_Path.directory(obj.template),tileset.source]);
				var _g3 = 0;
				var _g4 = paths.length;
				while(_g3 < _g4) {
					var i = _g3++;
					if(paths[i] == templateSource) {
						obj.objectType = format_tmx_TmxObjectType.OTTile(map.tilesets[i].firstGID + gid - tileset.firstGID);
						break;
					}
				}
			}
		}
		break;
	case 3:
		var group = layer.group;
		var _g = 0;
		var _g1 = group.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			format_tmx_Tools.resolveOTExternalTileInternal(map,layer,mapPath,paths);
		}
		break;
	default:
	}
};
format_tmx_Tools.linearLayers = function(map) {
	var linear = [];
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l._hx_index == 3) {
			var group = l.group;
			format_tmx_Tools.linearLayersInternal(group,linear);
		} else {
			linear.push(l);
		}
	}
	return linear;
};
format_tmx_Tools.linearLayersInternal = function(group,output) {
	var _g = 0;
	var _g1 = group.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		switch(layer._hx_index) {
		case 0:
			var l = layer.layer;
			l.offsetX += group.offsetX;
			l.offsetY += group.offsetY;
			l.visible = group.visible;
			l.opacity *= group.opacity;
			output.push(layer);
			break;
		case 1:
			var g = layer.group;
			g.offsetX += group.offsetX;
			g.offsetY += group.offsetY;
			g.visible = group.visible;
			g.opacity *= group.opacity;
			output.push(layer);
			break;
		case 2:
			var l1 = layer.layer;
			l1.offsetX += group.offsetX;
			l1.offsetY += group.offsetY;
			l1.visible = group.visible;
			l1.opacity *= group.opacity;
			output.push(layer);
			break;
		case 3:
			var g1 = layer.group;
			g1.offsetX += group.offsetX;
			g1.offsetY += group.offsetY;
			g1.visible = group.visible;
			g1.opacity *= group.opacity;
			format_tmx_Tools.linearLayersInternal(g1,output);
			break;
		}
	}
};
format_tmx_Tools.propagateObjectTypeToObject = function(obj,types) {
	if(obj.type != null) {
		var type = types.h[obj.type];
		if(type != null) {
			var props = obj.properties;
			var _g = 0;
			var _g1 = type.properties;
			while(_g < _g1.length) {
				var prop = _g1[_g];
				++_g;
				if(!props.exists(prop.name) && prop.defaultValue != null) {
					props.setRaw(prop.name,prop.defaultValue,prop.type);
				}
			}
		}
	}
};
format_tmx_Tools.propagateTilePropertiesToObject = function(obj,map,gid) {
	var tset = format_tmx_Tools.getTilesetByGid(map,gid);
	if(tset != null && tset.tiles != null) {
		var lid = gid - tset.firstGID;
		var _g = 0;
		var _g1 = tset.tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			if(tile.id == lid) {
				tile.properties.propagateTo(obj.properties);
				if(tile.type != null && (obj.type == null || obj.type == "")) {
					obj.type = tile.type;
				}
			}
		}
	}
};
format_tmx_Tools.propagateTileProperties = function(map) {
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		format_tmx_Tools.propagateTilePropertiesLayer(map,layer);
	}
};
format_tmx_Tools.propagateTilePropertiesLayer = function(map,layer) {
	var tset;
	switch(layer._hx_index) {
	case 1:
		var group = layer.group;
		var _g = 0;
		var _g1 = group.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var _g2 = obj.objectType;
			if(_g2._hx_index == 1) {
				var gid = _g2.gid;
				tset = format_tmx_Tools.getTilesetByGid(map,gid);
				var lid = gid - tset.firstGID;
				var _g3 = 0;
				var _g4 = tset.tiles;
				while(_g3 < _g4.length) {
					var tile = _g4[_g3];
					++_g3;
					if(tile.id == lid) {
						tile.properties.propagateTo(obj.properties);
						if(tile.type != null && (obj.type == null || obj.type == "")) {
							obj.type = tile.type;
						}
					}
				}
			}
		}
		break;
	case 3:
		var g = layer.group;
		var _g = 0;
		var _g1 = g.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			format_tmx_Tools.propagateTilePropertiesLayer(map,l);
		}
		break;
	default:
	}
};
format_tmx_Tools.propagateObjectTypes = function(map,types,propagateObjectLayers,propagateTileColliders) {
	if(propagateTileColliders == null) {
		propagateTileColliders = true;
	}
	if(propagateObjectLayers == null) {
		propagateObjectLayers = true;
	}
	var propagateLayer = null;
	propagateLayer = function(layer) {
		switch(layer._hx_index) {
		case 1:
			var o = layer.group;
			var _g = 0;
			var _g1 = o.objects;
			while(_g < _g1.length) {
				var obj = _g1[_g];
				++_g;
				if(obj.type != null) {
					var type = types.h[obj.type];
					if(type != null) {
						var _g2 = 0;
						var _g3 = type.properties;
						while(_g2 < _g3.length) {
							var prop = _g3[_g2];
							++_g2;
							if(!obj.properties.exists(prop.name) && prop.defaultValue != null) {
								obj.properties.setRaw(prop.name,prop.defaultValue,prop.type);
							}
						}
					}
				}
			}
			break;
		case 3:
			var g = layer.group;
			var _g = 0;
			var _g1 = g.layers;
			while(_g < _g1.length) {
				var layer = _g1[_g];
				++_g;
				propagateLayer(layer);
			}
			break;
		default:
		}
	};
	if(propagateTileColliders) {
		var _g = 0;
		var _g1 = map.tilesets;
		while(_g < _g1.length) {
			var tset = _g1[_g];
			++_g;
			if(tset.tiles != null) {
				var _g2 = 0;
				var _g3 = tset.tiles;
				while(_g2 < _g3.length) {
					var tile = _g3[_g2];
					++_g2;
					if(tile.objectGroup != null) {
						var _g4 = 0;
						var _g5 = tile.objectGroup.objects;
						while(_g4 < _g5.length) {
							var obj = _g5[_g4];
							++_g4;
							if(obj.type != null) {
								var type = types.h[obj.type];
								if(type != null) {
									var _g6 = 0;
									var _g7 = type.properties;
									while(_g6 < _g7.length) {
										var prop = _g7[_g6];
										++_g6;
										if(!obj.properties.exists(prop.name) && prop.defaultValue != null) {
											obj.properties.setRaw(prop.name,prop.defaultValue,prop.type);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(propagateObjectLayers) {
		var _g = 0;
		var _g1 = map.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			propagateLayer(l);
		}
	}
};
format_tmx_Tools.getTileByGid = function(map,gid) {
	var tset = format_tmx_Tools.getTilesetByGid(map,gid);
	if(tset != null && tset.tiles != null) {
		var lid = gid - tset.firstGID;
		var _g = 0;
		var _g1 = tset.tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			if(tile.id == lid) {
				return tile;
			}
		}
	}
	return null;
};
format_tmx_Tools.getTilesetByGid = function(map,gid) {
	if(gid <= 0) {
		return null;
	}
	var i = 0;
	while(i < map.tilesets.length) {
		if(map.tilesets[i].firstGID > gid) {
			return map.tilesets[i - 1];
		}
		++i;
	}
	return map.tilesets[i - 1];
};
format_tmx_Tools.getTilesetIndexByGid = function(map,gid) {
	if(gid <= 0) {
		return -1;
	}
	var i = 0;
	while(i < map.tilesets.length) {
		if(map.tilesets[i].firstGID > gid) {
			return i - 1;
		}
		++i;
	}
	return i - 1;
};
format_tmx_Tools.getTileUVByLidUnsafe = function(tileset,localId,output) {
	var tilesInLine = format_tmx_Tools.getTilesCountInLineOnTileset(tileset);
	Reflect.setProperty(output,"x",localId % tilesInLine * (tileset.tileWidth + tileset.spacing) + tileset.margin);
	Reflect.setProperty(output,"y",Math.floor(localId / tilesInLine) * (tileset.tileHeight + tileset.spacing) + tileset.margin);
};
format_tmx_Tools.fixObjectPlacement = function(map) {
	format_tmx_Tools.topLeftObjectOrigin(map);
};
format_tmx_Tools.topLeftObjectOrigin = function(map) {
	var toRad = Math.PI / 180;
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		if(type._hx_index == 1) {
			var group = type.group;
			var _g2 = 0;
			var _g3 = group.objects;
			while(_g2 < _g3.length) {
				var obj = _g3[_g2];
				++_g2;
				var height = obj.height;
				if(height == null || height == 0) {
					var _g4 = obj.objectType;
					if(_g4._hx_index == 1) {
						var gid = _g4.gid;
						var tset = format_tmx_Tools.getTilesetByGid(map,gid);
						if(tset != null && tset.tileHeight != null) {
							height = tset.tileHeight;
						} else {
							height = map.tileHeight;
						}
					} else {
						height = map.tileHeight;
					}
				}
				var radians = obj.rotation * toRad;
				obj.x += Math.sin(radians) * height;
				obj.y -= Math.cos(radians) * height;
			}
		}
	}
};
format_tmx_Tools.getTilesCountInLineOnTileset = function(tileset) {
	return Math.floor((tileset.image.width - tileset.margin * 2 + tileset.spacing) / (tileset.tileWidth + tileset.spacing));
};
format_tmx_Tools.getTilesCountInColumnOnTileset = function(tileset) {
	return Math.floor((tileset.image.height - tileset.margin * 2 + tileset.spacing) / (tileset.tileHeight + tileset.spacing));
};
format_tmx_Tools.getTilesCountInTileset = function(tileset) {
	return Math.floor((tileset.image.width - tileset.margin * 2 + tileset.spacing) / (tileset.tileWidth + tileset.spacing)) * Math.floor((tileset.image.height - tileset.margin * 2 + tileset.spacing) / (tileset.tileHeight + tileset.spacing));
};
format_tmx_Tools.tilePosition = function(map,tx,ty,tileset,lid) {
	var th;
	var ox = 0;
	var oy = 0;
	if(tileset == null) {
		th = map.tileHeight;
	} else {
		th = tileset.tileHeight;
		if(tileset.tileOffset != null) {
			ox = tileset.tileOffset.x;
			oy = tileset.tileOffset.y;
		}
		if(th == 0) {
			th = map.tileHeight;
		}
		if(lid != null) {
			var _g = 0;
			var _g1 = tileset.tiles;
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				if(t.id == lid && t.image != null) {
					th = t.image.height;
					break;
				}
			}
		}
	}
	th -= map.tileHeight;
	var _g = map.orientation;
	switch(_g._hx_index) {
	case 0:
		return { x : map.tileWidth * tx + ox, y : map.tileHeight * ty - th + oy};
	case 1:
		var hw = map.tileWidth * .5;
		var hh = map.tileHeight * .5;
		return { x : tx * hw - ty * hw + ox, y : (ty + tx) * hh - th + oy};
	case 2:
		return null;
	case 3:
		return null;
	case 4:
		var _g1 = _g.value;
		return { x : map.tileWidth * tx + ox, y : map.tileHeight * ty - th + oy};
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					this.serializeString(k);
					this.serialize(v1.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					b64 = new Array(haxe_Serializer.BASE64.length);
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_ds_Vector = {};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "C:\\Users\\authe\\ceramic\\git\\haxe-binary\\windows\\haxe\\std\\haxe\\io\\Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readAll: function(bufsize) {
		if(bufsize == null) {
			bufsize = 16384;
		}
		var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
		var total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				var len = this.readBytes(buf,0,bufsize);
				if(len == 0) {
					throw haxe_Exception.thrown(haxe_io_Error.Blocked);
				}
				total.addBytes(buf,0,len);
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return total.getBytes();
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "C:\\Users\\authe\\ceramic\\git\\haxe-binary\\windows\\haxe\\std\\haxe\\io\\Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = "haxe.io.StringInput";
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_rtti_CType = $hxEnums["haxe.rtti.CType"] = { __ename__:"haxe.rtti.CType",__constructs__:null
	,CUnknown: {_hx_name:"CUnknown",_hx_index:0,__enum__:"haxe.rtti.CType",toString:$estr}
	,CEnum: ($_=function(name,params) { return {_hx_index:1,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CEnum",$_.__params__ = ["name","params"],$_)
	,CClass: ($_=function(name,params) { return {_hx_index:2,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CClass",$_.__params__ = ["name","params"],$_)
	,CTypedef: ($_=function(name,params) { return {_hx_index:3,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CTypedef",$_.__params__ = ["name","params"],$_)
	,CFunction: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CFunction",$_.__params__ = ["args","ret"],$_)
	,CAnonymous: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAnonymous",$_.__params__ = ["fields"],$_)
	,CDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CDynamic",$_.__params__ = ["t"],$_)
	,CAbstract: ($_=function(name,params) { return {_hx_index:7,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAbstract",$_.__params__ = ["name","params"],$_)
};
haxe_rtti_CType.__constructs__ = [haxe_rtti_CType.CUnknown,haxe_rtti_CType.CEnum,haxe_rtti_CType.CClass,haxe_rtti_CType.CTypedef,haxe_rtti_CType.CFunction,haxe_rtti_CType.CAnonymous,haxe_rtti_CType.CDynamic,haxe_rtti_CType.CAbstract];
var haxe_rtti_Rights = $hxEnums["haxe.rtti.Rights"] = { __ename__:"haxe.rtti.Rights",__constructs__:null
	,RNormal: {_hx_name:"RNormal",_hx_index:0,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RNo: {_hx_name:"RNo",_hx_index:1,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RCall: ($_=function(m) { return {_hx_index:2,m:m,__enum__:"haxe.rtti.Rights",toString:$estr}; },$_._hx_name="RCall",$_.__params__ = ["m"],$_)
	,RMethod: {_hx_name:"RMethod",_hx_index:3,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RDynamic: {_hx_name:"RDynamic",_hx_index:4,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RInline: {_hx_name:"RInline",_hx_index:5,__enum__:"haxe.rtti.Rights",toString:$estr}
};
haxe_rtti_Rights.__constructs__ = [haxe_rtti_Rights.RNormal,haxe_rtti_Rights.RNo,haxe_rtti_Rights.RCall,haxe_rtti_Rights.RMethod,haxe_rtti_Rights.RDynamic,haxe_rtti_Rights.RInline];
var haxe_rtti_TypeTree = $hxEnums["haxe.rtti.TypeTree"] = { __ename__:"haxe.rtti.TypeTree",__constructs__:null
	,TPackage: ($_=function(name,full,subs) { return {_hx_index:0,name:name,full:full,subs:subs,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TPackage",$_.__params__ = ["name","full","subs"],$_)
	,TClassdecl: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TClassdecl",$_.__params__ = ["c"],$_)
	,TEnumdecl: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TEnumdecl",$_.__params__ = ["e"],$_)
	,TTypedecl: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TTypedecl",$_.__params__ = ["t"],$_)
	,TAbstractdecl: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TAbstractdecl",$_.__params__ = ["a"],$_)
};
haxe_rtti_TypeTree.__constructs__ = [haxe_rtti_TypeTree.TPackage,haxe_rtti_TypeTree.TClassdecl,haxe_rtti_TypeTree.TEnumdecl,haxe_rtti_TypeTree.TTypedecl,haxe_rtti_TypeTree.TAbstractdecl];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_rtti_Rtti = function() { };
$hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
haxe_rtti_Rtti.__name__ = "haxe.rtti.Rtti";
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) {
		throw haxe_Exception.thrown("Class " + c.__name__ + " has no RTTI information, consider adding @:rtti");
	}
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	if(infos._hx_index == 1) {
		var c = infos.c;
		return c;
	} else {
		var t = infos;
		throw haxe_Exception.thrown("Enum mismatch: expected TClassDecl but found " + Std.string(t));
	}
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
$hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
haxe_rtti_XmlParser.__name__ = "haxe.rtti.XmlParser";
haxe_rtti_XmlParser.prototype = {
	root: null
	,curplatform: null
	,mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") {
			return [];
		}
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "null":
			return haxe_rtti_Rights.RNo;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		var tmp;
		if(c.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			tmp = c.nodeName;
		}
		throw haxe_Exception.thrown("Invalid " + tmp);
	}
	,processElement: function(x) {
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var c = x;
		var _g;
		if(c.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			_g = c.nodeName;
		}
		switch(_g) {
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(x,"m");
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(m,"e");
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				pl.push(haxe_xml_Access.get_innerHTML(p));
			}
			ml.push({ name : haxe_xml__$Access_AttribAccess.resolve(m,"n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = [];
		var m = x.elements();
		while(m.hasNext()) {
			var m1 = m.next();
			l.push(this.xclassfield(m1));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path"));
		var params = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			params.push(this.xtype(c1));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = [];
		var fields = [];
		var statics = [];
		var meta = [];
		var isInterface = x.exists("interface");
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "extends":
				if(isInterface) {
					interfaces.push(this.xpath(c1));
				} else {
					csuper = this.xpath(c1);
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "haxe_dynamic":
				var x1 = c1.firstElement();
				if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
				}
				tdynamic = this.xtype(x1);
				break;
			case "implements":
				interfaces.push(this.xpath(c1));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			default:
				if(c1.exists("static")) {
					statics.push(this.xclassfield(c1));
				} else {
					fields.push(this.xclassfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), isFinal : x.exists("final"), isInterface : isInterface, params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) {
			defPublic = false;
		}
		var e = x.elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		var c = e;
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "overloads":
				overloads = this.xoverloads(c1);
				break;
			default:
				this.xerror(c1);
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		return { name : tmp, type : t, isPublic : x.exists("public") || defPublic, isFinal : x.exists("final"), isOverride : x.exists("override"), line : haxe_xml__$Access_HasAttribAccess.resolve(x,"line") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(x,"line")) : null, doc : doc, get : haxe_xml__$Access_HasAttribAccess.resolve(x,"get") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"get")) : haxe_rtti_Rights.RNormal, set : haxe_xml__$Access_HasAttribAccess.resolve(x,"set") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"set")) : haxe_rtti_Rights.RNormal, params : haxe_xml__$Access_HasAttribAccess.resolve(x,"params") ? this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")) : [], platforms : this.defplat(), meta : meta, overloads : overloads, expr : haxe_xml__$Access_HasAttribAccess.resolve(x,"expr") ? haxe_xml__$Access_AttribAccess.resolve(x,"expr") : null};
	}
	,xenum: function(x) {
		var cl = [];
		var doc = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					cl.push(this.xenumfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var docElements = x.elementsNamed("haxe_doc");
		var xdoc = docElements.hasNext() ? docElements.next() : null;
		var meta = haxe_xml__$Access_HasNodeAccess.resolve(x,"meta") ? this.xmeta(haxe_xml__$Access_NodeAccess.resolve(x,"meta")) : [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(x,"a")) {
			var names = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var elts = x.elements();
			args = [];
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.push({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		var tmp1;
		if(xdoc == null) {
			tmp1 = null;
		} else {
			if(xdoc.nodeType != Xml.Document && xdoc.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (xdoc.nodeType == null ? "null" : XmlType.toString(xdoc.nodeType)));
			}
			tmp1 = haxe_xml_Access.get_innerData(xdoc);
		}
		return { name : tmp, args : args, doc : tmp1, meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "from":
				var t = c1.elements();
				while(t.hasNext()) {
					var t1 = t.next();
					var x1 = t1.firstElement();
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
					}
					from.push({ t : this.xtype(x1), field : haxe_xml__$Access_HasAttribAccess.resolve(t1,"field") ? haxe_xml__$Access_AttribAccess.resolve(t1,"field") : null});
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "impl":
				impl = this.xclass(haxe_xml__$Access_NodeAccess.resolve(c1,"class"));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "this":
				var x2 = c1.firstElement();
				if(x2.nodeType != Xml.Document && x2.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x2.nodeType == null ? "null" : XmlType.toString(x2.nodeType)));
				}
				athis = this.xtype(x2);
				break;
			case "to":
				var t2 = c1.elements();
				while(t2.hasNext()) {
					var t3 = t2.next();
					var x3 = t3.firstElement();
					if(x3.nodeType != Xml.Document && x3.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x3.nodeType == null ? "null" : XmlType.toString(x3.nodeType)));
					}
					to.push({ t : this.xtype(x3), field : haxe_xml__$Access_HasAttribAccess.resolve(t3,"field") ? haxe_xml__$Access_AttribAccess.resolve(t3,"field") : null});
				}
				break;
			default:
				this.xerror(c1);
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					t = this.xtype(c1);
				}
			}
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) {
			types.h[this.curplatform] = t;
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g;
		if(x.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			_g = x.nodeName;
		}
		switch(_g) {
		case "a":
			var fields = [];
			var f = x.elements();
			while(f.hasNext()) {
				var f1 = f.next();
				var f2 = this.xclassfield(f1,true);
				f2.platforms = [];
				fields.push(f2);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "d":
			var t = null;
			var tx = x.firstElement();
			if(tx != null) {
				if(tx.nodeType != Xml.Document && tx.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (tx.nodeType == null ? "null" : XmlType.toString(tx.nodeType)));
				}
				t = this.xtype(tx);
			}
			return haxe_rtti_CType.CDynamic(t);
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "f":
			var args = [];
			var aname = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var eargs_current = 0;
			var eargs_array = aname;
			var evalues = haxe_xml__$Access_HasAttribAccess.resolve(x,"v") ? new haxe_iterators_ArrayIterator(haxe_xml__$Access_AttribAccess.resolve(x,"v").split(":")) : null;
			var e = x.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var opt = false;
				var a = eargs_current < eargs_array.length ? eargs_array[eargs_current++] : null;
				if(a == null) {
					a = "";
				}
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v = evalues == null || evalues.current >= evalues.array.length ? null : evalues.array[evalues.current++];
				args.push({ name : a, opt : opt, t : this.xtype(e1), value : v == "" ? null : v});
			}
			var ret = args[args.length - 1];
			HxOverrides.remove(args,ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			p.push(this.xtype(c1));
		}
		return p;
	}
	,defplat: function() {
		var l = [];
		if(this.curplatform != null) {
			l.push(this.curplatform);
		}
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	return x;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		l.push(x1);
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.__properties__ = {get_innerHTML:"get_innerHTML",get_innerData:"get_innerData"};
haxe_xml_Access.get_innerData = function(this1) {
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var it_current = 0;
	var it_array = this1.children;
	if(it_current >= it_array.length) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	var v = it_array[it_current++];
	if(it_current < it_array.length) {
		var n = it_array[it_current++];
		var tmp;
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
			if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
			}
			tmp = StringTools.trim(v.nodeValue) == "";
		} else {
			tmp = false;
		}
		if(tmp) {
			if(it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
			var n2 = it_array[it_current++];
			var tmp;
			if(n2.nodeType == Xml.PCData) {
				if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n2.nodeType == null ? "null" : XmlType.toString(n2.nodeType)));
				}
				tmp = StringTools.trim(n2.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp && it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
		}
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
	}
	return v.nodeValue;
};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:"haxe.zip.Huffman",__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:"haxe.zip._InflateImpl.State",__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var hsluv_Geometry = function() { };
$hxClasses["hsluv.Geometry"] = hsluv_Geometry;
hsluv_Geometry.__name__ = "hsluv.Geometry";
hsluv_Geometry.intersectLineLine = function(a,b) {
	var x = (a.intercept - b.intercept) / (b.slope - a.slope);
	var y = a.slope * x + a.intercept;
	return { x : x, y : y};
};
hsluv_Geometry.distanceFromOrigin = function(point) {
	return Math.sqrt(Math.pow(point.x,2) + Math.pow(point.y,2));
};
hsluv_Geometry.distanceLineFromOrigin = function(line) {
	return Math.abs(line.intercept) / Math.sqrt(Math.pow(line.slope,2) + 1);
};
hsluv_Geometry.perpendicularThroughPoint = function(line,point) {
	var slope = -1 / line.slope;
	var intercept = point.y - slope * point.x;
	return { slope : slope, intercept : intercept};
};
hsluv_Geometry.angleFromOrigin = function(point) {
	return Math.atan2(point.y,point.x);
};
hsluv_Geometry.normalizeAngle = function(angle) {
	var m = 2 * Math.PI;
	return (angle % m + m) % m;
};
hsluv_Geometry.lengthOfRayUntilIntersect = function(theta,line) {
	return line.intercept / (Math.sin(theta) - line.slope * Math.cos(theta));
};
var hsluv_Hsluv = function() { };
$hxClasses["hsluv.Hsluv"] = hsluv_Hsluv;
hsluv_Hsluv.__name__ = "hsluv.Hsluv";
hsluv_Hsluv.getBounds = function(L) {
	var result = [];
	var sub1 = Math.pow(L + 16,3) / 1560896;
	var sub2 = sub1 > hsluv_Hsluv.epsilon ? sub1 : L / hsluv_Hsluv.kappa;
	var _g = 0;
	while(_g < 3) {
		var c = _g++;
		var m1 = hsluv_Hsluv.m[c][0];
		var m2 = hsluv_Hsluv.m[c][1];
		var m3 = hsluv_Hsluv.m[c][2];
		var top1 = (284517 * m1 - 94839 * m3) * sub2;
		var top2 = (838422 * m3 + 769860 * m2 + 731718 * m1) * L * sub2 - 0 * L;
		var bottom = (632260 * m3 - 126452 * m2) * sub2;
		result.push({ slope : top1 / bottom, intercept : top2 / bottom});
		var top11 = (284517 * m1 - 94839 * m3) * sub2;
		var top21 = (838422 * m3 + 769860 * m2 + 731718 * m1) * L * sub2 - 769860 * L;
		var bottom1 = (632260 * m3 - 126452 * m2) * sub2 + 126452;
		result.push({ slope : top11 / bottom1, intercept : top21 / bottom1});
	}
	return result;
};
hsluv_Hsluv.maxSafeChromaForL = function(L) {
	var bounds = hsluv_Hsluv.getBounds(L);
	var min = Infinity;
	var _g = 0;
	while(_g < bounds.length) {
		var bound = bounds[_g];
		++_g;
		var length = hsluv_Geometry.distanceLineFromOrigin(bound);
		min = Math.min(min,length);
	}
	return min;
};
hsluv_Hsluv.maxChromaForLH = function(L,H) {
	var hrad = H / 360 * Math.PI * 2;
	var bounds = hsluv_Hsluv.getBounds(L);
	var min = Infinity;
	var _g = 0;
	while(_g < bounds.length) {
		var bound = bounds[_g];
		++_g;
		var length = hsluv_Geometry.lengthOfRayUntilIntersect(hrad,bound);
		if(length >= 0) {
			min = Math.min(min,length);
		}
	}
	return min;
};
hsluv_Hsluv.dotProduct = function(a,b) {
	var sum = 0;
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		sum += a[i] * b[i];
	}
	return sum;
};
hsluv_Hsluv.fromLinear = function(c) {
	if(c <= 0.0031308) {
		return 12.92 * c;
	} else {
		return 1.055 * Math.pow(c,0.41666666666666669) - 0.055;
	}
};
hsluv_Hsluv.toLinear = function(c) {
	if(c > 0.04045) {
		return Math.pow((c + 0.055) / 1.055,2.4);
	} else {
		return c / 12.92;
	}
};
hsluv_Hsluv.xyzToRgb = function(tuple,result) {
	var dp0 = hsluv_Hsluv.fromLinear(hsluv_Hsluv.dotProduct(hsluv_Hsluv.m[0],tuple));
	var dp1 = hsluv_Hsluv.fromLinear(hsluv_Hsluv.dotProduct(hsluv_Hsluv.m[1],tuple));
	var dp2 = hsluv_Hsluv.fromLinear(hsluv_Hsluv.dotProduct(hsluv_Hsluv.m[2],tuple));
	if(result == null) {
		result = [0,0,0];
	}
	result[0] = dp0;
	result[1] = dp1;
	result[2] = dp2;
	return result;
};
hsluv_Hsluv.rgbToXyz = function(tuple,result) {
	var t0 = tuple[0];
	var t1 = tuple[1];
	var t2 = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	result[0] = hsluv_Hsluv.toLinear(t0);
	result[1] = hsluv_Hsluv.toLinear(t1);
	result[2] = hsluv_Hsluv.toLinear(t2);
	var dp0 = hsluv_Hsluv.dotProduct(hsluv_Hsluv.minv[0],result);
	var dp1 = hsluv_Hsluv.dotProduct(hsluv_Hsluv.minv[1],result);
	var dp2 = hsluv_Hsluv.dotProduct(hsluv_Hsluv.minv[2],result);
	result[0] = dp0;
	result[1] = dp1;
	result[2] = dp2;
	return result;
};
hsluv_Hsluv.yToL = function(Y) {
	if(Y <= hsluv_Hsluv.epsilon) {
		return Y / hsluv_Hsluv.refY * hsluv_Hsluv.kappa;
	} else {
		return 116 * Math.pow(Y / hsluv_Hsluv.refY,0.33333333333333331) - 16;
	}
};
hsluv_Hsluv.lToY = function(L) {
	if(L <= 8) {
		return hsluv_Hsluv.refY * L / hsluv_Hsluv.kappa;
	} else {
		return hsluv_Hsluv.refY * Math.pow((L + 16) / 116,3);
	}
};
hsluv_Hsluv.xyzToLuv = function(tuple,result) {
	var X = tuple[0];
	var Y = tuple[1];
	var Z = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	var divider = X + 15 * Y + 3 * Z;
	var varU = 4 * X;
	var varV = 9 * Y;
	if(divider != 0) {
		varU /= divider;
		varV /= divider;
	} else {
		varU = NaN;
		varV = NaN;
	}
	var L = hsluv_Hsluv.yToL(Y);
	if(L == 0) {
		result[0] = 0;
		result[1] = 0;
		result[2] = 0;
		return result;
	}
	var U = 13 * L * (varU - hsluv_Hsluv.refU);
	var V = 13 * L * (varV - hsluv_Hsluv.refV);
	result[0] = L;
	result[1] = U;
	result[2] = V;
	return result;
};
hsluv_Hsluv.luvToXyz = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	var L = tuple[0];
	var U = tuple[1];
	var V = tuple[2];
	if(L == 0) {
		result[0] = 0;
		result[1] = 1;
		result[2] = 2;
		return result;
	}
	var varU = U / (13 * L) + hsluv_Hsluv.refU;
	var varV = V / (13 * L) + hsluv_Hsluv.refV;
	var Y = hsluv_Hsluv.lToY(L);
	var X = 0 - 9 * Y * varU / ((varU - 4) * varV - varU * varV);
	var Z = (9 * Y - 15 * varV * Y - varV * X) / (3 * varV);
	result[0] = X;
	result[1] = Y;
	result[2] = Z;
	return result;
};
hsluv_Hsluv.luvToLch = function(tuple,result) {
	var L = tuple[0];
	var U = tuple[1];
	var V = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	var C = Math.sqrt(U * U + V * V);
	var H;
	if(C < 0.00000001) {
		H = 0;
	} else {
		var Hrad = Math.atan2(V,U);
		H = Hrad * 180.0 / Math.PI;
		if(H < 0) {
			H = 360 + H;
		}
	}
	result[0] = L;
	result[1] = C;
	result[2] = H;
	return result;
};
hsluv_Hsluv.lchToLuv = function(tuple,result) {
	var L = tuple[0];
	var C = tuple[1];
	var H = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	var Hrad = H / 360.0 * 2 * Math.PI;
	var U = Math.cos(Hrad) * C;
	var V = Math.sin(Hrad) * C;
	result[0] = L;
	result[1] = U;
	result[2] = V;
	return result;
};
hsluv_Hsluv.hsluvToLch = function(tuple,result) {
	var H = tuple[0];
	var S = tuple[1];
	var L = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	if(L > 99.9999999) {
		result[0] = 100;
		result[1] = 0;
		result[2] = H;
		return result;
	}
	if(L < 0.00000001) {
		result[0] = 0;
		result[1] = 0;
		result[2] = H;
		return result;
	}
	var max = hsluv_Hsluv.maxChromaForLH(L,H);
	var C = max / 100 * S;
	result[0] = L;
	result[1] = C;
	result[2] = H;
	return result;
};
hsluv_Hsluv.lchToHsluv = function(tuple,result) {
	var L = tuple[0];
	var C = tuple[1];
	var H = tuple[2];
	if(result == null) {
		result = [0,0,0];
	}
	if(L > 99.9999999) {
		result[0] = H;
		result[1] = 0;
		result[2] = 100;
		return result;
	}
	if(L < 0.00000001) {
		result[0] = H;
		result[1] = 0;
		result[2] = 0;
		return result;
	}
	var max = hsluv_Hsluv.maxChromaForLH(L,H);
	var S = C / max * 100;
	result[0] = H;
	result[1] = S;
	result[2] = L;
	return result;
};
hsluv_Hsluv.hpluvToLch = function(tuple) {
	var H = tuple[0];
	var S = tuple[1];
	var L = tuple[2];
	if(L > 99.9999999) {
		return [100,0,H];
	}
	if(L < 0.00000001) {
		return [0,0,H];
	}
	var max = hsluv_Hsluv.maxSafeChromaForL(L);
	var C = max / 100 * S;
	return [L,C,H];
};
hsluv_Hsluv.lchToHpluv = function(tuple) {
	var L = tuple[0];
	var C = tuple[1];
	var H = tuple[2];
	if(L > 99.9999999) {
		return [H,0,100];
	}
	if(L < 0.00000001) {
		return [H,0,0];
	}
	var max = hsluv_Hsluv.maxSafeChromaForL(L);
	var S = C / max * 100;
	return [H,S,L];
};
hsluv_Hsluv.rgbToHex = function(tuple) {
	var h = "#";
	var chan = tuple[0];
	var c = Math.round(chan * 255);
	var digit2 = c % 16;
	var digit1 = (c - digit2) / 16 | 0;
	h += hsluv_Hsluv.hexChars.charAt(digit1) + hsluv_Hsluv.hexChars.charAt(digit2);
	var chan = tuple[1];
	var c = Math.round(chan * 255);
	var digit2 = c % 16;
	var digit1 = (c - digit2) / 16 | 0;
	h += hsluv_Hsluv.hexChars.charAt(digit1) + hsluv_Hsluv.hexChars.charAt(digit2);
	var chan = tuple[2];
	var c = Math.round(chan * 255);
	var digit2 = c % 16;
	var digit1 = (c - digit2) / 16 | 0;
	h += hsluv_Hsluv.hexChars.charAt(digit1) + hsluv_Hsluv.hexChars.charAt(digit2);
	return h;
};
hsluv_Hsluv.hexToRgb = function(hex) {
	hex = hex.toLowerCase();
	var ret = [];
	var digit1 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(1));
	var digit2 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(2));
	var n = digit1 * 16 + digit2;
	ret.push(n / 255.0);
	var digit1 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(3));
	var digit2 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(4));
	var n = digit1 * 16 + digit2;
	ret.push(n / 255.0);
	var digit1 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(5));
	var digit2 = hsluv_Hsluv.hexChars.indexOf(hex.charAt(6));
	var n = digit1 * 16 + digit2;
	ret.push(n / 255.0);
	return ret;
};
hsluv_Hsluv.lchToRgb = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.lchToLuv(tuple,result);
	hsluv_Hsluv.luvToXyz(result,result);
	hsluv_Hsluv.xyzToRgb(result,result);
	return result;
};
hsluv_Hsluv.rgbToLch = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.rgbToXyz(tuple,result);
	hsluv_Hsluv.xyzToLuv(result,result);
	hsluv_Hsluv.luvToLch(result,result);
	return result;
};
hsluv_Hsluv.hsluvToRgb = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.hsluvToLch(tuple,result);
	hsluv_Hsluv.lchToRgb(result,result);
	return result;
};
hsluv_Hsluv.rgbToHsluv = function(tuple,result) {
	if(result == null) {
		result = [0,0,0];
	}
	hsluv_Hsluv.rgbToLch(tuple,result);
	hsluv_Hsluv.lchToHsluv(result,result);
	return result;
};
hsluv_Hsluv.hpluvToRgb = function(tuple) {
	return hsluv_Hsluv.lchToRgb(hsluv_Hsluv.hpluvToLch(tuple));
};
hsluv_Hsluv.rgbToHpluv = function(tuple) {
	return hsluv_Hsluv.lchToHpluv(hsluv_Hsluv.rgbToLch(tuple));
};
hsluv_Hsluv.hsluvToHex = function(tuple) {
	return hsluv_Hsluv.rgbToHex(hsluv_Hsluv.hsluvToRgb(tuple));
};
hsluv_Hsluv.hpluvToHex = function(tuple) {
	return hsluv_Hsluv.rgbToHex(hsluv_Hsluv.hpluvToRgb(tuple));
};
hsluv_Hsluv.hexToHsluv = function(s) {
	return hsluv_Hsluv.rgbToHsluv(hsluv_Hsluv.hexToRgb(s));
};
hsluv_Hsluv.hexToHpluv = function(s) {
	return hsluv_Hsluv.rgbToHpluv(hsluv_Hsluv.hexToRgb(s));
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var polyline_Extensions = function() { };
$hxClasses["polyline.Extensions"] = polyline_Extensions;
polyline_Extensions.__name__ = "polyline.Extensions";
polyline_Extensions.unsafeGet = function(array,index) {
	if(index < 0 || index >= array.length) {
		throw haxe_Exception.thrown("Invalid unsafeGet: index=" + index + " length=" + array.length);
	}
	return array[index];
};
polyline_Extensions.unsafeSet = function(array,index,value) {
	if(index < 0 || index >= array.length) {
		throw haxe_Exception.thrown("Invalid unsafeSet: index=" + index + " length=" + array.length);
	}
	array[index] = value;
};
var polyline_StrokeCap = $hxEnums["polyline.StrokeCap"] = { __ename__:"polyline.StrokeCap",__constructs__:null
	,BUTT: {_hx_name:"BUTT",_hx_index:0,__enum__:"polyline.StrokeCap",toString:$estr}
	,SQUARE: {_hx_name:"SQUARE",_hx_index:1,__enum__:"polyline.StrokeCap",toString:$estr}
};
polyline_StrokeCap.__constructs__ = [polyline_StrokeCap.BUTT,polyline_StrokeCap.SQUARE];
var polyline_StrokeJoin = $hxEnums["polyline.StrokeJoin"] = { __ename__:"polyline.StrokeJoin",__constructs__:null
	,MITER: {_hx_name:"MITER",_hx_index:0,__enum__:"polyline.StrokeJoin",toString:$estr}
	,BEVEL: {_hx_name:"BEVEL",_hx_index:1,__enum__:"polyline.StrokeJoin",toString:$estr}
};
polyline_StrokeJoin.__constructs__ = [polyline_StrokeJoin.MITER,polyline_StrokeJoin.BEVEL];
var porcelain_Rect = function(width,height,thickness) {
	this.thickness = 2;
	this.h = 32;
	this.w = 32;
	ceramic_Visual.call(this);
	this.w = width;
	this.h = height;
	this.thickness = thickness;
	var line1 = new ceramic_Line();
	var line2 = new ceramic_Line();
	var line3 = new ceramic_Line();
	var line4 = new ceramic_Line();
	if(line1.thickness != thickness) {
		line1.thickness = thickness;
		line1.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
	}
	if(line2.thickness != thickness) {
		line2.thickness = thickness;
		line2.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
	}
	if(line3.thickness != thickness) {
		line3.thickness = thickness;
		line3.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
	}
	if(line4.thickness != thickness) {
		line4.thickness = thickness;
		line4.contentDirty = true;
		ceramic_App.app.visualsContentDirty = true;
	}
	var points = [0,0,this.w,0];
	line1.points = points;
	line1.contentDirty = true;
	ceramic_App.app.visualsContentDirty = true;
	var points = [this.w,0,this.w,this.h];
	line2.points = points;
	line2.contentDirty = true;
	ceramic_App.app.visualsContentDirty = true;
	var points = [this.w,this.h,0,this.h];
	line3.points = points;
	line3.contentDirty = true;
	ceramic_App.app.visualsContentDirty = true;
	var points = [0,this.h,0,0];
	line4.points = points;
	line4.contentDirty = true;
	ceramic_App.app.visualsContentDirty = true;
	line1.set_color(16777215);
	line2.set_color(16777215);
	line3.set_color(16777215);
	line4.set_color(16777215);
	this.add(line1);
	this.add(line2);
	this.add(line3);
	this.add(line4);
};
$hxClasses["porcelain.Rect"] = porcelain_Rect;
porcelain_Rect.__name__ = "porcelain.Rect";
porcelain_Rect.__super__ = ceramic_Visual;
porcelain_Rect.prototype = $extend(ceramic_Visual.prototype,{
	w: null
	,h: null
	,thickness: null
	,__class__: porcelain_Rect
});
var tracker_Assert = function() { };
$hxClasses["tracker.Assert"] = tracker_Assert;
tracker_Assert.__name__ = "tracker.Assert";
var tracker_Autorun = function(onRun,afterRun) {
	this.invalidated = false;
	this.boundAutorunArrays = null;
	this.afterRun = null;
	this.onRun = null;
	ceramic_Entity.call(this);
	this.onRun = onRun;
	this.afterRun = afterRun;
	if(onRun != null) {
		this.run();
	}
};
$hxClasses["tracker.Autorun"] = tracker_Autorun;
tracker_Autorun.__name__ = "tracker.Autorun";
tracker_Autorun.unobserve = function() {
	tracker_Autorun.prevCurrent.push(tracker_Autorun.current);
	tracker_Autorun.current = null;
};
tracker_Autorun.reobserve = function() {
	if(tracker_Autorun.prevCurrent.length <= 0) {
		var _this = tracker_Tracker.backend;
		ceramic_App.app.logger.error("prevCurrent.length > 0" + (" (" + "Cannot call reobserve() without calling unobserve() before." + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\git\\tracker\\src\\tracker\\Autorun.hx", lineNumber : 129, className : "tracker.Autorun", methodName : "reobserve"});
		throw haxe_Exception.thrown("prevCurrent.length > 0" + (" (" + "Cannot call reobserve() without calling unobserve() before." + ")"));
	}
	tracker_Autorun.current = tracker_Autorun.prevCurrent.pop();
};
tracker_Autorun.unobserved = function(func) {
	tracker_Autorun.unobserve();
	func();
	tracker_Autorun.reobserve();
};
tracker_Autorun.getAutorunArray = function() {
	if(tracker_Autorun._autorunArraysLen > 0) {
		tracker_Autorun._autorunArraysLen--;
		var array = tracker_Autorun._autorunArrays[tracker_Autorun._autorunArraysLen];
		tracker_Autorun._autorunArrays[tracker_Autorun._autorunArraysLen] = null;
		return array;
	} else {
		return [];
	}
};
tracker_Autorun.recycleAutorunArray = function(array) {
	array.splice(0,array.length);
	tracker_Autorun._autorunArrays[tracker_Autorun._autorunArraysLen] = array;
	tracker_Autorun._autorunArraysLen++;
};
tracker_Autorun.getArrayOfAutorunArrays = function() {
	if(tracker_Autorun._arrayOfAutorunArraysLen > 0) {
		tracker_Autorun._arrayOfAutorunArraysLen--;
		var array = tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen];
		tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = null;
		return array;
	} else {
		return [];
	}
};
tracker_Autorun.recycleArrayOfAutorunArrays = function(array) {
	array.splice(0,array.length);
	tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = array;
	tracker_Autorun._arrayOfAutorunArraysLen++;
};
tracker_Autorun.__super__ = ceramic_Entity;
tracker_Autorun.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnReset: null
	,__cbOnceReset: null
	,__cbOnOwnerUnbindReset: null
	,__cbOnceOwnerUnbindReset: null
	,emitReset: function() {
		this.unbindFromAllAutorunArrays();
		var len = 0;
		if(this.__cbOnReset != null) {
			len += this.__cbOnReset.length;
		}
		if(this.__cbOnceReset != null) {
			len += this.__cbOnceReset.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnReset.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnReset[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceReset != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceReset.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceReset[ii];
						this.__cbOnceReset[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindReset[ii];
						this.__cbOnceOwnerUnbindReset[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindReset[ii]);
						newCbOnceArray.push(this.__cbOnceReset[ii]);
					}
				}
				this.__cbOnceOwnerUnbindReset = newCbOnceOwnerUnbindArray;
				this.__cbOnceReset = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb();
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onReset: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "reset" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReset(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindReset == null) {
				this.__cbOnOwnerUnbindReset = [];
			}
			this.__cbOnOwnerUnbindReset.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindReset == null) {
				this.__cbOnOwnerUnbindReset = [];
			}
			this.__cbOnOwnerUnbindReset.push(null);
		}
		if(this.__cbOnReset == null) {
			this.__cbOnReset = [];
		}
		this.__cbOnReset.push(handle);
	}
	,onceReset: function(owner,handle) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "reset" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handle != null) {
					_gthis.offReset(handle);
					handle = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindReset == null) {
				this.__cbOnceOwnerUnbindReset = [];
			}
			this.__cbOnceOwnerUnbindReset.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handle = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindReset == null) {
				this.__cbOnceOwnerUnbindReset = [];
			}
			this.__cbOnceOwnerUnbindReset.push(null);
		}
		if(this.__cbOnceReset == null) {
			this.__cbOnceReset = [];
		}
		this.__cbOnceReset.push(handle);
	}
	,offReset: function(handle) {
		if(handle != null) {
			var index;
			var unbind;
			if(this.__cbOnReset != null) {
				index = this.__cbOnReset.indexOf(handle);
				if(index != -1) {
					this.__cbOnReset.splice(index,1);
					unbind = this.__cbOnOwnerUnbindReset[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindReset.splice(index,1);
				}
			}
			if(this.__cbOnceReset != null) {
				index = this.__cbOnceReset.indexOf(handle);
				if(index != -1) {
					this.__cbOnceReset.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindReset[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindReset.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindReset.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindReset[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindReset = null;
			}
			if(this.__cbOnceOwnerUnbindReset != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindReset.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindReset[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindReset = null;
			}
			this.__cbOnReset = null;
			this.__cbOnceReset = null;
		}
	}
	,listensReset: function() {
		if(!(this.__cbOnReset != null && this.__cbOnReset.length > 0)) {
			if(this.__cbOnceReset != null) {
				return this.__cbOnceReset.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,onRun: null
	,afterRun: null
	,boundAutorunArrays: null
	,invalidated: null
	,destroy: function() {
		if(this._lifecycleState <= -2) {
			return;
		}
		this._lifecycleState = -2;
		this.emitReset();
		this.onRun = null;
		this.afterRun = null;
		this._lifecycleState = -1;
		ceramic_Entity.prototype.destroy.call(this);
	}
	,willEmitReset: function() {
		this.unbindFromAllAutorunArrays();
	}
	,run: function() {
		if(this._lifecycleState < 0) {
			return;
		}
		this.invalidated = false;
		this.emitReset();
		var _prevCurrent = tracker_Autorun.current;
		tracker_Autorun.current = this;
		var numPrevCurrent = tracker_Autorun.prevCurrent.length;
		this.onRun();
		if(this.afterRun != null) {
			tracker_Autorun.unobserve();
			this.afterRun();
			tracker_Autorun.reobserve();
		}
		while(numPrevCurrent < tracker_Autorun.prevCurrent.length) tracker_Autorun.prevCurrent.pop();
		tracker_Autorun.current = _prevCurrent;
	}
	,invalidate: function() {
		if(this.invalidated) {
			return;
		}
		this.invalidated = true;
		this.unbindFromAllAutorunArrays();
		var _this = tracker_Tracker.backend;
		ceramic_App.app._onceImmediate($bind(this,this.run));
	}
	,bindToAutorunArray: function(autorunArray) {
		if(this.invalidated) {
			return;
		}
		var alreadyBound = false;
		if(this.boundAutorunArrays == null) {
			var tmp;
			if(tracker_Autorun._arrayOfAutorunArraysLen > 0) {
				tracker_Autorun._arrayOfAutorunArraysLen--;
				var array = tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen];
				tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = null;
				tmp = array;
			} else {
				tmp = [];
			}
			this.boundAutorunArrays = tmp;
		} else {
			var _g = 0;
			var _g1 = this.boundAutorunArrays.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.boundAutorunArrays[i] == autorunArray) {
					alreadyBound = true;
					break;
				}
			}
		}
		if(!alreadyBound) {
			var nullIndex = -1;
			var len = autorunArray.length;
			var i = len - 1;
			while(i >= 0) {
				var item = autorunArray[i];
				if(item == null) {
					nullIndex = i;
					break;
				}
				--i;
			}
			if(nullIndex == -1) {
				autorunArray.push(this);
			} else {
				var lenMinus1 = len - 1;
				if(nullIndex < lenMinus1) {
					var _g = nullIndex + 1;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var item = autorunArray[i];
						var iMinus1 = i - 1;
						autorunArray[iMinus1] = item;
					}
				}
				autorunArray[lenMinus1] = this;
			}
			this.boundAutorunArrays.push(autorunArray);
		}
	}
	,unbindFromAllAutorunArrays: function() {
		if(this.boundAutorunArrays != null) {
			var _g = 0;
			var _g1 = this.boundAutorunArrays.length;
			while(_g < _g1) {
				var ii = _g++;
				var autorunArray = this.boundAutorunArrays[ii];
				var numNulls = 0;
				var len = autorunArray.length;
				var _g2 = 0;
				var _g3 = len;
				while(_g2 < _g3) {
					var i = _g2++;
					var autorun = autorunArray[i];
					if(autorun != null) {
						if(autorun == this) {
							autorunArray[i] = null;
							break;
						}
					}
				}
			}
			var array = this.boundAutorunArrays;
			array.splice(0,array.length);
			tracker_Autorun._arrayOfAutorunArrays[tracker_Autorun._arrayOfAutorunArraysLen] = array;
			tracker_Autorun._arrayOfAutorunArraysLen++;
			this.boundAutorunArrays = null;
		}
	}
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offReset();
	}
	,__class__: tracker_Autorun
});
var tracker_Extensions = function() { };
$hxClasses["tracker.Extensions"] = tracker_Extensions;
tracker_Extensions.__name__ = "tracker.Extensions";
tracker_Extensions.unsafeGet = function(array,index) {
	return array[index];
};
tracker_Extensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
tracker_Extensions.setArrayLength = function(array,length) {
	if(array.length != length) {
		if(array.length > length) {
			array.splice(length,array.length - length);
		} else {
			var dArray = array;
			while(dArray.length < length) dArray.push(null);
		}
	}
};
tracker_Extensions.setProperty = function(instance,field,value) {
	Reflect.setProperty(instance,field,value);
};
tracker_Extensions.getProperty = function(instance,field) {
	return Reflect.getProperty(instance,field);
};
var tracker_Serialize = function() { };
$hxClasses["tracker.Serialize"] = tracker_Serialize;
tracker_Serialize.__name__ = "tracker.Serialize";
tracker_Serialize.serialize = function(serializable) {
	tracker_Serialize._serializedMap = new haxe_ds_StringMap();
	var serialized = tracker_Serialize.serializeValue(serializable);
	var s = new haxe_Serializer();
	s.serialize(serialized);
	s.serialize(tracker_Serialize._serializedMap);
	var result = s.toString();
	tracker_Serialize._serializedMap = null;
	return result;
};
tracker_Serialize.deserialize = function(serializable,data) {
	var prevSerializedMap = tracker_Serialize._serializedMap;
	var prevDeserializedMap = tracker_Serialize._deserializedMap;
	var u = new haxe_Unserializer(data);
	var serialized = u.unserialize();
	tracker_Serialize._serializedMap = u.unserialize();
	tracker_Serialize._deserializedMap = new haxe_ds_StringMap();
	var deserialized = tracker_Serialize.deserializeValue(serialized,serializable);
	tracker_Serialize._serializedMap = prevSerializedMap;
	tracker_Serialize._deserializedMap = prevDeserializedMap;
	return deserialized;
};
tracker_Serialize.serializeValue = function(value) {
	if(value == null) {
		return null;
	}
	if(tracker_Serialize._serializedMap == null) {
		return null;
	}
	if(((value) instanceof ceramic_Entity)) {
		var entity = value;
		if(entity._lifecycleState < 0) {
			var _this = tracker_Tracker.backend;
			var c = js_Boot.getClass(entity);
			var error = "Entity destroyed: " + Std.string(entity) + " " + c.__name__;
			ceramic_App.app.logger.error(error,{ fileName : "C:\\Users\\authe\\ceramic\\git\\tracker\\src\\tracker\\Serialize.hx", lineNumber : 87, className : "tracker.Serialize", methodName : "serializeValue"});
			return null;
		}
	}
	if(js_Boot.__implements(value,tracker_Serializable)) {
		var clazz = js_Boot.getClass(value);
		var className = clazz.__name__;
		var props = { };
		var id = value._serializeId;
		if(id == null) {
			var _this = tracker_Tracker.backend;
			ceramic_App.app.logger.error("id != null" + (" (" + "Serializable id must not be null" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\git\\tracker\\src\\tracker\\Serialize.hx", lineNumber : 99, className : "tracker.Serialize", methodName : "serializeValue"});
			throw haxe_Exception.thrown("id != null" + (" (" + "Serializable id must not be null" + ")"));
		}
		if(!Object.prototype.hasOwnProperty.call(tracker_Serialize._cachedEnumInfoBySerializableType.h,className)) {
			tracker_Serialize._cachedEnumInfoBySerializableType.h[className] = true;
			if(Object.prototype.hasOwnProperty.call(clazz,"_serializeEnumInfo")) {
				var enumInfo = Reflect.field(clazz,"_serializeEnumInfo");
				if(enumInfo != null) {
					var h = enumInfo.h;
					var _g_h = h;
					var _g_keys = Object.keys(h);
					var _g_length = _g_keys.length;
					var _g_current = 0;
					while(_g_current < _g_length) {
						var key = _g_keys[_g_current++];
						var _g_key = key;
						var _g_value = _g_h[key];
						var key1 = _g_key;
						var val = _g_value;
						tracker_Serialize._enumInfo.h[key1] = val;
					}
				}
			}
		}
		if(tracker_Serialize._deserializedMap != null) {
			tracker_Serialize._deserializedMap.h[id] = value;
		}
		if(tracker_Serialize._onCheckSerializable != null) {
			tracker_Serialize._onCheckSerializable(value);
		}
		if(Object.prototype.hasOwnProperty.call(tracker_Serialize._serializedMap.h,id)) {
			return { id : id};
		}
		var result = { id : id, type : clazz.__name__, props : { }};
		tracker_Serialize._serializedMap.h[id] = result;
		var serializableInstance = value;
		serializableInstance.willSerialize();
		var prefixLen = "unobserved".length;
		var parentClazz = clazz;
		while(parentClazz != null) {
			var fieldsMeta = haxe_rtti_Meta.getFields(parentClazz);
			var _g = 0;
			var _g1 = Reflect.fields(fieldsMeta);
			while(_g < _g1.length) {
				var fieldRealName = _g1[_g];
				++_g;
				var fieldInfo = Reflect.field(fieldsMeta,fieldRealName);
				if(Object.prototype.hasOwnProperty.call(fieldInfo,"serialize")) {
					var fieldName = fieldRealName;
					if(StringTools.startsWith(fieldName,"unobserved")) {
						fieldName = fieldName.charAt(prefixLen).toLowerCase() + HxOverrides.substr(fieldName,prefixLen + 1,null);
					}
					var originalValue = Reflect.getProperty(value,fieldRealName);
					var val = tracker_Serialize.serializeValue(originalValue);
					result.props[fieldName] = val;
				}
			}
			parentClazz = parentClazz.__super__;
			if(parentClazz != null && parentClazz.__name__ == "tracker.Model") {
				break;
			}
		}
		if(tracker_Serialize._onAddSerializable != null) {
			tracker_Serialize._onAddSerializable(value);
		}
		return { id : id};
	} else if(((value) instanceof Array)) {
		var result = [];
		var array = value;
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			result.push(tracker_Serialize.serializeValue(item));
		}
		return result;
	} else if(typeof(value) == "string" || typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" || typeof(value) == "boolean") {
		return value;
	} else {
		var _g = Type.typeof(value);
		if(_g != null) {
			if(_g._hx_index == 6) {
				var c = _g.c;
				if(c != null) {
					switch(c) {
					case haxe_ds_IntMap:
						var values = [];
						var result = { im : values};
						var mapValue = value;
						var key = mapValue.keys();
						while(key.hasNext()) {
							var key1 = key.next();
							values.push(key1);
							values.push(tracker_Serialize.serializeValue(mapValue.h[key1]));
						}
						return result;
					case haxe_ds_StringMap:
						var values = [];
						var result = { sm : values};
						var mapValue = value;
						var h = mapValue.h;
						var _g_h = h;
						var _g_keys = Object.keys(h);
						var _g_length = _g_keys.length;
						var _g_current = 0;
						while(_g_current < _g_length) {
							var key = _g_keys[_g_current++];
							values.push(key);
							values.push(tracker_Serialize.serializeValue(mapValue.h[key]));
						}
						return result;
					default:
					}
				}
			}
		}
	}
	if(tracker_Serialize.customHxSerialize != null) {
		return { hx : tracker_Serialize.customHxSerialize(value)};
	} else {
		var serializer = new haxe_Serializer();
		serializer.useCache = true;
		serializer.serialize(value);
		return { hx : serializer.toString()};
	}
};
tracker_Serialize.deserializeValue = function(value,serializable) {
	if(value == null) {
		return null;
	}
	if(tracker_Serialize._serializedMap == null) {
		return null;
	}
	if(tracker_Serialize._deserializedMap == null) {
		return null;
	}
	var hasRootSerializable = serializable != null;
	if(((value) instanceof Array)) {
		var result = [];
		var array = value;
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			result.push(tracker_Serialize.deserializeValue(item));
		}
		return result;
	} else if(typeof(value) == "string" || typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" || typeof(value) == "boolean") {
		return value;
	} else if(value.id != null) {
		if(Object.prototype.hasOwnProperty.call(tracker_Serialize._deserializedMap.h,value.id)) {
			return tracker_Serialize._deserializedMap.h[value.id];
		} else if(Object.prototype.hasOwnProperty.call(tracker_Serialize._serializedMap.h,value.id)) {
			var info = tracker_Serialize._serializedMap.h[value.id];
			var name = info.type;
			var clazz = $hxClasses[name];
			if(clazz == null) {
				var _this = tracker_Tracker.backend;
				ceramic_App.app.logger.warning("Failed to resolve class for serialized type: " + info.type,{ fileName : "C:\\Users\\authe\\ceramic\\git\\tracker\\src\\tracker\\Serialize.hx", lineNumber : 313, className : "tracker.Serialize", methodName : "deserializeValue"});
				return null;
			}
			if(serializable != null && js_Boot.getClass(serializable) != clazz) {
				throw haxe_Exception.thrown("Type mismatch when deserializing object expected " + Std.string(clazz) + ", got " + Std.string(js_Boot.getClass(serializable)));
			}
			var instance = null;
			var reusingInstance = false;
			if(tracker_Serialize._deserializedCacheMap != null && Object.prototype.hasOwnProperty.call(tracker_Serialize._deserializedCacheMap.h,value.id)) {
				instance = tracker_Serialize._deserializedCacheMap.h[value.id];
				reusingInstance = true;
			} else {
				instance = serializable != null && js_Boot.getClass(serializable) == clazz ? serializable : Object.create(clazz.prototype);
			}
			if(instance == null) {
				var _this = tracker_Tracker.backend;
				ceramic_App.app.logger.error("instance != null" + (" (" + "Created empty instance should not be null" + ")"),{ fileName : "C:\\Users\\authe\\ceramic\\git\\tracker\\src\\tracker\\Serialize.hx", lineNumber : 332, className : "tracker.Serialize", methodName : "deserializeValue"});
				throw haxe_Exception.thrown("instance != null" + (" (" + "Created empty instance should not be null" + ")"));
			}
			instance._serializeId = value.id;
			tracker_Serialize._deserializedMap.h[value.id] = instance;
			var fieldsMeta = haxe_rtti_Meta.getFields(clazz);
			var prefixLen = "unobserved".length;
			var instanceFields_h = Object.create(null);
			var _g = 0;
			var _g1 = Type.getInstanceFields(clazz);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				instanceFields_h[field] = true;
			}
			var parentClazz = clazz.__super__;
			var parentFieldsMeta = null;
			while(parentClazz != null) {
				if(parentFieldsMeta == null) {
					parentFieldsMeta = [];
				}
				parentFieldsMeta.push(haxe_rtti_Meta.getFields(parentClazz));
				if(parentClazz.__name__ == "tracker.Model") {
					break;
				}
				var _g = 0;
				var _g1 = Type.getInstanceFields(parentClazz);
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					instanceFields_h[field] = true;
				}
				parentClazz = parentClazz.__super__;
			}
			var h = instanceFields_h;
			var fieldRealName_h = h;
			var fieldRealName_keys = Object.keys(h);
			var fieldRealName_length = fieldRealName_keys.length;
			var fieldRealName_current = 0;
			while(fieldRealName_current < fieldRealName_length) {
				var fieldRealName = fieldRealName_keys[fieldRealName_current++];
				var fieldInfo = Reflect.field(fieldsMeta,fieldRealName);
				if(fieldInfo == null && parentFieldsMeta != null) {
					var _g = 0;
					var _g1 = parentFieldsMeta.length;
					while(_g < _g1) {
						var i = _g++;
						fieldInfo = Reflect.field(parentFieldsMeta[i],fieldRealName);
						if(fieldInfo != null) {
							break;
						}
					}
				}
				var hasSerialize = fieldInfo != null && Object.prototype.hasOwnProperty.call(fieldInfo,"serialize");
				var fieldName = fieldRealName;
				if(StringTools.startsWith(fieldName,"unobserved")) {
					fieldName = fieldName.charAt(prefixLen).toLowerCase() + HxOverrides.substr(fieldName,prefixLen + 1,null);
				}
				if(hasSerialize && Object.prototype.hasOwnProperty.call(info.props,fieldName)) {
					var val = tracker_Serialize.deserializeValue(Reflect.field(info.props,fieldName));
					Reflect.setProperty(instance,reusingInstance || hasRootSerializable ? fieldName : fieldRealName,val);
				} else if(!hasRootSerializable && !reusingInstance && Object.prototype.hasOwnProperty.call(instanceFields_h,"_default_" + fieldName)) {
					var val1 = Reflect.field(instance,"_default_" + fieldName).apply(instance,[]);
					Reflect.setProperty(instance,fieldRealName,val1);
				}
			}
			var prevSerializedMap = tracker_Serialize._serializedMap;
			var prevDeserializedMap = tracker_Serialize._deserializedMap;
			var prevDeserializedCacheMap = tracker_Serialize._deserializedCacheMap;
			tracker_Serialize._serializedMap = null;
			tracker_Serialize._deserializedMap = null;
			tracker_Serialize._deserializedCacheMap = null;
			instance.didDeserialize();
			tracker_Serialize._serializedMap = prevSerializedMap;
			tracker_Serialize._deserializedMap = prevDeserializedMap;
			tracker_Serialize._deserializedCacheMap = prevDeserializedCacheMap;
			return instance;
		} else {
			return null;
		}
	} else if(value.sm != null) {
		var values = value.sm;
		var i = 0;
		var result = new haxe_ds_StringMap();
		while(i < values.length) {
			var value1 = tracker_Serialize.deserializeValue(values[i + 1]);
			result.h[values[i]] = value1;
			i += 2;
		}
		return result;
	} else if(value.im != null) {
		var values = value.im;
		var i = 0;
		var result = new haxe_ds_IntMap();
		while(i < values.length) {
			var value1 = tracker_Serialize.deserializeValue(values[i + 1]);
			result.h[values[i]] = value1;
			i += 2;
		}
		return result;
	} else if(value.hx != null) {
		if(tracker_Serialize.customHxDeserialize != null) {
			return tracker_Serialize.customHxDeserialize(value.hx);
		} else {
			var u = new haxe_Unserializer(value.hx);
			try {
				return u.unserialize();
			} catch( _g ) {
				var _this = tracker_Tracker.backend;
				ceramic_App.app.logger.warning("Failed to deserialize: " + Std.string(value.hx),{ fileName : "C:\\Users\\authe\\ceramic\\git\\tracker\\src\\tracker\\Serialize.hx", lineNumber : 516, className : "tracker.Serialize", methodName : "deserializeValue"});
				return null;
			}
		}
	} else {
		return null;
	}
};
var tracker_SerializeChangeset = function(data,append) {
	if(append == null) {
		append = false;
	}
	this.append = false;
	this.data = data;
	this.append = append;
};
$hxClasses["tracker.SerializeChangeset"] = tracker_SerializeChangeset;
tracker_SerializeChangeset.__name__ = "tracker.SerializeChangeset";
tracker_SerializeChangeset.prototype = {
	data: null
	,append: null
	,toString: function() {
		return "" + Std.string({ append : this.append, data : this.data});
	}
	,__class__: tracker_SerializeChangeset
};
var tracker_SerializeModel = function() {
	this.initializerName = null;
	this.dirty = true;
	this.canCompact = false;
	this.dirtyModels = new haxe_ds_StringMap();
	this.willCleanDestroyedTrackedModels = false;
	this.trackedModels = new haxe_ds_StringMap();
	this.serializedMap = new haxe_ds_StringMap();
	this.destroyModelOnUntrack = true;
	this.compactInterval = 60.0;
	this.checkInterval = 1.0;
	ceramic_Entity.call(this);
};
$hxClasses["tracker.SerializeModel"] = tracker_SerializeModel;
tracker_SerializeModel.__name__ = "tracker.SerializeModel";
tracker_SerializeModel.__interfaces__ = [ceramic_Component];
tracker_SerializeModel.loadFromData = function(model,data,hotReload) {
	if(hotReload == null) {
		hotReload = false;
	}
	if(data == null) {
		return false;
	}
	tracker_Serialize._serializedMap = new haxe_ds_StringMap();
	tracker_Serialize._deserializedMap = new haxe_ds_StringMap();
	tracker_Serialize._deserializedCacheMap = null;
	tracker_Serialize.serializeValue(model);
	var prevDeserializedMap = tracker_Serialize._deserializedMap;
	tracker_Serialize._serializedMap = null;
	tracker_Serialize._deserializedMap = null;
	tracker_Serialize._deserializedCacheMap = null;
	var decoded = tracker_Utils.decodeChangesetData(data);
	tracker_Serialize._serializedMap = decoded.serializedMap;
	tracker_Serialize._deserializedMap = new haxe_ds_StringMap();
	tracker_Serialize._deserializedCacheMap = hotReload ? prevDeserializedMap : null;
	tracker_Serialize.deserializeValue(decoded.serialized,model);
	var deserializedMap = tracker_Serialize._deserializedMap;
	tracker_Serialize._deserializedMap = null;
	tracker_Serialize._serializedMap = null;
	tracker_Serialize._deserializedCacheMap = null;
	tracker_Serialize._serializedMap = new haxe_ds_StringMap();
	tracker_Serialize._deserializedMap = new haxe_ds_StringMap();
	tracker_Serialize._deserializedCacheMap = null;
	tracker_Serialize.serializeValue(model);
	var newDeserializedMap = tracker_Serialize._deserializedMap;
	tracker_Serialize._serializedMap = null;
	tracker_Serialize._deserializedMap = null;
	tracker_Serialize._deserializedCacheMap = null;
	var h = prevDeserializedMap.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var k = _g_key;
		var item = _g_value;
		if(newDeserializedMap.h[k] != item) {
			if(((item) instanceof tracker_Model)) {
				var _model = item;
				if(_model != model) {
					if(_model.serializeShouldDestroy()) {
						_model.destroy();
					}
				}
			}
		}
	}
	return true;
};
tracker_SerializeModel.__super__ = ceramic_Entity;
tracker_SerializeModel.prototype = $extend(ceramic_Entity.prototype,{
	__cbOnChangeset: null
	,__cbOnceChangeset: null
	,__cbOnOwnerUnbindChangeset: null
	,__cbOnceOwnerUnbindChangeset: null
	,emitChangeset: function(changeset) {
		var len = 0;
		if(this.__cbOnChangeset != null) {
			len += this.__cbOnChangeset.length;
		}
		if(this.__cbOnceChangeset != null) {
			len += this.__cbOnceChangeset.length;
		}
		if(len > 0) {
			var pool = ceramic_ArrayPool.pool(len);
			var callbacks = pool.get();
			var i = 0;
			if(this.__cbOnChangeset != null) {
				var _g = 0;
				var _g1 = this.__cbOnChangeset.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnChangeset[ii];
						++i;
					} else {
						--len;
					}
				}
			}
			if(this.__cbOnceChangeset != null) {
				var newCbOnceOwnerUnbindArray = null;
				var newCbOnceArray = null;
				var newOnceOwnerArray = null;
				var _g = 0;
				var _g1 = this.__cbOnceChangeset.length;
				while(_g < _g1) {
					var ii = _g++;
					var canEmit = true;
					if(canEmit) {
						callbacks.vector[i] = this.__cbOnceChangeset[ii];
						this.__cbOnceChangeset[ii] = null;
						var unbind = this.__cbOnceOwnerUnbindChangeset[ii];
						this.__cbOnceOwnerUnbindChangeset[ii] = null;
						if(unbind != null) {
							unbind();
						}
						++i;
					} else {
						--len;
						if(newCbOnceOwnerUnbindArray == null) {
							newCbOnceOwnerUnbindArray = [];
							newCbOnceArray = [];
							newOnceOwnerArray = [];
						}
						newCbOnceOwnerUnbindArray.push(this.__cbOnceOwnerUnbindChangeset[ii]);
						newCbOnceArray.push(this.__cbOnceChangeset[ii]);
					}
				}
				this.__cbOnceOwnerUnbindChangeset = newCbOnceOwnerUnbindArray;
				this.__cbOnceChangeset = newCbOnceArray;
			}
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var cb = callbacks.vector[i];
				cb(changeset);
			}
			pool.release(callbacks);
			callbacks = null;
		}
	}
	,onChangeset: function(owner,handleChangeset) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "changeset" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleChangeset != null) {
					_gthis.offChangeset(handleChangeset);
					handleChangeset = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnOwnerUnbindChangeset == null) {
				this.__cbOnOwnerUnbindChangeset = [];
			}
			this.__cbOnOwnerUnbindChangeset.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleChangeset = null;
			});
		} else {
			if(this.__cbOnOwnerUnbindChangeset == null) {
				this.__cbOnOwnerUnbindChangeset = [];
			}
			this.__cbOnOwnerUnbindChangeset.push(null);
		}
		if(this.__cbOnChangeset == null) {
			this.__cbOnChangeset = [];
		}
		this.__cbOnChangeset.push(handleChangeset);
	}
	,onceChangeset: function(owner,handleChangeset) {
		var _gthis = this;
		if(owner != null) {
			if(owner._lifecycleState < 0) {
				throw haxe_Exception.thrown("Failed to bind event " + "changeset" + " because owner is destroyed!");
			}
			var destroyCb = function(_) {
				if(handleChangeset != null) {
					_gthis.offChangeset(handleChangeset);
					handleChangeset = null;
				}
				owner = null;
				destroyCb = null;
			};
			owner.onceDestroy(null,destroyCb);
			if(this.__cbOnceOwnerUnbindChangeset == null) {
				this.__cbOnceOwnerUnbindChangeset = [];
			}
			this.__cbOnceOwnerUnbindChangeset.push(function() {
				if(owner != null && destroyCb != null) {
					owner.offDestroy(destroyCb);
				}
				owner = null;
				destroyCb = null;
				handleChangeset = null;
			});
		} else {
			if(this.__cbOnceOwnerUnbindChangeset == null) {
				this.__cbOnceOwnerUnbindChangeset = [];
			}
			this.__cbOnceOwnerUnbindChangeset.push(null);
		}
		if(this.__cbOnceChangeset == null) {
			this.__cbOnceChangeset = [];
		}
		this.__cbOnceChangeset.push(handleChangeset);
	}
	,offChangeset: function(handleChangeset) {
		if(handleChangeset != null) {
			var index;
			var unbind;
			if(this.__cbOnChangeset != null) {
				index = this.__cbOnChangeset.indexOf(handleChangeset);
				if(index != -1) {
					this.__cbOnChangeset.splice(index,1);
					unbind = this.__cbOnOwnerUnbindChangeset[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnOwnerUnbindChangeset.splice(index,1);
				}
			}
			if(this.__cbOnceChangeset != null) {
				index = this.__cbOnceChangeset.indexOf(handleChangeset);
				if(index != -1) {
					this.__cbOnceChangeset.splice(index,1);
					unbind = this.__cbOnceOwnerUnbindChangeset[index];
					if(unbind != null) {
						unbind();
					}
					this.__cbOnceOwnerUnbindChangeset.splice(index,1);
				}
			}
		} else {
			if(this.__cbOnOwnerUnbindChangeset != null) {
				var _g = 0;
				var _g1 = this.__cbOnOwnerUnbindChangeset.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnOwnerUnbindChangeset[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnOwnerUnbindChangeset = null;
			}
			if(this.__cbOnceOwnerUnbindChangeset != null) {
				var _g = 0;
				var _g1 = this.__cbOnceOwnerUnbindChangeset.length;
				while(_g < _g1) {
					var i = _g++;
					var unbind = this.__cbOnceOwnerUnbindChangeset[i];
					if(unbind != null) {
						unbind();
					}
				}
				this.__cbOnceOwnerUnbindChangeset = null;
			}
			this.__cbOnChangeset = null;
			this.__cbOnceChangeset = null;
		}
	}
	,listensChangeset: function() {
		if(!(this.__cbOnChangeset != null && this.__cbOnChangeset.length > 0)) {
			if(this.__cbOnceChangeset != null) {
				return this.__cbOnceChangeset.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,checkInterval: null
	,compactInterval: null
	,destroyModelOnUntrack: null
	,serializedMap: null
	,model: null
	,get_model: function() {
		return this.entity;
	}
	,entity: null
	,bindAsComponent: function() {
		var _this = tracker_Tracker.backend;
		var seconds = this.checkInterval;
		ceramic_Timer.schedule(this,seconds,$bind(this,this.synchronize),seconds);
		var _this = tracker_Tracker.backend;
		var seconds = this.compactInterval;
		ceramic_Timer.schedule(this,seconds,$bind(this,this.compactIfNeeded),seconds);
		var model = this.entity;
		if(model._lifecycleState >= 0 && !Object.prototype.hasOwnProperty.call(this.trackedModels.h,model._serializeId)) {
			this.trackedModels.h[model._serializeId] = model;
			model.onModelDirty(this,$bind(this,this.explicitModelDirty));
			model.onObservedDirty(this,$bind(this,this.modelDirty));
			model.onceDestroy(this,$bind(this,this.trackedModelDestroyed));
		}
		this.compact();
	}
	,compact: function(done) {
		var _gthis = this;
		var prevSerializedMap = this.serializedMap;
		tracker_Serialize._serializedMap = new haxe_ds_StringMap();
		tracker_Serialize._onAddSerializable = function(serializable) {
			if(((serializable) instanceof tracker_Model)) {
				var model = serializable;
				model.observedDirty = false;
				if(model._lifecycleState >= 0 && !Object.prototype.hasOwnProperty.call(_gthis.trackedModels.h,model._serializeId)) {
					_gthis.trackedModels.h[model._serializeId] = model;
					model.onModelDirty(_gthis,$bind(_gthis,_gthis.explicitModelDirty));
					model.onObservedDirty(_gthis,$bind(_gthis,_gthis.modelDirty));
					model.onceDestroy(_gthis,$bind(_gthis,_gthis.trackedModelDestroyed));
				}
			}
		};
		var serialized = tracker_Serialize.serializeValue(this.entity);
		this.serializedMap = tracker_Serialize._serializedMap;
		tracker_Serialize._onAddSerializable = null;
		tracker_Serialize._serializedMap = null;
		this.cleanTrackingFromPrevSerializedMap(prevSerializedMap);
		var s = new haxe_Serializer();
		s.serialize(serialized);
		s.serialize(this.serializedMap);
		var data = s.toString();
		this.emitChangeset(new tracker_SerializeChangeset(data,false));
		if(done != null) {
			done(data);
		}
	}
	,trackedModels: null
	,willCleanDestroyedTrackedModels: null
	,dirtyModels: null
	,canCompact: null
	,dirty: null
	,track: function(model) {
		if(model._lifecycleState >= 0 && !Object.prototype.hasOwnProperty.call(this.trackedModels.h,model._serializeId)) {
			this.trackedModels.h[model._serializeId] = model;
			model.onModelDirty(this,$bind(this,this.explicitModelDirty));
			model.onObservedDirty(this,$bind(this,this.modelDirty));
			model.onceDestroy(this,$bind(this,this.trackedModelDestroyed));
		}
	}
	,untrack: function(model) {
		if(Object.prototype.hasOwnProperty.call(this.trackedModels.h,model._serializeId)) {
			var key = model._serializeId;
			var _this = this.trackedModels;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			model.offModelDirty($bind(this,this.explicitModelDirty));
			model.offObservedDirty($bind(this,this.modelDirty));
			model.offDestroy($bind(this,this.trackedModelDestroyed));
			if(this.destroyModelOnUntrack) {
				model.destroy();
			}
		}
	}
	,trackedModelDestroyed: function(_) {
		var _gthis = this;
		if(this.willCleanDestroyedTrackedModels) {
			return;
		}
		this.willCleanDestroyedTrackedModels = true;
		var _this = tracker_Tracker.backend;
		ceramic_App.app._onceImmediate(function() {
			var keys = [];
			var h = _gthis.trackedModels.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				keys.push(key);
			}
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				var model = _gthis.trackedModels.h[key];
				if(model._lifecycleState < 0) {
					if(Object.prototype.hasOwnProperty.call(_gthis.trackedModels.h,model._serializeId)) {
						var key1 = model._serializeId;
						var _this = _gthis.trackedModels;
						if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
							delete(_this.h[key1]);
						}
						model.offModelDirty($bind(_gthis,_gthis.explicitModelDirty));
						model.offObservedDirty($bind(_gthis,_gthis.modelDirty));
						model.offDestroy($bind(_gthis,_gthis.trackedModelDestroyed));
						if(_gthis.destroyModelOnUntrack) {
							model.destroy();
						}
					}
				}
			}
			_gthis.willCleanDestroyedTrackedModels = false;
		});
	}
	,cleanTrackingFromPrevSerializedMap: function(prevSerializedMap) {
		var removedIds = [];
		var h = prevSerializedMap.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(!Object.prototype.hasOwnProperty.call(this.serializedMap.h,key)) {
				removedIds.push(key);
			}
		}
		var _g = 0;
		while(_g < removedIds.length) {
			var key = removedIds[_g];
			++_g;
			var model = this.trackedModels.h[key];
			if(model != null) {
				if(Object.prototype.hasOwnProperty.call(this.trackedModels.h,model._serializeId)) {
					var key1 = model._serializeId;
					var _this = this.trackedModels;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
					model.offModelDirty($bind(this,this.explicitModelDirty));
					model.offObservedDirty($bind(this,this.modelDirty));
					model.offDestroy($bind(this,this.trackedModelDestroyed));
					if(this.destroyModelOnUntrack) {
						model.destroy();
					}
				}
			}
		}
	}
	,modelDirty: function(model,fromSerializedField) {
		if(!fromSerializedField) {
			model.observedDirty = false;
			return;
		}
		this.dirtyModels.h[model._serializeId] = model;
		this.dirty = true;
	}
	,explicitModelDirty: function(model) {
		this.dirtyModels.h[model._serializeId] = model;
		this.dirty = true;
	}
	,synchronize: function() {
		if(!this.dirty) {
			return;
		}
		this.dirty = false;
		var toAppend = [];
		var h = this.dirtyModels.h;
		var id_h = h;
		var id_keys = Object.keys(h);
		var id_length = id_keys.length;
		var id_current = 0;
		while(id_current < id_length) {
			var id = id_keys[id_current++];
			var model = this.dirtyModels.h[id];
			if(model._lifecycleState >= 0 && Object.prototype.hasOwnProperty.call(this.trackedModels.h,model._serializeId)) {
				if(false != model.dirty) {
					model.dirty = false;
				}
				var _gthis = [this];
				var key = model._serializeId;
				var _this = this.serializedMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				tracker_Serialize._serializedMap = this.serializedMap;
				tracker_Serialize._onCheckSerializable = (function(_gthis) {
					return function(serializable) {
						var id = serializable._serializeId;
						var model = _gthis[0].trackedModels.h[id];
						if(model != null) {
							if(model != serializable) {
								var _this = _gthis[0].serializedMap;
								if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
									delete(_this.h[id]);
								}
							}
						}
					};
				})(_gthis);
				tracker_Serialize._onAddSerializable = (function(_gthis,toAppend) {
					return function(serializable) {
						if(((serializable) instanceof tracker_Model)) {
							var model = serializable;
							model.observedDirty = false;
							toAppend[0].push(_gthis[0].serializedMap.h[model._serializeId]);
							if(model._lifecycleState >= 0 && !Object.prototype.hasOwnProperty.call(_gthis[0].trackedModels.h,model._serializeId)) {
								_gthis[0].trackedModels.h[model._serializeId] = model;
								model.onModelDirty(_gthis[0],($_=_gthis[0],$bind($_,$_.explicitModelDirty)));
								model.onObservedDirty(_gthis[0],($_=_gthis[0],$bind($_,$_.modelDirty)));
								model.onceDestroy(_gthis[0],($_=_gthis[0],$bind($_,$_.trackedModelDestroyed)));
							}
						}
					};
				})(_gthis,[toAppend]);
				tracker_Serialize.serializeValue(model);
				tracker_Serialize._onCheckSerializable = null;
				tracker_Serialize._onAddSerializable = null;
				tracker_Serialize._serializedMap = null;
			}
		}
		this.dirtyModels = new haxe_ds_StringMap();
		if(toAppend.length > 0) {
			var s = new haxe_Serializer();
			s.serialize(toAppend);
			var data = s.toString();
			this.canCompact = true;
			this.emitChangeset(new tracker_SerializeChangeset(data,true));
		}
	}
	,compactIfNeeded: function() {
		if(this.canCompact) {
			this.canCompact = false;
			this.compact();
		}
	}
	,serializeModel: function(model,toAppend) {
		var _gthis = this;
		var key = model._serializeId;
		var _this = this.serializedMap;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
		tracker_Serialize._serializedMap = this.serializedMap;
		tracker_Serialize._onCheckSerializable = function(serializable) {
			var id = serializable._serializeId;
			var model = _gthis.trackedModels.h[id];
			if(model != null) {
				if(model != serializable) {
					var _this = _gthis.serializedMap;
					if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
						delete(_this.h[id]);
					}
				}
			}
		};
		tracker_Serialize._onAddSerializable = function(serializable) {
			if(((serializable) instanceof tracker_Model)) {
				var model = serializable;
				model.observedDirty = false;
				toAppend.push(_gthis.serializedMap.h[model._serializeId]);
				if(model._lifecycleState >= 0 && !Object.prototype.hasOwnProperty.call(_gthis.trackedModels.h,model._serializeId)) {
					_gthis.trackedModels.h[model._serializeId] = model;
					model.onModelDirty(_gthis,$bind(_gthis,_gthis.explicitModelDirty));
					model.onObservedDirty(_gthis,$bind(_gthis,_gthis.modelDirty));
					model.onceDestroy(_gthis,$bind(_gthis,_gthis.trackedModelDestroyed));
				}
			}
		};
		tracker_Serialize.serializeValue(model);
		tracker_Serialize._onCheckSerializable = null;
		tracker_Serialize._onAddSerializable = null;
		tracker_Serialize._serializedMap = null;
	}
	,setEntity: function(entity) {
		if(((entity) instanceof tracker_Model)) {
			this.entity = entity;
		} else {
			this.entity = null;
		}
	}
	,getEntity: function() {
		return this.entity;
	}
	,initializerName: null
	,unbindEvents: function() {
		ceramic_Entity.prototype.unbindEvents.call(this);
		this.offChangeset();
	}
	,__class__: tracker_SerializeModel
	,__properties__: $extend(ceramic_Entity.prototype.__properties__,{get_model:"get_model"})
});
var tracker_Tracker = function() { };
$hxClasses["tracker.Tracker"] = tracker_Tracker;
tracker_Tracker.__name__ = "tracker.Tracker";
var tracker_Utils = function() { };
$hxClasses["tracker.Utils"] = tracker_Utils;
tracker_Utils.__name__ = "tracker.Utils";
tracker_Utils.uniformFrequencyList = function(values,frequencies,size) {
	var list = [];
	var pickValues = [];
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		pickValues[i] = 0;
	}
	var _g = 0;
	var _g1 = frequencies.length;
	while(_g < _g1) {
		var i = _g++;
		pickValues[i] += frequencies[i];
	}
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var index = _g++;
		var bestPick = 0;
		var bestPickValue = 0.0;
		var _g2 = 0;
		var _g3 = values.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var pickValue = pickValues[i];
			if(pickValue > bestPickValue) {
				bestPick = i;
				bestPickValue = pickValue;
			}
		}
		list.push(values[bestPick]);
		pickValues[bestPick] -= 1.0;
		var _g4 = 0;
		var _g5 = frequencies.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			pickValues[i1] += frequencies[i1];
		}
	}
	return list;
};
tracker_Utils.uniqueId = function() {
	switch(tracker_Utils._nextUniqueIntCursor) {
	case 0:
		tracker_Utils._nextUniqueInt0 = (tracker_Utils._nextUniqueInt0 + 1) % 2147483647;
		break;
	case 1:
		tracker_Utils._nextUniqueInt1 = (tracker_Utils._nextUniqueInt1 + 1) % 2147483647;
		break;
	case 2:
		tracker_Utils._nextUniqueInt2 = (tracker_Utils._nextUniqueInt2 + 1) % 2147483647;
		break;
	case 3:
		tracker_Utils._nextUniqueInt3 = (tracker_Utils._nextUniqueInt3 + 1) % 2147483647;
		break;
	}
	tracker_Utils._nextUniqueIntCursor = (tracker_Utils._nextUniqueIntCursor + 1) % 4;
	var val = tracker_Utils._nextUniqueInt0;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result1;
		if(q > 0) {
			var result2 = tracker_Utils.base62Id(q);
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result1 = result2 + result3;
		} else {
			var result2;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result2 = String.fromCodePoint(ascii);
			} else {
				result2 = Std.string(r1).charAt(0);
			}
			result1 = Std.string(result2);
		}
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result = result1 + result2;
	} else {
		var result1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result1 = String.fromCodePoint(ascii);
		} else {
			result1 = Std.string(r).charAt(0);
		}
		result = Std.string(result1);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result1;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result2;
		if(q > 0) {
			var result3 = tracker_Utils.base62Id(q);
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result2 = result3 + result4;
		} else {
			var result3;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result3 = String.fromCodePoint(ascii);
			} else {
				result3 = Std.string(r1).charAt(0);
			}
			result2 = Std.string(result3);
		}
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result1 = result2 + result3;
	} else {
		var result2;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result2 = String.fromCodePoint(ascii);
		} else {
			result2 = Std.string(r).charAt(0);
		}
		result1 = Std.string(result2);
	}
	var val = tracker_Utils._nextUniqueInt1;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result2;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result3;
		if(q > 0) {
			var result4 = tracker_Utils.base62Id(q);
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result3 = result4 + result5;
		} else {
			var result4;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result4 = String.fromCodePoint(ascii);
			} else {
				result4 = Std.string(r1).charAt(0);
			}
			result3 = Std.string(result4);
		}
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result2 = result3 + result4;
	} else {
		var result3;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result3 = String.fromCodePoint(ascii);
		} else {
			result3 = Std.string(r).charAt(0);
		}
		result2 = Std.string(result3);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result3;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result4;
		if(q > 0) {
			var result5 = tracker_Utils.base62Id(q);
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result4 = result5 + result6;
		} else {
			var result5;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result5 = String.fromCodePoint(ascii);
			} else {
				result5 = Std.string(r1).charAt(0);
			}
			result4 = Std.string(result5);
		}
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result3 = result4 + result5;
	} else {
		var result4;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result4 = String.fromCodePoint(ascii);
		} else {
			result4 = Std.string(r).charAt(0);
		}
		result3 = Std.string(result4);
	}
	var val = tracker_Utils._nextUniqueInt2;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result4;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result5;
		if(q > 0) {
			var result6 = tracker_Utils.base62Id(q);
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result5 = result6 + result7;
		} else {
			var result6;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result6 = String.fromCodePoint(ascii);
			} else {
				result6 = Std.string(r1).charAt(0);
			}
			result5 = Std.string(result6);
		}
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result4 = result5 + result6;
	} else {
		var result5;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result5 = String.fromCodePoint(ascii);
		} else {
			result5 = Std.string(r).charAt(0);
		}
		result4 = Std.string(result5);
	}
	var val = null;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result5;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result6;
		if(q > 0) {
			var result7 = tracker_Utils.base62Id(q);
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result6 = result7 + result8;
		} else {
			var result7;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result7 = String.fromCodePoint(ascii);
			} else {
				result7 = Std.string(r1).charAt(0);
			}
			result6 = Std.string(result7);
		}
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result5 = result6 + result7;
	} else {
		var result6;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result6 = String.fromCodePoint(ascii);
		} else {
			result6 = Std.string(r).charAt(0);
		}
		result5 = Std.string(result6);
	}
	var val = tracker_Utils._nextUniqueInt3;
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	var result6;
	if(q > 0) {
		var val = q;
		if(val == null) {
			val = Math.random() * 2147483646 | 0;
		}
		var r1 = val % 62 | 0;
		var q = val / 62 | 0;
		var result7;
		if(q > 0) {
			var result8 = tracker_Utils.base62Id(q);
			var result9;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result9 = String.fromCodePoint(ascii);
			} else {
				result9 = Std.string(r1).charAt(0);
			}
			result7 = result8 + result9;
		} else {
			var result8;
			if(r1 > 9) {
				var ascii = 65 + (r1 - 10);
				if(ascii > 90) {
					ascii += 6;
				}
				result8 = String.fromCodePoint(ascii);
			} else {
				result8 = Std.string(r1).charAt(0);
			}
			result7 = Std.string(result8);
		}
		var result8;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result8 = String.fromCodePoint(ascii);
		} else {
			result8 = Std.string(r).charAt(0);
		}
		result6 = result7 + result8;
	} else {
		var result7;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			result7 = String.fromCodePoint(ascii);
		} else {
			result7 = Std.string(r).charAt(0);
		}
		result6 = Std.string(result7);
	}
	var result7 = result + "-" + result1 + "-" + result2 + "-" + result3 + "-" + result4 + "-" + result5 + "-" + result6;
	return result7;
};
tracker_Utils.base62Id = function(val) {
	if(val == null) {
		val = Math.random() * 2147483646 | 0;
	}
	var r = val % 62 | 0;
	var q = val / 62 | 0;
	if(q > 0) {
		var tmp = tracker_Utils.base62Id(q);
		var tmp1;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp1 = String.fromCodePoint(ascii);
		} else {
			tmp1 = (r == null ? "null" : "" + r).charAt(0);
		}
		return tmp + tmp1;
	} else {
		var tmp;
		if(r > 9) {
			var ascii = 65 + (r - 10);
			if(ascii > 90) {
				ascii += 6;
			}
			tmp = String.fromCodePoint(ascii);
		} else {
			tmp = (r == null ? "null" : "" + r).charAt(0);
		}
		return Std.string(tmp);
	}
};
tracker_Utils.encodeChangesetData = function(data) {
	return data.length + ":" + data;
};
tracker_Utils.decodeChangesetData = function(rawData) {
	var serializedMap = new haxe_ds_StringMap();
	var rootInfo = null;
	var changesetData = [];
	while(true) {
		var colonIndex = rawData.indexOf(":");
		if(colonIndex == -1) {
			break;
		}
		var len = Std.parseInt(HxOverrides.substr(rawData,0,colonIndex));
		var dataPart = HxOverrides.substr(rawData,colonIndex + 1,len);
		changesetData.push(dataPart);
		rawData = HxOverrides.substr(rawData,colonIndex + 1 + len,null);
	}
	var i = changesetData.length - 1;
	while(i >= 0) {
		var data = changesetData[i];
		if(i == 0) {
			var u = new haxe_Unserializer(data);
			rootInfo = u.unserialize();
			var changesetSerializedMap = u.unserialize();
			var h = changesetSerializedMap.h;
			var item_h = h;
			var item_keys = Object.keys(h);
			var item_length = item_keys.length;
			var item_current = 0;
			while(item_current < item_length) {
				var item = item_h[item_keys[item_current++]];
				var id = item.id;
				if(!Object.prototype.hasOwnProperty.call(serializedMap.h,id)) {
					serializedMap.h[id] = item;
				}
			}
		} else {
			var u1 = new haxe_Unserializer(data);
			var toAppend = u1.unserialize();
			var _g = 0;
			while(_g < toAppend.length) {
				var item1 = toAppend[_g];
				++_g;
				var id1 = item1.id;
				if(!Object.prototype.hasOwnProperty.call(serializedMap.h,id1)) {
					serializedMap.h[id1] = item1;
				}
			}
		}
		--i;
	}
	return { serialized : rootInfo, serializedMap : serializedMap};
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
assets_AllAssets.bind();
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
ceramic_Entity.__meta__ = { obj : { editable : null}, fields : { components : { editable : null}}};
ceramic_Entity._fieldInfo = { components : { editable : [], type : "ceramic.ReadOnlyMap<String,ceramic.Component>", index : 1}, scriptContent : { editable : [{ label : "Script"}], type : "ceramic.ScriptContent", index : 2}};
ceramic_Transform._decomposed1 = new ceramic_DecomposedTransform();
ceramic_Transform._decomposed2 = new ceramic_DecomposedTransform();
ceramic_Transform._tmp = new ceramic_Transform();
ceramic_Point.pool = new ceramic_Pool();
ceramic_Visual.__meta__ = { obj : { editable : null}, fields : { visible : { editable : [{ group : "active"}]}, touchable : { editable : [{ group : "active"}]}, depth : { editable : [{ group : "depth"}]}, depthRange : { editable : [{ group : "depth", label : "Range"}]}, x : { editable : [{ group : "position"}]}, y : { editable : [{ group : "position"}]}, scaleX : { editable : [{ group : "scale"}]}, scaleY : { editable : [{ group : "scale"}]}, skewX : { editable : [{ group : "skew"}]}, skewY : { editable : [{ group : "skew"}]}, anchorX : { editable : [{ group : "anchor"}]}, anchorY : { editable : [{ group : "anchor"}]}, width : { editable : [{ min : 0, group : "size"}]}, height : { editable : [{ min : 0, group : "size"}]}, roundTranslation : { editable : null}, rotation : { editable : [{ slider : [0,360], degrees : true}]}, alpha : { editable : [{ slider : [0,1]}]}, translateX : { editable : [{ group : "translate"}]}, translateY : { editable : [{ group : "translate"}]}, shader : { editable : null}}};
ceramic_Visual.DEPTH_FACTOR = 1000;
ceramic_Visual.DEPTH_MARGIN = 0.01;
ceramic_Visual.FLAG_NOT_ACTIVE = 1;
ceramic_Visual.FLAG_VISIBLE_WHEN_ACTIVE = 2;
ceramic_Visual.FLAG_TOUCHABLE_WHEN_ACTIVE = 4;
ceramic_Visual.FLAG_IS_HIT_VISUAL = 8;
ceramic_Visual._degToRad = 0.017453292519943295;
ceramic_Visual._matrix = new ceramic_Transform();
ceramic_Visual._point = new ceramic_Point();
ceramic_Visual._minDepth = 0;
ceramic_Visual._maxDepth = 0;
ceramic_Visual._fieldInfo = { skewY : { editable : [{ group : "skew"}], type : "Float", index : 59}, skewX : { editable : [{ group : "skew"}], type : "Float", index : 57}, alpha : { editable : [{ slider : [0,1]}], type : "Float", index : 77}, roundTranslation : { editable : [], type : "Int", index : 73}, visible : { editable : [{ group : "active"}], type : "Bool", index : 41}, depthRange : { editable : [{ group : "depth", label : "Range"}], type : "Float", index : 47}, depth : { editable : [{ group : "depth"}], type : "Float", index : 45}, scaleX : { editable : [{ group : "scale"}], type : "Float", index : 53}, anchorX : { editable : [{ group : "anchor"}], type : "Float", index : 61}, x : { editable : [{ group : "position"}], type : "Float", index : 49}, y : { editable : [{ group : "position"}], type : "Float", index : 51}, touchable : { editable : [{ group : "active"}], type : "Bool", index : 43}, rotation : { editable : [{ slider : [0,360], degrees : true}], type : "Float", index : 75}, height : { editable : [{ min : 0, group : "size"}], type : "Float", index : 69}, translateY : { editable : [{ group : "translate"}], type : "Float", index : 82}, anchorY : { editable : [{ group : "anchor"}], type : "Float", index : 63}, translateX : { editable : [{ group : "translate"}], type : "Float", index : 79}, scaleY : { editable : [{ group : "scale"}], type : "Float", index : 55}, width : { editable : [{ min : 0, group : "size"}], type : "Float", index : 65}, shader : { editable : [], type : "ceramic.Shader", index : 87}};
ceramic_Quad.__meta__ = { obj : { editable : [{ implicitSizeUnlessNull : "texture"}]}, fields : { color : { editable : null}, transparent : { editable : null}, texture : { editable : null}}};
ceramic_Quad.FLAG_TRANSPARENT = 16;
ceramic_Quad.FLAG_ROTATE_FRAME = 32;
ceramic_Quad._matrix = ceramic_Visual._matrix;
ceramic_Quad._degToRad = 0.017453292519943295;
ceramic_Quad._fieldInfo = { transparent : { editable : [], type : "Bool", index : 5}, color : { editable : [], type : "ceramic.Color", index : 4}, texture : { editable : [], type : "ceramic.Texture", index : 10}};
ceramic_Layer.__meta__ = { obj : { editable : [{ implicitSizeUnlessNull : "texture"}]}};
ceramic_Layer._fieldInfo = { };
ceramic_Scene.__meta__ = { fields : { unobservedStatus : { observe : null}}};
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
ceramic_Assets.instances = [];
ceramic_Assets.all = [];
ceramic_Assets.allDirs = [];
ceramic_Assets.allByName = new haxe_ds_StringMap();
ceramic_Assets.allDirsByName = new haxe_ds_StringMap();
ceramic_Assets.customAssetKinds = new haxe_ds_StringMap();
ceramic_Assets._instances = [];
assets_AllAssets.all = ["data/MapTest.tmx","img/logoSmall.png","img/tilesets/tileset.png","bloom.frag","bloom.vert","blur.frag","blur.vert","fxaa.frag","fxaa.vert","gaussianBlur.frag","glow.frag","glow.vert","innerLight.frag","msdf.frag","msdf.vert","outline.frag","outline.vert","pixelArt.frag","pixelArt.vert","textured.frag","textured.vert","tintBlack.frag","tintBlack.vert","RobotoMedium.fnt","RobotoMedium.png","white.png"];
assets_AllAssets.allDirs = ["data","img","img/tilesets"];
assets_AllAssets.allByName = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["white"] = ["white.png"];
	_g.h["tintBlack"] = ["tintBlack.frag","tintBlack.vert"];
	_g.h["textured"] = ["textured.frag","textured.vert"];
	_g.h["pixelArt"] = ["pixelArt.frag","pixelArt.vert"];
	_g.h["outline"] = ["outline.frag","outline.vert"];
	_g.h["msdf"] = ["msdf.frag","msdf.vert"];
	_g.h["innerLight"] = ["innerLight.frag"];
	_g.h["img/tilesets/tileset"] = ["img/tilesets/tileset.png"];
	_g.h["img/logoSmall"] = ["img/logoSmall.png"];
	_g.h["glow"] = ["glow.frag","glow.vert"];
	_g.h["gaussianBlur"] = ["gaussianBlur.frag"];
	_g.h["fxaa"] = ["fxaa.frag","fxaa.vert"];
	_g.h["data/MapTest"] = ["data/MapTest.tmx"];
	_g.h["blur"] = ["blur.frag","blur.vert"];
	_g.h["bloom"] = ["bloom.frag","bloom.vert"];
	_g.h["RobotoMedium"] = ["RobotoMedium.fnt","RobotoMedium.png"];
	$r = _g;
	return $r;
}(this));
assets_AllAssets.allDirsByName = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["img/tileset"] = ["img/tilesets"];
	_g.h["im"] = ["img"];
	_g.h["dat"] = ["data"];
	$r = _g;
	return $r;
}(this));
backend_ClayEvents.GAMEPAD_STORAGE_SIZE = 32;
backend_Draw.MAX_VERTS_SIZE = 65536;
backend_Draw.MAX_INDICES = 16384;
backend_Draw.MAX_BUFFERS = 64;
backend_Draw.ATTRIBUTE_POS = 0;
backend_Draw.ATTRIBUTE_UV = 1;
backend_Draw.ATTRIBUTE_COLOR = 2;
backend_Draw._posListArray = [];
backend_Draw._indiceListArray = [];
backend_Draw._uvListArray = [];
backend_Draw._colorListArray = [];
backend_Draw._activeTextureSlot = 0;
backend_Draw._batchMultiTexture = false;
backend_Draw._posSize = 0;
backend_Draw._customGLBuffers = [];
backend_Draw._didUpdateCurrentRenderTarget = false;
backend_Draw._projectionMatrix = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
backend_Draw._modelViewMatrix = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
backend_Draw._modelViewTransform = new ceramic_Transform();
backend_Draw._renderTargetTransform = new ceramic_Transform();
backend_Draw._viewportDensity = 1.0;
backend_Draw._viewportWidth = 0.0;
backend_Draw._viewportHeight = 0.0;
backend_Draw._blackTransparentColor = (function($this) {
	var $r;
	var alpha = 0;
	if(alpha == null) {
		alpha = 255;
	}
	var value = (0 | 0) + (-16777216);
	{
		value &= 16777215;
		value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	}
	$r = value;
	return $r;
}(this));
backend_Draw._whiteTransparentColor = (function($this) {
	var $r;
	var alpha = 0;
	if(alpha == null) {
		alpha = 255;
	}
	var value = (16777215 | 0) + (-16777216);
	{
		value &= 16777215;
		value |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
	}
	$r = value;
	return $r;
}(this));
backend_Draw._maxVerts = 0;
backend_Draw._vertexSize = 0;
backend_Draw._numIndices = 0;
backend_Draw._numPos = 0;
backend_Draw._posIndex = 0;
backend_Draw._floatAttributesSize = 0;
backend_Draw._numUVs = 0;
backend_Draw._uvIndex = 0;
backend_Draw._numColors = 0;
backend_Draw._colorIndex = 0;
backend_Draw._drawingInStencilBuffer = false;
backend_Info.RE_OPERA = new EReg("OPR/([0-6].)","g");
backend_Info.RE_SAFARI_VERSION = new EReg("Version/(.*?) ","");
backend_Main.lastResizeTime = -1;
backend_Main.lastNewWidth = -1;
backend_Main.lastNewHeight = -1;
backend_Main.readyToDisplay = false;
backend_Main.resizing = 0;
backend_Main.containerWidth = 0;
backend_Main.containerHeight = 0;
backend_Main.containerPixelRatio = 0;
backend_Main._displayReady = false;
backend_Shaders.SHADER_ATTRIBUTES = ["vertexPosition","vertexTCoord","vertexColor"];
backend_Shaders.SHADER_ATTRIBUTES_MULTITEXTURE = ["vertexPosition","vertexTCoord","vertexColor","vertexTextureId"];
backend_Shaders._maxIfStatementsByFragmentShader = -1;
clay_opengl_GLGraphics.DEPTH24_STENCIL8 = 35056;
clay_opengl_GLGraphics.DEPTH_COMPONENT24 = 33190;
clay_opengl_GLGraphics.TEXTURE_2D_MULTISAMPLE = 37120;
clay_opengl_GLGraphics.READ_FRAMEBUFFER = 36008;
clay_opengl_GLGraphics.DRAW_FRAMEBUFFER = 36009;
clay_opengl_GLGraphics.RGBA8 = 32856;
clay_opengl_GLGraphics.COLOR = 6144;
clay_opengl_GLGraphics._boundTexture2D = [];
clay_opengl_GLGraphics._boundProgram = clay_opengl_GLGraphics.NO_PROGRAM;
clay_opengl_GLGraphics._activeTextureSlot = -1;
clay_opengl_GLGraphics._boundFramebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
clay_opengl_GLGraphics._boundRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
clay_opengl_GLGraphics._didFetchDefaultBuffers = false;
clay_opengl_GLGraphics._defaultFramebuffer = clay_opengl_GLGraphics.NO_FRAMEBUFFER;
clay_opengl_GLGraphics._defaultRenderbuffer = clay_opengl_GLGraphics.NO_RENDERBUFFER;
clay_opengl_GLGraphics.clearBufferForBlitValues = new Float32Array([0.0,0.0,0.0,1.0]);
backend_TextureId.DEFAULT = clay_opengl_GLGraphics.NO_TEXTURE;
backend_Textures._maxTexturesByBatch = -1;
ceramic_AlphaColor.NONE = -1;
ceramic_AlphaColor.TRANSPARENT = 0;
ceramic_AlphaColor.WHITE = -1;
ceramic_AlphaColor.GRAY = -8355712;
ceramic_AlphaColor.BLACK = -16777216;
ceramic_AlphaColor.GREEN = -16744448;
ceramic_AlphaColor.LIME = -16711936;
ceramic_AlphaColor.YELLOW = -256;
ceramic_AlphaColor.ORANGE = -23296;
ceramic_AlphaColor.RED = -65536;
ceramic_AlphaColor.PURPLE = -8388480;
ceramic_AlphaColor.BLUE = -16776961;
ceramic_AlphaColor.BROWN = -7650029;
ceramic_AlphaColor.PINK = -16181;
ceramic_AlphaColor.MAGENTA = -65281;
ceramic_AlphaColor.CYAN = -16711681;
ceramic_AlphaColor.CORNFLOWERBLUE = -10185235;
ceramic_AlphaColor.MEDIUMVIOLETRED = -3730043;
ceramic_AlphaColor.DEEPPINK = -60269;
ceramic_AlphaColor.PALEVIOLETRED = -2396013;
ceramic_AlphaColor.HOTPINK = -38476;
ceramic_AlphaColor.LIGHTPINK = -18751;
ceramic_AlphaColor.DARKRED = -7667712;
ceramic_AlphaColor.FIREBRICK = -5103070;
ceramic_AlphaColor.CRIMSON = -2354116;
ceramic_AlphaColor.INDIANRED = -3318692;
ceramic_AlphaColor.LIGHTCORAL = -1015680;
ceramic_AlphaColor.SALMON = -360334;
ceramic_AlphaColor.DARKSALMON = -1468806;
ceramic_AlphaColor.LIGHTSALMON = -24454;
ceramic_AlphaColor.ORANGERED = -47872;
ceramic_AlphaColor.TOMATO = -40121;
ceramic_AlphaColor.DARKORANGE = -29696;
ceramic_AlphaColor.CORAL = -32944;
ceramic_AlphaColor.DARKKHAKI = -4343957;
ceramic_AlphaColor.GOLD = -10496;
ceramic_AlphaColor.KHAKI = -989556;
ceramic_AlphaColor.PEACHPUFF = -9543;
ceramic_AlphaColor.PALEGOLDENROD = -1120086;
ceramic_AlphaColor.MOCCASIN = -6987;
ceramic_AlphaColor.PAPAYAWHIP = -4139;
ceramic_AlphaColor.LEMONCHIFFON = -1331;
ceramic_AlphaColor.LIGHTYELLOW = -32;
ceramic_AlphaColor.SIENNA = -6270419;
ceramic_AlphaColor.CHOCOLATE = -2987746;
ceramic_AlphaColor.PERU = -3308225;
ceramic_AlphaColor.TAN = -2968436;
ceramic_AlphaColor.DARKOLIVEGREEN = -11179217;
ceramic_AlphaColor.OLIVE = -8355840;
ceramic_AlphaColor.TEAL = -16744320;
ceramic_AlphaColor.TURQUOISE = -12525360;
ceramic_AlphaColor.NAVY = -16777088;
ceramic_AlphaColor.INDIGO = -11861886;
ceramic_AlphaColor.ORCHID = -2461482;
ceramic_AlphaColor.LAVENDER = -1644806;
ceramic_AlphaColor.AZURE = -983041;
ceramic_AlphaColor.IVORY = -16;
ceramic_AlphaColor.DIMGREY = -9868951;
ceramic_AlphaColor.SLATEGREY = -9404272;
ceramic_AlphaColor.SNOW = -1286;
ceramic_AlphaColor._hsluvTuple = [0,0,0];
ceramic_AlphaColor._hsluvResult = [0,0,0];
ceramic_ArrayPool.ALLOC_STEP = 10;
ceramic_ArrayPool.dynPool10 = new ceramic_ArrayPool(10);
ceramic_ArrayPool.dynPool100 = new ceramic_ArrayPool(100);
ceramic_ArrayPool.dynPool1000 = new ceramic_ArrayPool(1000);
ceramic_ArrayPool.dynPool10000 = new ceramic_ArrayPool(10000);
ceramic_ArrayPool.dynPool100000 = new ceramic_ArrayPool(100000);
ceramic_ArrayPool.didNotifyLargePool = false;
ceramic_Asset.__meta__ = { fields : { unobservedStatus : { observe : null}}};
ceramic_AtlasAsset.__meta__ = { fields : { unobservedAtlas : { observe : null}, unobservedText : { observe : null}}};
ceramic_BezierEasing.SPLINE_TABLE_SIZE = 11;
ceramic_BezierEasing.SAMPLE_STEP_SIZE = 1.0 / (ceramic_BezierEasing.SPLINE_TABLE_SIZE - 1.0);
ceramic_BezierEasing.NEWTON_ITERATIONS = 4;
ceramic_BezierEasing.NEWTON_MIN_SLOPE = 0.001;
ceramic_BezierEasing.SUBDIVISION_PRECISION = 0.0000001;
ceramic_BezierEasing.SUBDIVISION_MAX_ITERATIONS = 10;
ceramic_BezierEasing.TWO_THIRD = 0.66666666666666663;
ceramic_BezierEasing.CACHE_SIZE = 10000;
ceramic_BezierEasing.numCachedInstances = 0;
ceramic_BinaryAsset.__meta__ = { fields : { unobservedBytes : { observe : null}}};
ceramic_CollectionImpl._nextInternalId = 0;
ceramic_CollectionEntry.__meta__ = { fields : { id : { editable : null}, name : { editable : null}}};
ceramic_CollectionEntry._nextId = 1;
ceramic_CollectionEntry._nextIndex = 1;
ceramic_CollectionEntry._fieldInfo = { name : { editable : [], type : "String"}, id : { editable : [], type : "String"}, index : { type : "Int"}};
ceramic_Color.NONE = -1;
ceramic_Color.WHITE = 16777215;
ceramic_Color.GRAY = 8421504;
ceramic_Color.BLACK = 0;
ceramic_Color.GREEN = 32768;
ceramic_Color.LIME = 65280;
ceramic_Color.YELLOW = 16776960;
ceramic_Color.ORANGE = 16753920;
ceramic_Color.RED = 16711680;
ceramic_Color.PURPLE = 8388736;
ceramic_Color.BLUE = 255;
ceramic_Color.BROWN = 9127187;
ceramic_Color.PINK = 16761035;
ceramic_Color.MAGENTA = 16711935;
ceramic_Color.CYAN = 65535;
ceramic_Color.CORNFLOWERBLUE = 6591981;
ceramic_Color.MEDIUMVIOLETRED = 13047173;
ceramic_Color.DEEPPINK = 16716947;
ceramic_Color.PALEVIOLETRED = 14381203;
ceramic_Color.HOTPINK = 16738740;
ceramic_Color.LIGHTPINK = 16758465;
ceramic_Color.DARKRED = 9109504;
ceramic_Color.FIREBRICK = 11674146;
ceramic_Color.CRIMSON = 14423100;
ceramic_Color.INDIANRED = 13458524;
ceramic_Color.LIGHTCORAL = 15761536;
ceramic_Color.SALMON = 16416882;
ceramic_Color.DARKSALMON = 15308410;
ceramic_Color.LIGHTSALMON = 16752762;
ceramic_Color.ORANGERED = 16729344;
ceramic_Color.TOMATO = 16737095;
ceramic_Color.DARKORANGE = 16747520;
ceramic_Color.CORAL = 16744272;
ceramic_Color.DARKKHAKI = 12433259;
ceramic_Color.GOLD = 16766720;
ceramic_Color.KHAKI = 15787660;
ceramic_Color.PEACHPUFF = 16767673;
ceramic_Color.PALEGOLDENROD = 15657130;
ceramic_Color.MOCCASIN = 16770229;
ceramic_Color.PAPAYAWHIP = 16773077;
ceramic_Color.LEMONCHIFFON = 16775885;
ceramic_Color.LIGHTYELLOW = 16777184;
ceramic_Color.SIENNA = 10506797;
ceramic_Color.CHOCOLATE = 13789470;
ceramic_Color.PERU = 13468991;
ceramic_Color.TAN = 13808780;
ceramic_Color.DARKOLIVEGREEN = 5597999;
ceramic_Color.OLIVE = 8421376;
ceramic_Color.TEAL = 32896;
ceramic_Color.TURQUOISE = 4251856;
ceramic_Color.NAVY = 128;
ceramic_Color.INDIGO = 4915330;
ceramic_Color.ORCHID = 14315734;
ceramic_Color.LAVENDER = 15132410;
ceramic_Color.AZURE = 15794175;
ceramic_Color.IVORY = 16777200;
ceramic_Color.DIMGREY = 6908265;
ceramic_Color.SLATEGREY = 7372944;
ceramic_Color.SNOW = 16775930;
ceramic_Color.colorLookup = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["NONE"] = -1;
	_g.h["WHITE"] = 16777215;
	_g.h["GRAY"] = 8421504;
	_g.h["BLACK"] = 0;
	_g.h["GREEN"] = 32768;
	_g.h["LIME"] = 65280;
	_g.h["YELLOW"] = 16776960;
	_g.h["ORANGE"] = 16753920;
	_g.h["RED"] = 16711680;
	_g.h["PURPLE"] = 8388736;
	_g.h["BLUE"] = 255;
	_g.h["BROWN"] = 9127187;
	_g.h["PINK"] = 16761035;
	_g.h["MAGENTA"] = 16711935;
	_g.h["CYAN"] = 65535;
	_g.h["CORNFLOWERBLUE"] = 6591981;
	_g.h["MEDIUMVIOLETRED"] = 13047173;
	_g.h["DEEPPINK"] = 16716947;
	_g.h["PALEVIOLETRED"] = 14381203;
	_g.h["HOTPINK"] = 16738740;
	_g.h["LIGHTPINK"] = 16758465;
	_g.h["DARKRED"] = 9109504;
	_g.h["FIREBRICK"] = 11674146;
	_g.h["CRIMSON"] = 14423100;
	_g.h["INDIANRED"] = 13458524;
	_g.h["LIGHTCORAL"] = 15761536;
	_g.h["SALMON"] = 16416882;
	_g.h["DARKSALMON"] = 15308410;
	_g.h["LIGHTSALMON"] = 16752762;
	_g.h["ORANGERED"] = 16729344;
	_g.h["TOMATO"] = 16737095;
	_g.h["DARKORANGE"] = 16747520;
	_g.h["CORAL"] = 16744272;
	_g.h["DARKKHAKI"] = 12433259;
	_g.h["GOLD"] = 16766720;
	_g.h["KHAKI"] = 15787660;
	_g.h["PEACHPUFF"] = 16767673;
	_g.h["PALEGOLDENROD"] = 15657130;
	_g.h["MOCCASIN"] = 16770229;
	_g.h["PAPAYAWHIP"] = 16773077;
	_g.h["LEMONCHIFFON"] = 16775885;
	_g.h["LIGHTYELLOW"] = 16777184;
	_g.h["SIENNA"] = 10506797;
	_g.h["CHOCOLATE"] = 13789470;
	_g.h["PERU"] = 13468991;
	_g.h["TAN"] = 13808780;
	_g.h["DARKOLIVEGREEN"] = 5597999;
	_g.h["OLIVE"] = 8421376;
	_g.h["TEAL"] = 32896;
	_g.h["TURQUOISE"] = 4251856;
	_g.h["NAVY"] = 128;
	_g.h["INDIGO"] = 4915330;
	_g.h["ORCHID"] = 14315734;
	_g.h["LAVENDER"] = 15132410;
	_g.h["AZURE"] = 15794175;
	_g.h["IVORY"] = 16777200;
	_g.h["DIMGREY"] = 6908265;
	_g.h["SLATEGREY"] = 7372944;
	_g.h["SNOW"] = 16775930;
	$r = _g;
	return $r;
}(this));
ceramic_Color._hsluvTuple = [0,0,0];
ceramic_Color._hsluvResult = [0,0,0];
ceramic_Color._hsluvCacheMap = new ceramic_IntIntMap();
ceramic_Color._hsluvCacheValues = [];
ceramic_DatabaseAsset.__meta__ = { fields : { unobservedDatabase : { observe : null}}};
ceramic_EasingUtils._emptyArray = [];
ceramic_FieldInfo.fieldInfoMap = new haxe_ds_StringMap();
ceramic_FieldMeta.metaMap = new haxe_ds_StringMap();
ceramic_FieldMeta.metaMapRecursive = new haxe_ds_StringMap();
ceramic_Filter.__meta__ = { fields : { unobservedRenderTexture : { observe : null}}};
ceramic_Filter._matrix = ceramic_Visual._matrix;
ceramic_FontAsset.__meta__ = { fields : { unobservedFont : { observe : null}}};
ceramic_Fragment.__meta__ = { obj : { editable : [{ implicitSizeUnlessTrue : "resizable"}]}, fields : { fragmentData : { editable : null}, resizable : { editable : null}, autoUpdateTimeline : { editable : null}, floatA : { editable : [{ group : "floatsAB"}]}, floatB : { editable : [{ group : "floatsAB"}]}, floatC : { editable : [{ group : "floatsCD"}]}, floatD : { editable : [{ group : "floatsCD"}]}}};
ceramic_Fragment.basicTypes = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["Bool"] = true;
	_g.h["Int"] = true;
	_g.h["Float"] = true;
	_g.h["String"] = true;
	_g.h["ceramic.Color"] = true;
	_g.h["ceramic.ScriptContent"] = true;
	$r = _g;
	return $r;
}(this));
ceramic_Fragment.cachedFragmentData = new haxe_ds_StringMap();
ceramic_Fragment._trackResult = new ceramic_Value();
ceramic_Fragment._keyframeResult = new ceramic_Value();
ceramic_Fragment._usedKeyframes = [];
ceramic_Fragment._fieldInfo = { autoUpdateTimeline : { editable : [], type : "Bool", index : 53}, floatD : { editable : [{ group : "floatsCD"}], type : "Float", index : 61}, floatA : { editable : [{ group : "floatsAB"}], type : "Float", index : 55}, resizable : { editable : [], type : "Bool", index : 52}, floatC : { editable : [{ group : "floatsCD"}], type : "Float", index : 59}, floatB : { editable : [{ group : "floatsAB"}], type : "Float", index : 57}, fragmentData : { editable : [], type : "ceramic.FragmentData", index : 51}};
ceramic_FragmentsAsset.__meta__ = { fields : { unobservedFragments : { observe : null}}};
ceramic_GamepadAxis.LEFT_X = 0;
ceramic_GamepadAxis.LEFT_Y = 1;
ceramic_GamepadAxis.RIGHT_X = 2;
ceramic_GamepadAxis.RIGHT_Y = 3;
ceramic_GamepadAxis.LEFT_TRIGGER = 4;
ceramic_GamepadAxis.RIGHT_TRIGGER = 5;
ceramic_GamepadButton.A = 0;
ceramic_GamepadButton.B = 1;
ceramic_GamepadButton.X = 2;
ceramic_GamepadButton.Y = 3;
ceramic_GamepadButton.L1 = 4;
ceramic_GamepadButton.R1 = 5;
ceramic_GamepadButton.L2 = 6;
ceramic_GamepadButton.R2 = 7;
ceramic_GamepadButton.SELECT = 8;
ceramic_GamepadButton.START = 9;
ceramic_GamepadButton.L3 = 10;
ceramic_GamepadButton.R3 = 11;
ceramic_GamepadButton.DPAD_UP = 12;
ceramic_GamepadButton.DPAD_DOWN = 13;
ceramic_GamepadButton.DPAD_LEFT = 14;
ceramic_GamepadButton.DPAD_RIGHT = 15;
ceramic_HashedString._lastDecodeIncomplete = false;
ceramic_ImageAsset.__meta__ = { fields : { unobservedTexture : { observe : null}}};
ceramic_Input.GAMEPAD_STORAGE_SIZE = 32;
ceramic_IntMap.NO_VALUE = 0;
ceramic_IntMap.NULL_VALUE = 1;
ceramic_IntMap.RESERVED_GAP = 2;
ceramic_KeyCode.UNKNOWN = 0;
ceramic_KeyCode.ENTER = 13;
ceramic_KeyCode.ESCAPE = 27;
ceramic_KeyCode.BACKSPACE = 8;
ceramic_KeyCode.TAB = 9;
ceramic_KeyCode.SPACE = 32;
ceramic_KeyCode.EXCLAIM = 33;
ceramic_KeyCode.QUOTEDBL = 34;
ceramic_KeyCode.HASH = 35;
ceramic_KeyCode.PERCENT = 37;
ceramic_KeyCode.DOLLAR = 36;
ceramic_KeyCode.AMPERSAND = 38;
ceramic_KeyCode.QUOTE = 39;
ceramic_KeyCode.LEFTPAREN = 40;
ceramic_KeyCode.RIGHTPAREN = 41;
ceramic_KeyCode.ASTERISK = 42;
ceramic_KeyCode.PLUS = 43;
ceramic_KeyCode.COMMA = 44;
ceramic_KeyCode.MINUS = 45;
ceramic_KeyCode.PERIOD = 46;
ceramic_KeyCode.SLASH = 47;
ceramic_KeyCode.KEY_0 = 48;
ceramic_KeyCode.KEY_1 = 49;
ceramic_KeyCode.KEY_2 = 50;
ceramic_KeyCode.KEY_3 = 51;
ceramic_KeyCode.KEY_4 = 52;
ceramic_KeyCode.KEY_5 = 53;
ceramic_KeyCode.KEY_6 = 54;
ceramic_KeyCode.KEY_7 = 55;
ceramic_KeyCode.KEY_8 = 56;
ceramic_KeyCode.KEY_9 = 57;
ceramic_KeyCode.COLON = 58;
ceramic_KeyCode.SEMICOLON = 59;
ceramic_KeyCode.LESS = 60;
ceramic_KeyCode.EQUALS = 61;
ceramic_KeyCode.GREATER = 62;
ceramic_KeyCode.QUESTION = 63;
ceramic_KeyCode.AT = 64;
ceramic_KeyCode.LEFTBRACKET = 91;
ceramic_KeyCode.BACKSLASH = 92;
ceramic_KeyCode.RIGHTBRACKET = 93;
ceramic_KeyCode.CARET = 94;
ceramic_KeyCode.UNDERSCORE = 95;
ceramic_KeyCode.BACKQUOTE = 96;
ceramic_KeyCode.KEY_A = 97;
ceramic_KeyCode.KEY_B = 98;
ceramic_KeyCode.KEY_C = 99;
ceramic_KeyCode.KEY_D = 100;
ceramic_KeyCode.KEY_E = 101;
ceramic_KeyCode.KEY_F = 102;
ceramic_KeyCode.KEY_G = 103;
ceramic_KeyCode.KEY_H = 104;
ceramic_KeyCode.KEY_I = 105;
ceramic_KeyCode.KEY_J = 106;
ceramic_KeyCode.KEY_K = 107;
ceramic_KeyCode.KEY_L = 108;
ceramic_KeyCode.KEY_M = 109;
ceramic_KeyCode.KEY_N = 110;
ceramic_KeyCode.KEY_O = 111;
ceramic_KeyCode.KEY_P = 112;
ceramic_KeyCode.KEY_Q = 113;
ceramic_KeyCode.KEY_R = 114;
ceramic_KeyCode.KEY_S = 115;
ceramic_KeyCode.KEY_T = 116;
ceramic_KeyCode.KEY_U = 117;
ceramic_KeyCode.KEY_V = 118;
ceramic_KeyCode.KEY_W = 119;
ceramic_KeyCode.KEY_X = 120;
ceramic_KeyCode.KEY_Y = 121;
ceramic_KeyCode.KEY_Z = 122;
ceramic_KeyCode.CAPSLOCK = 1073741881;
ceramic_KeyCode.F1 = 1073741882;
ceramic_KeyCode.F2 = 1073741883;
ceramic_KeyCode.F3 = 1073741884;
ceramic_KeyCode.F4 = 1073741885;
ceramic_KeyCode.F5 = 1073741886;
ceramic_KeyCode.F6 = 1073741887;
ceramic_KeyCode.F7 = 1073741888;
ceramic_KeyCode.F8 = 1073741889;
ceramic_KeyCode.F9 = 1073741890;
ceramic_KeyCode.F10 = 1073741891;
ceramic_KeyCode.F11 = 1073741892;
ceramic_KeyCode.F12 = 1073741893;
ceramic_KeyCode.PRINTSCREEN = 1073741894;
ceramic_KeyCode.SCROLLLOCK = 1073741895;
ceramic_KeyCode.PAUSE = 1073741896;
ceramic_KeyCode.INSERT = 1073741897;
ceramic_KeyCode.HOME = 1073741898;
ceramic_KeyCode.PAGEUP = 1073741899;
ceramic_KeyCode.DELETE = 127;
ceramic_KeyCode.END = 1073741901;
ceramic_KeyCode.PAGEDOWN = 1073741902;
ceramic_KeyCode.RIGHT = 1073741903;
ceramic_KeyCode.LEFT = 1073741904;
ceramic_KeyCode.DOWN = 1073741905;
ceramic_KeyCode.UP = 1073741906;
ceramic_KeyCode.NUMLOCKCLEAR = 1073741907;
ceramic_KeyCode.KP_DIVIDE = 1073741908;
ceramic_KeyCode.KP_MULTIPLY = 1073741909;
ceramic_KeyCode.KP_MINUS = 1073741910;
ceramic_KeyCode.KP_PLUS = 1073741911;
ceramic_KeyCode.KP_ENTER = 1073741912;
ceramic_KeyCode.KP_1 = 1073741913;
ceramic_KeyCode.KP_2 = 1073741914;
ceramic_KeyCode.KP_3 = 1073741915;
ceramic_KeyCode.KP_4 = 1073741916;
ceramic_KeyCode.KP_5 = 1073741917;
ceramic_KeyCode.KP_6 = 1073741918;
ceramic_KeyCode.KP_7 = 1073741919;
ceramic_KeyCode.KP_8 = 1073741920;
ceramic_KeyCode.KP_9 = 1073741921;
ceramic_KeyCode.KP_0 = 1073741922;
ceramic_KeyCode.KP_PERIOD = 1073741923;
ceramic_KeyCode.APPLICATION = 1073741925;
ceramic_KeyCode.POWER = 1073741926;
ceramic_KeyCode.KP_EQUALS = 1073741927;
ceramic_KeyCode.F13 = 1073741928;
ceramic_KeyCode.F14 = 1073741929;
ceramic_KeyCode.F15 = 1073741930;
ceramic_KeyCode.F16 = 1073741931;
ceramic_KeyCode.F17 = 1073741932;
ceramic_KeyCode.F18 = 1073741933;
ceramic_KeyCode.F19 = 1073741934;
ceramic_KeyCode.F20 = 1073741935;
ceramic_KeyCode.F21 = 1073741936;
ceramic_KeyCode.F22 = 1073741937;
ceramic_KeyCode.F23 = 1073741938;
ceramic_KeyCode.F24 = 1073741939;
ceramic_KeyCode.EXECUTE = 1073741940;
ceramic_KeyCode.HELP = 1073741941;
ceramic_KeyCode.MENU = 1073741942;
ceramic_KeyCode.SELECT = 1073741943;
ceramic_KeyCode.STOP = 1073741944;
ceramic_KeyCode.AGAIN = 1073741945;
ceramic_KeyCode.UNDO = 1073741946;
ceramic_KeyCode.CUT = 1073741947;
ceramic_KeyCode.COPY = 1073741948;
ceramic_KeyCode.PASTE = 1073741949;
ceramic_KeyCode.FIND = 1073741950;
ceramic_KeyCode.MUTE = 1073741951;
ceramic_KeyCode.VOLUMEUP = 1073741952;
ceramic_KeyCode.VOLUMEDOWN = 1073741953;
ceramic_KeyCode.KP_COMMA = 1073741957;
ceramic_KeyCode.KP_EQUALSAS400 = 1073741958;
ceramic_KeyCode.ALTERASE = 1073741977;
ceramic_KeyCode.SYSREQ = 1073741978;
ceramic_KeyCode.CANCEL = 1073741979;
ceramic_KeyCode.CLEAR = 1073741980;
ceramic_KeyCode.PRIOR = 1073741981;
ceramic_KeyCode.RETURN2 = 1073741982;
ceramic_KeyCode.SEPARATOR = 1073741983;
ceramic_KeyCode.OUT = 1073741984;
ceramic_KeyCode.OPER = 1073741985;
ceramic_KeyCode.CLEARAGAIN = 1073741986;
ceramic_KeyCode.CRSEL = 1073741987;
ceramic_KeyCode.EXSEL = 1073741988;
ceramic_KeyCode.KP_00 = 1073742000;
ceramic_KeyCode.KP_000 = 1073742001;
ceramic_KeyCode.THOUSANDSSEPARATOR = 1073742002;
ceramic_KeyCode.DECIMALSEPARATOR = 1073742003;
ceramic_KeyCode.CURRENCYUNIT = 1073742004;
ceramic_KeyCode.CURRENCYSUBUNIT = 1073742005;
ceramic_KeyCode.KP_LEFTPAREN = 1073742006;
ceramic_KeyCode.KP_RIGHTPAREN = 1073742007;
ceramic_KeyCode.KP_LEFTBRACE = 1073742008;
ceramic_KeyCode.KP_RIGHTBRACE = 1073742009;
ceramic_KeyCode.KP_TAB = 1073742010;
ceramic_KeyCode.KP_BACKSPACE = 1073742011;
ceramic_KeyCode.KP_A = 1073742012;
ceramic_KeyCode.KP_B = 1073742013;
ceramic_KeyCode.KP_C = 1073742014;
ceramic_KeyCode.KP_D = 1073742015;
ceramic_KeyCode.KP_E = 1073742016;
ceramic_KeyCode.KP_F = 1073742017;
ceramic_KeyCode.KP_XOR = 1073742018;
ceramic_KeyCode.KP_POWER = 1073742019;
ceramic_KeyCode.KP_PERCENT = 1073742020;
ceramic_KeyCode.KP_LESS = 1073742021;
ceramic_KeyCode.KP_GREATER = 1073742022;
ceramic_KeyCode.KP_AMPERSAND = 1073742023;
ceramic_KeyCode.KP_DBLAMPERSAND = 1073742024;
ceramic_KeyCode.KP_VERTICALBAR = 1073742025;
ceramic_KeyCode.KP_DBLVERTICALBAR = 1073742026;
ceramic_KeyCode.KP_COLON = 1073742027;
ceramic_KeyCode.KP_HASH = 1073742028;
ceramic_KeyCode.KP_SPACE = 1073742029;
ceramic_KeyCode.KP_AT = 1073742030;
ceramic_KeyCode.KP_EXCLAM = 1073742031;
ceramic_KeyCode.KP_MEMSTORE = 1073742032;
ceramic_KeyCode.KP_MEMRECALL = 1073742033;
ceramic_KeyCode.KP_MEMCLEAR = 1073742034;
ceramic_KeyCode.KP_MEMADD = 1073742035;
ceramic_KeyCode.KP_MEMSUBTRACT = 1073742036;
ceramic_KeyCode.KP_MEMMULTIPLY = 1073742037;
ceramic_KeyCode.KP_MEMDIVIDE = 1073742038;
ceramic_KeyCode.KP_PLUSMINUS = 1073742039;
ceramic_KeyCode.KP_CLEAR = 1073742040;
ceramic_KeyCode.KP_CLEARENTRY = 1073742041;
ceramic_KeyCode.KP_BINARY = 1073742042;
ceramic_KeyCode.KP_OCTAL = 1073742043;
ceramic_KeyCode.KP_DECIMAL = 1073742044;
ceramic_KeyCode.KP_HEXADECIMAL = 1073742045;
ceramic_KeyCode.LCTRL = 1073742048;
ceramic_KeyCode.LSHIFT = 1073742049;
ceramic_KeyCode.LALT = 1073742050;
ceramic_KeyCode.LMETA = 1073742051;
ceramic_KeyCode.RCTRL = 1073742052;
ceramic_KeyCode.RSHIFT = 1073742053;
ceramic_KeyCode.RALT = 1073742054;
ceramic_KeyCode.RMETA = 1073742055;
ceramic_KeyCode.MODE = 1073742081;
ceramic_KeyCode.AUDIONEXT = 1073742082;
ceramic_KeyCode.AUDIOPREV = 1073742083;
ceramic_KeyCode.AUDIOSTOP = 1073742084;
ceramic_KeyCode.AUDIOPLAY = 1073742085;
ceramic_KeyCode.AUDIOMUTE = 1073742086;
ceramic_KeyCode.MEDIASELECT = 1073742087;
ceramic_KeyCode.WWW = 1073742088;
ceramic_KeyCode.MAIL = 1073742089;
ceramic_KeyCode.CALCULATOR = 1073742090;
ceramic_KeyCode.COMPUTER = 1073742091;
ceramic_KeyCode.AC_SEARCH = 1073742092;
ceramic_KeyCode.AC_HOME = 1073742093;
ceramic_KeyCode.AC_BACK = 1073742094;
ceramic_KeyCode.AC_FORWARD = 1073742095;
ceramic_KeyCode.AC_STOP = 1073742096;
ceramic_KeyCode.AC_REFRESH = 1073742097;
ceramic_KeyCode.AC_BOOKMARKS = 1073742098;
ceramic_KeyCode.BRIGHTNESSDOWN = 1073742099;
ceramic_KeyCode.BRIGHTNESSUP = 1073742100;
ceramic_KeyCode.DISPLAYSWITCH = 1073742101;
ceramic_KeyCode.KBDILLUMTOGGLE = 1073742102;
ceramic_KeyCode.KBDILLUMDOWN = 1073742103;
ceramic_KeyCode.KBDILLUMUP = 1073742104;
ceramic_KeyCode.EJECT = 1073742105;
ceramic_KeyCode.SLEEP = 1073742106;
ceramic_Mesh.__meta__ = { obj : { editable : [{ highlight : { points : "vertices"}, helpers : [{ name : "Grid", method : "grid", params : [{ name : "Columns", type : "Int", value : 1, slider : [1,64]},{ name : "Rows", type : "Int", value : 1, slider : [1,64]}]},{ name : "Grid From Texture", method : "gridFromTexture", params : [{ name : "Columns", type : "Int", value : 1, slider : [1,64]},{ name : "Rows", type : "Int", value : 1, slider : [1,64]}]}]}]}, fields : { complexHit : { editable : null}, color : { editable : null}, vertices : { editable : null}, indices : { editable : null}, texture : { editable : null}, uvs : { editable : null}}};
ceramic_Mesh._matrix = ceramic_Visual._matrix;
ceramic_Mesh._fieldInfo = { vertices : { editable : [], type : "Array<Float>", index : 9}, complexHit : { editable : [], type : "Bool", index : 3}, uvs : { editable : [], type : "Array<Float>", index : 14}, color : { editable : [], type : "ceramic.Color", index : 6}, indices : { editable : [], type : "Array<Int>", index : 10}, texture : { editable : [], type : "ceramic.Texture", index : 12}};
polyline_Stroke.NUMBER_NONE = -9999999999.0;
polyline_Stroke.MATH_TWO_PI = 6.28318530718;
polyline_Stroke.MATH_HALF_PI = 1.57079632679;
polyline_Stroke.MATH_PI_AND_HALF = 4.71238898038;
polyline_Stroke.miterUtils = new polyline_MiterUtils();
ceramic_Line.__meta__ = { obj : { editable : [{ implicitSize : true, highlight : { points : "points", minPoints : 2, maxPoints : 999999999}, disable : ["texture","vertices","indices","uvs"]}]}, fields : { points : { editable : null}, miterLimit : { editable : null}, thickness : { editable : [{ slider : [1,64]}]}, join : { editable : null}, cap : { editable : null}, loop : { editable : null}, autoComputeSize : { editable : [{ label : "Auto Size"}]}}};
ceramic_Line._stroke = new polyline_Stroke();
ceramic_Line._fieldInfo = { points : { editable : [], type : "Array<Float>", index : 1}, cap : { editable : [], type : "ceramic.LineCap", index : 9}, join : { editable : [], type : "ceramic.LineJoin", index : 7}, thickness : { editable : [{ slider : [1,64]}], type : "Float", index : 5}, autoComputeSize : { editable : [{ label : "Auto Size"}], type : "Bool", index : 13}, miterLimit : { editable : [], type : "Float", index : 3}, loop : { editable : [], type : "Bool", index : 11}};
ceramic_Logger._hasElectronRunner = false;
ceramic_Logger.didInitOnce = false;
ceramic_PlatformSpecific.testedElectronAvailability = false;
ceramic_Texture._nextIndex = 1;
ceramic_ScanCode.MASK = 1073741824;
ceramic_ScanCode.UNKNOWN = 0;
ceramic_ScanCode.KEY_A = 4;
ceramic_ScanCode.KEY_B = 5;
ceramic_ScanCode.KEY_C = 6;
ceramic_ScanCode.KEY_D = 7;
ceramic_ScanCode.KEY_E = 8;
ceramic_ScanCode.KEY_F = 9;
ceramic_ScanCode.KEY_G = 10;
ceramic_ScanCode.KEY_H = 11;
ceramic_ScanCode.KEY_I = 12;
ceramic_ScanCode.KEY_J = 13;
ceramic_ScanCode.KEY_K = 14;
ceramic_ScanCode.KEY_L = 15;
ceramic_ScanCode.KEY_M = 16;
ceramic_ScanCode.KEY_N = 17;
ceramic_ScanCode.KEY_O = 18;
ceramic_ScanCode.KEY_P = 19;
ceramic_ScanCode.KEY_Q = 20;
ceramic_ScanCode.KEY_R = 21;
ceramic_ScanCode.KEY_S = 22;
ceramic_ScanCode.KEY_T = 23;
ceramic_ScanCode.KEY_U = 24;
ceramic_ScanCode.KEY_V = 25;
ceramic_ScanCode.KEY_W = 26;
ceramic_ScanCode.KEY_X = 27;
ceramic_ScanCode.KEY_Y = 28;
ceramic_ScanCode.KEY_Z = 29;
ceramic_ScanCode.KEY_1 = 30;
ceramic_ScanCode.KEY_2 = 31;
ceramic_ScanCode.KEY_3 = 32;
ceramic_ScanCode.KEY_4 = 33;
ceramic_ScanCode.KEY_5 = 34;
ceramic_ScanCode.KEY_6 = 35;
ceramic_ScanCode.KEY_7 = 36;
ceramic_ScanCode.KEY_8 = 37;
ceramic_ScanCode.KEY_9 = 38;
ceramic_ScanCode.KEY_0 = 39;
ceramic_ScanCode.ENTER = 40;
ceramic_ScanCode.ESCAPE = 41;
ceramic_ScanCode.BACKSPACE = 42;
ceramic_ScanCode.TAB = 43;
ceramic_ScanCode.SPACE = 44;
ceramic_ScanCode.MINUS = 45;
ceramic_ScanCode.EQUALS = 46;
ceramic_ScanCode.LEFTBRACKET = 47;
ceramic_ScanCode.RIGHTBRACKET = 48;
ceramic_ScanCode.BACKSLASH = 49;
ceramic_ScanCode.NONUSHASH = 50;
ceramic_ScanCode.SEMICOLON = 51;
ceramic_ScanCode.APOSTROPHE = 52;
ceramic_ScanCode.GRAVE = 53;
ceramic_ScanCode.COMMA = 54;
ceramic_ScanCode.PERIOD = 55;
ceramic_ScanCode.SLASH = 56;
ceramic_ScanCode.CAPSLOCK = 57;
ceramic_ScanCode.F1 = 58;
ceramic_ScanCode.F2 = 59;
ceramic_ScanCode.F3 = 60;
ceramic_ScanCode.F4 = 61;
ceramic_ScanCode.F5 = 62;
ceramic_ScanCode.F6 = 63;
ceramic_ScanCode.F7 = 64;
ceramic_ScanCode.F8 = 65;
ceramic_ScanCode.F9 = 66;
ceramic_ScanCode.F10 = 67;
ceramic_ScanCode.F11 = 68;
ceramic_ScanCode.F12 = 69;
ceramic_ScanCode.PRINTSCREEN = 70;
ceramic_ScanCode.SCROLLLOCK = 71;
ceramic_ScanCode.PAUSE = 72;
ceramic_ScanCode.INSERT = 73;
ceramic_ScanCode.HOME = 74;
ceramic_ScanCode.PAGEUP = 75;
ceramic_ScanCode.DELETE = 76;
ceramic_ScanCode.END = 77;
ceramic_ScanCode.PAGEDOWN = 78;
ceramic_ScanCode.RIGHT = 79;
ceramic_ScanCode.LEFT = 80;
ceramic_ScanCode.DOWN = 81;
ceramic_ScanCode.UP = 82;
ceramic_ScanCode.NUMLOCKCLEAR = 83;
ceramic_ScanCode.KP_DIVIDE = 84;
ceramic_ScanCode.KP_MULTIPLY = 85;
ceramic_ScanCode.KP_MINUS = 86;
ceramic_ScanCode.KP_PLUS = 87;
ceramic_ScanCode.KP_ENTER = 88;
ceramic_ScanCode.KP_1 = 89;
ceramic_ScanCode.KP_2 = 90;
ceramic_ScanCode.KP_3 = 91;
ceramic_ScanCode.KP_4 = 92;
ceramic_ScanCode.KP_5 = 93;
ceramic_ScanCode.KP_6 = 94;
ceramic_ScanCode.KP_7 = 95;
ceramic_ScanCode.KP_8 = 96;
ceramic_ScanCode.KP_9 = 97;
ceramic_ScanCode.KP_0 = 98;
ceramic_ScanCode.KP_PERIOD = 99;
ceramic_ScanCode.NONUSBACKSLASH = 100;
ceramic_ScanCode.APPLICATION = 101;
ceramic_ScanCode.POWER = 102;
ceramic_ScanCode.KP_EQUALS = 103;
ceramic_ScanCode.F13 = 104;
ceramic_ScanCode.F14 = 105;
ceramic_ScanCode.F15 = 106;
ceramic_ScanCode.F16 = 107;
ceramic_ScanCode.F17 = 108;
ceramic_ScanCode.F18 = 109;
ceramic_ScanCode.F19 = 110;
ceramic_ScanCode.F20 = 111;
ceramic_ScanCode.F21 = 112;
ceramic_ScanCode.F22 = 113;
ceramic_ScanCode.F23 = 114;
ceramic_ScanCode.F24 = 115;
ceramic_ScanCode.EXECUTE = 116;
ceramic_ScanCode.HELP = 117;
ceramic_ScanCode.MENU = 118;
ceramic_ScanCode.SELECT = 119;
ceramic_ScanCode.STOP = 120;
ceramic_ScanCode.AGAIN = 121;
ceramic_ScanCode.UNDO = 122;
ceramic_ScanCode.CUT = 123;
ceramic_ScanCode.COPY = 124;
ceramic_ScanCode.PASTE = 125;
ceramic_ScanCode.FIND = 126;
ceramic_ScanCode.MUTE = 127;
ceramic_ScanCode.VOLUMEUP = 128;
ceramic_ScanCode.VOLUMEDOWN = 129;
ceramic_ScanCode.KP_COMMA = 133;
ceramic_ScanCode.KP_EQUALSAS400 = 134;
ceramic_ScanCode.INTERNATIONAL1 = 135;
ceramic_ScanCode.INTERNATIONAL2 = 136;
ceramic_ScanCode.INTERNATIONAL3 = 137;
ceramic_ScanCode.INTERNATIONAL4 = 138;
ceramic_ScanCode.INTERNATIONAL5 = 139;
ceramic_ScanCode.INTERNATIONAL6 = 140;
ceramic_ScanCode.INTERNATIONAL7 = 141;
ceramic_ScanCode.INTERNATIONAL8 = 142;
ceramic_ScanCode.INTERNATIONAL9 = 143;
ceramic_ScanCode.LANG1 = 144;
ceramic_ScanCode.LANG2 = 145;
ceramic_ScanCode.LANG3 = 146;
ceramic_ScanCode.LANG4 = 147;
ceramic_ScanCode.LANG5 = 148;
ceramic_ScanCode.LANG6 = 149;
ceramic_ScanCode.LANG7 = 150;
ceramic_ScanCode.LANG8 = 151;
ceramic_ScanCode.LANG9 = 152;
ceramic_ScanCode.ALTERASE = 153;
ceramic_ScanCode.SYSREQ = 154;
ceramic_ScanCode.CANCEL = 155;
ceramic_ScanCode.CLEAR = 156;
ceramic_ScanCode.PRIOR = 157;
ceramic_ScanCode.RETURN2 = 158;
ceramic_ScanCode.SEPARATOR = 159;
ceramic_ScanCode.OUT = 160;
ceramic_ScanCode.OPER = 161;
ceramic_ScanCode.CLEARAGAIN = 162;
ceramic_ScanCode.CRSEL = 163;
ceramic_ScanCode.EXSEL = 164;
ceramic_ScanCode.KP_00 = 176;
ceramic_ScanCode.KP_000 = 177;
ceramic_ScanCode.THOUSANDSSEPARATOR = 178;
ceramic_ScanCode.DECIMALSEPARATOR = 179;
ceramic_ScanCode.CURRENCYUNIT = 180;
ceramic_ScanCode.CURRENCYSUBUNIT = 181;
ceramic_ScanCode.KP_LEFTPAREN = 182;
ceramic_ScanCode.KP_RIGHTPAREN = 183;
ceramic_ScanCode.KP_LEFTBRACE = 184;
ceramic_ScanCode.KP_RIGHTBRACE = 185;
ceramic_ScanCode.KP_TAB = 186;
ceramic_ScanCode.KP_BACKSPACE = 187;
ceramic_ScanCode.KP_A = 188;
ceramic_ScanCode.KP_B = 189;
ceramic_ScanCode.KP_C = 190;
ceramic_ScanCode.KP_D = 191;
ceramic_ScanCode.KP_E = 192;
ceramic_ScanCode.KP_F = 193;
ceramic_ScanCode.KP_XOR = 194;
ceramic_ScanCode.KP_POWER = 195;
ceramic_ScanCode.KP_PERCENT = 196;
ceramic_ScanCode.KP_LESS = 197;
ceramic_ScanCode.KP_GREATER = 198;
ceramic_ScanCode.KP_AMPERSAND = 199;
ceramic_ScanCode.KP_DBLAMPERSAND = 200;
ceramic_ScanCode.KP_VERTICALBAR = 201;
ceramic_ScanCode.KP_DBLVERTICALBAR = 202;
ceramic_ScanCode.KP_COLON = 203;
ceramic_ScanCode.KP_HASH = 204;
ceramic_ScanCode.KP_SPACE = 205;
ceramic_ScanCode.KP_AT = 206;
ceramic_ScanCode.KP_EXCLAM = 207;
ceramic_ScanCode.KP_MEMSTORE = 208;
ceramic_ScanCode.KP_MEMRECALL = 209;
ceramic_ScanCode.KP_MEMCLEAR = 210;
ceramic_ScanCode.KP_MEMADD = 211;
ceramic_ScanCode.KP_MEMSUBTRACT = 212;
ceramic_ScanCode.KP_MEMMULTIPLY = 213;
ceramic_ScanCode.KP_MEMDIVIDE = 214;
ceramic_ScanCode.KP_PLUSMINUS = 215;
ceramic_ScanCode.KP_CLEAR = 216;
ceramic_ScanCode.KP_CLEARENTRY = 217;
ceramic_ScanCode.KP_BINARY = 218;
ceramic_ScanCode.KP_OCTAL = 219;
ceramic_ScanCode.KP_DECIMAL = 220;
ceramic_ScanCode.KP_HEXADECIMAL = 221;
ceramic_ScanCode.LCTRL = 224;
ceramic_ScanCode.LSHIFT = 225;
ceramic_ScanCode.LALT = 226;
ceramic_ScanCode.LMETA = 227;
ceramic_ScanCode.RCTRL = 228;
ceramic_ScanCode.RSHIFT = 229;
ceramic_ScanCode.RALT = 230;
ceramic_ScanCode.RMETA = 231;
ceramic_ScanCode.MODE = 257;
ceramic_ScanCode.AUDIONEXT = 258;
ceramic_ScanCode.AUDIOPREV = 259;
ceramic_ScanCode.AUDIOSTOP = 260;
ceramic_ScanCode.AUDIOPLAY = 261;
ceramic_ScanCode.AUDIOMUTE = 262;
ceramic_ScanCode.MEDIASELECT = 263;
ceramic_ScanCode.WWW = 264;
ceramic_ScanCode.MAIL = 265;
ceramic_ScanCode.CALCULATOR = 266;
ceramic_ScanCode.COMPUTER = 267;
ceramic_ScanCode.AC_SEARCH = 268;
ceramic_ScanCode.AC_HOME = 269;
ceramic_ScanCode.AC_BACK = 270;
ceramic_ScanCode.AC_FORWARD = 271;
ceramic_ScanCode.AC_STOP = 272;
ceramic_ScanCode.AC_REFRESH = 273;
ceramic_ScanCode.AC_BOOKMARKS = 274;
ceramic_ScanCode.BRIGHTNESSDOWN = 275;
ceramic_ScanCode.BRIGHTNESSUP = 276;
ceramic_ScanCode.DISPLAYSWITCH = 277;
ceramic_ScanCode.KBDILLUMTOGGLE = 278;
ceramic_ScanCode.KBDILLUMDOWN = 279;
ceramic_ScanCode.KBDILLUMUP = 280;
ceramic_ScanCode.EJECT = 281;
ceramic_ScanCode.SLEEP = 282;
ceramic_ScanCode.APP1 = 283;
ceramic_ScanCode.APP2 = 284;
ceramic_ScanCode.scanCodeNames = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
ceramic_SceneStatus.NONE = 0;
ceramic_SceneStatus.PRELOAD = 1;
ceramic_SceneStatus.LOAD = 2;
ceramic_SceneStatus.CREATE = 3;
ceramic_SceneStatus.FADE_IN = 4;
ceramic_SceneStatus.READY = 5;
ceramic_SceneStatus.FADE_OUT = 6;
ceramic_SceneStatus.DISABLED = 7;
ceramic_SceneSystem.lazyShared = true;
ceramic_Screen.__meta__ = { fields : { unobservedFocusedVisual : { observe : null}, unobservedTexturesDensity : { observe : null}}};
ceramic_Settings.__meta__ = { fields : { unobservedTargetWidth : { observe : null}, unobservedTargetHeight : { observe : null}, unobservedWindowWidth : { observe : null}, unobservedWindowHeight : { observe : null}, unobservedTargetDensity : { observe : null}, unobservedBackground : { observe : null}, unobservedScaling : { observe : null}, unobservedTitle : { observe : null}, unobservedFullscreen : { observe : null}, unobservedTargetFps : { observe : null}, unobservedMaxDelta : { observe : null}, unobservedOverrideDelta : { observe : null}, unobservedPreventDefaultMouseWheel : { observe : null}, unobservedPreventDefaultTouches : { observe : null}}};
ceramic_ShaderAsset.__meta__ = { fields : { unobservedShader : { observe : null}}};
ceramic_SoundAsset.__meta__ = { fields : { unobservedSound : { observe : null}}};
ceramic_Text.__meta__ = { obj : { editable : [{ implicitSize : true}]}, fields : { color : { editable : null}, content : { editable : [{ multiline : true}]}, pointSize : { editable : [{ slider : [6,600]}]}, lineHeight : { editable : [{ slider : [0,10]}]}, letterSpacing : { editable : [{ slider : [-100,100]}]}, font : { editable : null}, align : { editable : null}, fitWidth : { editable : null}, maxLineDiff : { editable : null}}};
ceramic_Text._fieldInfo = { fitWidth : { editable : [], type : "Float", index : 38}, letterSpacing : { editable : [{ slider : [-100,100]}], type : "Float", index : 20}, color : { editable : [], type : "ceramic.Color", index : 12}, content : { editable : [{ multiline : true}], type : "String", index : 14}, align : { editable : [], type : "ceramic.TextAlign", index : 36}, font : { editable : [], type : "ceramic.BitmapFont", index : 22}, maxLineDiff : { editable : [], type : "Float", index : 40}, pointSize : { editable : [{ slider : [6,600]}], type : "Float", index : 16}, lineHeight : { editable : [{ slider : [0,10]}], type : "Float", index : 18}};
ceramic_TextAsset.__meta__ = { fields : { unobservedText : { observe : null}}};
ceramic_TextureAtlasPacker.MIN_TEXTURE_SIZE = 32;
ceramic_TextureAtlasPacker.MAX_TEXTURE_SIZE = 2048;
ceramic_TextureAtlasPage.__meta__ = { fields : { unobservedName : { observe : null}, unobservedWidth : { observe : null}, unobservedHeight : { observe : null}, unobservedFilter : { observe : null}, unobservedTexture : { observe : null}}};
ceramic_TilemapAsset.__meta__ = { fields : { unobservedTmxMap : { observe : null}, unobservedTilemapData : { observe : null}}};
ceramic_TilemapData.__meta__ = { fields : { unobservedName : { serialize : null}, unobservedOrientation : { serialize : null}, unobservedWidth : { serialize : null}, unobservedHeight : { serialize : null}, unobservedRenderOrder : { serialize : null}, unobservedHexSideLength : { serialize : null}, unobservedStaggerAxis : { serialize : null}, unobservedStaggerIndex : { serialize : null}, unobservedBackgroundColor : { serialize : null}, unobservedTilesets : { serialize : null}, unobservedLayers : { serialize : null}}};
ceramic_TilemapLayerData.__meta__ = { fields : { unobservedName : { serialize : null}, unobservedX : { serialize : null}, unobservedY : { serialize : null}, unobservedColumns : { serialize : null}, unobservedRows : { serialize : null}, unobservedOpacity : { serialize : null}, unobservedVisible : { serialize : null}, unobservedOffsetX : { serialize : null}, unobservedOffsetY : { serialize : null}, unobservedExplicitDepth : { serialize : null}, unobservedBlending : { serialize : null}, unobservedColor : { serialize : null}, unobservedExtraBlending : { serialize : null}, unobservedExtraOpacity : { serialize : null}, unobservedTiles : { serialize : null}, unobservedComputedTiles : { observe : null}, unobservedShouldRenderTiles : { serialize : null}, unobservedTileWidth : { serialize : null}, unobservedTileHeight : { serialize : null}}};
ceramic_TilemapTile.HORIZONTAL_FLIP = -2147483648;
ceramic_TilemapTile.VERTICAL_FLIP = 1073741824;
ceramic_TilemapTile.DIAGONAL_FLIP = 536870912;
ceramic_TilemapTile.FLAGS_MASK = 536870911;
ceramic_TilemapTile.FLAGS_ONLY = -536870912;
ceramic_Tileset.__meta__ = { fields : { unobservedFirstGid : { serialize : null}, unobservedName : { serialize : null}, unobservedTileWidth : { serialize : null}, unobservedTileHeight : { serialize : null}, unobservedSpacing : { serialize : null}, unobservedMargin : { serialize : null}, unobservedTileCount : { serialize : null}, unobservedColumns : { serialize : null}, unobservedImage : { serialize : null}, unobservedGridOrientation : { serialize : null}, unobservedGridCellWidth : { serialize : null}, unobservedGridCellHeight : { serialize : null}, unobservedSlopes : { serialize : null}}};
ceramic_TilesetImage.__meta__ = { fields : { unobservedWidth : { serialize : null}, unobservedHeight : { serialize : null}, unobservedSource : { serialize : null}}};
ceramic_Timer.callbacks = [];
ceramic_Timer.next = 999999999;
ceramic_Timer.now = 0;
ceramic_Timer.startTimestamp = new Date().getTime() / 1000.0;
ceramic_Tween._tweens = [];
ceramic_Tween._iteratedTweens = [];
ceramic__$Tween_TweenEasingFunction.k = 0;
ceramic_Utils.RE_ASCII_CHAR = new EReg("^[a-zA-Z0-9]$","");
ceramic_Utils._nextUniqueIntCursor = 0;
ceramic_Utils._nextUniqueInt0 = Math.random() * 2147483646 | 0;
ceramic_Utils._nextUniqueInt1 = new Date().getTime() * 0.0001 | 0;
ceramic_Utils._nextUniqueInt2 = Math.random() * 2147483646 | 0;
ceramic_Utils._nextUniqueInt3 = Math.random() * 2147483646 | 0;
ceramic_WatchDirectory.didTryRequireChokidar = false;
clay_Immediate.immediateCallbacks = [];
clay_Immediate.immediateCallbacksCapacity = 0;
clay_Immediate.immediateCallbacksLen = 0;
clay_KeyCode.UNKNOWN = 0;
clay_KeyCode.ENTER = 13;
clay_KeyCode.ESCAPE = 27;
clay_KeyCode.BACKSPACE = 8;
clay_KeyCode.TAB = 9;
clay_KeyCode.SPACE = 32;
clay_KeyCode.EXCLAIM = 33;
clay_KeyCode.QUOTEDBL = 34;
clay_KeyCode.HASH = 35;
clay_KeyCode.PERCENT = 37;
clay_KeyCode.DOLLAR = 36;
clay_KeyCode.AMPERSAND = 38;
clay_KeyCode.QUOTE = 39;
clay_KeyCode.LEFTPAREN = 40;
clay_KeyCode.RIGHTPAREN = 41;
clay_KeyCode.ASTERISK = 42;
clay_KeyCode.PLUS = 43;
clay_KeyCode.COMMA = 44;
clay_KeyCode.MINUS = 45;
clay_KeyCode.PERIOD = 46;
clay_KeyCode.SLASH = 47;
clay_KeyCode.KEY_0 = 48;
clay_KeyCode.KEY_1 = 49;
clay_KeyCode.KEY_2 = 50;
clay_KeyCode.KEY_3 = 51;
clay_KeyCode.KEY_4 = 52;
clay_KeyCode.KEY_5 = 53;
clay_KeyCode.KEY_6 = 54;
clay_KeyCode.KEY_7 = 55;
clay_KeyCode.KEY_8 = 56;
clay_KeyCode.KEY_9 = 57;
clay_KeyCode.COLON = 58;
clay_KeyCode.SEMICOLON = 59;
clay_KeyCode.LESS = 60;
clay_KeyCode.EQUALS = 61;
clay_KeyCode.GREATER = 62;
clay_KeyCode.QUESTION = 63;
clay_KeyCode.AT = 64;
clay_KeyCode.LEFTBRACKET = 91;
clay_KeyCode.BACKSLASH = 92;
clay_KeyCode.RIGHTBRACKET = 93;
clay_KeyCode.CARET = 94;
clay_KeyCode.UNDERSCORE = 95;
clay_KeyCode.BACKQUOTE = 96;
clay_KeyCode.KEY_A = 97;
clay_KeyCode.KEY_B = 98;
clay_KeyCode.KEY_C = 99;
clay_KeyCode.KEY_D = 100;
clay_KeyCode.KEY_E = 101;
clay_KeyCode.KEY_F = 102;
clay_KeyCode.KEY_G = 103;
clay_KeyCode.KEY_H = 104;
clay_KeyCode.KEY_I = 105;
clay_KeyCode.KEY_J = 106;
clay_KeyCode.KEY_K = 107;
clay_KeyCode.KEY_L = 108;
clay_KeyCode.KEY_M = 109;
clay_KeyCode.KEY_N = 110;
clay_KeyCode.KEY_O = 111;
clay_KeyCode.KEY_P = 112;
clay_KeyCode.KEY_Q = 113;
clay_KeyCode.KEY_R = 114;
clay_KeyCode.KEY_S = 115;
clay_KeyCode.KEY_T = 116;
clay_KeyCode.KEY_U = 117;
clay_KeyCode.KEY_V = 118;
clay_KeyCode.KEY_W = 119;
clay_KeyCode.KEY_X = 120;
clay_KeyCode.KEY_Y = 121;
clay_KeyCode.KEY_Z = 122;
clay_KeyCode.CAPSLOCK = 1073741881;
clay_KeyCode.F1 = 1073741882;
clay_KeyCode.F2 = 1073741883;
clay_KeyCode.F3 = 1073741884;
clay_KeyCode.F4 = 1073741885;
clay_KeyCode.F5 = 1073741886;
clay_KeyCode.F6 = 1073741887;
clay_KeyCode.F7 = 1073741888;
clay_KeyCode.F8 = 1073741889;
clay_KeyCode.F9 = 1073741890;
clay_KeyCode.F10 = 1073741891;
clay_KeyCode.F11 = 1073741892;
clay_KeyCode.F12 = 1073741893;
clay_KeyCode.PRINTSCREEN = 1073741894;
clay_KeyCode.SCROLLLOCK = 1073741895;
clay_KeyCode.PAUSE = 1073741896;
clay_KeyCode.INSERT = 1073741897;
clay_KeyCode.HOME = 1073741898;
clay_KeyCode.PAGEUP = 1073741899;
clay_KeyCode.DELETE = 127;
clay_KeyCode.END = 1073741901;
clay_KeyCode.PAGEDOWN = 1073741902;
clay_KeyCode.RIGHT = 1073741903;
clay_KeyCode.LEFT = 1073741904;
clay_KeyCode.DOWN = 1073741905;
clay_KeyCode.UP = 1073741906;
clay_KeyCode.NUMLOCKCLEAR = 1073741907;
clay_KeyCode.KP_DIVIDE = 1073741908;
clay_KeyCode.KP_MULTIPLY = 1073741909;
clay_KeyCode.KP_MINUS = 1073741910;
clay_KeyCode.KP_PLUS = 1073741911;
clay_KeyCode.KP_ENTER = 1073741912;
clay_KeyCode.KP_1 = 1073741913;
clay_KeyCode.KP_2 = 1073741914;
clay_KeyCode.KP_3 = 1073741915;
clay_KeyCode.KP_4 = 1073741916;
clay_KeyCode.KP_5 = 1073741917;
clay_KeyCode.KP_6 = 1073741918;
clay_KeyCode.KP_7 = 1073741919;
clay_KeyCode.KP_8 = 1073741920;
clay_KeyCode.KP_9 = 1073741921;
clay_KeyCode.KP_0 = 1073741922;
clay_KeyCode.KP_PERIOD = 1073741923;
clay_KeyCode.APPLICATION = 1073741925;
clay_KeyCode.POWER = 1073741926;
clay_KeyCode.KP_EQUALS = 1073741927;
clay_KeyCode.F13 = 1073741928;
clay_KeyCode.F14 = 1073741929;
clay_KeyCode.F15 = 1073741930;
clay_KeyCode.F16 = 1073741931;
clay_KeyCode.F17 = 1073741932;
clay_KeyCode.F18 = 1073741933;
clay_KeyCode.F19 = 1073741934;
clay_KeyCode.F20 = 1073741935;
clay_KeyCode.F21 = 1073741936;
clay_KeyCode.F22 = 1073741937;
clay_KeyCode.F23 = 1073741938;
clay_KeyCode.F24 = 1073741939;
clay_KeyCode.EXECUTE = 1073741940;
clay_KeyCode.HELP = 1073741941;
clay_KeyCode.MENU = 1073741942;
clay_KeyCode.SELECT = 1073741943;
clay_KeyCode.STOP = 1073741944;
clay_KeyCode.AGAIN = 1073741945;
clay_KeyCode.UNDO = 1073741946;
clay_KeyCode.CUT = 1073741947;
clay_KeyCode.COPY = 1073741948;
clay_KeyCode.PASTE = 1073741949;
clay_KeyCode.FIND = 1073741950;
clay_KeyCode.MUTE = 1073741951;
clay_KeyCode.VOLUMEUP = 1073741952;
clay_KeyCode.VOLUMEDOWN = 1073741953;
clay_KeyCode.KP_COMMA = 1073741957;
clay_KeyCode.KP_EQUALSAS400 = 1073741958;
clay_KeyCode.ALTERASE = 1073741977;
clay_KeyCode.SYSREQ = 1073741978;
clay_KeyCode.CANCEL = 1073741979;
clay_KeyCode.CLEAR = 1073741980;
clay_KeyCode.PRIOR = 1073741981;
clay_KeyCode.RETURN2 = 1073741982;
clay_KeyCode.SEPARATOR = 1073741983;
clay_KeyCode.OUT = 1073741984;
clay_KeyCode.OPER = 1073741985;
clay_KeyCode.CLEARAGAIN = 1073741986;
clay_KeyCode.CRSEL = 1073741987;
clay_KeyCode.EXSEL = 1073741988;
clay_KeyCode.KP_00 = 1073742000;
clay_KeyCode.KP_000 = 1073742001;
clay_KeyCode.THOUSANDSSEPARATOR = 1073742002;
clay_KeyCode.DECIMALSEPARATOR = 1073742003;
clay_KeyCode.CURRENCYUNIT = 1073742004;
clay_KeyCode.CURRENCYSUBUNIT = 1073742005;
clay_KeyCode.KP_LEFTPAREN = 1073742006;
clay_KeyCode.KP_RIGHTPAREN = 1073742007;
clay_KeyCode.KP_LEFTBRACE = 1073742008;
clay_KeyCode.KP_RIGHTBRACE = 1073742009;
clay_KeyCode.KP_TAB = 1073742010;
clay_KeyCode.KP_BACKSPACE = 1073742011;
clay_KeyCode.KP_A = 1073742012;
clay_KeyCode.KP_B = 1073742013;
clay_KeyCode.KP_C = 1073742014;
clay_KeyCode.KP_D = 1073742015;
clay_KeyCode.KP_E = 1073742016;
clay_KeyCode.KP_F = 1073742017;
clay_KeyCode.KP_XOR = 1073742018;
clay_KeyCode.KP_POWER = 1073742019;
clay_KeyCode.KP_PERCENT = 1073742020;
clay_KeyCode.KP_LESS = 1073742021;
clay_KeyCode.KP_GREATER = 1073742022;
clay_KeyCode.KP_AMPERSAND = 1073742023;
clay_KeyCode.KP_DBLAMPERSAND = 1073742024;
clay_KeyCode.KP_VERTICALBAR = 1073742025;
clay_KeyCode.KP_DBLVERTICALBAR = 1073742026;
clay_KeyCode.KP_COLON = 1073742027;
clay_KeyCode.KP_HASH = 1073742028;
clay_KeyCode.KP_SPACE = 1073742029;
clay_KeyCode.KP_AT = 1073742030;
clay_KeyCode.KP_EXCLAM = 1073742031;
clay_KeyCode.KP_MEMSTORE = 1073742032;
clay_KeyCode.KP_MEMRECALL = 1073742033;
clay_KeyCode.KP_MEMCLEAR = 1073742034;
clay_KeyCode.KP_MEMADD = 1073742035;
clay_KeyCode.KP_MEMSUBTRACT = 1073742036;
clay_KeyCode.KP_MEMMULTIPLY = 1073742037;
clay_KeyCode.KP_MEMDIVIDE = 1073742038;
clay_KeyCode.KP_PLUSMINUS = 1073742039;
clay_KeyCode.KP_CLEAR = 1073742040;
clay_KeyCode.KP_CLEARENTRY = 1073742041;
clay_KeyCode.KP_BINARY = 1073742042;
clay_KeyCode.KP_OCTAL = 1073742043;
clay_KeyCode.KP_DECIMAL = 1073742044;
clay_KeyCode.KP_HEXADECIMAL = 1073742045;
clay_KeyCode.LCTRL = 1073742048;
clay_KeyCode.LSHIFT = 1073742049;
clay_KeyCode.LALT = 1073742050;
clay_KeyCode.LMETA = 1073742051;
clay_KeyCode.RCTRL = 1073742052;
clay_KeyCode.RSHIFT = 1073742053;
clay_KeyCode.RALT = 1073742054;
clay_KeyCode.RMETA = 1073742055;
clay_KeyCode.MODE = 1073742081;
clay_KeyCode.AUDIONEXT = 1073742082;
clay_KeyCode.AUDIOPREV = 1073742083;
clay_KeyCode.AUDIOSTOP = 1073742084;
clay_KeyCode.AUDIOPLAY = 1073742085;
clay_KeyCode.AUDIOMUTE = 1073742086;
clay_KeyCode.MEDIASELECT = 1073742087;
clay_KeyCode.WWW = 1073742088;
clay_KeyCode.MAIL = 1073742089;
clay_KeyCode.CALCULATOR = 1073742090;
clay_KeyCode.COMPUTER = 1073742091;
clay_KeyCode.AC_SEARCH = 1073742092;
clay_KeyCode.AC_HOME = 1073742093;
clay_KeyCode.AC_BACK = 1073742094;
clay_KeyCode.AC_FORWARD = 1073742095;
clay_KeyCode.AC_STOP = 1073742096;
clay_KeyCode.AC_REFRESH = 1073742097;
clay_KeyCode.AC_BOOKMARKS = 1073742098;
clay_KeyCode.BRIGHTNESSDOWN = 1073742099;
clay_KeyCode.BRIGHTNESSUP = 1073742100;
clay_KeyCode.DISPLAYSWITCH = 1073742101;
clay_KeyCode.KBDILLUMTOGGLE = 1073742102;
clay_KeyCode.KBDILLUMDOWN = 1073742103;
clay_KeyCode.KBDILLUMUP = 1073742104;
clay_KeyCode.EJECT = 1073742105;
clay_KeyCode.SLEEP = 1073742106;
clay_ScanCode.MASK = 1073741824;
clay_ScanCode.UNKNOWN = 0;
clay_ScanCode.KEY_A = 4;
clay_ScanCode.KEY_B = 5;
clay_ScanCode.KEY_C = 6;
clay_ScanCode.KEY_D = 7;
clay_ScanCode.KEY_E = 8;
clay_ScanCode.KEY_F = 9;
clay_ScanCode.KEY_G = 10;
clay_ScanCode.KEY_H = 11;
clay_ScanCode.KEY_I = 12;
clay_ScanCode.KEY_J = 13;
clay_ScanCode.KEY_K = 14;
clay_ScanCode.KEY_L = 15;
clay_ScanCode.KEY_M = 16;
clay_ScanCode.KEY_N = 17;
clay_ScanCode.KEY_O = 18;
clay_ScanCode.KEY_P = 19;
clay_ScanCode.KEY_Q = 20;
clay_ScanCode.KEY_R = 21;
clay_ScanCode.KEY_S = 22;
clay_ScanCode.KEY_T = 23;
clay_ScanCode.KEY_U = 24;
clay_ScanCode.KEY_V = 25;
clay_ScanCode.KEY_W = 26;
clay_ScanCode.KEY_X = 27;
clay_ScanCode.KEY_Y = 28;
clay_ScanCode.KEY_Z = 29;
clay_ScanCode.KEY_1 = 30;
clay_ScanCode.KEY_2 = 31;
clay_ScanCode.KEY_3 = 32;
clay_ScanCode.KEY_4 = 33;
clay_ScanCode.KEY_5 = 34;
clay_ScanCode.KEY_6 = 35;
clay_ScanCode.KEY_7 = 36;
clay_ScanCode.KEY_8 = 37;
clay_ScanCode.KEY_9 = 38;
clay_ScanCode.KEY_0 = 39;
clay_ScanCode.ENTER = 40;
clay_ScanCode.ESCAPE = 41;
clay_ScanCode.BACKSPACE = 42;
clay_ScanCode.TAB = 43;
clay_ScanCode.SPACE = 44;
clay_ScanCode.MINUS = 45;
clay_ScanCode.EQUALS = 46;
clay_ScanCode.LEFTBRACKET = 47;
clay_ScanCode.RIGHTBRACKET = 48;
clay_ScanCode.BACKSLASH = 49;
clay_ScanCode.NONUSHASH = 50;
clay_ScanCode.SEMICOLON = 51;
clay_ScanCode.APOSTROPHE = 52;
clay_ScanCode.GRAVE = 53;
clay_ScanCode.COMMA = 54;
clay_ScanCode.PERIOD = 55;
clay_ScanCode.SLASH = 56;
clay_ScanCode.CAPSLOCK = 57;
clay_ScanCode.F1 = 58;
clay_ScanCode.F2 = 59;
clay_ScanCode.F3 = 60;
clay_ScanCode.F4 = 61;
clay_ScanCode.F5 = 62;
clay_ScanCode.F6 = 63;
clay_ScanCode.F7 = 64;
clay_ScanCode.F8 = 65;
clay_ScanCode.F9 = 66;
clay_ScanCode.F10 = 67;
clay_ScanCode.F11 = 68;
clay_ScanCode.F12 = 69;
clay_ScanCode.PRINTSCREEN = 70;
clay_ScanCode.SCROLLLOCK = 71;
clay_ScanCode.PAUSE = 72;
clay_ScanCode.INSERT = 73;
clay_ScanCode.HOME = 74;
clay_ScanCode.PAGEUP = 75;
clay_ScanCode.DELETE = 76;
clay_ScanCode.END = 77;
clay_ScanCode.PAGEDOWN = 78;
clay_ScanCode.RIGHT = 79;
clay_ScanCode.LEFT = 80;
clay_ScanCode.DOWN = 81;
clay_ScanCode.UP = 82;
clay_ScanCode.NUMLOCKCLEAR = 83;
clay_ScanCode.KP_DIVIDE = 84;
clay_ScanCode.KP_MULTIPLY = 85;
clay_ScanCode.KP_MINUS = 86;
clay_ScanCode.KP_PLUS = 87;
clay_ScanCode.KP_ENTER = 88;
clay_ScanCode.KP_1 = 89;
clay_ScanCode.KP_2 = 90;
clay_ScanCode.KP_3 = 91;
clay_ScanCode.KP_4 = 92;
clay_ScanCode.KP_5 = 93;
clay_ScanCode.KP_6 = 94;
clay_ScanCode.KP_7 = 95;
clay_ScanCode.KP_8 = 96;
clay_ScanCode.KP_9 = 97;
clay_ScanCode.KP_0 = 98;
clay_ScanCode.KP_PERIOD = 99;
clay_ScanCode.NONUSBACKSLASH = 100;
clay_ScanCode.APPLICATION = 101;
clay_ScanCode.POWER = 102;
clay_ScanCode.KP_EQUALS = 103;
clay_ScanCode.F13 = 104;
clay_ScanCode.F14 = 105;
clay_ScanCode.F15 = 106;
clay_ScanCode.F16 = 107;
clay_ScanCode.F17 = 108;
clay_ScanCode.F18 = 109;
clay_ScanCode.F19 = 110;
clay_ScanCode.F20 = 111;
clay_ScanCode.F21 = 112;
clay_ScanCode.F22 = 113;
clay_ScanCode.F23 = 114;
clay_ScanCode.F24 = 115;
clay_ScanCode.EXECUTE = 116;
clay_ScanCode.HELP = 117;
clay_ScanCode.MENU = 118;
clay_ScanCode.SELECT = 119;
clay_ScanCode.STOP = 120;
clay_ScanCode.AGAIN = 121;
clay_ScanCode.UNDO = 122;
clay_ScanCode.CUT = 123;
clay_ScanCode.COPY = 124;
clay_ScanCode.PASTE = 125;
clay_ScanCode.FIND = 126;
clay_ScanCode.MUTE = 127;
clay_ScanCode.VOLUMEUP = 128;
clay_ScanCode.VOLUMEDOWN = 129;
clay_ScanCode.KP_COMMA = 133;
clay_ScanCode.KP_EQUALSAS400 = 134;
clay_ScanCode.INTERNATIONAL1 = 135;
clay_ScanCode.INTERNATIONAL2 = 136;
clay_ScanCode.INTERNATIONAL3 = 137;
clay_ScanCode.INTERNATIONAL4 = 138;
clay_ScanCode.INTERNATIONAL5 = 139;
clay_ScanCode.INTERNATIONAL6 = 140;
clay_ScanCode.INTERNATIONAL7 = 141;
clay_ScanCode.INTERNATIONAL8 = 142;
clay_ScanCode.INTERNATIONAL9 = 143;
clay_ScanCode.LANG1 = 144;
clay_ScanCode.LANG2 = 145;
clay_ScanCode.LANG3 = 146;
clay_ScanCode.LANG4 = 147;
clay_ScanCode.LANG5 = 148;
clay_ScanCode.LANG6 = 149;
clay_ScanCode.LANG7 = 150;
clay_ScanCode.LANG8 = 151;
clay_ScanCode.LANG9 = 152;
clay_ScanCode.ALTERASE = 153;
clay_ScanCode.SYSREQ = 154;
clay_ScanCode.CANCEL = 155;
clay_ScanCode.CLEAR = 156;
clay_ScanCode.PRIOR = 157;
clay_ScanCode.RETURN2 = 158;
clay_ScanCode.SEPARATOR = 159;
clay_ScanCode.OUT = 160;
clay_ScanCode.OPER = 161;
clay_ScanCode.CLEARAGAIN = 162;
clay_ScanCode.CRSEL = 163;
clay_ScanCode.EXSEL = 164;
clay_ScanCode.KP_00 = 176;
clay_ScanCode.KP_000 = 177;
clay_ScanCode.THOUSANDSSEPARATOR = 178;
clay_ScanCode.DECIMALSEPARATOR = 179;
clay_ScanCode.CURRENCYUNIT = 180;
clay_ScanCode.CURRENCYSUBUNIT = 181;
clay_ScanCode.KP_LEFTPAREN = 182;
clay_ScanCode.KP_RIGHTPAREN = 183;
clay_ScanCode.KP_LEFTBRACE = 184;
clay_ScanCode.KP_RIGHTBRACE = 185;
clay_ScanCode.KP_TAB = 186;
clay_ScanCode.KP_BACKSPACE = 187;
clay_ScanCode.KP_A = 188;
clay_ScanCode.KP_B = 189;
clay_ScanCode.KP_C = 190;
clay_ScanCode.KP_D = 191;
clay_ScanCode.KP_E = 192;
clay_ScanCode.KP_F = 193;
clay_ScanCode.KP_XOR = 194;
clay_ScanCode.KP_POWER = 195;
clay_ScanCode.KP_PERCENT = 196;
clay_ScanCode.KP_LESS = 197;
clay_ScanCode.KP_GREATER = 198;
clay_ScanCode.KP_AMPERSAND = 199;
clay_ScanCode.KP_DBLAMPERSAND = 200;
clay_ScanCode.KP_VERTICALBAR = 201;
clay_ScanCode.KP_DBLVERTICALBAR = 202;
clay_ScanCode.KP_COLON = 203;
clay_ScanCode.KP_HASH = 204;
clay_ScanCode.KP_SPACE = 205;
clay_ScanCode.KP_AT = 206;
clay_ScanCode.KP_EXCLAM = 207;
clay_ScanCode.KP_MEMSTORE = 208;
clay_ScanCode.KP_MEMRECALL = 209;
clay_ScanCode.KP_MEMCLEAR = 210;
clay_ScanCode.KP_MEMADD = 211;
clay_ScanCode.KP_MEMSUBTRACT = 212;
clay_ScanCode.KP_MEMMULTIPLY = 213;
clay_ScanCode.KP_MEMDIVIDE = 214;
clay_ScanCode.KP_PLUSMINUS = 215;
clay_ScanCode.KP_CLEAR = 216;
clay_ScanCode.KP_CLEARENTRY = 217;
clay_ScanCode.KP_BINARY = 218;
clay_ScanCode.KP_OCTAL = 219;
clay_ScanCode.KP_DECIMAL = 220;
clay_ScanCode.KP_HEXADECIMAL = 221;
clay_ScanCode.LCTRL = 224;
clay_ScanCode.LSHIFT = 225;
clay_ScanCode.LALT = 226;
clay_ScanCode.LMETA = 227;
clay_ScanCode.RCTRL = 228;
clay_ScanCode.RSHIFT = 229;
clay_ScanCode.RALT = 230;
clay_ScanCode.RMETA = 231;
clay_ScanCode.MODE = 257;
clay_ScanCode.AUDIONEXT = 258;
clay_ScanCode.AUDIOPREV = 259;
clay_ScanCode.AUDIOSTOP = 260;
clay_ScanCode.AUDIOPLAY = 261;
clay_ScanCode.AUDIOMUTE = 262;
clay_ScanCode.MEDIASELECT = 263;
clay_ScanCode.WWW = 264;
clay_ScanCode.MAIL = 265;
clay_ScanCode.CALCULATOR = 266;
clay_ScanCode.COMPUTER = 267;
clay_ScanCode.AC_SEARCH = 268;
clay_ScanCode.AC_HOME = 269;
clay_ScanCode.AC_BACK = 270;
clay_ScanCode.AC_FORWARD = 271;
clay_ScanCode.AC_STOP = 272;
clay_ScanCode.AC_REFRESH = 273;
clay_ScanCode.AC_BOOKMARKS = 274;
clay_ScanCode.BRIGHTNESSDOWN = 275;
clay_ScanCode.BRIGHTNESSUP = 276;
clay_ScanCode.DISPLAYSWITCH = 277;
clay_ScanCode.KBDILLUMTOGGLE = 278;
clay_ScanCode.KBDILLUMDOWN = 279;
clay_ScanCode.KBDILLUMUP = 280;
clay_ScanCode.EJECT = 281;
clay_ScanCode.SLEEP = 282;
clay_ScanCode.APP1 = 283;
clay_ScanCode.APP2 = 284;
clay_ScanCode.scanCodeNames = [null,null,null,null,"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0","Enter","Escape","Backspace","Tab","Space","-","=","[","]","\\","#",";","'","`",",",".","/","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PrintScreen","ScrollLock","Pause","Insert","Home","PageUp","Delete","End","PageDown","Right","Left","Down","Up","Numlock","Keypad /","Keypad *","Keypad -","Keypad +","Keypad Enter","Keypad 1","Keypad 2","Keypad 3","Keypad 4","Keypad 5","Keypad 6","Keypad 7","Keypad 8","Keypad 9","Keypad 0","Keypad .",null,"Application","Power","Keypad =","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","Execute","Help","Menu","Select","Stop","Again","Undo","Cut","Copy","Paste","Find","Mute","VolumeUp","VolumeDown",null,null,null,"Keypad ,","Keypad = (AS400)",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"AltErase","SysReq","Cancel","Clear","Prior","Enter","Separator","Out","Oper","Clear / Again","CrSel","ExSel",null,null,null,null,null,null,null,null,null,null,null,"Keypad 00","Keypad 000","ThousandsSeparator","DecimalSeparator","CurrencyUnit","CurrencySubUnit","Keypad (","Keypad )","Keypad {","Keypad }","Keypad Tab","Keypad Backspace","Keypad A","Keypad B","Keypad C","Keypad D","Keypad E","Keypad F","Keypad XOR","Keypad ^","Keypad %","Keypad <","Keypad >","Keypad &","Keypad &&","Keypad |","Keypad ||","Keypad :","Keypad #","Keypad Space","Keypad @","Keypad !","Keypad MemStore","Keypad MemRecall","Keypad MemClear","Keypad MemAdd","Keypad MemSubtract","Keypad MemMultiply","Keypad MemDivide","Keypad +/-","Keypad Clear","Keypad ClearEntry","Keypad Binary","Keypad Octal","Keypad Decimal","Keypad Hexadecimal",null,null,"Left Ctrl","Left Shift","Left Alt","Left Meta","Right Ctrl","Right Shift","Right Alt","Right Meta",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ModeSwitch","AudioNext","AudioPrev","AudioStop","AudioPlay","AudioMute","MediaSelect","WWW","Mail","Calculator","Computer","AC Search","AC Home","AC Back","AC Forward","AC Stop","AC Refresh","AC Bookmarks","BrightnessDown","BrightnessUp","DisplaySwitch","KBDIllumToggle","KBDIllumDown","KBDIllumUp","Eject","Sleep"];
clay_GamepadDeviceEventType.UNKNOWN = 0;
clay_GamepadDeviceEventType.DEVICE_ADDED = 1;
clay_GamepadDeviceEventType.DEVICE_REMOVED = 2;
clay_GamepadDeviceEventType.DEVICE_REMAPPED = 3;
clay_TextEventType.UNKNOWN = 0;
clay_TextEventType.EDIT = 1;
clay_TextEventType.INPUT = 2;
clay_WindowEventType.UNKNOWN = 0;
clay_WindowEventType.SHOWN = 1;
clay_WindowEventType.HIDDEN = 2;
clay_WindowEventType.EXPOSED = 3;
clay_WindowEventType.MOVED = 4;
clay_WindowEventType.RESIZED = 5;
clay_WindowEventType.SIZE_CHANGED = 6;
clay_WindowEventType.MINIMIZED = 7;
clay_WindowEventType.MAXIMIZED = 8;
clay_WindowEventType.RESTORED = 9;
clay_WindowEventType.ENTER = 10;
clay_WindowEventType.LEAVE = 11;
clay_WindowEventType.FOCUS_GAINED = 12;
clay_WindowEventType.FOCUS_LOST = 13;
clay_WindowEventType.CLOSE = 14;
clay_WindowEventType.ENTER_FULLSCREEN = 15;
clay_WindowEventType.EXIT_FULLSCREEN = 16;
clay_AppEventType.UNKNOWN = 0;
clay_AppEventType.TERMINATING = 11;
clay_AppEventType.LOW_MEMORY = 12;
clay_AppEventType.WILL_ENTER_BACKGROUND = 13;
clay_AppEventType.DID_ENTER_BACKGROUND = 14;
clay_AppEventType.WILL_ENTER_FOREGROUND = 15;
clay_AppEventType.DID_ENTER_FOREGROUND = 16;
clay_Utils._nextUniqueIntCursor = 0;
clay_Utils._nextUniqueInt0 = Math.random() * 2147483646 | 0;
clay_Utils._nextUniqueInt1 = new Date().getTime() * 0.0001 | 0;
clay_Utils._nextUniqueInt2 = Math.random() * 2147483646 | 0;
clay_Utils._nextUniqueInt3 = Math.random() * 2147483646 | 0;
clay_audio_AudioEvent.END = 0;
clay_audio_AudioEvent.DESTROYED = 1;
clay_audio_AudioEvent.DESTROYED_SOURCE = 2;
clay_audio_AudioFormat.UNKNOWN = 0;
clay_audio_AudioFormat.CUSTOM = 1;
clay_audio_AudioFormat.OGG = 2;
clay_audio_AudioFormat.WAV = 3;
clay_audio_AudioFormat.PCM = 4;
clay_audio_AudioFormat.MP3 = 5;
clay_audio_AudioFormat.FLAC = 6;
clay_audio_AudioState.INVALID = -1;
clay_audio_AudioState.PAUSED = 0;
clay_audio_AudioState.PLAYING = 1;
clay_audio_AudioState.STOPPED = 2;
clay_buffers_Float32ArrayImplJS.BYTES_PER_ELEMENT = 4;
clay_buffers_Int32ArrayImplJS.BYTES_PER_ELEMENT = 4;
clay_buffers_Uint16ArrayImplJS.BYTES_PER_ELEMENT = 2;
clay_buffers_Uint8ArrayImplJS.BYTES_PER_ELEMENT = 1;
clay_graphics_Texture._nextIndex = 1;
clay_opengl_web_GL.DEPTH_BUFFER_BIT = 256;
clay_opengl_web_GL.STENCIL_BUFFER_BIT = 1024;
clay_opengl_web_GL.COLOR_BUFFER_BIT = 16384;
clay_opengl_web_GL.POINTS = 0;
clay_opengl_web_GL.LINES = 1;
clay_opengl_web_GL.LINE_LOOP = 2;
clay_opengl_web_GL.LINE_STRIP = 3;
clay_opengl_web_GL.TRIANGLES = 4;
clay_opengl_web_GL.TRIANGLE_STRIP = 5;
clay_opengl_web_GL.TRIANGLE_FAN = 6;
clay_opengl_web_GL.ZERO = 0;
clay_opengl_web_GL.ONE = 1;
clay_opengl_web_GL.SRC_COLOR = 768;
clay_opengl_web_GL.ONE_MINUS_SRC_COLOR = 769;
clay_opengl_web_GL.SRC_ALPHA = 770;
clay_opengl_web_GL.ONE_MINUS_SRC_ALPHA = 771;
clay_opengl_web_GL.DST_ALPHA = 772;
clay_opengl_web_GL.ONE_MINUS_DST_ALPHA = 773;
clay_opengl_web_GL.DST_COLOR = 774;
clay_opengl_web_GL.ONE_MINUS_DST_COLOR = 775;
clay_opengl_web_GL.SRC_ALPHA_SATURATE = 776;
clay_opengl_web_GL.FUNC_ADD = 32774;
clay_opengl_web_GL.BLEND_EQUATION = 32777;
clay_opengl_web_GL.BLEND_EQUATION_RGB = 32777;
clay_opengl_web_GL.BLEND_EQUATION_ALPHA = 34877;
clay_opengl_web_GL.FUNC_SUBTRACT = 32778;
clay_opengl_web_GL.FUNC_REVERSE_SUBTRACT = 32779;
clay_opengl_web_GL.BLEND_DST_RGB = 32968;
clay_opengl_web_GL.BLEND_SRC_RGB = 32969;
clay_opengl_web_GL.BLEND_DST_ALPHA = 32970;
clay_opengl_web_GL.BLEND_SRC_ALPHA = 32971;
clay_opengl_web_GL.CONSTANT_COLOR = 32769;
clay_opengl_web_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
clay_opengl_web_GL.CONSTANT_ALPHA = 32771;
clay_opengl_web_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
clay_opengl_web_GL.BLEND_COLOR = 32773;
clay_opengl_web_GL.ARRAY_BUFFER = 34962;
clay_opengl_web_GL.ELEMENT_ARRAY_BUFFER = 34963;
clay_opengl_web_GL.ARRAY_BUFFER_BINDING = 34964;
clay_opengl_web_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
clay_opengl_web_GL.STREAM_DRAW = 35040;
clay_opengl_web_GL.STATIC_DRAW = 35044;
clay_opengl_web_GL.DYNAMIC_DRAW = 35048;
clay_opengl_web_GL.BUFFER_SIZE = 34660;
clay_opengl_web_GL.BUFFER_USAGE = 34661;
clay_opengl_web_GL.CURRENT_VERTEX_ATTRIB = 34342;
clay_opengl_web_GL.FRONT = 1028;
clay_opengl_web_GL.BACK = 1029;
clay_opengl_web_GL.FRONT_AND_BACK = 1032;
clay_opengl_web_GL.CULL_FACE = 2884;
clay_opengl_web_GL.BLEND = 3042;
clay_opengl_web_GL.DITHER = 3024;
clay_opengl_web_GL.STENCIL_TEST = 2960;
clay_opengl_web_GL.DEPTH_TEST = 2929;
clay_opengl_web_GL.SCISSOR_TEST = 3089;
clay_opengl_web_GL.POLYGON_OFFSET_FILL = 32823;
clay_opengl_web_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
clay_opengl_web_GL.SAMPLE_COVERAGE = 32928;
clay_opengl_web_GL.NO_ERROR = 0;
clay_opengl_web_GL.INVALID_ENUM = 1280;
clay_opengl_web_GL.INVALID_VALUE = 1281;
clay_opengl_web_GL.INVALID_OPERATION = 1282;
clay_opengl_web_GL.OUT_OF_MEMORY = 1285;
clay_opengl_web_GL.CW = 2304;
clay_opengl_web_GL.CCW = 2305;
clay_opengl_web_GL.LINE_WIDTH = 2849;
clay_opengl_web_GL.ALIASED_POINT_SIZE_RANGE = 33901;
clay_opengl_web_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
clay_opengl_web_GL.CULL_FACE_MODE = 2885;
clay_opengl_web_GL.FRONT_FACE = 2886;
clay_opengl_web_GL.DEPTH_RANGE = 2928;
clay_opengl_web_GL.DEPTH_WRITEMASK = 2930;
clay_opengl_web_GL.DEPTH_CLEAR_VALUE = 2931;
clay_opengl_web_GL.DEPTH_FUNC = 2932;
clay_opengl_web_GL.STENCIL_CLEAR_VALUE = 2961;
clay_opengl_web_GL.STENCIL_FUNC = 2962;
clay_opengl_web_GL.STENCIL_FAIL = 2964;
clay_opengl_web_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
clay_opengl_web_GL.STENCIL_PASS_DEPTH_PASS = 2966;
clay_opengl_web_GL.STENCIL_REF = 2967;
clay_opengl_web_GL.STENCIL_VALUE_MASK = 2963;
clay_opengl_web_GL.STENCIL_WRITEMASK = 2968;
clay_opengl_web_GL.STENCIL_BACK_FUNC = 34816;
clay_opengl_web_GL.STENCIL_BACK_FAIL = 34817;
clay_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
clay_opengl_web_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
clay_opengl_web_GL.STENCIL_BACK_REF = 36003;
clay_opengl_web_GL.STENCIL_BACK_VALUE_MASK = 36004;
clay_opengl_web_GL.STENCIL_BACK_WRITEMASK = 36005;
clay_opengl_web_GL.VIEWPORT = 2978;
clay_opengl_web_GL.SCISSOR_BOX = 3088;
clay_opengl_web_GL.COLOR_CLEAR_VALUE = 3106;
clay_opengl_web_GL.COLOR_WRITEMASK = 3107;
clay_opengl_web_GL.UNPACK_ALIGNMENT = 3317;
clay_opengl_web_GL.PACK_ALIGNMENT = 3333;
clay_opengl_web_GL.MAX_TEXTURE_SIZE = 3379;
clay_opengl_web_GL.MAX_VIEWPORT_DIMS = 3386;
clay_opengl_web_GL.SUBPIXEL_BITS = 3408;
clay_opengl_web_GL.RED_BITS = 3410;
clay_opengl_web_GL.GREEN_BITS = 3411;
clay_opengl_web_GL.BLUE_BITS = 3412;
clay_opengl_web_GL.ALPHA_BITS = 3413;
clay_opengl_web_GL.DEPTH_BITS = 3414;
clay_opengl_web_GL.STENCIL_BITS = 3415;
clay_opengl_web_GL.POLYGON_OFFSET_UNITS = 10752;
clay_opengl_web_GL.POLYGON_OFFSET_FACTOR = 32824;
clay_opengl_web_GL.TEXTURE_BINDING_2D = 32873;
clay_opengl_web_GL.SAMPLE_BUFFERS = 32936;
clay_opengl_web_GL.SAMPLES = 32937;
clay_opengl_web_GL.SAMPLE_COVERAGE_VALUE = 32938;
clay_opengl_web_GL.SAMPLE_COVERAGE_INVERT = 32939;
clay_opengl_web_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
clay_opengl_web_GL.DONT_CARE = 4352;
clay_opengl_web_GL.FASTEST = 4353;
clay_opengl_web_GL.NICEST = 4354;
clay_opengl_web_GL.GENERATE_MIPMAP_HINT = 33170;
clay_opengl_web_GL.BYTE = 5120;
clay_opengl_web_GL.UNSIGNED_BYTE = 5121;
clay_opengl_web_GL.SHORT = 5122;
clay_opengl_web_GL.UNSIGNED_SHORT = 5123;
clay_opengl_web_GL.INT = 5124;
clay_opengl_web_GL.UNSIGNED_INT = 5125;
clay_opengl_web_GL.FLOAT = 5126;
clay_opengl_web_GL.DEPTH_COMPONENT = 6402;
clay_opengl_web_GL.ALPHA = 6406;
clay_opengl_web_GL.RGB = 6407;
clay_opengl_web_GL.RGBA = 6408;
clay_opengl_web_GL.LUMINANCE = 6409;
clay_opengl_web_GL.LUMINANCE_ALPHA = 6410;
clay_opengl_web_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
clay_opengl_web_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
clay_opengl_web_GL.UNSIGNED_SHORT_5_6_5 = 33635;
clay_opengl_web_GL.FRAGMENT_SHADER = 35632;
clay_opengl_web_GL.VERTEX_SHADER = 35633;
clay_opengl_web_GL.MAX_VERTEX_ATTRIBS = 34921;
clay_opengl_web_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
clay_opengl_web_GL.MAX_VARYING_VECTORS = 36348;
clay_opengl_web_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
clay_opengl_web_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
clay_opengl_web_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
clay_opengl_web_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
clay_opengl_web_GL.SHADER_TYPE = 35663;
clay_opengl_web_GL.DELETE_STATUS = 35712;
clay_opengl_web_GL.LINK_STATUS = 35714;
clay_opengl_web_GL.VALIDATE_STATUS = 35715;
clay_opengl_web_GL.ATTACHED_SHADERS = 35717;
clay_opengl_web_GL.ACTIVE_UNIFORMS = 35718;
clay_opengl_web_GL.ACTIVE_ATTRIBUTES = 35721;
clay_opengl_web_GL.SHADING_LANGUAGE_VERSION = 35724;
clay_opengl_web_GL.CURRENT_PROGRAM = 35725;
clay_opengl_web_GL.NEVER = 512;
clay_opengl_web_GL.LESS = 513;
clay_opengl_web_GL.EQUAL = 514;
clay_opengl_web_GL.LEQUAL = 515;
clay_opengl_web_GL.GREATER = 516;
clay_opengl_web_GL.NOTEQUAL = 517;
clay_opengl_web_GL.GEQUAL = 518;
clay_opengl_web_GL.ALWAYS = 519;
clay_opengl_web_GL.KEEP = 7680;
clay_opengl_web_GL.REPLACE = 7681;
clay_opengl_web_GL.INCR = 7682;
clay_opengl_web_GL.DECR = 7683;
clay_opengl_web_GL.INVERT = 5386;
clay_opengl_web_GL.INCR_WRAP = 34055;
clay_opengl_web_GL.DECR_WRAP = 34056;
clay_opengl_web_GL.VENDOR = 7936;
clay_opengl_web_GL.RENDERER = 7937;
clay_opengl_web_GL.VERSION = 7938;
clay_opengl_web_GL.NEAREST = 9728;
clay_opengl_web_GL.LINEAR = 9729;
clay_opengl_web_GL.NEAREST_MIPMAP_NEAREST = 9984;
clay_opengl_web_GL.LINEAR_MIPMAP_NEAREST = 9985;
clay_opengl_web_GL.NEAREST_MIPMAP_LINEAR = 9986;
clay_opengl_web_GL.LINEAR_MIPMAP_LINEAR = 9987;
clay_opengl_web_GL.TEXTURE_MAG_FILTER = 10240;
clay_opengl_web_GL.TEXTURE_MIN_FILTER = 10241;
clay_opengl_web_GL.TEXTURE_WRAP_S = 10242;
clay_opengl_web_GL.TEXTURE_WRAP_T = 10243;
clay_opengl_web_GL.TEXTURE_2D = 3553;
clay_opengl_web_GL.TEXTURE = 5890;
clay_opengl_web_GL.TEXTURE_CUBE_MAP = 34067;
clay_opengl_web_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
clay_opengl_web_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
clay_opengl_web_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
clay_opengl_web_GL.TEXTURE0 = 33984;
clay_opengl_web_GL.TEXTURE1 = 33985;
clay_opengl_web_GL.TEXTURE2 = 33986;
clay_opengl_web_GL.TEXTURE3 = 33987;
clay_opengl_web_GL.TEXTURE4 = 33988;
clay_opengl_web_GL.TEXTURE5 = 33989;
clay_opengl_web_GL.TEXTURE6 = 33990;
clay_opengl_web_GL.TEXTURE7 = 33991;
clay_opengl_web_GL.TEXTURE8 = 33992;
clay_opengl_web_GL.TEXTURE9 = 33993;
clay_opengl_web_GL.TEXTURE10 = 33994;
clay_opengl_web_GL.TEXTURE11 = 33995;
clay_opengl_web_GL.TEXTURE12 = 33996;
clay_opengl_web_GL.TEXTURE13 = 33997;
clay_opengl_web_GL.TEXTURE14 = 33998;
clay_opengl_web_GL.TEXTURE15 = 33999;
clay_opengl_web_GL.TEXTURE16 = 34000;
clay_opengl_web_GL.TEXTURE17 = 34001;
clay_opengl_web_GL.TEXTURE18 = 34002;
clay_opengl_web_GL.TEXTURE19 = 34003;
clay_opengl_web_GL.TEXTURE20 = 34004;
clay_opengl_web_GL.TEXTURE21 = 34005;
clay_opengl_web_GL.TEXTURE22 = 34006;
clay_opengl_web_GL.TEXTURE23 = 34007;
clay_opengl_web_GL.TEXTURE24 = 34008;
clay_opengl_web_GL.TEXTURE25 = 34009;
clay_opengl_web_GL.TEXTURE26 = 34010;
clay_opengl_web_GL.TEXTURE27 = 34011;
clay_opengl_web_GL.TEXTURE28 = 34012;
clay_opengl_web_GL.TEXTURE29 = 34013;
clay_opengl_web_GL.TEXTURE30 = 34014;
clay_opengl_web_GL.TEXTURE31 = 34015;
clay_opengl_web_GL.ACTIVE_TEXTURE = 34016;
clay_opengl_web_GL.REPEAT = 10497;
clay_opengl_web_GL.CLAMP_TO_EDGE = 33071;
clay_opengl_web_GL.MIRRORED_REPEAT = 33648;
clay_opengl_web_GL.FLOAT_VEC2 = 35664;
clay_opengl_web_GL.FLOAT_VEC3 = 35665;
clay_opengl_web_GL.FLOAT_VEC4 = 35666;
clay_opengl_web_GL.INT_VEC2 = 35667;
clay_opengl_web_GL.INT_VEC3 = 35668;
clay_opengl_web_GL.INT_VEC4 = 35669;
clay_opengl_web_GL.BOOL = 35670;
clay_opengl_web_GL.BOOL_VEC2 = 35671;
clay_opengl_web_GL.BOOL_VEC3 = 35672;
clay_opengl_web_GL.BOOL_VEC4 = 35673;
clay_opengl_web_GL.FLOAT_MAT2 = 35674;
clay_opengl_web_GL.FLOAT_MAT3 = 35675;
clay_opengl_web_GL.FLOAT_MAT4 = 35676;
clay_opengl_web_GL.SAMPLER_2D = 35678;
clay_opengl_web_GL.SAMPLER_CUBE = 35680;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
clay_opengl_web_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
clay_opengl_web_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
clay_opengl_web_GL.POINT_SPRITE = 34913;
clay_opengl_web_GL.COMPILE_STATUS = 35713;
clay_opengl_web_GL.LOW_FLOAT = 36336;
clay_opengl_web_GL.MEDIUM_FLOAT = 36337;
clay_opengl_web_GL.HIGH_FLOAT = 36338;
clay_opengl_web_GL.LOW_INT = 36339;
clay_opengl_web_GL.MEDIUM_INT = 36340;
clay_opengl_web_GL.HIGH_INT = 36341;
clay_opengl_web_GL.FRAMEBUFFER = 36160;
clay_opengl_web_GL.RENDERBUFFER = 36161;
clay_opengl_web_GL.RGBA4 = 32854;
clay_opengl_web_GL.RGB5_A1 = 32855;
clay_opengl_web_GL.RGB565 = 36194;
clay_opengl_web_GL.DEPTH_COMPONENT16 = 33189;
clay_opengl_web_GL.STENCIL_INDEX = 6401;
clay_opengl_web_GL.STENCIL_INDEX8 = 36168;
clay_opengl_web_GL.DEPTH_STENCIL = 34041;
clay_opengl_web_GL.RENDERBUFFER_WIDTH = 36162;
clay_opengl_web_GL.RENDERBUFFER_HEIGHT = 36163;
clay_opengl_web_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
clay_opengl_web_GL.RENDERBUFFER_RED_SIZE = 36176;
clay_opengl_web_GL.RENDERBUFFER_GREEN_SIZE = 36177;
clay_opengl_web_GL.RENDERBUFFER_BLUE_SIZE = 36178;
clay_opengl_web_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
clay_opengl_web_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
clay_opengl_web_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
clay_opengl_web_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
clay_opengl_web_GL.COLOR_ATTACHMENT0 = 36064;
clay_opengl_web_GL.DEPTH_ATTACHMENT = 36096;
clay_opengl_web_GL.STENCIL_ATTACHMENT = 36128;
clay_opengl_web_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
clay_opengl_web_GL.NONE = 0;
clay_opengl_web_GL.FRAMEBUFFER_COMPLETE = 36053;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
clay_opengl_web_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
clay_opengl_web_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
clay_opengl_web_GL.FRAMEBUFFER_BINDING = 36006;
clay_opengl_web_GL.RENDERBUFFER_BINDING = 36007;
clay_opengl_web_GL.MAX_RENDERBUFFER_SIZE = 34024;
clay_opengl_web_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
clay_opengl_web_GL.UNPACK_FLIP_Y_WEBGL = 37440;
clay_opengl_web_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
clay_opengl_web_GL.CONTEXT_LOST_WEBGL = 37442;
clay_opengl_web_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
clay_opengl_web_GL.BROWSER_DEFAULT_WEBGL = 37444;
clay_web_WebAssets.POT = true;
clay_web_WebAudio.HALF_PI = 1.5707;
clay_web_WebRuntime.timestampStart = 0.0;
clay_web_WebRuntime.webWindowId = 1;
clay_web__$WebRuntime_DOMKeys.dom_shift = 16;
clay_web__$WebRuntime_DOMKeys.dom_ctrl = 17;
clay_web__$WebRuntime_DOMKeys.dom_alt = 18;
clay_web__$WebRuntime_DOMKeys.dom_capslock = 20;
clay_web__$WebRuntime_DOMKeys.dom_pageup = 33;
clay_web__$WebRuntime_DOMKeys.dom_pagedown = 34;
clay_web__$WebRuntime_DOMKeys.dom_end = 35;
clay_web__$WebRuntime_DOMKeys.dom_home = 36;
clay_web__$WebRuntime_DOMKeys.dom_left = 37;
clay_web__$WebRuntime_DOMKeys.dom_up = 38;
clay_web__$WebRuntime_DOMKeys.dom_right = 39;
clay_web__$WebRuntime_DOMKeys.dom_down = 40;
clay_web__$WebRuntime_DOMKeys.dom_printscr = 44;
clay_web__$WebRuntime_DOMKeys.dom_insert = 45;
clay_web__$WebRuntime_DOMKeys.dom_delete = 46;
clay_web__$WebRuntime_DOMKeys.dom_lmeta = 91;
clay_web__$WebRuntime_DOMKeys.dom_rmeta = 93;
clay_web__$WebRuntime_DOMKeys.dom_kp_0 = 96;
clay_web__$WebRuntime_DOMKeys.dom_kp_1 = 97;
clay_web__$WebRuntime_DOMKeys.dom_kp_2 = 98;
clay_web__$WebRuntime_DOMKeys.dom_kp_3 = 99;
clay_web__$WebRuntime_DOMKeys.dom_kp_4 = 100;
clay_web__$WebRuntime_DOMKeys.dom_kp_5 = 101;
clay_web__$WebRuntime_DOMKeys.dom_kp_6 = 102;
clay_web__$WebRuntime_DOMKeys.dom_kp_7 = 103;
clay_web__$WebRuntime_DOMKeys.dom_kp_8 = 104;
clay_web__$WebRuntime_DOMKeys.dom_kp_9 = 105;
clay_web__$WebRuntime_DOMKeys.dom_kp_multiply = 106;
clay_web__$WebRuntime_DOMKeys.dom_kp_plus = 107;
clay_web__$WebRuntime_DOMKeys.dom_kp_minus = 109;
clay_web__$WebRuntime_DOMKeys.dom_kp_decimal = 110;
clay_web__$WebRuntime_DOMKeys.dom_kp_divide = 111;
clay_web__$WebRuntime_DOMKeys.dom_kp_numlock = 144;
clay_web__$WebRuntime_DOMKeys.dom_f1 = 112;
clay_web__$WebRuntime_DOMKeys.dom_f2 = 113;
clay_web__$WebRuntime_DOMKeys.dom_f3 = 114;
clay_web__$WebRuntime_DOMKeys.dom_f4 = 115;
clay_web__$WebRuntime_DOMKeys.dom_f5 = 116;
clay_web__$WebRuntime_DOMKeys.dom_f6 = 117;
clay_web__$WebRuntime_DOMKeys.dom_f7 = 118;
clay_web__$WebRuntime_DOMKeys.dom_f8 = 119;
clay_web__$WebRuntime_DOMKeys.dom_f9 = 120;
clay_web__$WebRuntime_DOMKeys.dom_f10 = 121;
clay_web__$WebRuntime_DOMKeys.dom_f11 = 122;
clay_web__$WebRuntime_DOMKeys.dom_f12 = 123;
clay_web__$WebRuntime_DOMKeys.dom_f13 = 124;
clay_web__$WebRuntime_DOMKeys.dom_f14 = 125;
clay_web__$WebRuntime_DOMKeys.dom_f15 = 126;
clay_web__$WebRuntime_DOMKeys.dom_f16 = 127;
clay_web__$WebRuntime_DOMKeys.dom_f17 = 128;
clay_web__$WebRuntime_DOMKeys.dom_f18 = 129;
clay_web__$WebRuntime_DOMKeys.dom_f19 = 130;
clay_web__$WebRuntime_DOMKeys.dom_f20 = 131;
clay_web__$WebRuntime_DOMKeys.dom_f21 = 132;
clay_web__$WebRuntime_DOMKeys.dom_f22 = 133;
clay_web__$WebRuntime_DOMKeys.dom_f23 = 134;
clay_web__$WebRuntime_DOMKeys.dom_f24 = 135;
clay_web__$WebRuntime_DOMKeys.dom_caret = 160;
clay_web__$WebRuntime_DOMKeys.dom_exclaim = 161;
clay_web__$WebRuntime_DOMKeys.dom_quotedbl = 162;
clay_web__$WebRuntime_DOMKeys.dom_hash = 163;
clay_web__$WebRuntime_DOMKeys.dom_dollar = 164;
clay_web__$WebRuntime_DOMKeys.dom_percent = 165;
clay_web__$WebRuntime_DOMKeys.dom_ampersand = 166;
clay_web__$WebRuntime_DOMKeys.dom_underscore = 167;
clay_web__$WebRuntime_DOMKeys.dom_leftparen = 168;
clay_web__$WebRuntime_DOMKeys.dom_rightparen = 169;
clay_web__$WebRuntime_DOMKeys.dom_asterisk = 170;
clay_web__$WebRuntime_DOMKeys.dom_plus = 171;
clay_web__$WebRuntime_DOMKeys.dom_pipe = 172;
clay_web__$WebRuntime_DOMKeys.dom_minus = 173;
clay_web__$WebRuntime_DOMKeys.dom_leftbrace = 174;
clay_web__$WebRuntime_DOMKeys.dom_rightbrace = 175;
clay_web__$WebRuntime_DOMKeys.dom_tilde = 176;
clay_web__$WebRuntime_DOMKeys.dom_audiomute = 181;
clay_web__$WebRuntime_DOMKeys.dom_volumedown = 182;
clay_web__$WebRuntime_DOMKeys.dom_volumeup = 183;
clay_web__$WebRuntime_DOMKeys.dom_comma = 188;
clay_web__$WebRuntime_DOMKeys.dom_period = 190;
clay_web__$WebRuntime_DOMKeys.dom_slash = 191;
clay_web__$WebRuntime_DOMKeys.dom_backquote = 192;
clay_web__$WebRuntime_DOMKeys.dom_leftbracket = 219;
clay_web__$WebRuntime_DOMKeys.dom_rightbracket = 221;
clay_web__$WebRuntime_DOMKeys.dom_backslash = 220;
clay_web__$WebRuntime_DOMKeys.dom_quote = 222;
clay_web__$WebRuntime_DOMKeys.dom_meta = 224;
format_tmx_TmxTile.FLIPPED_HORIZONTALLY_FLAG = -2147483648;
format_tmx_TmxTile.FLIPPED_VERTICALLY_FLAG = 1073741824;
format_tmx_TmxTile.FLIPPED_DIAGONALLY_FLAG = 536870912;
format_tmx_TmxTile.FLAGS_MASK = 536870911;
format_tmx_TmxTile.FLAGS_ONLY = -536870912;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hsluv_Hsluv.m = [[3.240969941904521,-1.537383177570093,-0.498610760293],[-0.96924363628087,1.87596750150772,0.041555057407175],[0.055630079696993,-0.20397695888897,1.056971514242878]];
hsluv_Hsluv.minv = [[0.41239079926595,0.35758433938387,0.18048078840183],[0.21263900587151,0.71516867876775,0.072192315360733],[0.019330818715591,0.11919477979462,0.95053215224966]];
hsluv_Hsluv.refY = 1.0;
hsluv_Hsluv.refU = 0.19783000664283;
hsluv_Hsluv.refV = 0.46831999493879;
hsluv_Hsluv.kappa = 903.2962962;
hsluv_Hsluv.epsilon = 0.0088564516;
hsluv_Hsluv.hexChars = "0123456789abcdef";
tracker_Autorun.prevCurrent = [];
tracker_Autorun._autorunArrays = [];
tracker_Autorun._autorunArraysLen = 0;
tracker_Autorun._arrayOfAutorunArrays = [];
tracker_Autorun._arrayOfAutorunArraysLen = 0;
tracker_Serialize._appendSerialize = false;
tracker_Serialize._cachedEnumInfoBySerializableType = new haxe_ds_StringMap();
tracker_Serialize._enumInfo = new haxe_ds_StringMap();
tracker_Utils._nextUniqueIntCursor = 0;
tracker_Utils._nextUniqueInt0 = Math.random() * 2147483646 | 0;
tracker_Utils._nextUniqueInt1 = new Date().getTime() * 0.0001 | 0;
tracker_Utils._nextUniqueInt2 = Math.random() * 2147483646 | 0;
tracker_Utils._nextUniqueInt3 = Math.random() * 2147483646 | 0;
backend_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=project-sample.js.map